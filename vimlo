
Executing: augroup nvim_terminal
Executing: autocmd!
Executing: autocmd BufReadCmd term://* nested :if !exists('b:term_title')|call termopen( matchstr(expand("<amatch>"), '\c\mterm://\%(.\{-}//\%(\d\+:\)\?\)\?\zs.*'), {'cwd': expand(get(matchlist(expand("<amatch>"), '\c\mterm://\(.\{-}\)//'), 1, ''))})|endif
Executing: augroup END
chdir(/Users/andrewgu/.config/nvim)
chdir(/etc/xdg//nvim)
chdir(/Users/andrewgu/.config/nvim)
could not source "/etc/xdg//nvim/sysinit.vim"
chdir(/Users/andrewgu/.config/nvim)
chdir(/usr/local/Cellar/neovim/0.5.0/share/nvim)
chdir(/Users/andrewgu/.config/nvim)
could not source "$VIM/sysinit.vim"
chdir(/Users/andrewgu/.config/nvim)
chdir(/Users/andrewgu/.config/nvim)
chdir(/Users/andrewgu/.config/nvim)
sourcing "/Users/andrewgu/.config/nvim/init.lua"
Searching for "lua/vim/_meta.lua" in "/Users/andrewgu/.config/nvim,/etc/xdg/nvim,/Users/andrewgu/.local/share/nvim/site,/usr/local/share/nvim/site,/usr/share/nvim/site,/usr/local/Cellar/neovim/0.5.0/share/nvim/runtime,/usr/local/Cellar/neovim/0.5.0/lib/nvim,/usr/share/nvim/site/after,/usr/local/share/nvim/site/after,/Users/andrewgu/.local/share/nvim/site/after,/etc/xdg/nvim/after,/Users/andrewgu/.config/nvim/after"
Searching for "/Users/andrewgu/.config/nvim/lua/vim/_meta.lua"
Searching for "/etc/xdg/nvim/lua/vim/_meta.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/lua/vim/_meta.lua"
Searching for "/usr/local/share/nvim/site/lua/vim/_meta.lua"
Searching for "/usr/share/nvim/site/lua/vim/_meta.lua"
Searching for "/usr/local/Cellar/neovim/0.5.0/share/nvim/runtime/lua/vim/_meta.lua"
Searching for "lua/packer.lua" in "/Users/andrewgu/.config/nvim,/etc/xdg/nvim,/Users/andrewgu/.local/share/nvim/site,/usr/local/share/nvim/site,/usr/share/nvim/site,/usr/local/Cellar/neovim/0.5.0/share/nvim/runtime,/usr/local/Cellar/neovim/0.5.0/lib/nvim,/usr/share/nvim/site/after,/usr/local/share/nvim/site/after,/Users/andrewgu/.local/share/nvim/site/after,/etc/xdg/nvim/after,/Users/andrewgu/.config/nvim/after"
Searching for "/Users/andrewgu/.config/nvim/lua/packer.lua"
Searching for "/etc/xdg/nvim/lua/packer.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/lua/packer.lua"
Searching for "/usr/local/share/nvim/site/lua/packer.lua"
Searching for "/usr/share/nvim/site/lua/packer.lua"
Searching for "/usr/local/Cellar/neovim/0.5.0/share/nvim/runtime/lua/packer.lua"
Searching for "/usr/local/Cellar/neovim/0.5.0/lib/nvim/lua/packer.lua"
Searching for "/usr/share/nvim/site/after/lua/packer.lua"
Searching for "/usr/local/share/nvim/site/after/lua/packer.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/after/lua/packer.lua"
Searching for "/etc/xdg/nvim/after/lua/packer.lua"
Searching for "/Users/andrewgu/.config/nvim/after/lua/packer.lua"
not found in 'runtimepath': "lua/packer.lua"
Searching for "pack/*/start/*/lua/packer.lua" in "/Users/andrewgu/.config/nvim,/etc/xdg/nvim,/Users/andrewgu/.local/share/nvim/site,/usr/local/share/nvim/site,/usr/share/nvim/site,/usr/local/Cellar/neovim/0.5.0/share/nvim/runtime,/usr/local/Cellar/neovim/0.5.0/lib/nvim,/usr/share/nvim/site/after,/usr/local/share/nvim/site/after,/Users/andrewgu/.local/share/nvim/site/after,/etc/xdg/nvim/after,/Users/andrewgu/.config/nvim/after"
Searching for "/Users/andrewgu/.config/nvim/pack/*/start/*/lua/packer.lua"
Searching for "/etc/xdg/nvim/pack/*/start/*/lua/packer.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/*/start/*/lua/packer.lua"
Searching for "lua/packer/util.lua" in "/Users/andrewgu/.config/nvim,/etc/xdg/nvim,/Users/andrewgu/.local/share/nvim/site,/usr/local/share/nvim/site,/usr/share/nvim/site,/usr/local/Cellar/neovim/0.5.0/share/nvim/runtime,/usr/local/Cellar/neovim/0.5.0/lib/nvim,/usr/share/nvim/site/after,/usr/local/share/nvim/site/after,/Users/andrewgu/.local/share/nvim/site/after,/etc/xdg/nvim/after,/Users/andrewgu/.config/nvim/after"
Searching for "/Users/andrewgu/.config/nvim/lua/packer/util.lua"
Searching for "/etc/xdg/nvim/lua/packer/util.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/lua/packer/util.lua"
Searching for "/usr/local/share/nvim/site/lua/packer/util.lua"
Searching for "/usr/share/nvim/site/lua/packer/util.lua"
Searching for "/usr/local/Cellar/neovim/0.5.0/share/nvim/runtime/lua/packer/util.lua"
Searching for "/usr/local/Cellar/neovim/0.5.0/lib/nvim/lua/packer/util.lua"
Searching for "/usr/share/nvim/site/after/lua/packer/util.lua"
Searching for "/usr/local/share/nvim/site/after/lua/packer/util.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/after/lua/packer/util.lua"
Searching for "/etc/xdg/nvim/after/lua/packer/util.lua"
Searching for "/Users/andrewgu/.config/nvim/after/lua/packer/util.lua"
not found in 'runtimepath': "lua/packer/util.lua"
Searching for "pack/*/start/*/lua/packer/util.lua" in "/Users/andrewgu/.config/nvim,/etc/xdg/nvim,/Users/andrewgu/.local/share/nvim/site,/usr/local/share/nvim/site,/usr/share/nvim/site,/usr/local/Cellar/neovim/0.5.0/share/nvim/runtime,/usr/local/Cellar/neovim/0.5.0/lib/nvim,/usr/share/nvim/site/after,/usr/local/share/nvim/site/after,/Users/andrewgu/.local/share/nvim/site/after,/etc/xdg/nvim/after,/Users/andrewgu/.config/nvim/after"
Searching for "/Users/andrewgu/.config/nvim/pack/*/start/*/lua/packer/util.lua"
Searching for "/etc/xdg/nvim/pack/*/start/*/lua/packer/util.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/*/start/*/lua/packer/util.lua"
Searching for "lua/packer/log.lua" in "/Users/andrewgu/.config/nvim,/etc/xdg/nvim,/Users/andrewgu/.local/share/nvim/site,/usr/local/share/nvim/site,/usr/share/nvim/site,/usr/local/Cellar/neovim/0.5.0/share/nvim/runtime,/usr/local/Cellar/neovim/0.5.0/lib/nvim,/usr/share/nvim/site/after,/usr/local/share/nvim/site/after,/Users/andrewgu/.local/share/nvim/site/after,/etc/xdg/nvim/after,/Users/andrewgu/.config/nvim/after"
Searching for "/Users/andrewgu/.config/nvim/lua/packer/log.lua"
Searching for "/etc/xdg/nvim/lua/packer/log.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/lua/packer/log.lua"
Searching for "/usr/local/share/nvim/site/lua/packer/log.lua"
Searching for "/usr/share/nvim/site/lua/packer/log.lua"
Searching for "/usr/local/Cellar/neovim/0.5.0/share/nvim/runtime/lua/packer/log.lua"
Searching for "/usr/local/Cellar/neovim/0.5.0/lib/nvim/lua/packer/log.lua"
Searching for "/usr/share/nvim/site/after/lua/packer/log.lua"
Searching for "/usr/local/share/nvim/site/after/lua/packer/log.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/after/lua/packer/log.lua"
Searching for "/etc/xdg/nvim/after/lua/packer/log.lua"
Searching for "/Users/andrewgu/.config/nvim/after/lua/packer/log.lua"
not found in 'runtimepath': "lua/packer/log.lua"
Searching for "pack/*/start/*/lua/packer/log.lua" in "/Users/andrewgu/.config/nvim,/etc/xdg/nvim,/Users/andrewgu/.local/share/nvim/site,/usr/local/share/nvim/site,/usr/share/nvim/site,/usr/local/Cellar/neovim/0.5.0/share/nvim/runtime,/usr/local/Cellar/neovim/0.5.0/lib/nvim,/usr/share/nvim/site/after,/usr/local/share/nvim/site/after,/Users/andrewgu/.local/share/nvim/site/after,/etc/xdg/nvim/after,/Users/andrewgu/.config/nvim/after"
Searching for "/Users/andrewgu/.config/nvim/pack/*/start/*/lua/packer/log.lua"
Searching for "/etc/xdg/nvim/pack/*/start/*/lua/packer/log.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/*/start/*/lua/packer/log.lua"
Searching for "lua/packer/plugin_utils.lua" in "/Users/andrewgu/.config/nvim,/etc/xdg/nvim,/Users/andrewgu/.local/share/nvim/site,/usr/local/share/nvim/site,/usr/share/nvim/site,/usr/local/Cellar/neovim/0.5.0/share/nvim/runtime,/usr/local/Cellar/neovim/0.5.0/lib/nvim,/usr/share/nvim/site/after,/usr/local/share/nvim/site/after,/Users/andrewgu/.local/share/nvim/site/after,/etc/xdg/nvim/after,/Users/andrewgu/.config/nvim/after"
Searching for "/Users/andrewgu/.config/nvim/lua/packer/plugin_utils.lua"
Searching for "/etc/xdg/nvim/lua/packer/plugin_utils.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/lua/packer/plugin_utils.lua"
Searching for "/usr/local/share/nvim/site/lua/packer/plugin_utils.lua"
Searching for "/usr/share/nvim/site/lua/packer/plugin_utils.lua"
Searching for "/usr/local/Cellar/neovim/0.5.0/share/nvim/runtime/lua/packer/plugin_utils.lua"
Searching for "/usr/local/Cellar/neovim/0.5.0/lib/nvim/lua/packer/plugin_utils.lua"
Searching for "/usr/share/nvim/site/after/lua/packer/plugin_utils.lua"
Searching for "/usr/local/share/nvim/site/after/lua/packer/plugin_utils.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/after/lua/packer/plugin_utils.lua"
Searching for "/etc/xdg/nvim/after/lua/packer/plugin_utils.lua"
Searching for "/Users/andrewgu/.config/nvim/after/lua/packer/plugin_utils.lua"
not found in 'runtimepath': "lua/packer/plugin_utils.lua"
Searching for "pack/*/start/*/lua/packer/plugin_utils.lua" in "/Users/andrewgu/.config/nvim,/etc/xdg/nvim,/Users/andrewgu/.local/share/nvim/site,/usr/local/share/nvim/site,/usr/share/nvim/site,/usr/local/Cellar/neovim/0.5.0/share/nvim/runtime,/usr/local/Cellar/neovim/0.5.0/lib/nvim,/usr/share/nvim/site/after,/usr/local/share/nvim/site/after,/Users/andrewgu/.local/share/nvim/site/after,/etc/xdg/nvim/after,/Users/andrewgu/.config/nvim/after"
Searching for "/Users/andrewgu/.config/nvim/pack/*/start/*/lua/packer/plugin_utils.lua"
Searching for "/etc/xdg/nvim/pack/*/start/*/lua/packer/plugin_utils.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/*/start/*/lua/packer/plugin_utils.lua"
Searching for "lua/packer/async.lua" in "/Users/andrewgu/.config/nvim,/etc/xdg/nvim,/Users/andrewgu/.local/share/nvim/site,/usr/local/share/nvim/site,/usr/share/nvim/site,/usr/local/Cellar/neovim/0.5.0/share/nvim/runtime,/usr/local/Cellar/neovim/0.5.0/lib/nvim,/usr/share/nvim/site/after,/usr/local/share/nvim/site/after,/Users/andrewgu/.local/share/nvim/site/after,/etc/xdg/nvim/after,/Users/andrewgu/.config/nvim/after"
Searching for "/Users/andrewgu/.config/nvim/lua/packer/async.lua"
Searching for "/etc/xdg/nvim/lua/packer/async.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/lua/packer/async.lua"
Searching for "/usr/local/share/nvim/site/lua/packer/async.lua"
Searching for "/usr/share/nvim/site/lua/packer/async.lua"
Searching for "/usr/local/Cellar/neovim/0.5.0/share/nvim/runtime/lua/packer/async.lua"
Searching for "/usr/local/Cellar/neovim/0.5.0/lib/nvim/lua/packer/async.lua"
Searching for "/usr/share/nvim/site/after/lua/packer/async.lua"
Searching for "/usr/local/share/nvim/site/after/lua/packer/async.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/after/lua/packer/async.lua"
Searching for "/etc/xdg/nvim/after/lua/packer/async.lua"
Searching for "/Users/andrewgu/.config/nvim/after/lua/packer/async.lua"
not found in 'runtimepath': "lua/packer/async.lua"
Searching for "pack/*/start/*/lua/packer/async.lua" in "/Users/andrewgu/.config/nvim,/etc/xdg/nvim,/Users/andrewgu/.local/share/nvim/site,/usr/local/share/nvim/site,/usr/share/nvim/site,/usr/local/Cellar/neovim/0.5.0/share/nvim/runtime,/usr/local/Cellar/neovim/0.5.0/lib/nvim,/usr/share/nvim/site/after,/usr/local/share/nvim/site/after,/Users/andrewgu/.local/share/nvim/site/after,/etc/xdg/nvim/after,/Users/andrewgu/.config/nvim/after"
Searching for "/Users/andrewgu/.config/nvim/pack/*/start/*/lua/packer/async.lua"
Searching for "/etc/xdg/nvim/pack/*/start/*/lua/packer/async.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/*/start/*/lua/packer/async.lua"
Searching for "lua/packer/jobs.lua" in "/Users/andrewgu/.config/nvim,/etc/xdg/nvim,/Users/andrewgu/.local/share/nvim/site,/usr/local/share/nvim/site,/usr/share/nvim/site,/usr/local/Cellar/neovim/0.5.0/share/nvim/runtime,/usr/local/Cellar/neovim/0.5.0/lib/nvim,/usr/share/nvim/site/after,/usr/local/share/nvim/site/after,/Users/andrewgu/.local/share/nvim/site/after,/etc/xdg/nvim/after,/Users/andrewgu/.config/nvim/after"
Searching for "/Users/andrewgu/.config/nvim/lua/packer/jobs.lua"
Searching for "/etc/xdg/nvim/lua/packer/jobs.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/lua/packer/jobs.lua"
Searching for "/usr/local/share/nvim/site/lua/packer/jobs.lua"
Searching for "/usr/share/nvim/site/lua/packer/jobs.lua"
Searching for "/usr/local/Cellar/neovim/0.5.0/share/nvim/runtime/lua/packer/jobs.lua"
Searching for "/usr/local/Cellar/neovim/0.5.0/lib/nvim/lua/packer/jobs.lua"
Searching for "/usr/share/nvim/site/after/lua/packer/jobs.lua"
Searching for "/usr/local/share/nvim/site/after/lua/packer/jobs.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/after/lua/packer/jobs.lua"
Searching for "/etc/xdg/nvim/after/lua/packer/jobs.lua"
Searching for "/Users/andrewgu/.config/nvim/after/lua/packer/jobs.lua"
not found in 'runtimepath': "lua/packer/jobs.lua"
Searching for "pack/*/start/*/lua/packer/jobs.lua" in "/Users/andrewgu/.config/nvim,/etc/xdg/nvim,/Users/andrewgu/.local/share/nvim/site,/usr/local/share/nvim/site,/usr/share/nvim/site,/usr/local/Cellar/neovim/0.5.0/share/nvim/runtime,/usr/local/Cellar/neovim/0.5.0/lib/nvim,/usr/share/nvim/site/after,/usr/local/share/nvim/site/after,/Users/andrewgu/.local/share/nvim/site/after,/etc/xdg/nvim/after,/Users/andrewgu/.config/nvim/after"
Searching for "/Users/andrewgu/.config/nvim/pack/*/start/*/lua/packer/jobs.lua"
Searching for "/etc/xdg/nvim/pack/*/start/*/lua/packer/jobs.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/*/start/*/lua/packer/jobs.lua"
Searching for "lua/packer/result.lua" in "/Users/andrewgu/.config/nvim,/etc/xdg/nvim,/Users/andrewgu/.local/share/nvim/site,/usr/local/share/nvim/site,/usr/share/nvim/site,/usr/local/Cellar/neovim/0.5.0/share/nvim/runtime,/usr/local/Cellar/neovim/0.5.0/lib/nvim,/usr/share/nvim/site/after,/usr/local/share/nvim/site/after,/Users/andrewgu/.local/share/nvim/site/after,/etc/xdg/nvim/after,/Users/andrewgu/.config/nvim/after"
Searching for "/Users/andrewgu/.config/nvim/lua/packer/result.lua"
Searching for "/etc/xdg/nvim/lua/packer/result.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/lua/packer/result.lua"
Searching for "/usr/local/share/nvim/site/lua/packer/result.lua"
Searching for "/usr/share/nvim/site/lua/packer/result.lua"
Searching for "/usr/local/Cellar/neovim/0.5.0/share/nvim/runtime/lua/packer/result.lua"
Searching for "/usr/local/Cellar/neovim/0.5.0/lib/nvim/lua/packer/result.lua"
Searching for "/usr/share/nvim/site/after/lua/packer/result.lua"
Searching for "/usr/local/share/nvim/site/after/lua/packer/result.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/after/lua/packer/result.lua"
Searching for "/etc/xdg/nvim/after/lua/packer/result.lua"
Searching for "/Users/andrewgu/.config/nvim/after/lua/packer/result.lua"
not found in 'runtimepath': "lua/packer/result.lua"
Searching for "pack/*/start/*/lua/packer/result.lua" in "/Users/andrewgu/.config/nvim,/etc/xdg/nvim,/Users/andrewgu/.local/share/nvim/site,/usr/local/share/nvim/site,/usr/share/nvim/site,/usr/local/Cellar/neovim/0.5.0/share/nvim/runtime,/usr/local/Cellar/neovim/0.5.0/lib/nvim,/usr/share/nvim/site/after,/usr/local/share/nvim/site/after,/Users/andrewgu/.local/share/nvim/site/after,/etc/xdg/nvim/after,/Users/andrewgu/.config/nvim/after"
Searching for "/Users/andrewgu/.config/nvim/pack/*/start/*/lua/packer/result.lua"
Searching for "/etc/xdg/nvim/pack/*/start/*/lua/packer/result.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/*/start/*/lua/packer/result.lua"
Executing: command! PackerInstall           lua require('packer').install()
Executing: command! PackerUpdate            lua require('packer').update()
Executing: command! PackerSync              lua require('packer').sync()
Executing: command! PackerClean             lua require('packer').clean()
Executing: command! -nargs=* PackerCompile  lua require('packer').compile(<q-args>)
Executing: command! PackerStatus            lua require('packer').status()
Executing: command! PackerProfile           lua require('packer').profile_output()
Executing: command! -nargs=+ -complete=customlist,v:lua.require'packer'.loader_complete PackerLoad lua require('packer').loader(<q-args>)
Executing: colorscheme onedark
Searching for "colors/onedark.vim" in "/Users/andrewgu/.config/nvim,/etc/xdg/nvim,/Users/andrewgu/.local/share/nvim/site,/usr/local/share/nvim/site,/usr/share/nvim/site,/usr/local/Cellar/neovim/0.5.0/share/nvim/runtime,/usr/local/Cellar/neovim/0.5.0/lib/nvim,/usr/share/nvim/site/after,/usr/local/share/nvim/site/after,/Users/andrewgu/.local/share/nvim/site/after,/etc/xdg/nvim/after,/Users/andrewgu/.config/nvim/after"
Searching for "/Users/andrewgu/.config/nvim/colors/onedark.vim"
Searching for "/etc/xdg/nvim/colors/onedark.vim"
Searching for "/Users/andrewgu/.local/share/nvim/site/colors/onedark.vim"
Searching for "/usr/local/share/nvim/site/colors/onedark.vim"
Searching for "/usr/share/nvim/site/colors/onedark.vim"
Searching for "/usr/local/Cellar/neovim/0.5.0/share/nvim/runtime/colors/onedark.vim"
Searching for "/usr/local/Cellar/neovim/0.5.0/lib/nvim/colors/onedark.vim"
Searching for "/usr/share/nvim/site/after/colors/onedark.vim"
Searching for "/usr/local/share/nvim/site/after/colors/onedark.vim"
Searching for "/Users/andrewgu/.local/share/nvim/site/after/colors/onedark.vim"
Searching for "/etc/xdg/nvim/after/colors/onedark.vim"
Searching for "/Users/andrewgu/.config/nvim/after/colors/onedark.vim"
not found in 'runtimepath': "colors/onedark.vim"
Searching for "pack/*/start/*/colors/onedark.vim" in "/Users/andrewgu/.config/nvim,/etc/xdg/nvim,/Users/andrewgu/.local/share/nvim/site,/usr/local/share/nvim/site,/usr/share/nvim/site,/usr/local/Cellar/neovim/0.5.0/share/nvim/runtime,/usr/local/Cellar/neovim/0.5.0/lib/nvim,/usr/share/nvim/site/after,/usr/local/share/nvim/site/after,/Users/andrewgu/.local/share/nvim/site/after,/etc/xdg/nvim/after,/Users/andrewgu/.config/nvim/after"
Searching for "/Users/andrewgu/.config/nvim/pack/*/start/*/colors/onedark.vim"
Searching for "/etc/xdg/nvim/pack/*/start/*/colors/onedark.vim"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/*/start/*/colors/onedark.vim"
chdir(/Users/andrewgu/.config/nvim)
chdir(/Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors)
chdir(/Users/andrewgu/.config/nvim)
line 0: sourcing "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim"
line 1: " vim:fdm=marker
line 2: " Vim Color File
line 3: " Name:       onedark.vim
line 4: " Maintainer: https://github.com/joshdick/onedark.vim/
line 5: " License:    The MIT License (MIT)
line 6: " Based On:   https://github.com/MaxSt/FlatColor/
line 7: 
line 8: " Companion statusline plugin and terminal themes are included with onedark.vim:
line 9: "  * https://github.com/joshdick/onedark.vim#lightlinevim-colorscheme
line 10: "  * https://github.com/joshdick/onedark.vim#vim-airline-theme
line 11: "  * https://github.com/joshdick/onedark.vim/tree/main/term
line 12: 
line 13: " Color Reference {{{
line 14: 
line 15: " The following colors were measured inside Atom using its built-in inspector.
line 16: 
line 17: " +---------------------------------------------+
line 18: " |  Color Name  |         RGB        |   Hex   |
line 19: " |--------------+--------------------+---------|
line 20: " | Black        | rgb(40, 44, 52)    | #282c34 |
line 21: " |--------------+--------------------+---------|
line 22: " | White        | rgb(171, 178, 191) | #abb2bf |
line 23: " |--------------+--------------------+---------|
line 24: " | Light Red    | rgb(224, 108, 117) | #e06c75 |
line 25: " |--------------+--------------------+---------|
line 26: " | Dark Red     | rgb(190, 80, 70)   | #be5046 |
line 27: " |--------------+--------------------+---------|
line 28: " | Green        | rgb(152, 195, 121) | #98c379 |
line 29: " |--------------+--------------------+---------|
line 30: " | Light Yellow | rgb(229, 192, 123) | #e5c07b |
line 31: " |--------------+--------------------+---------|
line 32: " | Dark Yellow  | rgb(209, 154, 102) | #d19a66 |
line 33: " |--------------+--------------------+---------|
line 34: " | Blue         | rgb(97, 175, 239)  | #61afef |
line 35: " |--------------+--------------------+---------|
line 36: " | Magenta      | rgb(198, 120, 221) | #c678dd |
line 37: " |--------------+--------------------+---------|
line 38: " | Cyan         | rgb(86, 182, 194)  | #56b6c2 |
line 39: " |--------------+--------------------+---------|
line 40: " | Gutter Grey  | rgb(76, 82, 99)    | #4b5263 |
line 41: " |--------------+--------------------+---------|
line 42: " | Comment Grey | rgb(92, 99, 112)   | #5c6370 |
line 43: " +---------------------------------------------+
line 44: 
line 45: " }}}
line 46: 
line 47: " Initialization {{{
line 48: 
line 49: highlight clear
line 50: 
line 51: if exists("syntax_on")
line 52:   syntax reset
line 53: endif
line 54: 
line 55: set t_Co=256
line 56: 
line 57: let g:colors_name="onedark"
line 58: 
line 59: " Set to "256" for 256-color terminals, or
line 60: " set to "16" to use your terminal emulator's native colors
line 61: " (a 16-color palette for this color scheme is available; see
line 62: " < https://github.com/joshdick/onedark.vim/blob/main/README.md >
line 63: " for more information.)
line 64: if !exists("g:onedark_termcolors")
line 65:   let g:onedark_termcolors = 256
line 66: endif
line 67: 
line 68: " Not all terminals support italics properly. If yours does, opt-in.
line 69: if !exists("g:onedark_terminal_italics")
line 70:   let g:onedark_terminal_italics = 0
line 71: endif
line 72: 
line 73: " This function is based on one from FlatColor: https://github.com/MaxSt/FlatColor/
line 74: " Which in turn was based on one found in hemisu: https://github.com/noahfrederick/vim-hemisu/
line 75: let s:group_colors = {} " Cache of default highlight group settings, for later reference via `onedark#extend_highlight`
line 76: function! s:h(group, style, ...)
line 119: 
line 120: " public {{{
line 121: 
line 122: function! onedark#set_highlight(group, style)
line 125: 
line 126: function! onedark#extend_highlight(group, style)
line 129: 
line 130: " }}}
line 131: 
line 132: " }}}
line 133: 
line 134: " Color Variables {{{
line 135: 
line 136: let s:colors = onedark#GetColors()
Searching for "autoload/onedark.vim" in "/Users/andrewgu/.config/nvim,/etc/xdg/nvim,/Users/andrewgu/.local/share/nvim/site,/usr/local/share/nvim/site,/usr/share/nvim/site,/usr/local/Cellar/neovim/0.5.0/share/nvim/runtime,/usr/local/Cellar/neovim/0.5.0/lib/nvim,/usr/share/nvim/site/after,/usr/local/share/nvim/site/after,/Users/andrewgu/.local/share/nvim/site/after,/etc/xdg/nvim/after,/Users/andrewgu/.config/nvim/after"
Searching for "/Users/andrewgu/.config/nvim/autoload/onedark.vim"
Searching for "/etc/xdg/nvim/autoload/onedark.vim"
Searching for "/Users/andrewgu/.local/share/nvim/site/autoload/onedark.vim"
Searching for "/usr/local/share/nvim/site/autoload/onedark.vim"
Searching for "/usr/share/nvim/site/autoload/onedark.vim"
Searching for "/usr/local/Cellar/neovim/0.5.0/share/nvim/runtime/autoload/onedark.vim"
Searching for "/usr/local/Cellar/neovim/0.5.0/lib/nvim/autoload/onedark.vim"
Searching for "/usr/share/nvim/site/after/autoload/onedark.vim"
Searching for "/usr/local/share/nvim/site/after/autoload/onedark.vim"
Searching for "/Users/andrewgu/.local/share/nvim/site/after/autoload/onedark.vim"
Searching for "/etc/xdg/nvim/after/autoload/onedark.vim"
Searching for "/Users/andrewgu/.config/nvim/after/autoload/onedark.vim"
not found in 'runtimepath': "autoload/onedark.vim"
Searching for "pack/*/start/*/autoload/onedark.vim" in "/Users/andrewgu/.config/nvim,/etc/xdg/nvim,/Users/andrewgu/.local/share/nvim/site,/usr/local/share/nvim/site,/usr/share/nvim/site,/usr/local/Cellar/neovim/0.5.0/share/nvim/runtime,/usr/local/Cellar/neovim/0.5.0/lib/nvim,/usr/share/nvim/site/after,/usr/local/share/nvim/site/after,/Users/andrewgu/.local/share/nvim/site/after,/etc/xdg/nvim/after,/Users/andrewgu/.config/nvim/after"
Searching for "/Users/andrewgu/.config/nvim/pack/*/start/*/autoload/onedark.vim"
Searching for "/etc/xdg/nvim/pack/*/start/*/autoload/onedark.vim"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/*/start/*/autoload/onedark.vim"
chdir(/Users/andrewgu/.config/nvim)
chdir(/Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/autoload)
chdir(/Users/andrewgu/.config/nvim)
line 136: sourcing "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/autoload/onedark.vim"
line 1: " [onedark.vim](https://github.com/joshdick/onedark.vim/)
line 2: 
line 3: let s:overrides = get(g:, "onedark_color_overrides", {})
line 4: 
line 5: let s:colors = { "red": get(s:overrides, "red", { "gui": "#E06C75", "cterm": "204", "cterm16": "1" }), "dark_red": get(s:overrides, "dark_red", { "gui": "#BE5046", "cterm": "196", "cterm16": "9" }), "green": get(s:overrides, "green", { "gui": "#98C379", "cterm": "114", "cterm16": "2" }), "yellow": get(s:overrides, "yellow", { "gui": "#E5C07B", "cterm": "180", "cterm16": "3" }), "dark_yellow": get(s:overrides, "dark_yellow", { "gui": "#D19A66", "cterm": "173", "cterm16": "11" }), "blue": get(s:overrides, "blue", { "gui": "#61AFEF", "cterm": "39", "cterm16": "4" }), "purple": get(s:overrides, "purple", { "gui": "#C678DD", "cterm": "170", "cterm16": "5" }), "cyan": get(s:overrides, "cyan", { "gui": "#56B6C2", "cterm": "38", "cterm16": "6" }), "white": get(s:overrides, "white", { "gui": "#ABB2BF", "cterm": "145", "cterm16": "15" }), "black": get(s:overrides, "black", { "gui": "#282C34", "cterm": "235", "cterm16": "0" }), "foreground": get(s:overrides, "foreground", { "gui": "#ABB2BF", "cterm": "145", "cte
line 26: 
line 27: function! onedark#GetColors()
finished sourcing /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/autoload/onedark.vim
continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim
calling function onedark#GetColors()

line 1:   return s:colors
function onedark#GetColors returning {'background': {'gui': '#282C34', 'cte...E4452', 'cterm': '59', 'cterm16': '7'}}

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 137: 
line 138: let s:red = s:colors.red
line 139: let s:dark_red = s:colors.dark_red
line 140: let s:green = s:colors.green
line 141: let s:yellow = s:colors.yellow
line 142: let s:dark_yellow = s:colors.dark_yellow
line 143: let s:blue = s:colors.blue
line 144: let s:purple = s:colors.purple
line 145: let s:cyan = s:colors.cyan
line 146: let s:white = s:colors.white
line 147: let s:black = s:colors.black
line 148: let s:foreground = s:colors.foreground
line 149: let s:background = s:colors.background
line 150: let s:comment_grey = s:colors.comment_grey
line 151: let s:gutter_fg_grey = s:colors.gutter_fg_grey
line 152: let s:cursor_grey = s:colors.cursor_grey
line 153: let s:visual_grey = s:colors.visual_grey
line 154: let s:menu_grey = s:colors.menu_grey
line 155: let s:special_grey = s:colors.special_grey
line 156: let s:vertsplit = s:colors.vertsplit
line 157: 
line 158: " }}}
line 159: 
line 160: " Terminal Colors {{{
line 161: 
line 162: let g:terminal_ansi_colors = [ s:black.gui, s:red.gui, s:green.gui, s:yellow.gui, s:blue.gui, s:purple.gui, s:cyan.gui, s:comment_grey.gui, s:visual_grey.gui, s:red.gui, s:green.gui, s:yellow.gui, s:blue.gui, s:purple.gui, s:cyan.gui, s:white.gui]
line 168: 
line 169: " }}}
line 170: 
line 171: " Syntax Groups (descriptions and ordering from `:h w18`) {{{
line 172: 
line 173: call s:h("Comment", { "fg": s:comment_grey, "gui": "italic", "cterm": "italic" }) " any comment
calling function <SNR>2_h('Comment', {'gui': 'italic', 'fg': {'gui': '#5C63...9', 'cterm16': '7'}, 'cterm': 'italic'})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight Comment guifg= #5C6370 guibg= NONE guisp= NONE gui= NONE ctermfg=59 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 174: call s:h("Constant", { "fg": s:cyan }) " any constant
calling function <SNR>2_h('Constant', {'fg': {'gui': '#56B6C2', 'cterm': '38', 'cterm16': '6'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight Constant guifg= #56B6C2 guibg= NONE guisp= NONE gui= NONE ctermfg=38 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 175: call s:h("String", { "fg": s:green }) " a string constant: "this is a string"
calling function <SNR>2_h('String', {'fg': {'gui': '#98C379', 'cterm': '114', 'cterm16': '2'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight String guifg= #98C379 guibg= NONE guisp= NONE gui= NONE ctermfg=114 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 176: call s:h("Character", { "fg": s:green }) " a character constant: 'c', '\n'
calling function <SNR>2_h('Character', {'fg': {'gui': '#98C379', 'cterm': '114', 'cterm16': '2'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight Character guifg= #98C379 guibg= NONE guisp= NONE gui= NONE ctermfg=114 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 177: call s:h("Number", { "fg": s:dark_yellow }) " a number constant: 234, 0xff
calling function <SNR>2_h('Number', {'fg': {'gui': '#D19A66', 'cterm': '173', 'cterm16': '11'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight Number guifg= #D19A66 guibg= NONE guisp= NONE gui= NONE ctermfg=173 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 178: call s:h("Boolean", { "fg": s:dark_yellow }) " a boolean constant: TRUE, false
calling function <SNR>2_h('Boolean', {'fg': {'gui': '#D19A66', 'cterm': '173', 'cterm16': '11'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight Boolean guifg= #D19A66 guibg= NONE guisp= NONE gui= NONE ctermfg=173 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 179: call s:h("Float", { "fg": s:dark_yellow }) " a floating point constant: 2.3e10
calling function <SNR>2_h('Float', {'fg': {'gui': '#D19A66', 'cterm': '173', 'cterm16': '11'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight Float guifg= #D19A66 guibg= NONE guisp= NONE gui= NONE ctermfg=173 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 180: call s:h("Identifier", { "fg": s:red }) " any variable name
calling function <SNR>2_h('Identifier', {'fg': {'gui': '#E06C75', 'cterm': '204', 'cterm16': '1'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight Identifier guifg= #E06C75 guibg= NONE guisp= NONE gui= NONE ctermfg=204 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 181: call s:h("Function", { "fg": s:blue }) " function name (also: methods for classes)
calling function <SNR>2_h('Function', {'fg': {'gui': '#61AFEF', 'cterm': '39', 'cterm16': '4'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight Function guifg= #61AFEF guibg= NONE guisp= NONE gui= NONE ctermfg=39 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 182: call s:h("Statement", { "fg": s:purple }) " any statement
calling function <SNR>2_h('Statement', {'fg': {'gui': '#C678DD', 'cterm': '170', 'cterm16': '5'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight Statement guifg= #C678DD guibg= NONE guisp= NONE gui= NONE ctermfg=170 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 183: call s:h("Conditional", { "fg": s:purple }) " if, then, else, endif, switch, etc.
calling function <SNR>2_h('Conditional', {'fg': {'gui': '#C678DD', 'cterm': '170', 'cterm16': '5'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight Conditional guifg= #C678DD guibg= NONE guisp= NONE gui= NONE ctermfg=170 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 184: call s:h("Repeat", { "fg": s:purple }) " for, do, while, etc.
calling function <SNR>2_h('Repeat', {'fg': {'gui': '#C678DD', 'cterm': '170', 'cterm16': '5'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight Repeat guifg= #C678DD guibg= NONE guisp= NONE gui= NONE ctermfg=170 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 185: call s:h("Label", { "fg": s:purple }) " case, default, etc.
calling function <SNR>2_h('Label', {'fg': {'gui': '#C678DD', 'cterm': '170', 'cterm16': '5'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight Label guifg= #C678DD guibg= NONE guisp= NONE gui= NONE ctermfg=170 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 186: call s:h("Operator", { "fg": s:purple }) " sizeof", "+", "*", etc.
calling function <SNR>2_h('Operator', {'fg': {'gui': '#C678DD', 'cterm': '170', 'cterm16': '5'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight Operator guifg= #C678DD guibg= NONE guisp= NONE gui= NONE ctermfg=170 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 187: call s:h("Keyword", { "fg": s:red }) " any other keyword
calling function <SNR>2_h('Keyword', {'fg': {'gui': '#E06C75', 'cterm': '204', 'cterm16': '1'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight Keyword guifg= #E06C75 guibg= NONE guisp= NONE gui= NONE ctermfg=204 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 188: call s:h("Exception", { "fg": s:purple }) " try, catch, throw
calling function <SNR>2_h('Exception', {'fg': {'gui': '#C678DD', 'cterm': '170', 'cterm16': '5'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight Exception guifg= #C678DD guibg= NONE guisp= NONE gui= NONE ctermfg=170 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 189: call s:h("PreProc", { "fg": s:yellow }) " generic Preprocessor
calling function <SNR>2_h('PreProc', {'fg': {'gui': '#E5C07B', 'cterm': '180', 'cterm16': '3'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight PreProc guifg= #E5C07B guibg= NONE guisp= NONE gui= NONE ctermfg=180 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 190: call s:h("Include", { "fg": s:blue }) " preprocessor #include
calling function <SNR>2_h('Include', {'fg': {'gui': '#61AFEF', 'cterm': '39', 'cterm16': '4'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight Include guifg= #61AFEF guibg= NONE guisp= NONE gui= NONE ctermfg=39 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 191: call s:h("Define", { "fg": s:purple }) " preprocessor #define
calling function <SNR>2_h('Define', {'fg': {'gui': '#C678DD', 'cterm': '170', 'cterm16': '5'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight Define guifg= #C678DD guibg= NONE guisp= NONE gui= NONE ctermfg=170 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 192: call s:h("Macro", { "fg": s:purple }) " same as Define
calling function <SNR>2_h('Macro', {'fg': {'gui': '#C678DD', 'cterm': '170', 'cterm16': '5'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight Macro guifg= #C678DD guibg= NONE guisp= NONE gui= NONE ctermfg=170 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 193: call s:h("PreCondit", { "fg": s:yellow }) " preprocessor #if, #else, #endif, etc.
calling function <SNR>2_h('PreCondit', {'fg': {'gui': '#E5C07B', 'cterm': '180', 'cterm16': '3'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight PreCondit guifg= #E5C07B guibg= NONE guisp= NONE gui= NONE ctermfg=180 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 194: call s:h("Type", { "fg": s:yellow }) " int, long, char, etc.
calling function <SNR>2_h('Type', {'fg': {'gui': '#E5C07B', 'cterm': '180', 'cterm16': '3'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight Type guifg= #E5C07B guibg= NONE guisp= NONE gui= NONE ctermfg=180 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 195: call s:h("StorageClass", { "fg": s:yellow }) " static, register, volatile, etc.
calling function <SNR>2_h('StorageClass', {'fg': {'gui': '#E5C07B', 'cterm': '180', 'cterm16': '3'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight StorageClass guifg= #E5C07B guibg= NONE guisp= NONE gui= NONE ctermfg=180 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 196: call s:h("Structure", { "fg": s:yellow }) " struct, union, enum, etc.
calling function <SNR>2_h('Structure', {'fg': {'gui': '#E5C07B', 'cterm': '180', 'cterm16': '3'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight Structure guifg= #E5C07B guibg= NONE guisp= NONE gui= NONE ctermfg=180 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 197: call s:h("Typedef", { "fg": s:yellow }) " A typedef
calling function <SNR>2_h('Typedef', {'fg': {'gui': '#E5C07B', 'cterm': '180', 'cterm16': '3'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight Typedef guifg= #E5C07B guibg= NONE guisp= NONE gui= NONE ctermfg=180 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 198: call s:h("Special", { "fg": s:blue }) " any special symbol
calling function <SNR>2_h('Special', {'fg': {'gui': '#61AFEF', 'cterm': '39', 'cterm16': '4'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight Special guifg= #61AFEF guibg= NONE guisp= NONE gui= NONE ctermfg=39 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 199: call s:h("SpecialChar", { "fg": s:dark_yellow }) " special character in a constant
calling function <SNR>2_h('SpecialChar', {'fg': {'gui': '#D19A66', 'cterm': '173', 'cterm16': '11'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight SpecialChar guifg= #D19A66 guibg= NONE guisp= NONE gui= NONE ctermfg=173 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 200: call s:h("Tag", {}) " you can use CTRL-] on this
calling function <SNR>2_h('Tag', {})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight Tag guifg= NONE guibg= NONE guisp= NONE gui= NONE ctermfg=NONE ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 201: call s:h("Delimiter", {}) " character that needs attention
calling function <SNR>2_h('Delimiter', {})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight Delimiter guifg= NONE guibg= NONE guisp= NONE gui= NONE ctermfg=NONE ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 202: call s:h("SpecialComment", { "fg": s:comment_grey }) " special things inside a comment
calling function <SNR>2_h('SpecialComment', {'fg': {'gui': '#5C6370', 'cterm': '59', 'cterm16': '7'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight SpecialComment guifg= #5C6370 guibg= NONE guisp= NONE gui= NONE ctermfg=59 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 203: call s:h("Debug", {}) " debugging statements
calling function <SNR>2_h('Debug', {})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight Debug guifg= NONE guibg= NONE guisp= NONE gui= NONE ctermfg=NONE ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 204: call s:h("Underlined", { "gui": "underline", "cterm": "underline" }) " text that stands out, HTML links
calling function <SNR>2_h('Underlined', {'gui': 'underline', 'cterm': 'underline'})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight Underlined guifg= NONE guibg= NONE guisp= NONE gui= underline ctermfg=NONE ctermbg=NONE cterm= underline
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 205: call s:h("Ignore", {}) " left blank, hidden
calling function <SNR>2_h('Ignore', {})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight Ignore guifg= NONE guibg= NONE guisp= NONE gui= NONE ctermfg=NONE ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 206: call s:h("Error", { "fg": s:red }) " any erroneous construct
calling function <SNR>2_h('Error', {'fg': {'gui': '#E06C75', 'cterm': '204', 'cterm16': '1'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight Error guifg= #E06C75 guibg= NONE guisp= NONE gui= NONE ctermfg=204 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 207: call s:h("Todo", { "fg": s:purple }) " anything that needs extra attention; mostly the keywords TODO FIXME and XXX
calling function <SNR>2_h('Todo', {'fg': {'gui': '#C678DD', 'cterm': '170', 'cterm16': '5'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight Todo guifg= #C678DD guibg= NONE guisp= NONE gui= NONE ctermfg=170 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 208: 
line 209: " }}}
line 210: 
line 211: " Highlighting Groups (descriptions and ordering from `:h highlight-groups`) {{{
line 212: call s:h("ColorColumn", { "bg": s:cursor_grey }) " used for the columns set with 'colorcolumn'
calling function <SNR>2_h('ColorColumn', {'bg': {'gui': '#2C323C', 'cterm': '236', 'cterm16': '0'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight ColorColumn guifg= NONE guibg= #2C323C guisp= NONE gui= NONE ctermfg=NONE ctermbg=236 cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 213: call s:h("Conceal", {}) " placeholder characters substituted for concealed text (see 'conceallevel')
calling function <SNR>2_h('Conceal', {})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight Conceal guifg= NONE guibg= NONE guisp= NONE gui= NONE ctermfg=NONE ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 214: call s:h("Cursor", { "fg": s:black, "bg": s:blue }) " the character under the cursor
calling function <SNR>2_h('Cursor', {'bg': {'gui': '#61AFEF', 'cterm': '39...2C34', 'cterm': '235', 'cterm16': '0'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight Cursor guifg= #282C34 guibg= #61AFEF guisp= NONE gui= NONE ctermfg=235 ctermbg=39 cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 215: call s:h("CursorIM", {}) " like Cursor, but used when in IME mode
calling function <SNR>2_h('CursorIM', {})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight CursorIM guifg= NONE guibg= NONE guisp= NONE gui= NONE ctermfg=NONE ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 216: call s:h("CursorColumn", { "bg": s:cursor_grey }) " the screen column that the cursor is in when 'cursorcolumn' is set
calling function <SNR>2_h('CursorColumn', {'bg': {'gui': '#2C323C', 'cterm': '236', 'cterm16': '0'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight CursorColumn guifg= NONE guibg= #2C323C guisp= NONE gui= NONE ctermfg=NONE ctermbg=236 cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 217: if &diff
line 218:   " Don't change the background color in diff mode
line 219:   call s:h("CursorLine", { "gui": "underline" }) " the screen line that the cursor is in when 'cursorline' is set
line 220: else
line 221:   call s:h("CursorLine", { "bg": s:cursor_grey }) " the screen line that the cursor is in when 'cursorline' is set
calling function <SNR>2_h('CursorLine', {'bg': {'gui': '#2C323C', 'cterm': '236', 'cterm16': '0'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight CursorLine guifg= NONE guibg= #2C323C guisp= NONE gui= NONE ctermfg=NONE ctermbg=236 cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 222: endif
line 223: call s:h("Directory", { "fg": s:blue }) " directory names (and other special names in listings)
calling function <SNR>2_h('Directory', {'fg': {'gui': '#61AFEF', 'cterm': '39', 'cterm16': '4'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight Directory guifg= #61AFEF guibg= NONE guisp= NONE gui= NONE ctermfg=39 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 224: call s:h("DiffAdd", { "bg": s:green, "fg": s:black }) " diff mode: Added line
calling function <SNR>2_h('DiffAdd', {'bg': {'gui': '#98C379', 'cterm': '11...2C34', 'cterm': '235', 'cterm16': '0'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight DiffAdd guifg= #282C34 guibg= #98C379 guisp= NONE gui= NONE ctermfg=235 ctermbg=114 cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 225: call s:h("DiffChange", { "fg": s:yellow, "gui": "underline", "cterm": "underline" }) " diff mode: Changed line
calling function <SNR>2_h('DiffChange', {'gui': 'underline', 'fg': {'gui': '#E... 'cterm16': '3'}, 'cterm': 'underline'})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight DiffChange guifg= #E5C07B guibg= NONE guisp= NONE gui= underline ctermfg=180 ctermbg=NONE cterm= underline
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 226: call s:h("DiffDelete", { "bg": s:red, "fg": s:black }) " diff mode: Deleted line
calling function <SNR>2_h('DiffDelete', {'bg': {'gui': '#E06C75', 'cterm': '20...2C34', 'cterm': '235', 'cterm16': '0'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight DiffDelete guifg= #282C34 guibg= #E06C75 guisp= NONE gui= NONE ctermfg=235 ctermbg=204 cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 227: call s:h("DiffText", { "bg": s:yellow, "fg": s:black }) " diff mode: Changed text within a changed line
calling function <SNR>2_h('DiffText', {'bg': {'gui': '#E5C07B', 'cterm': '18...2C34', 'cterm': '235', 'cterm16': '0'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight DiffText guifg= #282C34 guibg= #E5C07B guisp= NONE gui= NONE ctermfg=235 ctermbg=180 cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 228: if get(g:, 'onedark_hide_endofbuffer', 0)
line 229:     " If enabled, will style end-of-buffer filler lines (~) to appear to be hidden.
line 230:     call s:h("EndOfBuffer", { "fg": s:black }) " filler lines (~) after the last line in the buffer
line 231: endif
line 232: call s:h("ErrorMsg", { "fg": s:red }) " error messages on the command line
calling function <SNR>2_h('ErrorMsg', {'fg': {'gui': '#E06C75', 'cterm': '204', 'cterm16': '1'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight ErrorMsg guifg= #E06C75 guibg= NONE guisp= NONE gui= NONE ctermfg=204 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 233: call s:h("VertSplit", { "fg": s:vertsplit }) " the column separating vertically split windows
calling function <SNR>2_h('VertSplit', {'fg': {'gui': '#3E4452', 'cterm': '59', 'cterm16': '7'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight VertSplit guifg= #3E4452 guibg= NONE guisp= NONE gui= NONE ctermfg=59 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 234: call s:h("Folded", { "fg": s:comment_grey }) " line used for closed folds
calling function <SNR>2_h('Folded', {'fg': {'gui': '#5C6370', 'cterm': '59', 'cterm16': '7'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight Folded guifg= #5C6370 guibg= NONE guisp= NONE gui= NONE ctermfg=59 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 235: call s:h("FoldColumn", {}) " 'foldcolumn'
calling function <SNR>2_h('FoldColumn', {})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight FoldColumn guifg= NONE guibg= NONE guisp= NONE gui= NONE ctermfg=NONE ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 236: call s:h("SignColumn", {}) " column where signs are displayed
calling function <SNR>2_h('SignColumn', {})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight SignColumn guifg= NONE guibg= NONE guisp= NONE gui= NONE ctermfg=NONE ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 237: call s:h("IncSearch", { "fg": s:yellow, "bg": s:comment_grey }) " 'incsearch' highlighting; also used for the text replaced with ":s///c"
calling function <SNR>2_h('IncSearch', {'bg': {'gui': '#5C6370', 'cterm': '59...C07B', 'cterm': '180', 'cterm16': '3'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight IncSearch guifg= #E5C07B guibg= #5C6370 guisp= NONE gui= NONE ctermfg=180 ctermbg=59 cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 238: call s:h("LineNr", { "fg": s:gutter_fg_grey }) " Line number for ":number" and ":#" commands, and when 'number' or 'relativenumber' option is set.
calling function <SNR>2_h('LineNr', {'fg': {'gui': '#4B5263', 'cterm': '238', 'cterm16': '8'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight LineNr guifg= #4B5263 guibg= NONE guisp= NONE gui= NONE ctermfg=238 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 239: call s:h("CursorLineNr", {}) " Like LineNr when 'cursorline' or 'relativenumber' is set for the cursor line.
calling function <SNR>2_h('CursorLineNr', {})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight CursorLineNr guifg= NONE guibg= NONE guisp= NONE gui= NONE ctermfg=NONE ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 240: call s:h("MatchParen", { "fg": s:blue, "gui": "underline", "cterm": "underline" }) " The character under the cursor or just before it, if it is a paired bracket, and its match.
calling function <SNR>2_h('MatchParen', {'gui': 'underline', 'fg': {'gui': '#6... 'cterm16': '4'}, 'cterm': 'underline'})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight MatchParen guifg= #61AFEF guibg= NONE guisp= NONE gui= underline ctermfg=39 ctermbg=NONE cterm= underline
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 241: call s:h("ModeMsg", {}) " 'showmode' message (e.g., "-- INSERT --")
calling function <SNR>2_h('ModeMsg', {})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight ModeMsg guifg= NONE guibg= NONE guisp= NONE gui= NONE ctermfg=NONE ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 242: call s:h("MoreMsg", {}) " more-prompt
calling function <SNR>2_h('MoreMsg', {})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight MoreMsg guifg= NONE guibg= NONE guisp= NONE gui= NONE ctermfg=NONE ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 243: call s:h("NonText", { "fg": s:special_grey }) " '~' and '@' at the end of the window, characters from 'showbreak' and other characters that do not really exist in the text (e.g., ">" displayed when a double-wide character doesn't fit at the end of the line).
calling function <SNR>2_h('NonText', {'fg': {'gui': '#3B4048', 'cterm': '238', 'cterm16': '7'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight NonText guifg= #3B4048 guibg= NONE guisp= NONE gui= NONE ctermfg=238 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 244: call s:h("Normal", { "fg": s:foreground, "bg": s:background }) " normal text
calling function <SNR>2_h('Normal', {'bg': {'gui': '#282C34', 'cterm': '23...F', 'cterm': '145', 'cterm16': 'NONE'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight Normal guifg= #ABB2BF guibg= #282C34 guisp= NONE gui= NONE ctermfg=145 ctermbg=235 cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 245: call s:h("Pmenu", { "fg": s:white, "bg": s:menu_grey }) " Popup menu: normal item.
calling function <SNR>2_h('Pmenu', {'bg': {'gui': '#3E4452', 'cterm': '23...2BF', 'cterm': '145', 'cterm16': '15'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight Pmenu guifg= #ABB2BF guibg= #3E4452 guisp= NONE gui= NONE ctermfg=145 ctermbg=237 cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 246: call s:h("PmenuSel", { "fg": s:cursor_grey, "bg": s:blue }) " Popup menu: selected item.
calling function <SNR>2_h('PmenuSel', {'bg': {'gui': '#61AFEF', 'cterm': '39...323C', 'cterm': '236', 'cterm16': '0'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight PmenuSel guifg= #2C323C guibg= #61AFEF guisp= NONE gui= NONE ctermfg=236 ctermbg=39 cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 247: call s:h("PmenuSbar", { "bg": s:cursor_grey }) " Popup menu: scrollbar.
calling function <SNR>2_h('PmenuSbar', {'bg': {'gui': '#2C323C', 'cterm': '236', 'cterm16': '0'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight PmenuSbar guifg= NONE guibg= #2C323C guisp= NONE gui= NONE ctermfg=NONE ctermbg=236 cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 248: call s:h("PmenuThumb", { "bg": s:white }) " Popup menu: Thumb of the scrollbar.
calling function <SNR>2_h('PmenuThumb', {'bg': {'gui': '#ABB2BF', 'cterm': '145', 'cterm16': '15'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight PmenuThumb guifg= NONE guibg= #ABB2BF guisp= NONE gui= NONE ctermfg=NONE ctermbg=145 cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 249: call s:h("Question", { "fg": s:purple }) " hit-enter prompt and yes/no questions
calling function <SNR>2_h('Question', {'fg': {'gui': '#C678DD', 'cterm': '170', 'cterm16': '5'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight Question guifg= #C678DD guibg= NONE guisp= NONE gui= NONE ctermfg=170 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 250: call s:h("QuickFixLine", { "fg": s:black, "bg": s:yellow }) " Current quickfix item in the quickfix window.
calling function <SNR>2_h('QuickFixLine', {'bg': {'gui': '#E5C07B', 'cterm': '18...2C34', 'cterm': '235', 'cterm16': '0'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight QuickFixLine guifg= #282C34 guibg= #E5C07B guisp= NONE gui= NONE ctermfg=235 ctermbg=180 cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 251: call s:h("Search", { "fg": s:black, "bg": s:yellow }) " Last search pattern highlighting (see 'hlsearch'). Also used for similar items that need to stand out.
calling function <SNR>2_h('Search', {'bg': {'gui': '#E5C07B', 'cterm': '18...2C34', 'cterm': '235', 'cterm16': '0'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight Search guifg= #282C34 guibg= #E5C07B guisp= NONE gui= NONE ctermfg=235 ctermbg=180 cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 252: call s:h("SpecialKey", { "fg": s:special_grey }) " Meta and special keys listed with ":map", also for text used to show unprintable characters in the text, 'listchars'. Generally: text that is displayed differently from what it really is.
calling function <SNR>2_h('SpecialKey', {'fg': {'gui': '#3B4048', 'cterm': '238', 'cterm16': '7'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight SpecialKey guifg= #3B4048 guibg= NONE guisp= NONE gui= NONE ctermfg=238 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 253: call s:h("SpellBad", { "fg": s:red, "gui": "underline", "cterm": "underline" }) " Word that is not recognized by the spellchecker. This will be combined with the highlighting used otherwise.
calling function <SNR>2_h('SpellBad', {'gui': 'underline', 'fg': {'gui': '#E... 'cterm16': '1'}, 'cterm': 'underline'})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight SpellBad guifg= #E06C75 guibg= NONE guisp= NONE gui= underline ctermfg=204 ctermbg=NONE cterm= underline
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 254: call s:h("SpellCap", { "fg": s:dark_yellow }) " Word that should start with a capital. This will be combined with the highlighting used otherwise.
calling function <SNR>2_h('SpellCap', {'fg': {'gui': '#D19A66', 'cterm': '173', 'cterm16': '11'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight SpellCap guifg= #D19A66 guibg= NONE guisp= NONE gui= NONE ctermfg=173 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 255: call s:h("SpellLocal", { "fg": s:dark_yellow }) " Word that is recognized by the spellchecker as one that is used in another region. This will be combined with the highlighting used otherwise.
calling function <SNR>2_h('SpellLocal', {'fg': {'gui': '#D19A66', 'cterm': '173', 'cterm16': '11'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight SpellLocal guifg= #D19A66 guibg= NONE guisp= NONE gui= NONE ctermfg=173 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 256: call s:h("SpellRare", { "fg": s:dark_yellow }) " Word that is recognized by the spellchecker as one that is hardly ever used. spell This will be combined with the highlighting used otherwise.
calling function <SNR>2_h('SpellRare', {'fg': {'gui': '#D19A66', 'cterm': '173', 'cterm16': '11'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight SpellRare guifg= #D19A66 guibg= NONE guisp= NONE gui= NONE ctermfg=173 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 257: call s:h("StatusLine", { "fg": s:white, "bg": s:cursor_grey }) " status line of current window
calling function <SNR>2_h('StatusLine', {'bg': {'gui': '#2C323C', 'cterm': '23...2BF', 'cterm': '145', 'cterm16': '15'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight StatusLine guifg= #ABB2BF guibg= #2C323C guisp= NONE gui= NONE ctermfg=145 ctermbg=236 cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 258: call s:h("StatusLineNC", { "fg": s:comment_grey }) " status lines of not-current windows Note: if this is equal to "StatusLine" Vim will use "^^^" in the status line of the current window.
calling function <SNR>2_h('StatusLineNC', {'fg': {'gui': '#5C6370', 'cterm': '59', 'cterm16': '7'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight StatusLineNC guifg= #5C6370 guibg= NONE guisp= NONE gui= NONE ctermfg=59 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 259: call s:h("StatusLineTerm", { "fg": s:white, "bg": s:cursor_grey }) " status line of current :terminal window
calling function <SNR>2_h('StatusLineTerm', {'bg': {'gui': '#2C323C', 'cterm': '23...2BF', 'cterm': '145', 'cterm16': '15'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight StatusLineTerm guifg= #ABB2BF guibg= #2C323C guisp= NONE gui= NONE ctermfg=145 ctermbg=236 cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 260: call s:h("StatusLineTermNC", { "fg": s:comment_grey }) " status line of non-current :terminal window
calling function <SNR>2_h('StatusLineTermNC', {'fg': {'gui': '#5C6370', 'cterm': '59', 'cterm16': '7'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight StatusLineTermNC guifg= #5C6370 guibg= NONE guisp= NONE gui= NONE ctermfg=59 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 261: call s:h("TabLine", { "fg": s:comment_grey }) " tab pages line, not active tab page label
calling function <SNR>2_h('TabLine', {'fg': {'gui': '#5C6370', 'cterm': '59', 'cterm16': '7'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight TabLine guifg= #5C6370 guibg= NONE guisp= NONE gui= NONE ctermfg=59 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 262: call s:h("TabLineFill", {}) " tab pages line, where there are no labels
calling function <SNR>2_h('TabLineFill', {})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight TabLineFill guifg= NONE guibg= NONE guisp= NONE gui= NONE ctermfg=NONE ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 263: call s:h("TabLineSel", { "fg": s:white }) " tab pages line, active tab page label
calling function <SNR>2_h('TabLineSel', {'fg': {'gui': '#ABB2BF', 'cterm': '145', 'cterm16': '15'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight TabLineSel guifg= #ABB2BF guibg= NONE guisp= NONE gui= NONE ctermfg=145 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 264: call s:h("Terminal", { "fg": s:white, "bg": s:black }) " terminal window (see terminal-size-color)
calling function <SNR>2_h('Terminal', {'bg': {'gui': '#282C34', 'cterm': '23...2BF', 'cterm': '145', 'cterm16': '15'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight Terminal guifg= #ABB2BF guibg= #282C34 guisp= NONE gui= NONE ctermfg=145 ctermbg=235 cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 265: call s:h("Title", { "fg": s:green }) " titles for output from ":set all", ":autocmd" etc.
calling function <SNR>2_h('Title', {'fg': {'gui': '#98C379', 'cterm': '114', 'cterm16': '2'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight Title guifg= #98C379 guibg= NONE guisp= NONE gui= NONE ctermfg=114 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 266: call s:h("Visual", { "bg": s:visual_grey }) " Visual mode selection
calling function <SNR>2_h('Visual', {'bg': {'gui': '#3E4452', 'cterm': '237', 'cterm16': '8'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight Visual guifg= NONE guibg= #3E4452 guisp= NONE gui= NONE ctermfg=NONE ctermbg=237 cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 267: call s:h("VisualNOS", { "bg": s:visual_grey }) " Visual mode selection when vim is "Not Owning the Selection". Only X11 Gui's gui-x11 and xterm-clipboard supports this.
calling function <SNR>2_h('VisualNOS', {'bg': {'gui': '#3E4452', 'cterm': '237', 'cterm16': '8'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight VisualNOS guifg= NONE guibg= #3E4452 guisp= NONE gui= NONE ctermfg=NONE ctermbg=237 cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 268: call s:h("WarningMsg", { "fg": s:yellow }) " warning messages
calling function <SNR>2_h('WarningMsg', {'fg': {'gui': '#E5C07B', 'cterm': '180', 'cterm16': '3'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight WarningMsg guifg= #E5C07B guibg= NONE guisp= NONE gui= NONE ctermfg=180 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 269: call s:h("WildMenu", { "fg": s:black, "bg": s:blue }) " current match in 'wildmenu' completion
calling function <SNR>2_h('WildMenu', {'bg': {'gui': '#61AFEF', 'cterm': '39...2C34', 'cterm': '235', 'cterm16': '0'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight WildMenu guifg= #282C34 guibg= #61AFEF guisp= NONE gui= NONE ctermfg=235 ctermbg=39 cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 270: 
line 271: " }}}
line 272: 
line 273: " Termdebug highlighting for Vim 8.1+ {{{
line 274: 
line 275: " See `:h hl-debugPC` and `:h hl-debugBreakpoint`.
line 276: call s:h("debugPC", { "bg": s:special_grey }) " the current position
calling function <SNR>2_h('debugPC', {'bg': {'gui': '#3B4048', 'cterm': '238', 'cterm16': '7'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight debugPC guifg= NONE guibg= #3B4048 guisp= NONE gui= NONE ctermfg=NONE ctermbg=238 cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 277: call s:h("debugBreakpoint", { "fg": s:black, "bg": s:red }) " a breakpoint
calling function <SNR>2_h('debugBreakpoint', {'bg': {'gui': '#E06C75', 'cterm': '20...2C34', 'cterm': '235', 'cterm16': '0'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight debugBreakpoint guifg= #282C34 guibg= #E06C75 guisp= NONE gui= NONE ctermfg=235 ctermbg=204 cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 278: 
line 279: " }}}
line 280: 
line 281: " Language-Specific Highlighting {{{
line 282: 
line 283: " CSS
line 284: call s:h("cssAttrComma", { "fg": s:purple })
calling function <SNR>2_h('cssAttrComma', {'fg': {'gui': '#C678DD', 'cterm': '170', 'cterm16': '5'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight cssAttrComma guifg= #C678DD guibg= NONE guisp= NONE gui= NONE ctermfg=170 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 285: call s:h("cssAttributeSelector", { "fg": s:green })
calling function <SNR>2_h('cssAttributeSelector', {'fg': {'gui': '#98C379', 'cterm': '114', 'cterm16': '2'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight cssAttributeSelector guifg= #98C379 guibg= NONE guisp= NONE gui= NONE ctermfg=114 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 286: call s:h("cssBraces", { "fg": s:white })
calling function <SNR>2_h('cssBraces', {'fg': {'gui': '#ABB2BF', 'cterm': '145', 'cterm16': '15'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight cssBraces guifg= #ABB2BF guibg= NONE guisp= NONE gui= NONE ctermfg=145 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 287: call s:h("cssClassName", { "fg": s:dark_yellow })
calling function <SNR>2_h('cssClassName', {'fg': {'gui': '#D19A66', 'cterm': '173', 'cterm16': '11'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight cssClassName guifg= #D19A66 guibg= NONE guisp= NONE gui= NONE ctermfg=173 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 288: call s:h("cssClassNameDot", { "fg": s:dark_yellow })
calling function <SNR>2_h('cssClassNameDot', {'fg': {'gui': '#D19A66', 'cterm': '173', 'cterm16': '11'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight cssClassNameDot guifg= #D19A66 guibg= NONE guisp= NONE gui= NONE ctermfg=173 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 289: call s:h("cssDefinition", { "fg": s:purple })
calling function <SNR>2_h('cssDefinition', {'fg': {'gui': '#C678DD', 'cterm': '170', 'cterm16': '5'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight cssDefinition guifg= #C678DD guibg= NONE guisp= NONE gui= NONE ctermfg=170 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 290: call s:h("cssFontAttr", { "fg": s:dark_yellow })
calling function <SNR>2_h('cssFontAttr', {'fg': {'gui': '#D19A66', 'cterm': '173', 'cterm16': '11'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight cssFontAttr guifg= #D19A66 guibg= NONE guisp= NONE gui= NONE ctermfg=173 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 291: call s:h("cssFontDescriptor", { "fg": s:purple })
calling function <SNR>2_h('cssFontDescriptor', {'fg': {'gui': '#C678DD', 'cterm': '170', 'cterm16': '5'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight cssFontDescriptor guifg= #C678DD guibg= NONE guisp= NONE gui= NONE ctermfg=170 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 292: call s:h("cssFunctionName", { "fg": s:blue })
calling function <SNR>2_h('cssFunctionName', {'fg': {'gui': '#61AFEF', 'cterm': '39', 'cterm16': '4'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight cssFunctionName guifg= #61AFEF guibg= NONE guisp= NONE gui= NONE ctermfg=39 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 293: call s:h("cssIdentifier", { "fg": s:blue })
calling function <SNR>2_h('cssIdentifier', {'fg': {'gui': '#61AFEF', 'cterm': '39', 'cterm16': '4'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight cssIdentifier guifg= #61AFEF guibg= NONE guisp= NONE gui= NONE ctermfg=39 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 294: call s:h("cssImportant", { "fg": s:purple })
calling function <SNR>2_h('cssImportant', {'fg': {'gui': '#C678DD', 'cterm': '170', 'cterm16': '5'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight cssImportant guifg= #C678DD guibg= NONE guisp= NONE gui= NONE ctermfg=170 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 295: call s:h("cssInclude", { "fg": s:white })
calling function <SNR>2_h('cssInclude', {'fg': {'gui': '#ABB2BF', 'cterm': '145', 'cterm16': '15'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight cssInclude guifg= #ABB2BF guibg= NONE guisp= NONE gui= NONE ctermfg=145 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 296: call s:h("cssIncludeKeyword", { "fg": s:purple })
calling function <SNR>2_h('cssIncludeKeyword', {'fg': {'gui': '#C678DD', 'cterm': '170', 'cterm16': '5'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight cssIncludeKeyword guifg= #C678DD guibg= NONE guisp= NONE gui= NONE ctermfg=170 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 297: call s:h("cssMediaType", { "fg": s:dark_yellow })
calling function <SNR>2_h('cssMediaType', {'fg': {'gui': '#D19A66', 'cterm': '173', 'cterm16': '11'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight cssMediaType guifg= #D19A66 guibg= NONE guisp= NONE gui= NONE ctermfg=173 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 298: call s:h("cssProp", { "fg": s:white })
calling function <SNR>2_h('cssProp', {'fg': {'gui': '#ABB2BF', 'cterm': '145', 'cterm16': '15'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight cssProp guifg= #ABB2BF guibg= NONE guisp= NONE gui= NONE ctermfg=145 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 299: call s:h("cssPseudoClassId", { "fg": s:dark_yellow })
calling function <SNR>2_h('cssPseudoClassId', {'fg': {'gui': '#D19A66', 'cterm': '173', 'cterm16': '11'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight cssPseudoClassId guifg= #D19A66 guibg= NONE guisp= NONE gui= NONE ctermfg=173 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 300: call s:h("cssSelectorOp", { "fg": s:purple })
calling function <SNR>2_h('cssSelectorOp', {'fg': {'gui': '#C678DD', 'cterm': '170', 'cterm16': '5'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight cssSelectorOp guifg= #C678DD guibg= NONE guisp= NONE gui= NONE ctermfg=170 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 301: call s:h("cssSelectorOp2", { "fg": s:purple })
calling function <SNR>2_h('cssSelectorOp2', {'fg': {'gui': '#C678DD', 'cterm': '170', 'cterm16': '5'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight cssSelectorOp2 guifg= #C678DD guibg= NONE guisp= NONE gui= NONE ctermfg=170 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 302: call s:h("cssTagName", { "fg": s:red })
calling function <SNR>2_h('cssTagName', {'fg': {'gui': '#E06C75', 'cterm': '204', 'cterm16': '1'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight cssTagName guifg= #E06C75 guibg= NONE guisp= NONE gui= NONE ctermfg=204 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 303: 
line 304: " Fish Shell
line 305: call s:h("fishKeyword", { "fg": s:purple })
calling function <SNR>2_h('fishKeyword', {'fg': {'gui': '#C678DD', 'cterm': '170', 'cterm16': '5'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight fishKeyword guifg= #C678DD guibg= NONE guisp= NONE gui= NONE ctermfg=170 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 306: call s:h("fishConditional", { "fg": s:purple })
calling function <SNR>2_h('fishConditional', {'fg': {'gui': '#C678DD', 'cterm': '170', 'cterm16': '5'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight fishConditional guifg= #C678DD guibg= NONE guisp= NONE gui= NONE ctermfg=170 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 307: 
line 308: " Go
line 309: call s:h("goDeclaration", { "fg": s:purple })
calling function <SNR>2_h('goDeclaration', {'fg': {'gui': '#C678DD', 'cterm': '170', 'cterm16': '5'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight goDeclaration guifg= #C678DD guibg= NONE guisp= NONE gui= NONE ctermfg=170 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 310: call s:h("goBuiltins", { "fg": s:cyan })
calling function <SNR>2_h('goBuiltins', {'fg': {'gui': '#56B6C2', 'cterm': '38', 'cterm16': '6'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight goBuiltins guifg= #56B6C2 guibg= NONE guisp= NONE gui= NONE ctermfg=38 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 311: call s:h("goFunctionCall", { "fg": s:blue })
calling function <SNR>2_h('goFunctionCall', {'fg': {'gui': '#61AFEF', 'cterm': '39', 'cterm16': '4'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight goFunctionCall guifg= #61AFEF guibg= NONE guisp= NONE gui= NONE ctermfg=39 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 312: call s:h("goVarDefs", { "fg": s:red })
calling function <SNR>2_h('goVarDefs', {'fg': {'gui': '#E06C75', 'cterm': '204', 'cterm16': '1'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight goVarDefs guifg= #E06C75 guibg= NONE guisp= NONE gui= NONE ctermfg=204 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 313: call s:h("goVarAssign", { "fg": s:red })
calling function <SNR>2_h('goVarAssign', {'fg': {'gui': '#E06C75', 'cterm': '204', 'cterm16': '1'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight goVarAssign guifg= #E06C75 guibg= NONE guisp= NONE gui= NONE ctermfg=204 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 314: call s:h("goVar", { "fg": s:purple })
calling function <SNR>2_h('goVar', {'fg': {'gui': '#C678DD', 'cterm': '170', 'cterm16': '5'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight goVar guifg= #C678DD guibg= NONE guisp= NONE gui= NONE ctermfg=170 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 315: call s:h("goConst", { "fg": s:purple })
calling function <SNR>2_h('goConst', {'fg': {'gui': '#C678DD', 'cterm': '170', 'cterm16': '5'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight goConst guifg= #C678DD guibg= NONE guisp= NONE gui= NONE ctermfg=170 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 316: call s:h("goType", { "fg": s:yellow })
calling function <SNR>2_h('goType', {'fg': {'gui': '#E5C07B', 'cterm': '180', 'cterm16': '3'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight goType guifg= #E5C07B guibg= NONE guisp= NONE gui= NONE ctermfg=180 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 317: call s:h("goTypeName", { "fg": s:yellow })
calling function <SNR>2_h('goTypeName', {'fg': {'gui': '#E5C07B', 'cterm': '180', 'cterm16': '3'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight goTypeName guifg= #E5C07B guibg= NONE guisp= NONE gui= NONE ctermfg=180 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 318: call s:h("goDeclType", { "fg": s:cyan })
calling function <SNR>2_h('goDeclType', {'fg': {'gui': '#56B6C2', 'cterm': '38', 'cterm16': '6'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight goDeclType guifg= #56B6C2 guibg= NONE guisp= NONE gui= NONE ctermfg=38 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 319: call s:h("goTypeDecl", { "fg": s:purple })
calling function <SNR>2_h('goTypeDecl', {'fg': {'gui': '#C678DD', 'cterm': '170', 'cterm16': '5'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight goTypeDecl guifg= #C678DD guibg= NONE guisp= NONE gui= NONE ctermfg=170 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 320: 
line 321: " HTML (keep consistent with Markdown, below)
line 322: call s:h("htmlArg", { "fg": s:dark_yellow })
calling function <SNR>2_h('htmlArg', {'fg': {'gui': '#D19A66', 'cterm': '173', 'cterm16': '11'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight htmlArg guifg= #D19A66 guibg= NONE guisp= NONE gui= NONE ctermfg=173 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 323: call s:h("htmlBold", { "fg": s:dark_yellow, "gui": "bold", "cterm": "bold" })
calling function <SNR>2_h('htmlBold', {'gui': 'bold', 'fg': {'gui': '#D19A66...73', 'cterm16': '11'}, 'cterm': 'bold'})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight htmlBold guifg= #D19A66 guibg= NONE guisp= NONE gui= bold ctermfg=173 ctermbg=NONE cterm= bold
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 324: call s:h("htmlEndTag", { "fg": s:white })
calling function <SNR>2_h('htmlEndTag', {'fg': {'gui': '#ABB2BF', 'cterm': '145', 'cterm16': '15'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight htmlEndTag guifg= #ABB2BF guibg= NONE guisp= NONE gui= NONE ctermfg=145 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 325: call s:h("htmlH1", { "fg": s:red })
calling function <SNR>2_h('htmlH1', {'fg': {'gui': '#E06C75', 'cterm': '204', 'cterm16': '1'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight htmlH1 guifg= #E06C75 guibg= NONE guisp= NONE gui= NONE ctermfg=204 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 326: call s:h("htmlH2", { "fg": s:red })
calling function <SNR>2_h('htmlH2', {'fg': {'gui': '#E06C75', 'cterm': '204', 'cterm16': '1'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight htmlH2 guifg= #E06C75 guibg= NONE guisp= NONE gui= NONE ctermfg=204 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 327: call s:h("htmlH3", { "fg": s:red })
calling function <SNR>2_h('htmlH3', {'fg': {'gui': '#E06C75', 'cterm': '204', 'cterm16': '1'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight htmlH3 guifg= #E06C75 guibg= NONE guisp= NONE gui= NONE ctermfg=204 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 328: call s:h("htmlH4", { "fg": s:red })
calling function <SNR>2_h('htmlH4', {'fg': {'gui': '#E06C75', 'cterm': '204', 'cterm16': '1'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight htmlH4 guifg= #E06C75 guibg= NONE guisp= NONE gui= NONE ctermfg=204 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 329: call s:h("htmlH5", { "fg": s:red })
calling function <SNR>2_h('htmlH5', {'fg': {'gui': '#E06C75', 'cterm': '204', 'cterm16': '1'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight htmlH5 guifg= #E06C75 guibg= NONE guisp= NONE gui= NONE ctermfg=204 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 330: call s:h("htmlH6", { "fg": s:red })
calling function <SNR>2_h('htmlH6', {'fg': {'gui': '#E06C75', 'cterm': '204', 'cterm16': '1'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight htmlH6 guifg= #E06C75 guibg= NONE guisp= NONE gui= NONE ctermfg=204 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 331: call s:h("htmlItalic", { "fg": s:purple, "gui": "italic", "cterm": "italic" })
calling function <SNR>2_h('htmlItalic', {'gui': 'italic', 'fg': {'gui': '#C678...0', 'cterm16': '5'}, 'cterm': 'italic'})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight htmlItalic guifg= #C678DD guibg= NONE guisp= NONE gui= NONE ctermfg=170 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 332: call s:h("htmlLink", { "fg": s:cyan, "gui": "underline", "cterm": "underline" })
calling function <SNR>2_h('htmlLink', {'gui': 'underline', 'fg': {'gui': '#5... 'cterm16': '6'}, 'cterm': 'underline'})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight htmlLink guifg= #56B6C2 guibg= NONE guisp= NONE gui= underline ctermfg=38 ctermbg=NONE cterm= underline
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 333: call s:h("htmlSpecialChar", { "fg": s:dark_yellow })
calling function <SNR>2_h('htmlSpecialChar', {'fg': {'gui': '#D19A66', 'cterm': '173', 'cterm16': '11'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight htmlSpecialChar guifg= #D19A66 guibg= NONE guisp= NONE gui= NONE ctermfg=173 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 334: call s:h("htmlSpecialTagName", { "fg": s:red })
calling function <SNR>2_h('htmlSpecialTagName', {'fg': {'gui': '#E06C75', 'cterm': '204', 'cterm16': '1'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight htmlSpecialTagName guifg= #E06C75 guibg= NONE guisp= NONE gui= NONE ctermfg=204 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 335: call s:h("htmlTag", { "fg": s:white })
calling function <SNR>2_h('htmlTag', {'fg': {'gui': '#ABB2BF', 'cterm': '145', 'cterm16': '15'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight htmlTag guifg= #ABB2BF guibg= NONE guisp= NONE gui= NONE ctermfg=145 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 336: call s:h("htmlTagN", { "fg": s:red })
calling function <SNR>2_h('htmlTagN', {'fg': {'gui': '#E06C75', 'cterm': '204', 'cterm16': '1'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight htmlTagN guifg= #E06C75 guibg= NONE guisp= NONE gui= NONE ctermfg=204 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 337: call s:h("htmlTagName", { "fg": s:red })
calling function <SNR>2_h('htmlTagName', {'fg': {'gui': '#E06C75', 'cterm': '204', 'cterm16': '1'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight htmlTagName guifg= #E06C75 guibg= NONE guisp= NONE gui= NONE ctermfg=204 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 338: call s:h("htmlTitle", { "fg": s:white })
calling function <SNR>2_h('htmlTitle', {'fg': {'gui': '#ABB2BF', 'cterm': '145', 'cterm16': '15'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight htmlTitle guifg= #ABB2BF guibg= NONE guisp= NONE gui= NONE ctermfg=145 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 339: 
line 340: " JavaScript
line 341: call s:h("javaScriptBraces", { "fg": s:white })
calling function <SNR>2_h('javaScriptBraces', {'fg': {'gui': '#ABB2BF', 'cterm': '145', 'cterm16': '15'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight javaScriptBraces guifg= #ABB2BF guibg= NONE guisp= NONE gui= NONE ctermfg=145 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 342: call s:h("javaScriptFunction", { "fg": s:purple })
calling function <SNR>2_h('javaScriptFunction', {'fg': {'gui': '#C678DD', 'cterm': '170', 'cterm16': '5'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight javaScriptFunction guifg= #C678DD guibg= NONE guisp= NONE gui= NONE ctermfg=170 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 343: call s:h("javaScriptIdentifier", { "fg": s:purple })
calling function <SNR>2_h('javaScriptIdentifier', {'fg': {'gui': '#C678DD', 'cterm': '170', 'cterm16': '5'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight javaScriptIdentifier guifg= #C678DD guibg= NONE guisp= NONE gui= NONE ctermfg=170 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 344: call s:h("javaScriptNull", { "fg": s:dark_yellow })
calling function <SNR>2_h('javaScriptNull', {'fg': {'gui': '#D19A66', 'cterm': '173', 'cterm16': '11'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight javaScriptNull guifg= #D19A66 guibg= NONE guisp= NONE gui= NONE ctermfg=173 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 345: call s:h("javaScriptNumber", { "fg": s:dark_yellow })
calling function <SNR>2_h('javaScriptNumber', {'fg': {'gui': '#D19A66', 'cterm': '173', 'cterm16': '11'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight javaScriptNumber guifg= #D19A66 guibg= NONE guisp= NONE gui= NONE ctermfg=173 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 346: call s:h("javaScriptRequire", { "fg": s:cyan })
calling function <SNR>2_h('javaScriptRequire', {'fg': {'gui': '#56B6C2', 'cterm': '38', 'cterm16': '6'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight javaScriptRequire guifg= #56B6C2 guibg= NONE guisp= NONE gui= NONE ctermfg=38 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 347: call s:h("javaScriptReserved", { "fg": s:purple })
calling function <SNR>2_h('javaScriptReserved', {'fg': {'gui': '#C678DD', 'cterm': '170', 'cterm16': '5'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight javaScriptReserved guifg= #C678DD guibg= NONE guisp= NONE gui= NONE ctermfg=170 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 348: " https://github.com/pangloss/vim-javascript
line 349: call s:h("jsArrowFunction", { "fg": s:purple })
calling function <SNR>2_h('jsArrowFunction', {'fg': {'gui': '#C678DD', 'cterm': '170', 'cterm16': '5'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight jsArrowFunction guifg= #C678DD guibg= NONE guisp= NONE gui= NONE ctermfg=170 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 350: call s:h("jsClassKeyword", { "fg": s:purple })
calling function <SNR>2_h('jsClassKeyword', {'fg': {'gui': '#C678DD', 'cterm': '170', 'cterm16': '5'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight jsClassKeyword guifg= #C678DD guibg= NONE guisp= NONE gui= NONE ctermfg=170 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 351: call s:h("jsClassMethodType", { "fg": s:purple })
calling function <SNR>2_h('jsClassMethodType', {'fg': {'gui': '#C678DD', 'cterm': '170', 'cterm16': '5'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight jsClassMethodType guifg= #C678DD guibg= NONE guisp= NONE gui= NONE ctermfg=170 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 352: call s:h("jsDocParam", { "fg": s:blue })
calling function <SNR>2_h('jsDocParam', {'fg': {'gui': '#61AFEF', 'cterm': '39', 'cterm16': '4'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight jsDocParam guifg= #61AFEF guibg= NONE guisp= NONE gui= NONE ctermfg=39 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 353: call s:h("jsDocTags", { "fg": s:purple })
calling function <SNR>2_h('jsDocTags', {'fg': {'gui': '#C678DD', 'cterm': '170', 'cterm16': '5'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight jsDocTags guifg= #C678DD guibg= NONE guisp= NONE gui= NONE ctermfg=170 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 354: call s:h("jsExport", { "fg": s:purple })
calling function <SNR>2_h('jsExport', {'fg': {'gui': '#C678DD', 'cterm': '170', 'cterm16': '5'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight jsExport guifg= #C678DD guibg= NONE guisp= NONE gui= NONE ctermfg=170 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 355: call s:h("jsExportDefault", { "fg": s:purple })
calling function <SNR>2_h('jsExportDefault', {'fg': {'gui': '#C678DD', 'cterm': '170', 'cterm16': '5'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight jsExportDefault guifg= #C678DD guibg= NONE guisp= NONE gui= NONE ctermfg=170 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 356: call s:h("jsExtendsKeyword", { "fg": s:purple })
calling function <SNR>2_h('jsExtendsKeyword', {'fg': {'gui': '#C678DD', 'cterm': '170', 'cterm16': '5'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight jsExtendsKeyword guifg= #C678DD guibg= NONE guisp= NONE gui= NONE ctermfg=170 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 357: call s:h("jsFrom", { "fg": s:purple })
calling function <SNR>2_h('jsFrom', {'fg': {'gui': '#C678DD', 'cterm': '170', 'cterm16': '5'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight jsFrom guifg= #C678DD guibg= NONE guisp= NONE gui= NONE ctermfg=170 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 358: call s:h("jsFuncCall", { "fg": s:blue })
calling function <SNR>2_h('jsFuncCall', {'fg': {'gui': '#61AFEF', 'cterm': '39', 'cterm16': '4'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight jsFuncCall guifg= #61AFEF guibg= NONE guisp= NONE gui= NONE ctermfg=39 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 359: call s:h("jsFunction", { "fg": s:purple })
calling function <SNR>2_h('jsFunction', {'fg': {'gui': '#C678DD', 'cterm': '170', 'cterm16': '5'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight jsFunction guifg= #C678DD guibg= NONE guisp= NONE gui= NONE ctermfg=170 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 360: call s:h("jsGenerator", { "fg": s:yellow })
calling function <SNR>2_h('jsGenerator', {'fg': {'gui': '#E5C07B', 'cterm': '180', 'cterm16': '3'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight jsGenerator guifg= #E5C07B guibg= NONE guisp= NONE gui= NONE ctermfg=180 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 361: call s:h("jsGlobalObjects", { "fg": s:yellow })
calling function <SNR>2_h('jsGlobalObjects', {'fg': {'gui': '#E5C07B', 'cterm': '180', 'cterm16': '3'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight jsGlobalObjects guifg= #E5C07B guibg= NONE guisp= NONE gui= NONE ctermfg=180 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 362: call s:h("jsImport", { "fg": s:purple })
calling function <SNR>2_h('jsImport', {'fg': {'gui': '#C678DD', 'cterm': '170', 'cterm16': '5'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight jsImport guifg= #C678DD guibg= NONE guisp= NONE gui= NONE ctermfg=170 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 363: call s:h("jsModuleAs", { "fg": s:purple })
calling function <SNR>2_h('jsModuleAs', {'fg': {'gui': '#C678DD', 'cterm': '170', 'cterm16': '5'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight jsModuleAs guifg= #C678DD guibg= NONE guisp= NONE gui= NONE ctermfg=170 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 364: call s:h("jsModuleWords", { "fg": s:purple })
calling function <SNR>2_h('jsModuleWords', {'fg': {'gui': '#C678DD', 'cterm': '170', 'cterm16': '5'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight jsModuleWords guifg= #C678DD guibg= NONE guisp= NONE gui= NONE ctermfg=170 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 365: call s:h("jsModules", { "fg": s:purple })
calling function <SNR>2_h('jsModules', {'fg': {'gui': '#C678DD', 'cterm': '170', 'cterm16': '5'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight jsModules guifg= #C678DD guibg= NONE guisp= NONE gui= NONE ctermfg=170 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 366: call s:h("jsNull", { "fg": s:dark_yellow })
calling function <SNR>2_h('jsNull', {'fg': {'gui': '#D19A66', 'cterm': '173', 'cterm16': '11'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight jsNull guifg= #D19A66 guibg= NONE guisp= NONE gui= NONE ctermfg=173 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 367: call s:h("jsOperator", { "fg": s:purple })
calling function <SNR>2_h('jsOperator', {'fg': {'gui': '#C678DD', 'cterm': '170', 'cterm16': '5'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight jsOperator guifg= #C678DD guibg= NONE guisp= NONE gui= NONE ctermfg=170 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 368: call s:h("jsStorageClass", { "fg": s:purple })
calling function <SNR>2_h('jsStorageClass', {'fg': {'gui': '#C678DD', 'cterm': '170', 'cterm16': '5'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight jsStorageClass guifg= #C678DD guibg= NONE guisp= NONE gui= NONE ctermfg=170 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 369: call s:h("jsSuper", { "fg": s:red })
calling function <SNR>2_h('jsSuper', {'fg': {'gui': '#E06C75', 'cterm': '204', 'cterm16': '1'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight jsSuper guifg= #E06C75 guibg= NONE guisp= NONE gui= NONE ctermfg=204 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 370: call s:h("jsTemplateBraces", { "fg": s:dark_red })
calling function <SNR>2_h('jsTemplateBraces', {'fg': {'gui': '#BE5046', 'cterm': '196', 'cterm16': '9'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight jsTemplateBraces guifg= #BE5046 guibg= NONE guisp= NONE gui= NONE ctermfg=196 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 371: call s:h("jsTemplateVar", { "fg": s:green })
calling function <SNR>2_h('jsTemplateVar', {'fg': {'gui': '#98C379', 'cterm': '114', 'cterm16': '2'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight jsTemplateVar guifg= #98C379 guibg= NONE guisp= NONE gui= NONE ctermfg=114 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 372: call s:h("jsThis", { "fg": s:red })
calling function <SNR>2_h('jsThis', {'fg': {'gui': '#E06C75', 'cterm': '204', 'cterm16': '1'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight jsThis guifg= #E06C75 guibg= NONE guisp= NONE gui= NONE ctermfg=204 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 373: call s:h("jsUndefined", { "fg": s:dark_yellow })
calling function <SNR>2_h('jsUndefined', {'fg': {'gui': '#D19A66', 'cterm': '173', 'cterm16': '11'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight jsUndefined guifg= #D19A66 guibg= NONE guisp= NONE gui= NONE ctermfg=173 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 374: " https://github.com/othree/yajs.vim
line 375: call s:h("javascriptArrowFunc", { "fg": s:purple })
calling function <SNR>2_h('javascriptArrowFunc', {'fg': {'gui': '#C678DD', 'cterm': '170', 'cterm16': '5'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight javascriptArrowFunc guifg= #C678DD guibg= NONE guisp= NONE gui= NONE ctermfg=170 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 376: call s:h("javascriptClassExtends", { "fg": s:purple })
calling function <SNR>2_h('javascriptClassExtends', {'fg': {'gui': '#C678DD', 'cterm': '170', 'cterm16': '5'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight javascriptClassExtends guifg= #C678DD guibg= NONE guisp= NONE gui= NONE ctermfg=170 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 377: call s:h("javascriptClassKeyword", { "fg": s:purple })
calling function <SNR>2_h('javascriptClassKeyword', {'fg': {'gui': '#C678DD', 'cterm': '170', 'cterm16': '5'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight javascriptClassKeyword guifg= #C678DD guibg= NONE guisp= NONE gui= NONE ctermfg=170 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 378: call s:h("javascriptDocNotation", { "fg": s:purple })
calling function <SNR>2_h('javascriptDocNotation', {'fg': {'gui': '#C678DD', 'cterm': '170', 'cterm16': '5'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight javascriptDocNotation guifg= #C678DD guibg= NONE guisp= NONE gui= NONE ctermfg=170 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 379: call s:h("javascriptDocParamName", { "fg": s:blue })
calling function <SNR>2_h('javascriptDocParamName', {'fg': {'gui': '#61AFEF', 'cterm': '39', 'cterm16': '4'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight javascriptDocParamName guifg= #61AFEF guibg= NONE guisp= NONE gui= NONE ctermfg=39 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 380: call s:h("javascriptDocTags", { "fg": s:purple })
calling function <SNR>2_h('javascriptDocTags', {'fg': {'gui': '#C678DD', 'cterm': '170', 'cterm16': '5'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight javascriptDocTags guifg= #C678DD guibg= NONE guisp= NONE gui= NONE ctermfg=170 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 381: call s:h("javascriptEndColons", { "fg": s:white })
calling function <SNR>2_h('javascriptEndColons', {'fg': {'gui': '#ABB2BF', 'cterm': '145', 'cterm16': '15'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight javascriptEndColons guifg= #ABB2BF guibg= NONE guisp= NONE gui= NONE ctermfg=145 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 382: call s:h("javascriptExport", { "fg": s:purple })
calling function <SNR>2_h('javascriptExport', {'fg': {'gui': '#C678DD', 'cterm': '170', 'cterm16': '5'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight javascriptExport guifg= #C678DD guibg= NONE guisp= NONE gui= NONE ctermfg=170 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 383: call s:h("javascriptFuncArg", { "fg": s:white })
calling function <SNR>2_h('javascriptFuncArg', {'fg': {'gui': '#ABB2BF', 'cterm': '145', 'cterm16': '15'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight javascriptFuncArg guifg= #ABB2BF guibg= NONE guisp= NONE gui= NONE ctermfg=145 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 384: call s:h("javascriptFuncKeyword", { "fg": s:purple })
calling function <SNR>2_h('javascriptFuncKeyword', {'fg': {'gui': '#C678DD', 'cterm': '170', 'cterm16': '5'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight javascriptFuncKeyword guifg= #C678DD guibg= NONE guisp= NONE gui= NONE ctermfg=170 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 385: call s:h("javascriptIdentifier", { "fg": s:red })
calling function <SNR>2_h('javascriptIdentifier', {'fg': {'gui': '#E06C75', 'cterm': '204', 'cterm16': '1'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight javascriptIdentifier guifg= #E06C75 guibg= NONE guisp= NONE gui= NONE ctermfg=204 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 386: call s:h("javascriptImport", { "fg": s:purple })
calling function <SNR>2_h('javascriptImport', {'fg': {'gui': '#C678DD', 'cterm': '170', 'cterm16': '5'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight javascriptImport guifg= #C678DD guibg= NONE guisp= NONE gui= NONE ctermfg=170 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 387: call s:h("javascriptMethodName", { "fg": s:white })
calling function <SNR>2_h('javascriptMethodName', {'fg': {'gui': '#ABB2BF', 'cterm': '145', 'cterm16': '15'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight javascriptMethodName guifg= #ABB2BF guibg= NONE guisp= NONE gui= NONE ctermfg=145 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 388: call s:h("javascriptObjectLabel", { "fg": s:white })
calling function <SNR>2_h('javascriptObjectLabel', {'fg': {'gui': '#ABB2BF', 'cterm': '145', 'cterm16': '15'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight javascriptObjectLabel guifg= #ABB2BF guibg= NONE guisp= NONE gui= NONE ctermfg=145 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 389: call s:h("javascriptOpSymbol", { "fg": s:cyan })
calling function <SNR>2_h('javascriptOpSymbol', {'fg': {'gui': '#56B6C2', 'cterm': '38', 'cterm16': '6'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight javascriptOpSymbol guifg= #56B6C2 guibg= NONE guisp= NONE gui= NONE ctermfg=38 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 390: call s:h("javascriptOpSymbols", { "fg": s:cyan })
calling function <SNR>2_h('javascriptOpSymbols', {'fg': {'gui': '#56B6C2', 'cterm': '38', 'cterm16': '6'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight javascriptOpSymbols guifg= #56B6C2 guibg= NONE guisp= NONE gui= NONE ctermfg=38 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 391: call s:h("javascriptPropertyName", { "fg": s:green })
calling function <SNR>2_h('javascriptPropertyName', {'fg': {'gui': '#98C379', 'cterm': '114', 'cterm16': '2'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight javascriptPropertyName guifg= #98C379 guibg= NONE guisp= NONE gui= NONE ctermfg=114 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 392: call s:h("javascriptTemplateSB", { "fg": s:dark_red })
calling function <SNR>2_h('javascriptTemplateSB', {'fg': {'gui': '#BE5046', 'cterm': '196', 'cterm16': '9'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight javascriptTemplateSB guifg= #BE5046 guibg= NONE guisp= NONE gui= NONE ctermfg=196 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 393: call s:h("javascriptVariable", { "fg": s:purple })
calling function <SNR>2_h('javascriptVariable', {'fg': {'gui': '#C678DD', 'cterm': '170', 'cterm16': '5'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight javascriptVariable guifg= #C678DD guibg= NONE guisp= NONE gui= NONE ctermfg=170 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 394: 
line 395: " JSON
line 396: call s:h("jsonCommentError", { "fg": s:white })
calling function <SNR>2_h('jsonCommentError', {'fg': {'gui': '#ABB2BF', 'cterm': '145', 'cterm16': '15'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight jsonCommentError guifg= #ABB2BF guibg= NONE guisp= NONE gui= NONE ctermfg=145 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 397: call s:h("jsonKeyword", { "fg": s:red })
calling function <SNR>2_h('jsonKeyword', {'fg': {'gui': '#E06C75', 'cterm': '204', 'cterm16': '1'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight jsonKeyword guifg= #E06C75 guibg= NONE guisp= NONE gui= NONE ctermfg=204 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 398: call s:h("jsonBoolean", { "fg": s:dark_yellow })
calling function <SNR>2_h('jsonBoolean', {'fg': {'gui': '#D19A66', 'cterm': '173', 'cterm16': '11'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight jsonBoolean guifg= #D19A66 guibg= NONE guisp= NONE gui= NONE ctermfg=173 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 399: call s:h("jsonNumber", { "fg": s:dark_yellow })
calling function <SNR>2_h('jsonNumber', {'fg': {'gui': '#D19A66', 'cterm': '173', 'cterm16': '11'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight jsonNumber guifg= #D19A66 guibg= NONE guisp= NONE gui= NONE ctermfg=173 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 400: call s:h("jsonQuote", { "fg": s:white })
calling function <SNR>2_h('jsonQuote', {'fg': {'gui': '#ABB2BF', 'cterm': '145', 'cterm16': '15'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight jsonQuote guifg= #ABB2BF guibg= NONE guisp= NONE gui= NONE ctermfg=145 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 401: call s:h("jsonMissingCommaError", { "fg": s:red, "gui": "reverse" })
calling function <SNR>2_h('jsonMissingCommaError', {'gui': 'reverse', 'fg': {'gui': '#E06C75', 'cterm': '204', 'cterm16': '1'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight jsonMissingCommaError guifg= #E06C75 guibg= NONE guisp= NONE gui= reverse ctermfg=204 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 402: call s:h("jsonNoQuotesError", { "fg": s:red, "gui": "reverse" })
calling function <SNR>2_h('jsonNoQuotesError', {'gui': 'reverse', 'fg': {'gui': '#E06C75', 'cterm': '204', 'cterm16': '1'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight jsonNoQuotesError guifg= #E06C75 guibg= NONE guisp= NONE gui= reverse ctermfg=204 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 403: call s:h("jsonNumError", { "fg": s:red, "gui": "reverse" })
calling function <SNR>2_h('jsonNumError', {'gui': 'reverse', 'fg': {'gui': '#E06C75', 'cterm': '204', 'cterm16': '1'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight jsonNumError guifg= #E06C75 guibg= NONE guisp= NONE gui= reverse ctermfg=204 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 404: call s:h("jsonString", { "fg": s:green })
calling function <SNR>2_h('jsonString', {'fg': {'gui': '#98C379', 'cterm': '114', 'cterm16': '2'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight jsonString guifg= #98C379 guibg= NONE guisp= NONE gui= NONE ctermfg=114 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 405: call s:h("jsonStringSQError", { "fg": s:red, "gui": "reverse" })
calling function <SNR>2_h('jsonStringSQError', {'gui': 'reverse', 'fg': {'gui': '#E06C75', 'cterm': '204', 'cterm16': '1'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight jsonStringSQError guifg= #E06C75 guibg= NONE guisp= NONE gui= reverse ctermfg=204 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 406: call s:h("jsonSemicolonError", { "fg": s:red, "gui": "reverse" })
calling function <SNR>2_h('jsonSemicolonError', {'gui': 'reverse', 'fg': {'gui': '#E06C75', 'cterm': '204', 'cterm16': '1'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight jsonSemicolonError guifg= #E06C75 guibg= NONE guisp= NONE gui= reverse ctermfg=204 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 407: 
line 408: " LESS
line 409: call s:h("lessVariable", { "fg": s:purple })
calling function <SNR>2_h('lessVariable', {'fg': {'gui': '#C678DD', 'cterm': '170', 'cterm16': '5'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight lessVariable guifg= #C678DD guibg= NONE guisp= NONE gui= NONE ctermfg=170 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 410: call s:h("lessAmpersandChar", { "fg": s:white })
calling function <SNR>2_h('lessAmpersandChar', {'fg': {'gui': '#ABB2BF', 'cterm': '145', 'cterm16': '15'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight lessAmpersandChar guifg= #ABB2BF guibg= NONE guisp= NONE gui= NONE ctermfg=145 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 411: call s:h("lessClass", { "fg": s:dark_yellow })
calling function <SNR>2_h('lessClass', {'fg': {'gui': '#D19A66', 'cterm': '173', 'cterm16': '11'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight lessClass guifg= #D19A66 guibg= NONE guisp= NONE gui= NONE ctermfg=173 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 412: 
line 413: " Markdown (keep consistent with HTML, above)
line 414: call s:h("markdownBlockquote", { "fg": s:comment_grey })
calling function <SNR>2_h('markdownBlockquote', {'fg': {'gui': '#5C6370', 'cterm': '59', 'cterm16': '7'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight markdownBlockquote guifg= #5C6370 guibg= NONE guisp= NONE gui= NONE ctermfg=59 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 415: call s:h("markdownBold", { "fg": s:dark_yellow, "gui": "bold", "cterm": "bold" })
calling function <SNR>2_h('markdownBold', {'gui': 'bold', 'fg': {'gui': '#D19A66...73', 'cterm16': '11'}, 'cterm': 'bold'})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight markdownBold guifg= #D19A66 guibg= NONE guisp= NONE gui= bold ctermfg=173 ctermbg=NONE cterm= bold
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 416: call s:h("markdownCode", { "fg": s:green })
calling function <SNR>2_h('markdownCode', {'fg': {'gui': '#98C379', 'cterm': '114', 'cterm16': '2'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight markdownCode guifg= #98C379 guibg= NONE guisp= NONE gui= NONE ctermfg=114 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 417: call s:h("markdownCodeBlock", { "fg": s:green })
calling function <SNR>2_h('markdownCodeBlock', {'fg': {'gui': '#98C379', 'cterm': '114', 'cterm16': '2'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight markdownCodeBlock guifg= #98C379 guibg= NONE guisp= NONE gui= NONE ctermfg=114 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 418: call s:h("markdownCodeDelimiter", { "fg": s:green })
calling function <SNR>2_h('markdownCodeDelimiter', {'fg': {'gui': '#98C379', 'cterm': '114', 'cterm16': '2'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight markdownCodeDelimiter guifg= #98C379 guibg= NONE guisp= NONE gui= NONE ctermfg=114 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 419: call s:h("markdownH1", { "fg": s:red })
calling function <SNR>2_h('markdownH1', {'fg': {'gui': '#E06C75', 'cterm': '204', 'cterm16': '1'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight markdownH1 guifg= #E06C75 guibg= NONE guisp= NONE gui= NONE ctermfg=204 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 420: call s:h("markdownH2", { "fg": s:red })
calling function <SNR>2_h('markdownH2', {'fg': {'gui': '#E06C75', 'cterm': '204', 'cterm16': '1'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight markdownH2 guifg= #E06C75 guibg= NONE guisp= NONE gui= NONE ctermfg=204 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 421: call s:h("markdownH3", { "fg": s:red })
calling function <SNR>2_h('markdownH3', {'fg': {'gui': '#E06C75', 'cterm': '204', 'cterm16': '1'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight markdownH3 guifg= #E06C75 guibg= NONE guisp= NONE gui= NONE ctermfg=204 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 422: call s:h("markdownH4", { "fg": s:red })
calling function <SNR>2_h('markdownH4', {'fg': {'gui': '#E06C75', 'cterm': '204', 'cterm16': '1'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight markdownH4 guifg= #E06C75 guibg= NONE guisp= NONE gui= NONE ctermfg=204 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 423: call s:h("markdownH5", { "fg": s:red })
calling function <SNR>2_h('markdownH5', {'fg': {'gui': '#E06C75', 'cterm': '204', 'cterm16': '1'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight markdownH5 guifg= #E06C75 guibg= NONE guisp= NONE gui= NONE ctermfg=204 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 424: call s:h("markdownH6", { "fg": s:red })
calling function <SNR>2_h('markdownH6', {'fg': {'gui': '#E06C75', 'cterm': '204', 'cterm16': '1'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight markdownH6 guifg= #E06C75 guibg= NONE guisp= NONE gui= NONE ctermfg=204 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 425: call s:h("markdownHeadingDelimiter", { "fg": s:red })
calling function <SNR>2_h('markdownHeadingDelimiter', {'fg': {'gui': '#E06C75', 'cterm': '204', 'cterm16': '1'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight markdownHeadingDelimiter guifg= #E06C75 guibg= NONE guisp= NONE gui= NONE ctermfg=204 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 426: call s:h("markdownHeadingRule", { "fg": s:comment_grey })
calling function <SNR>2_h('markdownHeadingRule', {'fg': {'gui': '#5C6370', 'cterm': '59', 'cterm16': '7'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight markdownHeadingRule guifg= #5C6370 guibg= NONE guisp= NONE gui= NONE ctermfg=59 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 427: call s:h("markdownId", { "fg": s:purple })
calling function <SNR>2_h('markdownId', {'fg': {'gui': '#C678DD', 'cterm': '170', 'cterm16': '5'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight markdownId guifg= #C678DD guibg= NONE guisp= NONE gui= NONE ctermfg=170 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 428: call s:h("markdownIdDeclaration", { "fg": s:blue })
calling function <SNR>2_h('markdownIdDeclaration', {'fg': {'gui': '#61AFEF', 'cterm': '39', 'cterm16': '4'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight markdownIdDeclaration guifg= #61AFEF guibg= NONE guisp= NONE gui= NONE ctermfg=39 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 429: call s:h("markdownIdDelimiter", { "fg": s:purple })
calling function <SNR>2_h('markdownIdDelimiter', {'fg': {'gui': '#C678DD', 'cterm': '170', 'cterm16': '5'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight markdownIdDelimiter guifg= #C678DD guibg= NONE guisp= NONE gui= NONE ctermfg=170 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 430: call s:h("markdownItalic", { "fg": s:purple, "gui": "italic", "cterm": "italic" })
calling function <SNR>2_h('markdownItalic', {'gui': 'italic', 'fg': {'gui': '#C678...0', 'cterm16': '5'}, 'cterm': 'italic'})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight markdownItalic guifg= #C678DD guibg= NONE guisp= NONE gui= NONE ctermfg=170 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 431: call s:h("markdownLinkDelimiter", { "fg": s:purple })
calling function <SNR>2_h('markdownLinkDelimiter', {'fg': {'gui': '#C678DD', 'cterm': '170', 'cterm16': '5'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight markdownLinkDelimiter guifg= #C678DD guibg= NONE guisp= NONE gui= NONE ctermfg=170 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 432: call s:h("markdownLinkText", { "fg": s:blue })
calling function <SNR>2_h('markdownLinkText', {'fg': {'gui': '#61AFEF', 'cterm': '39', 'cterm16': '4'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight markdownLinkText guifg= #61AFEF guibg= NONE guisp= NONE gui= NONE ctermfg=39 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 433: call s:h("markdownListMarker", { "fg": s:red })
calling function <SNR>2_h('markdownListMarker', {'fg': {'gui': '#E06C75', 'cterm': '204', 'cterm16': '1'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight markdownListMarker guifg= #E06C75 guibg= NONE guisp= NONE gui= NONE ctermfg=204 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 434: call s:h("markdownOrderedListMarker", { "fg": s:red })
calling function <SNR>2_h('markdownOrderedListMarker', {'fg': {'gui': '#E06C75', 'cterm': '204', 'cterm16': '1'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight markdownOrderedListMarker guifg= #E06C75 guibg= NONE guisp= NONE gui= NONE ctermfg=204 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 435: call s:h("markdownRule", { "fg": s:comment_grey })
calling function <SNR>2_h('markdownRule', {'fg': {'gui': '#5C6370', 'cterm': '59', 'cterm16': '7'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight markdownRule guifg= #5C6370 guibg= NONE guisp= NONE gui= NONE ctermfg=59 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 436: call s:h("markdownUrl", { "fg": s:cyan, "gui": "underline", "cterm": "underline" })
calling function <SNR>2_h('markdownUrl', {'gui': 'underline', 'fg': {'gui': '#5... 'cterm16': '6'}, 'cterm': 'underline'})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight markdownUrl guifg= #56B6C2 guibg= NONE guisp= NONE gui= underline ctermfg=38 ctermbg=NONE cterm= underline
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 437: 
line 438: " Perl
line 439: call s:h("perlFiledescRead", { "fg": s:green })
calling function <SNR>2_h('perlFiledescRead', {'fg': {'gui': '#98C379', 'cterm': '114', 'cterm16': '2'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight perlFiledescRead guifg= #98C379 guibg= NONE guisp= NONE gui= NONE ctermfg=114 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 440: call s:h("perlFunction", { "fg": s:purple })
calling function <SNR>2_h('perlFunction', {'fg': {'gui': '#C678DD', 'cterm': '170', 'cterm16': '5'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight perlFunction guifg= #C678DD guibg= NONE guisp= NONE gui= NONE ctermfg=170 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 441: call s:h("perlMatchStartEnd",{ "fg": s:blue })
calling function <SNR>2_h('perlMatchStartEnd', {'fg': {'gui': '#61AFEF', 'cterm': '39', 'cterm16': '4'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight perlMatchStartEnd guifg= #61AFEF guibg= NONE guisp= NONE gui= NONE ctermfg=39 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 442: call s:h("perlMethod", { "fg": s:purple })
calling function <SNR>2_h('perlMethod', {'fg': {'gui': '#C678DD', 'cterm': '170', 'cterm16': '5'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight perlMethod guifg= #C678DD guibg= NONE guisp= NONE gui= NONE ctermfg=170 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 443: call s:h("perlPOD", { "fg": s:comment_grey })
calling function <SNR>2_h('perlPOD', {'fg': {'gui': '#5C6370', 'cterm': '59', 'cterm16': '7'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight perlPOD guifg= #5C6370 guibg= NONE guisp= NONE gui= NONE ctermfg=59 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 444: call s:h("perlSharpBang", { "fg": s:comment_grey })
calling function <SNR>2_h('perlSharpBang', {'fg': {'gui': '#5C6370', 'cterm': '59', 'cterm16': '7'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight perlSharpBang guifg= #5C6370 guibg= NONE guisp= NONE gui= NONE ctermfg=59 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 445: call s:h("perlSpecialString",{ "fg": s:dark_yellow })
calling function <SNR>2_h('perlSpecialString', {'fg': {'gui': '#D19A66', 'cterm': '173', 'cterm16': '11'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight perlSpecialString guifg= #D19A66 guibg= NONE guisp= NONE gui= NONE ctermfg=173 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 446: call s:h("perlStatementFiledesc", { "fg": s:red })
calling function <SNR>2_h('perlStatementFiledesc', {'fg': {'gui': '#E06C75', 'cterm': '204', 'cterm16': '1'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight perlStatementFiledesc guifg= #E06C75 guibg= NONE guisp= NONE gui= NONE ctermfg=204 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 447: call s:h("perlStatementFlow",{ "fg": s:red })
calling function <SNR>2_h('perlStatementFlow', {'fg': {'gui': '#E06C75', 'cterm': '204', 'cterm16': '1'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight perlStatementFlow guifg= #E06C75 guibg= NONE guisp= NONE gui= NONE ctermfg=204 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 448: call s:h("perlStatementInclude", { "fg": s:purple })
calling function <SNR>2_h('perlStatementInclude', {'fg': {'gui': '#C678DD', 'cterm': '170', 'cterm16': '5'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight perlStatementInclude guifg= #C678DD guibg= NONE guisp= NONE gui= NONE ctermfg=170 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 449: call s:h("perlStatementScalar",{ "fg": s:purple })
calling function <SNR>2_h('perlStatementScalar', {'fg': {'gui': '#C678DD', 'cterm': '170', 'cterm16': '5'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight perlStatementScalar guifg= #C678DD guibg= NONE guisp= NONE gui= NONE ctermfg=170 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 450: call s:h("perlStatementStorage", { "fg": s:purple })
calling function <SNR>2_h('perlStatementStorage', {'fg': {'gui': '#C678DD', 'cterm': '170', 'cterm16': '5'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight perlStatementStorage guifg= #C678DD guibg= NONE guisp= NONE gui= NONE ctermfg=170 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 451: call s:h("perlSubName",{ "fg": s:yellow })
calling function <SNR>2_h('perlSubName', {'fg': {'gui': '#E5C07B', 'cterm': '180', 'cterm16': '3'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight perlSubName guifg= #E5C07B guibg= NONE guisp= NONE gui= NONE ctermfg=180 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 452: call s:h("perlVarPlain",{ "fg": s:blue })
calling function <SNR>2_h('perlVarPlain', {'fg': {'gui': '#61AFEF', 'cterm': '39', 'cterm16': '4'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight perlVarPlain guifg= #61AFEF guibg= NONE guisp= NONE gui= NONE ctermfg=39 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 453: 
line 454: " PHP
line 455: call s:h("phpVarSelector", { "fg": s:red })
calling function <SNR>2_h('phpVarSelector', {'fg': {'gui': '#E06C75', 'cterm': '204', 'cterm16': '1'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight phpVarSelector guifg= #E06C75 guibg= NONE guisp= NONE gui= NONE ctermfg=204 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 456: call s:h("phpOperator", { "fg": s:white })
calling function <SNR>2_h('phpOperator', {'fg': {'gui': '#ABB2BF', 'cterm': '145', 'cterm16': '15'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight phpOperator guifg= #ABB2BF guibg= NONE guisp= NONE gui= NONE ctermfg=145 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 457: call s:h("phpParent", { "fg": s:white })
calling function <SNR>2_h('phpParent', {'fg': {'gui': '#ABB2BF', 'cterm': '145', 'cterm16': '15'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight phpParent guifg= #ABB2BF guibg= NONE guisp= NONE gui= NONE ctermfg=145 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 458: call s:h("phpMemberSelector", { "fg": s:white })
calling function <SNR>2_h('phpMemberSelector', {'fg': {'gui': '#ABB2BF', 'cterm': '145', 'cterm16': '15'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight phpMemberSelector guifg= #ABB2BF guibg= NONE guisp= NONE gui= NONE ctermfg=145 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 459: call s:h("phpType", { "fg": s:purple })
calling function <SNR>2_h('phpType', {'fg': {'gui': '#C678DD', 'cterm': '170', 'cterm16': '5'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight phpType guifg= #C678DD guibg= NONE guisp= NONE gui= NONE ctermfg=170 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 460: call s:h("phpKeyword", { "fg": s:purple })
calling function <SNR>2_h('phpKeyword', {'fg': {'gui': '#C678DD', 'cterm': '170', 'cterm16': '5'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight phpKeyword guifg= #C678DD guibg= NONE guisp= NONE gui= NONE ctermfg=170 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 461: call s:h("phpClass", { "fg": s:yellow })
calling function <SNR>2_h('phpClass', {'fg': {'gui': '#E5C07B', 'cterm': '180', 'cterm16': '3'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight phpClass guifg= #E5C07B guibg= NONE guisp= NONE gui= NONE ctermfg=180 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 462: call s:h("phpUseClass", { "fg": s:white })
calling function <SNR>2_h('phpUseClass', {'fg': {'gui': '#ABB2BF', 'cterm': '145', 'cterm16': '15'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight phpUseClass guifg= #ABB2BF guibg= NONE guisp= NONE gui= NONE ctermfg=145 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 463: call s:h("phpUseAlias", { "fg": s:white })
calling function <SNR>2_h('phpUseAlias', {'fg': {'gui': '#ABB2BF', 'cterm': '145', 'cterm16': '15'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight phpUseAlias guifg= #ABB2BF guibg= NONE guisp= NONE gui= NONE ctermfg=145 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 464: call s:h("phpInclude", { "fg": s:purple })
calling function <SNR>2_h('phpInclude', {'fg': {'gui': '#C678DD', 'cterm': '170', 'cterm16': '5'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight phpInclude guifg= #C678DD guibg= NONE guisp= NONE gui= NONE ctermfg=170 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 465: call s:h("phpClassExtends", { "fg": s:green })
calling function <SNR>2_h('phpClassExtends', {'fg': {'gui': '#98C379', 'cterm': '114', 'cterm16': '2'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight phpClassExtends guifg= #98C379 guibg= NONE guisp= NONE gui= NONE ctermfg=114 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 466: call s:h("phpDocTags", { "fg": s:white })
calling function <SNR>2_h('phpDocTags', {'fg': {'gui': '#ABB2BF', 'cterm': '145', 'cterm16': '15'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight phpDocTags guifg= #ABB2BF guibg= NONE guisp= NONE gui= NONE ctermfg=145 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 467: call s:h("phpFunction", { "fg": s:blue })
calling function <SNR>2_h('phpFunction', {'fg': {'gui': '#61AFEF', 'cterm': '39', 'cterm16': '4'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight phpFunction guifg= #61AFEF guibg= NONE guisp= NONE gui= NONE ctermfg=39 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 468: call s:h("phpFunctions", { "fg": s:cyan })
calling function <SNR>2_h('phpFunctions', {'fg': {'gui': '#56B6C2', 'cterm': '38', 'cterm16': '6'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight phpFunctions guifg= #56B6C2 guibg= NONE guisp= NONE gui= NONE ctermfg=38 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 469: call s:h("phpMethodsVar", { "fg": s:dark_yellow })
calling function <SNR>2_h('phpMethodsVar', {'fg': {'gui': '#D19A66', 'cterm': '173', 'cterm16': '11'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight phpMethodsVar guifg= #D19A66 guibg= NONE guisp= NONE gui= NONE ctermfg=173 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 470: call s:h("phpMagicConstants", { "fg": s:dark_yellow })
calling function <SNR>2_h('phpMagicConstants', {'fg': {'gui': '#D19A66', 'cterm': '173', 'cterm16': '11'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight phpMagicConstants guifg= #D19A66 guibg= NONE guisp= NONE gui= NONE ctermfg=173 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 471: call s:h("phpSuperglobals", { "fg": s:red })
calling function <SNR>2_h('phpSuperglobals', {'fg': {'gui': '#E06C75', 'cterm': '204', 'cterm16': '1'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight phpSuperglobals guifg= #E06C75 guibg= NONE guisp= NONE gui= NONE ctermfg=204 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 472: call s:h("phpConstants", { "fg": s:dark_yellow })
calling function <SNR>2_h('phpConstants', {'fg': {'gui': '#D19A66', 'cterm': '173', 'cterm16': '11'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight phpConstants guifg= #D19A66 guibg= NONE guisp= NONE gui= NONE ctermfg=173 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 473: 
line 474: " Ruby
line 475: call s:h("rubyBlockParameter", { "fg": s:red})
calling function <SNR>2_h('rubyBlockParameter', {'fg': {'gui': '#E06C75', 'cterm': '204', 'cterm16': '1'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight rubyBlockParameter guifg= #E06C75 guibg= NONE guisp= NONE gui= NONE ctermfg=204 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 476: call s:h("rubyBlockParameterList", { "fg": s:red })
calling function <SNR>2_h('rubyBlockParameterList', {'fg': {'gui': '#E06C75', 'cterm': '204', 'cterm16': '1'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight rubyBlockParameterList guifg= #E06C75 guibg= NONE guisp= NONE gui= NONE ctermfg=204 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 477: call s:h("rubyClass", { "fg": s:purple})
calling function <SNR>2_h('rubyClass', {'fg': {'gui': '#C678DD', 'cterm': '170', 'cterm16': '5'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight rubyClass guifg= #C678DD guibg= NONE guisp= NONE gui= NONE ctermfg=170 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 478: call s:h("rubyConstant", { "fg": s:yellow})
calling function <SNR>2_h('rubyConstant', {'fg': {'gui': '#E5C07B', 'cterm': '180', 'cterm16': '3'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight rubyConstant guifg= #E5C07B guibg= NONE guisp= NONE gui= NONE ctermfg=180 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 479: call s:h("rubyControl", { "fg": s:purple })
calling function <SNR>2_h('rubyControl', {'fg': {'gui': '#C678DD', 'cterm': '170', 'cterm16': '5'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight rubyControl guifg= #C678DD guibg= NONE guisp= NONE gui= NONE ctermfg=170 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 480: call s:h("rubyEscape", { "fg": s:red})
calling function <SNR>2_h('rubyEscape', {'fg': {'gui': '#E06C75', 'cterm': '204', 'cterm16': '1'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight rubyEscape guifg= #E06C75 guibg= NONE guisp= NONE gui= NONE ctermfg=204 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 481: call s:h("rubyFunction", { "fg": s:blue})
calling function <SNR>2_h('rubyFunction', {'fg': {'gui': '#61AFEF', 'cterm': '39', 'cterm16': '4'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight rubyFunction guifg= #61AFEF guibg= NONE guisp= NONE gui= NONE ctermfg=39 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 482: call s:h("rubyGlobalVariable", { "fg": s:red})
calling function <SNR>2_h('rubyGlobalVariable', {'fg': {'gui': '#E06C75', 'cterm': '204', 'cterm16': '1'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight rubyGlobalVariable guifg= #E06C75 guibg= NONE guisp= NONE gui= NONE ctermfg=204 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 483: call s:h("rubyInclude", { "fg": s:blue})
calling function <SNR>2_h('rubyInclude', {'fg': {'gui': '#61AFEF', 'cterm': '39', 'cterm16': '4'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight rubyInclude guifg= #61AFEF guibg= NONE guisp= NONE gui= NONE ctermfg=39 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 484: call s:h("rubyIncluderubyGlobalVariable", { "fg": s:red})
calling function <SNR>2_h('rubyIncluderubyGlobalVariable', {'fg': {'gui': '#E06C75', 'cterm': '204', 'cterm16': '1'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight rubyIncluderubyGlobalVariable guifg= #E06C75 guibg= NONE guisp= NONE gui= NONE ctermfg=204 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 485: call s:h("rubyInstanceVariable", { "fg": s:red})
calling function <SNR>2_h('rubyInstanceVariable', {'fg': {'gui': '#E06C75', 'cterm': '204', 'cterm16': '1'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight rubyInstanceVariable guifg= #E06C75 guibg= NONE guisp= NONE gui= NONE ctermfg=204 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 486: call s:h("rubyInterpolation", { "fg": s:cyan })
calling function <SNR>2_h('rubyInterpolation', {'fg': {'gui': '#56B6C2', 'cterm': '38', 'cterm16': '6'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight rubyInterpolation guifg= #56B6C2 guibg= NONE guisp= NONE gui= NONE ctermfg=38 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 487: call s:h("rubyInterpolationDelimiter", { "fg": s:red })
calling function <SNR>2_h('rubyInterpolationDelimiter', {'fg': {'gui': '#E06C75', 'cterm': '204', 'cterm16': '1'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight rubyInterpolationDelimiter guifg= #E06C75 guibg= NONE guisp= NONE gui= NONE ctermfg=204 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 488: call s:h("rubyInterpolationDelimiter", { "fg": s:red})
calling function <SNR>2_h('rubyInterpolationDelimiter', {'fg': {'gui': '#E06C75', 'cterm': '204', 'cterm16': '1'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight rubyInterpolationDelimiter guifg= #E06C75 guibg= NONE guisp= NONE gui= NONE ctermfg=204 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 489: call s:h("rubyRegexp", { "fg": s:cyan})
calling function <SNR>2_h('rubyRegexp', {'fg': {'gui': '#56B6C2', 'cterm': '38', 'cterm16': '6'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight rubyRegexp guifg= #56B6C2 guibg= NONE guisp= NONE gui= NONE ctermfg=38 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 490: call s:h("rubyRegexpDelimiter", { "fg": s:cyan})
calling function <SNR>2_h('rubyRegexpDelimiter', {'fg': {'gui': '#56B6C2', 'cterm': '38', 'cterm16': '6'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight rubyRegexpDelimiter guifg= #56B6C2 guibg= NONE guisp= NONE gui= NONE ctermfg=38 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 491: call s:h("rubyStringDelimiter", { "fg": s:green})
calling function <SNR>2_h('rubyStringDelimiter', {'fg': {'gui': '#98C379', 'cterm': '114', 'cterm16': '2'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight rubyStringDelimiter guifg= #98C379 guibg= NONE guisp= NONE gui= NONE ctermfg=114 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 492: call s:h("rubySymbol", { "fg": s:cyan})
calling function <SNR>2_h('rubySymbol', {'fg': {'gui': '#56B6C2', 'cterm': '38', 'cterm16': '6'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight rubySymbol guifg= #56B6C2 guibg= NONE guisp= NONE gui= NONE ctermfg=38 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 493: 
line 494: " Sass
line 495: " https://github.com/tpope/vim-haml
line 496: call s:h("sassAmpersand", { "fg": s:red })
calling function <SNR>2_h('sassAmpersand', {'fg': {'gui': '#E06C75', 'cterm': '204', 'cterm16': '1'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight sassAmpersand guifg= #E06C75 guibg= NONE guisp= NONE gui= NONE ctermfg=204 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 497: call s:h("sassClass", { "fg": s:dark_yellow })
calling function <SNR>2_h('sassClass', {'fg': {'gui': '#D19A66', 'cterm': '173', 'cterm16': '11'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight sassClass guifg= #D19A66 guibg= NONE guisp= NONE gui= NONE ctermfg=173 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 498: call s:h("sassControl", { "fg": s:purple })
calling function <SNR>2_h('sassControl', {'fg': {'gui': '#C678DD', 'cterm': '170', 'cterm16': '5'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight sassControl guifg= #C678DD guibg= NONE guisp= NONE gui= NONE ctermfg=170 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 499: call s:h("sassExtend", { "fg": s:purple })
calling function <SNR>2_h('sassExtend', {'fg': {'gui': '#C678DD', 'cterm': '170', 'cterm16': '5'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight sassExtend guifg= #C678DD guibg= NONE guisp= NONE gui= NONE ctermfg=170 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 500: call s:h("sassFor", { "fg": s:white })
calling function <SNR>2_h('sassFor', {'fg': {'gui': '#ABB2BF', 'cterm': '145', 'cterm16': '15'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight sassFor guifg= #ABB2BF guibg= NONE guisp= NONE gui= NONE ctermfg=145 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 501: call s:h("sassFunction", { "fg": s:cyan })
calling function <SNR>2_h('sassFunction', {'fg': {'gui': '#56B6C2', 'cterm': '38', 'cterm16': '6'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight sassFunction guifg= #56B6C2 guibg= NONE guisp= NONE gui= NONE ctermfg=38 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 502: call s:h("sassId", { "fg": s:blue })
calling function <SNR>2_h('sassId', {'fg': {'gui': '#61AFEF', 'cterm': '39', 'cterm16': '4'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight sassId guifg= #61AFEF guibg= NONE guisp= NONE gui= NONE ctermfg=39 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 503: call s:h("sassInclude", { "fg": s:purple })
calling function <SNR>2_h('sassInclude', {'fg': {'gui': '#C678DD', 'cterm': '170', 'cterm16': '5'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight sassInclude guifg= #C678DD guibg= NONE guisp= NONE gui= NONE ctermfg=170 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 504: call s:h("sassMedia", { "fg": s:purple })
calling function <SNR>2_h('sassMedia', {'fg': {'gui': '#C678DD', 'cterm': '170', 'cterm16': '5'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight sassMedia guifg= #C678DD guibg= NONE guisp= NONE gui= NONE ctermfg=170 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 505: call s:h("sassMediaOperators", { "fg": s:white })
calling function <SNR>2_h('sassMediaOperators', {'fg': {'gui': '#ABB2BF', 'cterm': '145', 'cterm16': '15'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight sassMediaOperators guifg= #ABB2BF guibg= NONE guisp= NONE gui= NONE ctermfg=145 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 506: call s:h("sassMixin", { "fg": s:purple })
calling function <SNR>2_h('sassMixin', {'fg': {'gui': '#C678DD', 'cterm': '170', 'cterm16': '5'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight sassMixin guifg= #C678DD guibg= NONE guisp= NONE gui= NONE ctermfg=170 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 507: call s:h("sassMixinName", { "fg": s:blue })
calling function <SNR>2_h('sassMixinName', {'fg': {'gui': '#61AFEF', 'cterm': '39', 'cterm16': '4'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight sassMixinName guifg= #61AFEF guibg= NONE guisp= NONE gui= NONE ctermfg=39 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 508: call s:h("sassMixing", { "fg": s:purple })
calling function <SNR>2_h('sassMixing', {'fg': {'gui': '#C678DD', 'cterm': '170', 'cterm16': '5'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight sassMixing guifg= #C678DD guibg= NONE guisp= NONE gui= NONE ctermfg=170 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 509: call s:h("sassVariable", { "fg": s:purple })
calling function <SNR>2_h('sassVariable', {'fg': {'gui': '#C678DD', 'cterm': '170', 'cterm16': '5'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight sassVariable guifg= #C678DD guibg= NONE guisp= NONE gui= NONE ctermfg=170 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 510: " https://github.com/cakebaker/scss-syntax.vim
line 511: call s:h("scssExtend", { "fg": s:purple })
calling function <SNR>2_h('scssExtend', {'fg': {'gui': '#C678DD', 'cterm': '170', 'cterm16': '5'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight scssExtend guifg= #C678DD guibg= NONE guisp= NONE gui= NONE ctermfg=170 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 512: call s:h("scssImport", { "fg": s:purple })
calling function <SNR>2_h('scssImport', {'fg': {'gui': '#C678DD', 'cterm': '170', 'cterm16': '5'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight scssImport guifg= #C678DD guibg= NONE guisp= NONE gui= NONE ctermfg=170 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 513: call s:h("scssInclude", { "fg": s:purple })
calling function <SNR>2_h('scssInclude', {'fg': {'gui': '#C678DD', 'cterm': '170', 'cterm16': '5'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight scssInclude guifg= #C678DD guibg= NONE guisp= NONE gui= NONE ctermfg=170 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 514: call s:h("scssMixin", { "fg": s:purple })
calling function <SNR>2_h('scssMixin', {'fg': {'gui': '#C678DD', 'cterm': '170', 'cterm16': '5'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight scssMixin guifg= #C678DD guibg= NONE guisp= NONE gui= NONE ctermfg=170 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 515: call s:h("scssSelectorName", { "fg": s:dark_yellow })
calling function <SNR>2_h('scssSelectorName', {'fg': {'gui': '#D19A66', 'cterm': '173', 'cterm16': '11'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight scssSelectorName guifg= #D19A66 guibg= NONE guisp= NONE gui= NONE ctermfg=173 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 516: call s:h("scssVariable", { "fg": s:purple })
calling function <SNR>2_h('scssVariable', {'fg': {'gui': '#C678DD', 'cterm': '170', 'cterm16': '5'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight scssVariable guifg= #C678DD guibg= NONE guisp= NONE gui= NONE ctermfg=170 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 517: 
line 518: " TeX
line 519: call s:h("texStatement", { "fg": s:purple })
calling function <SNR>2_h('texStatement', {'fg': {'gui': '#C678DD', 'cterm': '170', 'cterm16': '5'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight texStatement guifg= #C678DD guibg= NONE guisp= NONE gui= NONE ctermfg=170 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 520: call s:h("texSubscripts", { "fg": s:dark_yellow })
calling function <SNR>2_h('texSubscripts', {'fg': {'gui': '#D19A66', 'cterm': '173', 'cterm16': '11'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight texSubscripts guifg= #D19A66 guibg= NONE guisp= NONE gui= NONE ctermfg=173 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 521: call s:h("texSuperscripts", { "fg": s:dark_yellow })
calling function <SNR>2_h('texSuperscripts', {'fg': {'gui': '#D19A66', 'cterm': '173', 'cterm16': '11'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight texSuperscripts guifg= #D19A66 guibg= NONE guisp= NONE gui= NONE ctermfg=173 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 522: call s:h("texTodo", { "fg": s:dark_red })
calling function <SNR>2_h('texTodo', {'fg': {'gui': '#BE5046', 'cterm': '196', 'cterm16': '9'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight texTodo guifg= #BE5046 guibg= NONE guisp= NONE gui= NONE ctermfg=196 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 523: call s:h("texBeginEnd", { "fg": s:purple })
calling function <SNR>2_h('texBeginEnd', {'fg': {'gui': '#C678DD', 'cterm': '170', 'cterm16': '5'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight texBeginEnd guifg= #C678DD guibg= NONE guisp= NONE gui= NONE ctermfg=170 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 524: call s:h("texBeginEndName", { "fg": s:blue })
calling function <SNR>2_h('texBeginEndName', {'fg': {'gui': '#61AFEF', 'cterm': '39', 'cterm16': '4'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight texBeginEndName guifg= #61AFEF guibg= NONE guisp= NONE gui= NONE ctermfg=39 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 525: call s:h("texMathMatcher", { "fg": s:blue })
calling function <SNR>2_h('texMathMatcher', {'fg': {'gui': '#61AFEF', 'cterm': '39', 'cterm16': '4'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight texMathMatcher guifg= #61AFEF guibg= NONE guisp= NONE gui= NONE ctermfg=39 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 526: call s:h("texMathDelim", { "fg": s:blue })
calling function <SNR>2_h('texMathDelim', {'fg': {'gui': '#61AFEF', 'cterm': '39', 'cterm16': '4'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight texMathDelim guifg= #61AFEF guibg= NONE guisp= NONE gui= NONE ctermfg=39 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 527: call s:h("texDelimiter", { "fg": s:dark_yellow })
calling function <SNR>2_h('texDelimiter', {'fg': {'gui': '#D19A66', 'cterm': '173', 'cterm16': '11'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight texDelimiter guifg= #D19A66 guibg= NONE guisp= NONE gui= NONE ctermfg=173 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 528: call s:h("texSpecialChar", { "fg": s:dark_yellow })
calling function <SNR>2_h('texSpecialChar', {'fg': {'gui': '#D19A66', 'cterm': '173', 'cterm16': '11'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight texSpecialChar guifg= #D19A66 guibg= NONE guisp= NONE gui= NONE ctermfg=173 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 529: call s:h("texCite", { "fg": s:blue })
calling function <SNR>2_h('texCite', {'fg': {'gui': '#61AFEF', 'cterm': '39', 'cterm16': '4'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight texCite guifg= #61AFEF guibg= NONE guisp= NONE gui= NONE ctermfg=39 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 530: call s:h("texRefZone", { "fg": s:blue })
calling function <SNR>2_h('texRefZone', {'fg': {'gui': '#61AFEF', 'cterm': '39', 'cterm16': '4'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight texRefZone guifg= #61AFEF guibg= NONE guisp= NONE gui= NONE ctermfg=39 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 531: 
line 532: " TypeScript
line 533: call s:h("typescriptReserved", { "fg": s:purple })
calling function <SNR>2_h('typescriptReserved', {'fg': {'gui': '#C678DD', 'cterm': '170', 'cterm16': '5'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight typescriptReserved guifg= #C678DD guibg= NONE guisp= NONE gui= NONE ctermfg=170 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 534: call s:h("typescriptEndColons", { "fg": s:white })
calling function <SNR>2_h('typescriptEndColons', {'fg': {'gui': '#ABB2BF', 'cterm': '145', 'cterm16': '15'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight typescriptEndColons guifg= #ABB2BF guibg= NONE guisp= NONE gui= NONE ctermfg=145 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 535: call s:h("typescriptBraces", { "fg": s:white })
calling function <SNR>2_h('typescriptBraces', {'fg': {'gui': '#ABB2BF', 'cterm': '145', 'cterm16': '15'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight typescriptBraces guifg= #ABB2BF guibg= NONE guisp= NONE gui= NONE ctermfg=145 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 536: 
line 537: " XML
line 538: call s:h("xmlAttrib", { "fg": s:dark_yellow })
calling function <SNR>2_h('xmlAttrib', {'fg': {'gui': '#D19A66', 'cterm': '173', 'cterm16': '11'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight xmlAttrib guifg= #D19A66 guibg= NONE guisp= NONE gui= NONE ctermfg=173 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 539: call s:h("xmlEndTag", { "fg": s:red })
calling function <SNR>2_h('xmlEndTag', {'fg': {'gui': '#E06C75', 'cterm': '204', 'cterm16': '1'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight xmlEndTag guifg= #E06C75 guibg= NONE guisp= NONE gui= NONE ctermfg=204 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 540: call s:h("xmlTag", { "fg": s:red })
calling function <SNR>2_h('xmlTag', {'fg': {'gui': '#E06C75', 'cterm': '204', 'cterm16': '1'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight xmlTag guifg= #E06C75 guibg= NONE guisp= NONE gui= NONE ctermfg=204 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 541: call s:h("xmlTagName", { "fg": s:red })
calling function <SNR>2_h('xmlTagName', {'fg': {'gui': '#E06C75', 'cterm': '204', 'cterm16': '1'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight xmlTagName guifg= #E06C75 guibg= NONE guisp= NONE gui= NONE ctermfg=204 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 542: 
line 543: " }}}
line 544: 
line 545: " Plugin Highlighting {{{
line 546: 
line 547: " airblade/vim-gitgutter
line 548: call s:h("GitGutterAdd", { "fg": s:green })
calling function <SNR>2_h('GitGutterAdd', {'fg': {'gui': '#98C379', 'cterm': '114', 'cterm16': '2'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight GitGutterAdd guifg= #98C379 guibg= NONE guisp= NONE gui= NONE ctermfg=114 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 549: call s:h("GitGutterChange", { "fg": s:yellow })
calling function <SNR>2_h('GitGutterChange', {'fg': {'gui': '#E5C07B', 'cterm': '180', 'cterm16': '3'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight GitGutterChange guifg= #E5C07B guibg= NONE guisp= NONE gui= NONE ctermfg=180 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 550: call s:h("GitGutterDelete", { "fg": s:red })
calling function <SNR>2_h('GitGutterDelete', {'fg': {'gui': '#E06C75', 'cterm': '204', 'cterm16': '1'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight GitGutterDelete guifg= #E06C75 guibg= NONE guisp= NONE gui= NONE ctermfg=204 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 551: 
line 552: " dense-analysis/ale
line 553: call s:h("ALEError", { "fg": s:red, "gui": "underline", "cterm": "underline" })
calling function <SNR>2_h('ALEError', {'gui': 'underline', 'fg': {'gui': '#E... 'cterm16': '1'}, 'cterm': 'underline'})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight ALEError guifg= #E06C75 guibg= NONE guisp= NONE gui= underline ctermfg=204 ctermbg=NONE cterm= underline
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 554: call s:h("ALEWarning", { "fg": s:yellow, "gui": "underline", "cterm": "underline"})
calling function <SNR>2_h('ALEWarning', {'gui': 'underline', 'fg': {'gui': '#E... 'cterm16': '3'}, 'cterm': 'underline'})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight ALEWarning guifg= #E5C07B guibg= NONE guisp= NONE gui= underline ctermfg=180 ctermbg=NONE cterm= underline
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 555: call s:h("ALEInfo", { "gui": "underline", "cterm": "underline"})
calling function <SNR>2_h('ALEInfo', {'gui': 'underline', 'cterm': 'underline'})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight ALEInfo guifg= NONE guibg= NONE guisp= NONE gui= underline ctermfg=NONE ctermbg=NONE cterm= underline
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 556: 
line 557: " easymotion/vim-easymotion
line 558: call s:h("EasyMotionTarget", { "fg": s:red, "gui": "bold", "cterm": "bold" })
calling function <SNR>2_h('EasyMotionTarget', {'gui': 'bold', 'fg': {'gui': '#E06C75...204', 'cterm16': '1'}, 'cterm': 'bold'})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight EasyMotionTarget guifg= #E06C75 guibg= NONE guisp= NONE gui= bold ctermfg=204 ctermbg=NONE cterm= bold
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 559: call s:h("EasyMotionTarget2First", { "fg": s:yellow, "gui": "bold", "cterm": "bold" })
calling function <SNR>2_h('EasyMotionTarget2First', {'gui': 'bold', 'fg': {'gui': '#E5C07B...180', 'cterm16': '3'}, 'cterm': 'bold'})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight EasyMotionTarget2First guifg= #E5C07B guibg= NONE guisp= NONE gui= bold ctermfg=180 ctermbg=NONE cterm= bold
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 560: call s:h("EasyMotionTarget2Second", { "fg": s:dark_yellow, "gui": "bold", "cterm": "bold" })
calling function <SNR>2_h('EasyMotionTarget2Second', {'gui': 'bold', 'fg': {'gui': '#D19A66...73', 'cterm16': '11'}, 'cterm': 'bold'})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight EasyMotionTarget2Second guifg= #D19A66 guibg= NONE guisp= NONE gui= bold ctermfg=173 ctermbg=NONE cterm= bold
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 561: call s:h("EasyMotionShade",  { "fg": s:comment_grey })
calling function <SNR>2_h('EasyMotionShade', {'fg': {'gui': '#5C6370', 'cterm': '59', 'cterm16': '7'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight EasyMotionShade guifg= #5C6370 guibg= NONE guisp= NONE gui= NONE ctermfg=59 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 562: 
line 563: " lewis6991/gitsigns.nvim
line 564: hi link GitSignsAdd    GitGutterAdd
line 565: hi link GitSignsChange GitGutterChange
line 566: hi link GitSignsDelete GitGutterDelete
line 567: 
line 568: " mhinz/vim-signify
line 569: hi link SignifySignAdd    GitGutterAdd
line 570: hi link SignifySignChange GitGutterChange
line 571: hi link SignifySignDelete GitGutterDelete
line 572: 
line 573: " neoclide/coc.nvim
line 574: call s:h("CocErrorSign", { "fg": s:red })
calling function <SNR>2_h('CocErrorSign', {'fg': {'gui': '#E06C75', 'cterm': '204', 'cterm16': '1'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight CocErrorSign guifg= #E06C75 guibg= NONE guisp= NONE gui= NONE ctermfg=204 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 575: call s:h("CocWarningSign", { "fg": s:yellow })
calling function <SNR>2_h('CocWarningSign', {'fg': {'gui': '#E5C07B', 'cterm': '180', 'cterm16': '3'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight CocWarningSign guifg= #E5C07B guibg= NONE guisp= NONE gui= NONE ctermfg=180 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 576: call s:h("CocInfoSign", { "fg": s:blue })
calling function <SNR>2_h('CocInfoSign', {'fg': {'gui': '#61AFEF', 'cterm': '39', 'cterm16': '4'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight CocInfoSign guifg= #61AFEF guibg= NONE guisp= NONE gui= NONE ctermfg=39 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 577: call s:h("CocHintSign", { "fg": s:cyan })
calling function <SNR>2_h('CocHintSign', {'fg': {'gui': '#56B6C2', 'cterm': '38', 'cterm16': '6'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight CocHintSign guifg= #56B6C2 guibg= NONE guisp= NONE gui= NONE ctermfg=38 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 578: 
line 579: " neomake/neomake
line 580: call s:h("NeomakeErrorSign", { "fg": s:red })
calling function <SNR>2_h('NeomakeErrorSign', {'fg': {'gui': '#E06C75', 'cterm': '204', 'cterm16': '1'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight NeomakeErrorSign guifg= #E06C75 guibg= NONE guisp= NONE gui= NONE ctermfg=204 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 581: call s:h("NeomakeWarningSign", { "fg": s:yellow })
calling function <SNR>2_h('NeomakeWarningSign', {'fg': {'gui': '#E5C07B', 'cterm': '180', 'cterm16': '3'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight NeomakeWarningSign guifg= #E5C07B guibg= NONE guisp= NONE gui= NONE ctermfg=180 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 582: call s:h("NeomakeInfoSign", { "fg": s:blue })
calling function <SNR>2_h('NeomakeInfoSign', {'fg': {'gui': '#61AFEF', 'cterm': '39', 'cterm16': '4'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight NeomakeInfoSign guifg= #61AFEF guibg= NONE guisp= NONE gui= NONE ctermfg=39 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 583: 
line 584: " plasticboy/vim-markdown (keep consistent with Markdown, above)
line 585: call s:h("mkdDelimiter", { "fg": s:purple })
calling function <SNR>2_h('mkdDelimiter', {'fg': {'gui': '#C678DD', 'cterm': '170', 'cterm16': '5'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight mkdDelimiter guifg= #C678DD guibg= NONE guisp= NONE gui= NONE ctermfg=170 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 586: call s:h("mkdHeading", { "fg": s:red })
calling function <SNR>2_h('mkdHeading', {'fg': {'gui': '#E06C75', 'cterm': '204', 'cterm16': '1'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight mkdHeading guifg= #E06C75 guibg= NONE guisp= NONE gui= NONE ctermfg=204 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 587: call s:h("mkdLink", { "fg": s:blue })
calling function <SNR>2_h('mkdLink', {'fg': {'gui': '#61AFEF', 'cterm': '39', 'cterm16': '4'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight mkdLink guifg= #61AFEF guibg= NONE guisp= NONE gui= NONE ctermfg=39 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 588: call s:h("mkdURL", { "fg": s:cyan, "gui": "underline", "cterm": "underline" })
calling function <SNR>2_h('mkdURL', {'gui': 'underline', 'fg': {'gui': '#5... 'cterm16': '6'}, 'cterm': 'underline'})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight mkdURL guifg= #56B6C2 guibg= NONE guisp= NONE gui= underline ctermfg=38 ctermbg=NONE cterm= underline
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 589: 
line 590: " prabirshrestha/vim-lsp
line 591: call s:h("LspError", { "fg": s:red })
calling function <SNR>2_h('LspError', {'fg': {'gui': '#E06C75', 'cterm': '204', 'cterm16': '1'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight LspError guifg= #E06C75 guibg= NONE guisp= NONE gui= NONE ctermfg=204 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 592: call s:h("LspWarning", { "fg": s:yellow })
calling function <SNR>2_h('LspWarning', {'fg': {'gui': '#E5C07B', 'cterm': '180', 'cterm16': '3'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight LspWarning guifg= #E5C07B guibg= NONE guisp= NONE gui= NONE ctermfg=180 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 593: call s:h("LspInformation", { "fg": s:blue })
calling function <SNR>2_h('LspInformation', {'fg': {'gui': '#61AFEF', 'cterm': '39', 'cterm16': '4'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight LspInformation guifg= #61AFEF guibg= NONE guisp= NONE gui= NONE ctermfg=39 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 594: call s:h("LspHint", { "fg": s:cyan })
calling function <SNR>2_h('LspHint', {'fg': {'gui': '#56B6C2', 'cterm': '38', 'cterm16': '6'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight LspHint guifg= #56B6C2 guibg= NONE guisp= NONE gui= NONE ctermfg=38 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 595: 
line 596: " tpope/vim-fugitive
line 597: call s:h("diffAdded", { "fg": s:green })
calling function <SNR>2_h('diffAdded', {'fg': {'gui': '#98C379', 'cterm': '114', 'cterm16': '2'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight diffAdded guifg= #98C379 guibg= NONE guisp= NONE gui= NONE ctermfg=114 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 598: call s:h("diffRemoved", { "fg": s:red })
calling function <SNR>2_h('diffRemoved', {'fg': {'gui': '#E06C75', 'cterm': '204', 'cterm16': '1'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight diffRemoved guifg= #E06C75 guibg= NONE guisp= NONE gui= NONE ctermfg=204 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 599: 
line 600: " }}}
line 601: 
line 602: " Git Highlighting {{{
line 603: 
line 604: call s:h("gitcommitComment", { "fg": s:comment_grey })
calling function <SNR>2_h('gitcommitComment', {'fg': {'gui': '#5C6370', 'cterm': '59', 'cterm16': '7'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight gitcommitComment guifg= #5C6370 guibg= NONE guisp= NONE gui= NONE ctermfg=59 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 605: call s:h("gitcommitUnmerged", { "fg": s:green })
calling function <SNR>2_h('gitcommitUnmerged', {'fg': {'gui': '#98C379', 'cterm': '114', 'cterm16': '2'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight gitcommitUnmerged guifg= #98C379 guibg= NONE guisp= NONE gui= NONE ctermfg=114 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 606: call s:h("gitcommitOnBranch", {})
calling function <SNR>2_h('gitcommitOnBranch', {})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight gitcommitOnBranch guifg= NONE guibg= NONE guisp= NONE gui= NONE ctermfg=NONE ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 607: call s:h("gitcommitBranch", { "fg": s:purple })
calling function <SNR>2_h('gitcommitBranch', {'fg': {'gui': '#C678DD', 'cterm': '170', 'cterm16': '5'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight gitcommitBranch guifg= #C678DD guibg= NONE guisp= NONE gui= NONE ctermfg=170 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 608: call s:h("gitcommitDiscardedType", { "fg": s:red })
calling function <SNR>2_h('gitcommitDiscardedType', {'fg': {'gui': '#E06C75', 'cterm': '204', 'cterm16': '1'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight gitcommitDiscardedType guifg= #E06C75 guibg= NONE guisp= NONE gui= NONE ctermfg=204 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 609: call s:h("gitcommitSelectedType", { "fg": s:green })
calling function <SNR>2_h('gitcommitSelectedType', {'fg': {'gui': '#98C379', 'cterm': '114', 'cterm16': '2'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight gitcommitSelectedType guifg= #98C379 guibg= NONE guisp= NONE gui= NONE ctermfg=114 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 610: call s:h("gitcommitHeader", {})
calling function <SNR>2_h('gitcommitHeader', {})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight gitcommitHeader guifg= NONE guibg= NONE guisp= NONE gui= NONE ctermfg=NONE ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 611: call s:h("gitcommitUntrackedFile", { "fg": s:cyan })
calling function <SNR>2_h('gitcommitUntrackedFile', {'fg': {'gui': '#56B6C2', 'cterm': '38', 'cterm16': '6'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight gitcommitUntrackedFile guifg= #56B6C2 guibg= NONE guisp= NONE gui= NONE ctermfg=38 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 612: call s:h("gitcommitDiscardedFile", { "fg": s:red })
calling function <SNR>2_h('gitcommitDiscardedFile', {'fg': {'gui': '#E06C75', 'cterm': '204', 'cterm16': '1'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight gitcommitDiscardedFile guifg= #E06C75 guibg= NONE guisp= NONE gui= NONE ctermfg=204 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 613: call s:h("gitcommitSelectedFile", { "fg": s:green })
calling function <SNR>2_h('gitcommitSelectedFile', {'fg': {'gui': '#98C379', 'cterm': '114', 'cterm16': '2'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight gitcommitSelectedFile guifg= #98C379 guibg= NONE guisp= NONE gui= NONE ctermfg=114 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 614: call s:h("gitcommitUnmergedFile", { "fg": s:yellow })
calling function <SNR>2_h('gitcommitUnmergedFile', {'fg': {'gui': '#E5C07B', 'cterm': '180', 'cterm16': '3'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight gitcommitUnmergedFile guifg= #E5C07B guibg= NONE guisp= NONE gui= NONE ctermfg=180 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 615: call s:h("gitcommitFile", {})
calling function <SNR>2_h('gitcommitFile', {})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight gitcommitFile guifg= NONE guibg= NONE guisp= NONE gui= NONE ctermfg=NONE ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 616: call s:h("gitcommitSummary", { "fg": s:white })
calling function <SNR>2_h('gitcommitSummary', {'fg': {'gui': '#ABB2BF', 'cterm': '145', 'cterm16': '15'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight gitcommitSummary guifg= #ABB2BF guibg= NONE guisp= NONE gui= NONE ctermfg=145 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 617: call s:h("gitcommitOverflow", { "fg": s:red })
calling function <SNR>2_h('gitcommitOverflow', {'fg': {'gui': '#E06C75', 'cterm': '204', 'cterm16': '1'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight gitcommitOverflow guifg= #E06C75 guibg= NONE guisp= NONE gui= NONE ctermfg=204 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 618: hi link gitcommitNoBranch gitcommitBranch
line 619: hi link gitcommitUntracked gitcommitComment
line 620: hi link gitcommitDiscarded gitcommitComment
line 621: hi link gitcommitSelected gitcommitComment
line 622: hi link gitcommitDiscardedArrow gitcommitDiscardedFile
line 623: hi link gitcommitSelectedArrow gitcommitSelectedFile
line 624: hi link gitcommitUnmergedArrow gitcommitUnmergedFile
line 625: 
line 626: " }}}
line 627: 
line 628: " Neovim-Specific Highlighting {{{
line 629: 
line 630: if has("nvim")
line 631:   " Neovim terminal colors {{{
line 632:   let g:terminal_color_0 =  s:black.gui
line 633:   let g:terminal_color_1 =  s:red.gui
line 634:   let g:terminal_color_2 =  s:green.gui
line 635:   let g:terminal_color_3 =  s:yellow.gui
line 636:   let g:terminal_color_4 =  s:blue.gui
line 637:   let g:terminal_color_5 =  s:purple.gui
line 638:   let g:terminal_color_6 =  s:cyan.gui
line 639:   let g:terminal_color_7 =  s:white.gui
line 640:   let g:terminal_color_8 =  s:visual_grey.gui
line 641:   let g:terminal_color_9 =  s:dark_red.gui
line 642:   let g:terminal_color_10 = s:green.gui " No dark version
line 643:   let g:terminal_color_11 = s:dark_yellow.gui
line 644:   let g:terminal_color_12 = s:blue.gui " No dark version
line 645:   let g:terminal_color_13 = s:purple.gui " No dark version
line 646:   let g:terminal_color_14 = s:cyan.gui " No dark version
line 647:   let g:terminal_color_15 = s:comment_grey.gui
line 648:   let g:terminal_color_background = s:background.gui
line 649:   let g:terminal_color_foreground = s:foreground.gui
line 650:   " }}}
line 651: 
line 652:   " Neovim LSP {{{
line 653:   call s:h("LspDiagnosticsDefaultError", { "fg": s:red })
calling function <SNR>2_h('LspDiagnosticsDefaultError', {'fg': {'gui': '#E06C75', 'cterm': '204', 'cterm16': '1'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight LspDiagnosticsDefaultError guifg= #E06C75 guibg= NONE guisp= NONE gui= NONE ctermfg=204 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 654:   call s:h("LspDiagnosticsDefaultWarning", { "fg": s:yellow })
calling function <SNR>2_h('LspDiagnosticsDefaultWarning', {'fg': {'gui': '#E5C07B', 'cterm': '180', 'cterm16': '3'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight LspDiagnosticsDefaultWarning guifg= #E5C07B guibg= NONE guisp= NONE gui= NONE ctermfg=180 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 655:   call s:h("LspDiagnosticsDefaultInformation", { "fg": s:blue })
calling function <SNR>2_h('LspDiagnosticsDefaultInformation', {'fg': {'gui': '#61AFEF', 'cterm': '39', 'cterm16': '4'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight LspDiagnosticsDefaultInformation guifg= #61AFEF guibg= NONE guisp= NONE gui= NONE ctermfg=39 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 656:   call s:h("LspDiagnosticsDefaultHint", { "fg": s:cyan })
calling function <SNR>2_h('LspDiagnosticsDefaultHint', {'fg': {'gui': '#56B6C2', 'cterm': '38', 'cterm16': '6'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight LspDiagnosticsDefaultHint guifg= #56B6C2 guibg= NONE guisp= NONE gui= NONE ctermfg=38 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 657:   call s:h("LspDiagnosticsUnderlineError", { "fg": s:red, "gui": "underline", "cterm": "underline" })
calling function <SNR>2_h('LspDiagnosticsUnderlineError', {'gui': 'underline', 'fg': {'gui': '#E... 'cterm16': '1'}, 'cterm': 'underline'})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight LspDiagnosticsUnderlineError guifg= #E06C75 guibg= NONE guisp= NONE gui= underline ctermfg=204 ctermbg=NONE cterm= underline
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 658:   call s:h("LspDiagnosticsUnderlineWarning", { "fg": s:yellow, "gui": "underline", "cterm": "underline" })
calling function <SNR>2_h('LspDiagnosticsUnderlineWarning', {'gui': 'underline', 'fg': {'gui': '#E... 'cterm16': '3'}, 'cterm': 'underline'})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight LspDiagnosticsUnderlineWarning guifg= #E5C07B guibg= NONE guisp= NONE gui= underline ctermfg=180 ctermbg=NONE cterm= underline
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 659:   call s:h("LspDiagnosticsUnderlineInformation", { "fg": s:blue, "gui": "underline", "cterm": "underline" })
calling function <SNR>2_h('LspDiagnosticsUnderlineInformation', {'gui': 'underline', 'fg': {'gui': '#6... 'cterm16': '4'}, 'cterm': 'underline'})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight LspDiagnosticsUnderlineInformation guifg= #61AFEF guibg= NONE guisp= NONE gui= underline ctermfg=39 ctermbg=NONE cterm= underline
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 660:   call s:h("LspDiagnosticsUnderlineHint", { "fg": s:cyan, "gui": "underline", "cterm": "underline" })
calling function <SNR>2_h('LspDiagnosticsUnderlineHint', {'gui': 'underline', 'fg': {'gui': '#5... 'cterm16': '6'}, 'cterm': 'underline'})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight LspDiagnosticsUnderlineHint guifg= #56B6C2 guibg= NONE guisp= NONE gui= underline ctermfg=38 ctermbg=NONE cterm= underline
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 661:   call s:h("LspDiagnosticsVirtualTextError", { "fg": s:red, "bg": s:cursor_grey  })
calling function <SNR>2_h('LspDiagnosticsVirtualTextError', {'bg': {'gui': '#2C323C', 'cterm': '23...6C75', 'cterm': '204', 'cterm16': '1'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight LspDiagnosticsVirtualTextError guifg= #E06C75 guibg= #2C323C guisp= NONE gui= NONE ctermfg=204 ctermbg=236 cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 662:   call s:h("LspDiagnosticsVirtualTextWarning", { "fg": s:yellow, "bg": s:cursor_grey  })
calling function <SNR>2_h('LspDiagnosticsVirtualTextWarning', {'bg': {'gui': '#2C323C', 'cterm': '23...C07B', 'cterm': '180', 'cterm16': '3'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight LspDiagnosticsVirtualTextWarning guifg= #E5C07B guibg= #2C323C guisp= NONE gui= NONE ctermfg=180 ctermbg=236 cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 663:   call s:h("LspDiagnosticsVirtualTextInformation", { "fg": s:blue, "bg": s:cursor_grey  })
calling function <SNR>2_h('LspDiagnosticsVirtualTextInformation', {'bg': {'gui': '#2C323C', 'cterm': '23...1AFEF', 'cterm': '39', 'cterm16': '4'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight LspDiagnosticsVirtualTextInformation guifg= #61AFEF guibg= #2C323C guisp= NONE gui= NONE ctermfg=39 ctermbg=236 cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 664:   call s:h("LspDiagnosticsVirtualTextHint", { "fg": s:cyan, "bg": s:cursor_grey  })
calling function <SNR>2_h('LspDiagnosticsVirtualTextHint', {'bg': {'gui': '#2C323C', 'cterm': '23...6B6C2', 'cterm': '38', 'cterm16': '6'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight LspDiagnosticsVirtualTextHint guifg= #56B6C2 guibg= #2C323C guisp= NONE gui= NONE ctermfg=38 ctermbg=236 cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 665:   " }}}
line 666: endif
line 667: 
line 668: " }}}
line 669: 
line 670: " Must appear at the end of the file to work around this oddity:
line 671: " https://groups.google.com/forum/#!msg/vim_dev/afPqwAFNdrU/nqh6tOM87QUJ
line 672: set background=dark
finished sourcing /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim
continuing in nvim_exec() called at /Users/andrewgu/.config/nvim/init.lua:0
Executing: filetype indent on
Searching for "filetype.vim" in "/Users/andrewgu/.config/nvim,/etc/xdg/nvim,/Users/andrewgu/.local/share/nvim/site,/usr/local/share/nvim/site,/usr/share/nvim/site,/usr/local/Cellar/neovim/0.5.0/share/nvim/runtime,/usr/local/Cellar/neovim/0.5.0/lib/nvim,/usr/share/nvim/site/after,/usr/local/share/nvim/site/after,/Users/andrewgu/.local/share/nvim/site/after,/etc/xdg/nvim/after,/Users/andrewgu/.config/nvim/after"
Searching for "/Users/andrewgu/.config/nvim/filetype.vim"
Searching for "/etc/xdg/nvim/filetype.vim"
Searching for "/Users/andrewgu/.local/share/nvim/site/filetype.vim"
Searching for "/usr/local/share/nvim/site/filetype.vim"
Searching for "/usr/share/nvim/site/filetype.vim"
Searching for "/usr/local/Cellar/neovim/0.5.0/share/nvim/runtime/filetype.vim"
chdir(/Users/andrewgu/.config/nvim)
chdir(/usr/local/Cellar/neovim/0.5.0/share/nvim/runtime)
chdir(/Users/andrewgu/.config/nvim)
line 0: sourcing "/usr/local/Cellar/neovim/0.5.0/share/nvim/runtime/filetype.vim"
line 1: " Vim support file to detect file types
line 2: "
line 3: " Maintainer:^IBram Moolenaar <Bram@vim.org>
line 4: " Last Change:^I2021 Apr 17
line 5: 
line 6: " Listen very carefully, I will say this only once
line 7: if exists("did_load_filetypes")
line 8:   finish
line 9: endif
line 10: let did_load_filetypes = 1
line 11: 
line 12: " Line continuation is used here, remove 'C' from 'cpoptions'
line 13: let s:cpo_save = &cpo
line 14: set cpo&vim
line 15: 
line 16: augroup filetypedetect
line 17: 
line 18: " Ignored extensions
line 19: if exists("*fnameescape")
line 20: au BufNewFile,BufRead ?\+.orig,?\+.bak,?\+.old,?\+.new,?\+.dpkg-dist,?\+.dpkg-old,?\+.dpkg-new,?\+.dpkg-bak,?\+.rpmsave,?\+.rpmnew,?\+.pacsave,?\+.pacnew exe "doau filetypedetect BufRead " . fnameescape(expand("<afile>:r"))
line 22: au BufNewFile,BufRead *~ let s:name = expand("<afile>") | let s:short = substitute(s:name, '\~$', '', '') | if s:name != s:short && s:short != "" |   exe "doau filetypedetect BufRead " . fnameescape(s:short) | endif | unlet! s:name s:short
line 29: au BufNewFile,BufRead ?\+.in if expand("<afile>:t") != "configure.in" |   exe "doau filetypedetect BufRead " . fnameescape(expand("<afile>:r")) | endif
line 33: elseif &verbose > 0
line 34:   echomsg "Warning: some filetypes will not be recognized because this version of Vim does not have fnameescape()"
line 35: endif
line 36: 
line 37: " Pattern used to match file names which should not be inspected.
line 38: " Currently finds compressed files.
line 39: if !exists("g:ft_ignore_pat")
line 40:   let g:ft_ignore_pat = '\.\(Z\|gz\|bz2\|zip\|tgz\)$'
line 41: endif
line 42: 
line 43: " Function used for patterns that end in a star: don't set the filetype if the
line 44: " file name matches ft_ignore_pat.
line 45: " When using this, the entry should probably be further down below with the
line 46: " other StarSetf() calls.
line 47: func! s:StarSetf(ft)
line 52: 
line 53: " Vim help file
line 54: au BufNewFile,BufRead $VIMRUNTIME/doc/*.txt setf help
line 55: 
line 56: " Abaqus or Trasys
line 57: au BufNewFile,BufRead *.inp^I^I^Icall dist#ft#Check_inp()
line 58: 
line 59: " 8th (Firth-derivative)
line 60: au BufNewFile,BufRead *.8th^I^I^Isetf 8th
line 61: 
line 62: " A-A-P recipe
line 63: au BufNewFile,BufRead *.aap^I^I^Isetf aap
line 64: 
line 65: " A2ps printing utility
line 66: au BufNewFile,BufRead */etc/a2ps.cfg,*/etc/a2ps/*.cfg,a2psrc,.a2psrc setf a2ps
line 67: 
line 68: " ABAB/4
line 69: au BufNewFile,BufRead *.abap^I^I^Isetf abap
line 70: 
line 71: " ABC music notation
line 72: au BufNewFile,BufRead *.abc^I^I^Isetf abc
line 73: 
line 74: " ABEL
line 75: au BufNewFile,BufRead *.abl^I^I^Isetf abel
line 76: 
line 77: " AceDB
line 78: au BufNewFile,BufRead *.wrm^I^I^Isetf acedb
line 79: 
line 80: " Ada (83, 9X, 95)
line 81: au BufNewFile,BufRead *.adb,*.ads,*.ada^I^Isetf ada
line 82: au BufNewFile,BufRead *.gpr^I^I^Isetf ada
line 83: 
line 84: " AHDL
line 85: au BufNewFile,BufRead *.tdf^I^I^Isetf ahdl
line 86: 
line 87: " AIDL
line 88: au BufNewFile,BufRead *.aidl^I^I^Isetf aidl
line 89: 
line 90: " AMPL
line 91: au BufNewFile,BufRead *.run^I^I^Isetf ampl
line 92: 
line 93: " Ant
line 94: au BufNewFile,BufRead build.xml^I^I^Isetf ant
line 95: 
line 96: " Arduino
line 97: au BufNewFile,BufRead *.ino,*.pde^I^Isetf arduino
line 98: 
line 99: " Apache config file
line 100: au BufNewFile,BufRead .htaccess,*/etc/httpd/*.conf^I^Isetf apache
line 101: au BufNewFile,BufRead */etc/apache2/sites-*/*.com^I^Isetf apache
line 102: 
line 103: " XA65 MOS6510 cross assembler
line 104: au BufNewFile,BufRead *.a65^I^I^Isetf a65
line 105: 
line 106: " Applescript
line 107: au BufNewFile,BufRead *.scpt^I^I^Isetf applescript
line 108: 
line 109: " Applix ELF
line 110: au BufNewFile,BufRead *.am if expand("<afile>") !~? 'Makefile.am\>' | setf elf | endif
line 112: 
line 113: " ALSA configuration
line 114: au BufNewFile,BufRead .asoundrc,*/usr/share/alsa/alsa.conf,*/etc/asound.conf setf alsaconf
line 115: 
line 116: " Arc Macro Language
line 117: au BufNewFile,BufRead *.aml^I^I^Isetf aml
line 118: 
line 119: " APT config file
line 120: au BufNewFile,BufRead apt.conf^I^I       setf aptconf
line 121: au BufNewFile,BufRead */.aptitude/config       setf aptconf
line 122: au BufNewFile,BufRead */etc/apt/apt.conf.d/{[-_[:alnum:]]\+,[-_.[:alnum:]]\+.conf} setf aptconf
line 123: 
line 124: " Arch Inventory file
line 125: au BufNewFile,BufRead .arch-inventory,=tagging-method^Isetf arch
line 126: 
line 127: " ART*Enterprise (formerly ART-IM)
line 128: au BufNewFile,BufRead *.art^I^I^Isetf art
line 129: 
line 130: " AsciiDoc
line 131: au BufNewFile,BufRead *.asciidoc,*.adoc^I^Isetf asciidoc
line 132: 
line 133: " ASN.1
line 134: au BufNewFile,BufRead *.asn,*.asn1^I^Isetf asn
line 135: 
line 136: " Active Server Pages (with Visual Basic Script)
line 137: au BufNewFile,BufRead *.asa if exists("g:filetype_asa") |   exe "setf " . g:filetype_asa | else |   setf aspvbs | endif
line 143: 
line 144: " Active Server Pages (with Perl or Visual Basic Script)
line 145: au BufNewFile,BufRead *.asp if exists("g:filetype_asp") |   exe "setf " . g:filetype_asp | elseif getline(1) . getline(2) . getline(3) =~? "perlscript" |   setf aspperl | else |   setf aspvbs | endif
line 153: 
line 154: " Grub (must be before catch *.lst)
line 155: au BufNewFile,BufRead */boot/grub/menu.lst,*/boot/grub/grub.conf,*/etc/grub.conf setf grub
line 156: 
line 157: " Assembly (all kinds)
line 158: " *.lst is not pure assembly, it has two extra columns (address, byte codes)
line 159: au BufNewFile,BufRead *.asm,*.[sS],*.[aA],*.mac,*.lst^Icall dist#ft#FTasm()
line 160: 
line 161: " Macro (VAX)
line 162: au BufNewFile,BufRead *.mar^I^I^Isetf vmasm
line 163: 
line 164: " Atlas
line 165: au BufNewFile,BufRead *.atl,*.as^I^Isetf atlas
line 166: 
line 167: " Atom is based on XML
line 168: au BufNewFile,BufRead *.atom^I^I^Isetf xml
line 169: 
line 170: " Autoit v3
line 171: au BufNewFile,BufRead *.au3^I^I^Isetf autoit
line 172: 
line 173: " Autohotkey
line 174: au BufNewFile,BufRead *.ahk^I^I^Isetf autohotkey
line 175: 
line 176: " Automake
line 177: au BufNewFile,BufRead [mM]akefile.am,GNUmakefile.am^Isetf automake
line 178: 
line 179: " Autotest .at files are actually m4
line 180: au BufNewFile,BufRead *.at^I^I^Isetf m4
line 181: 
line 182: " Avenue
line 183: au BufNewFile,BufRead *.ave^I^I^Isetf ave
line 184: 
line 185: " Awk
line 186: au BufNewFile,BufRead *.awk,*.gawk^I^Isetf awk
line 187: 
line 188: " B
line 189: au BufNewFile,BufRead *.mch,*.ref,*.imp^I^Isetf b
line 190: 
line 191: " BASIC or Visual Basic
line 192: au BufNewFile,BufRead *.bas^I^I^Icall dist#ft#FTVB("basic")
line 193: 
line 194: " Visual Basic Script (close to Visual Basic) or Visual Basic .NET
line 195: au BufNewFile,BufRead *.vb,*.vbs,*.dsm,*.ctl^Isetf vb
line 196: 
line 197: " IBasic file (similar to QBasic)
line 198: au BufNewFile,BufRead *.iba,*.ibi^I^Isetf ibasic
line 199: 
line 200: " FreeBasic file (similar to QBasic)
line 201: au BufNewFile,BufRead *.fb,*.bi^I^I^Isetf freebasic
line 202: 
line 203: " Batch file for MSDOS.
line 204: au BufNewFile,BufRead *.bat,*.sys^I^Isetf dosbatch
line 205: " *.cmd is close to a Batch file, but on OS/2 Rexx files also use *.cmd.
line 206: au BufNewFile,BufRead *.cmd if getline(1) =~ '^/\*' | setf rexx | else | setf dosbatch | endif
line 208: 
line 209: " Batch file for 4DOS
line 210: au BufNewFile,BufRead *.btm^I^I^Icall dist#ft#FTbtm()
line 211: 
line 212: " BC calculator
line 213: au BufNewFile,BufRead *.bc^I^I^Isetf bc
line 214: 
line 215: " BDF font
line 216: au BufNewFile,BufRead *.bdf^I^I^Isetf bdf
line 217: 
line 218: " Beancount
line 219: au BufNewFile,BufRead *.beancount^I^Isetf beancount
line 220: 
line 221: " BibTeX bibliography database file
line 222: au BufNewFile,BufRead *.bib^I^I^Isetf bib
line 223: 
line 224: " BibTeX Bibliography Style
line 225: au BufNewFile,BufRead *.bst^I^I^Isetf bst
line 226: 
line 227: " BIND configuration
line 228: " sudoedit uses namedXXXX.conf
line 229: au BufNewFile,BufRead named*.conf,rndc*.conf,rndc*.key^Isetf named
line 230: 
line 231: " BIND zone
line 232: au BufNewFile,BufRead named.root^I^Isetf bindzone
line 233: au BufNewFile,BufRead *.db^I^I^Icall dist#ft#BindzoneCheck('')
line 234: 
line 235: " Blank
line 236: au BufNewFile,BufRead *.bl^I^I^Isetf blank
line 237: 
line 238: " Blkid cache file
line 239: au BufNewFile,BufRead */etc/blkid.tab,*/etc/blkid.tab.old   setf xml
line 240: 
line 241: " BSDL
line 242: au BufNewFile,BufRead *bsd,*.bsdl^I^Isetf bsdl
line 243: 
line 244: " Bazel (http://bazel.io)
line 245: autocmd BufRead,BufNewFile *.bzl,*.bazel,WORKSPACE^Isetf bzl
line 246: if has("fname_case")
line 247:   " There is another check for BUILD further below.
line 248:   autocmd BufRead,BufNewFile *.BUILD,BUILD^I^Isetf bzl
line 249: endif
line 250: 
line 251: " C or lpc
line 252: au BufNewFile,BufRead *.c^I^I^Icall dist#ft#FTlpc()
line 253: au BufNewFile,BufRead *.lpc,*.ulpc^I^Isetf lpc
line 254: 
line 255: " Calendar
line 256: au BufNewFile,BufRead calendar^I^I^Isetf calendar
line 257: 
line 258: " C#
line 259: au BufNewFile,BufRead *.cs^I^I^Isetf cs
line 260: 
line 261: " CSDL
line 262: au BufNewFile,BufRead *.csdl^I^I^Isetf csdl
line 263: 
line 264: " Cabal
line 265: au BufNewFile,BufRead *.cabal^I^I^Isetf cabal
line 266: 
line 267: " Cdrdao TOC
line 268: au BufNewFile,BufRead *.toc^I^I^Isetf cdrtoc
line 269: 
line 270: " Cdrdao config
line 271: au BufNewFile,BufRead */etc/cdrdao.conf,*/etc/defaults/cdrdao,*/etc/default/cdrdao,.cdrdao^Isetf cdrdaoconf
line 272: 
line 273: " Cfengine
line 274: au BufNewFile,BufRead cfengine.conf^I^Isetf cfengine
line 275: 
line 276: " ChaiScript
line 277: au BufRead,BufNewFile *.chai^I^I^Isetf chaiscript
line 278: 
line 279: " Comshare Dimension Definition Language
line 280: au BufNewFile,BufRead *.cdl^I^I^Isetf cdl
line 281: 
line 282: " Conary Recipe
line 283: au BufNewFile,BufRead *.recipe^I^I^Isetf conaryrecipe
line 284: 
line 285: " Controllable Regex Mutilator
line 286: au BufNewFile,BufRead *.crm^I^I^Isetf crm
line 287: 
line 288: " Cyn++
line 289: au BufNewFile,BufRead *.cyn^I^I^Isetf cynpp
line 290: 
line 291: " Cynlib
line 292: " .cc and .cpp files can be C++ or Cynlib.
line 293: au BufNewFile,BufRead *.cc if exists("cynlib_syntax_for_cc")|setf cynlib|else|setf cpp|endif
line 295: au BufNewFile,BufRead *.cpp if exists("cynlib_syntax_for_cpp")|setf cynlib|else|setf cpp|endif
line 297: 
line 298: " C++
line 299: au BufNewFile,BufRead *.cxx,*.c++,*.hh,*.hxx,*.hpp,*.ipp,*.moc,*.tcc,*.inl setf cpp
line 300: if has("fname_case")
line 301:   au BufNewFile,BufRead *.C,*.H setf cpp
line 302: endif
line 303: 
line 304: " .h files can be C, Ch C++, ObjC or ObjC++.
line 305: " Set c_syntax_for_h if you want C, ch_syntax_for_h if you want Ch. ObjC is
line 306: " detected automatically.
line 307: au BufNewFile,BufRead *.h^I^I^Icall dist#ft#FTheader()
line 308: 
line 309: " Ch (CHscript)
line 310: au BufNewFile,BufRead *.chf^I^I^Isetf ch
line 311: 
line 312: " TLH files are C++ headers generated by Visual C++'s #import from typelibs
line 313: au BufNewFile,BufRead *.tlh^I^I^Isetf cpp
line 314: 
line 315: " Cascading Style Sheets
line 316: au BufNewFile,BufRead *.css^I^I^Isetf css
line 317: 
line 318: " Century Term Command Scripts (*.cmd too)
line 319: au BufNewFile,BufRead *.con^I^I^Isetf cterm
line 320: 
line 321: " Changelog
line 322: au BufNewFile,BufRead changelog.Debian,changelog.dch,NEWS.Debian,NEWS.dch,*/debian/changelog^Isetf debchangelog
line 324: 
line 325: au BufNewFile,BufRead [cC]hange[lL]og  if getline(1) =~ '; urgency='|   setf debchangelog| else|   setf changelog| endif
line 331: 
line 332: au BufNewFile,BufRead NEWS  if getline(1) =~ '; urgency='|   setf debchangelog| endif
line 336: 
line 337: " CHILL
line 338: au BufNewFile,BufRead *..ch^I^I^Isetf chill
line 339: 
line 340: " Changes for WEB and CWEB or CHILL
line 341: au BufNewFile,BufRead *.ch^I^I^Icall dist#ft#FTchange()
line 342: 
line 343: " ChordPro
line 344: au BufNewFile,BufRead *.chopro,*.crd,*.cho,*.crdpro,*.chordpro^Isetf chordpro
line 345: 
line 346: " Clean
line 347: au BufNewFile,BufRead *.dcl,*.icl^I^Isetf clean
line 348: 
line 349: " Clever
line 350: au BufNewFile,BufRead *.eni^I^I^Isetf cl
line 351: 
line 352: " Clever or dtd
line 353: au BufNewFile,BufRead *.ent^I^I^Icall dist#ft#FTent()
line 354: 
line 355: " Clipper (or FoxPro; could also be eviews)
line 356: au BufNewFile,BufRead *.prg if exists("g:filetype_prg") |   exe "setf " . g:filetype_prg | else |   setf clipper | endif
line 362: 
line 363: " Clojure
line 364: au BufNewFile,BufRead *.clj,*.cljs,*.cljx,*.cljc^I^Isetf clojure
line 365: 
line 366: " Cmake
line 367: au BufNewFile,BufRead CMakeLists.txt,*.cmake,*.cmake.in^I^Isetf cmake
line 368: 
line 369: " Cmusrc
line 370: au BufNewFile,BufRead */.cmus/{autosave,rc,command-history,*.theme} setf cmusrc
line 371: au BufNewFile,BufRead */cmus/{rc,*.theme}^I^I^Isetf cmusrc
line 372: 
line 373: " Cobol
line 374: au BufNewFile,BufRead *.cbl,*.cob,*.lib^Isetf cobol
line 375: "   cobol or zope form controller python script? (heuristic)
line 376: au BufNewFile,BufRead *.cpy if getline(1) =~ '^##' |   setf python | else |   setf cobol | endif
line 382: 
line 383: " Coco/R
line 384: au BufNewFile,BufRead *.atg^I^I^Isetf coco
line 385: 
line 386: " Cold Fusion
line 387: au BufNewFile,BufRead *.cfm,*.cfi,*.cfc^I^Isetf cf
line 388: 
line 389: " Configure scripts
line 390: au BufNewFile,BufRead configure.in,configure.ac setf config
line 391: 
line 392: " CUDA Compute Unified Device Architecture
line 393: au BufNewFile,BufRead *.cu,*.cuh^I^Isetf cuda
line 394: 
line 395: " Dockerfilb; Podman uses the same syntax with name Containerfile
line 396: au BufNewFile,BufRead Containerfile,Dockerfile,*.Dockerfile^Isetf dockerfile
line 397: 
line 398: " WildPackets EtherPeek Decoder
line 399: au BufNewFile,BufRead *.dcd^I^I^Isetf dcd
line 400: 
line 401: " Enlightenment configuration files
line 402: au BufNewFile,BufRead *enlightenment/*.cfg^Isetf c
line 403: 
line 404: " Eterm
line 405: au BufNewFile,BufRead *Eterm/*.cfg^I^Isetf eterm
line 406: 
line 407: " Elixir or Euphoria
line 408: au BufNewFile,BufRead *.ex call dist#ft#ExCheck()
line 409: 
line 410: " Elixir
line 411: au BufRead,BufNewFile mix.lock,*.exs setf elixir
line 412: au BufRead,BufNewFile *.eex,*.leex setf eelixir
line 413: 
line 414: " Euphoria 3 or 4
line 415: au BufNewFile,BufRead *.eu,*.ew,*.exu,*.exw  call dist#ft#EuphoriaCheck()
line 416: if has("fname_case")
line 417:    au BufNewFile,BufRead *.EU,*.EW,*.EX,*.EXU,*.EXW  call dist#ft#EuphoriaCheck()
line 418: endif
line 419: 
line 420: " Lynx config files
line 421: au BufNewFile,BufRead lynx.cfg^I^I^Isetf lynx
line 422: 
line 423: " Modula-3 configuration language (must be before *.cfg and *makefile)
line 424: au BufNewFile,BufRead *.quake,cm3.cfg^I^Isetf m3quake
line 425: au BufNewFile,BufRead m3makefile,m3overrides^Isetf m3build
line 426: 
line 427: " Quake
line 428: au BufNewFile,BufRead *baseq[2-3]/*.cfg,*id1/*.cfg^Isetf quake
line 429: au BufNewFile,BufRead *quake[1-3]/*.cfg^I^I^Isetf quake
line 430: 
line 431: " Quake C
line 432: au BufNewFile,BufRead *.qc^I^I^Isetf c
line 433: 
line 434: " Configure files
line 435: au BufNewFile,BufRead *.cfg^I^I^Isetf cfg
line 436: 
line 437: " Cucumber
line 438: au BufNewFile,BufRead *.feature^I^I^Isetf cucumber
line 439: 
line 440: " Communicating Sequential Processes
line 441: au BufNewFile,BufRead *.csp,*.fdr^I^Isetf csp
line 442: 
line 443: " CUPL logic description and simulation
line 444: au BufNewFile,BufRead *.pld^I^I^Isetf cupl
line 445: au BufNewFile,BufRead *.si^I^I^Isetf cuplsim
line 446: 
line 447: " Dart
line 448: au BufRead,BufNewfile *.dart,*.drt^I^Isetf dart
line 449: 
line 450: " Debian Control
line 451: au BufNewFile,BufRead */debian/control^I^Isetf debcontrol
line 452: au BufNewFile,BufRead control  if getline(1) =~ '^Source:'|   setf debcontrol| endif
line 456: 
line 457: " Debian Copyright
line 458: au BufNewFile,BufRead */debian/copyright^Isetf debcopyright
line 459: au BufNewFile,BufRead copyright  if getline(1) =~ '^Format:'|   setf debcopyright| endif
line 463: 
line 464: " Debian Sources.list
line 465: au BufNewFile,BufRead */etc/apt/sources.list^I^Isetf debsources
line 466: au BufNewFile,BufRead */etc/apt/sources.list.d/*.list^Isetf debsources
line 467: 
line 468: " Deny hosts
line 469: au BufNewFile,BufRead denyhosts.conf^I^Isetf denyhosts
line 470: 
line 471: " dnsmasq(8) configuration files
line 472: au BufNewFile,BufRead */etc/dnsmasq.conf^Isetf dnsmasq
line 473: 
line 474: " ROCKLinux package description
line 475: au BufNewFile,BufRead *.desc^I^I^Isetf desc
line 476: 
line 477: " the D language or dtrace
line 478: au BufNewFile,BufRead *.d^I^I^Icall dist#ft#DtraceCheck()
line 479: 
line 480: " Desktop files
line 481: au BufNewFile,BufRead *.desktop,*.directory^Isetf desktop
line 482: 
line 483: " Dict config
line 484: au BufNewFile,BufRead dict.conf,.dictrc^I^Isetf dictconf
line 485: 
line 486: " Dictd config
line 487: au BufNewFile,BufRead dictd.conf^I^Isetf dictdconf
line 488: 
line 489: " Diff files
line 490: au BufNewFile,BufRead *.diff,*.rej^I^Isetf diff
line 491: au BufNewFile,BufRead *.patch if getline(1) =~ '^From [0-9a-f]\{40\} Mon Sep 17 00:00:00 2001$' |   setf gitsendemail | else |   setf diff | endif
line 497: 
line 498: " Dircolors
line 499: au BufNewFile,BufRead .dir_colors,.dircolors,*/etc/DIR_COLORS^Isetf dircolors
line 500: 
line 501: " Diva (with Skill) or InstallShield
line 502: au BufNewFile,BufRead *.rul if getline(1).getline(2).getline(3).getline(4).getline(5).getline(6) =~? 'InstallShield' |   setf ishd | else |   setf diva | endif
line 508: 
line 509: " DCL (Digital Command Language - vms) or DNS zone file
line 510: au BufNewFile,BufRead *.com^I^I^Icall dist#ft#BindzoneCheck('dcl')
line 511: 
line 512: " DOT
line 513: au BufNewFile,BufRead *.dot,*.gv^I^Isetf dot
line 514: 
line 515: " Dune
line 516: au BufNewFile,BufRead jbuild,dune,dune-project,dune-workspace setf dune
line 517: 
line 518: " Dylan - lid files
line 519: au BufNewFile,BufRead *.lid^I^I^Isetf dylanlid
line 520: 
line 521: " Dylan - intr files (melange)
line 522: au BufNewFile,BufRead *.intr^I^I^Isetf dylanintr
line 523: 
line 524: " Dylan
line 525: au BufNewFile,BufRead *.dylan^I^I^Isetf dylan
line 526: 
line 527: " Microsoft Module Definition
line 528: au BufNewFile,BufRead *.def^I^I^Isetf def
line 529: 
line 530: " Dracula
line 531: au BufNewFile,BufRead *.drac,*.drc,*lvs,*lpe^Isetf dracula
line 532: 
line 533: " Datascript
line 534: au BufNewFile,BufRead *.ds^I^I^Isetf datascript
line 535: 
line 536: " dsl
line 537: au BufNewFile,BufRead *.dsl^I^I^Isetf dsl
line 538: 
line 539: " DTD (Document Type Definition for XML)
line 540: au BufNewFile,BufRead *.dtd^I^I^Isetf dtd
line 541: 
line 542: " DTS/DSTI (device tree files)
line 543: au BufNewFile,BufRead *.dts,*.dtsi^I^Isetf dts
line 544: 
line 545: " EDIF (*.edf,*.edif,*.edn,*.edo) or edn
line 546: au BufNewFile,BufRead *.ed\(f\|if\|o\)^I^Isetf edif
line 547: au BufNewFile,BufRead *.edn if getline(1) =~ '^\s*(\s*edif\>' |   setf edif | else |   setf clojure | endif
line 553: 
line 554: " EditorConfig (close enough to dosini)
line 555: au BufNewFile,BufRead .editorconfig^I^Isetf dosini
line 556: 
line 557: " Embedix Component Description
line 558: au BufNewFile,BufRead *.ecd^I^I^Isetf ecd
line 559: 
line 560: " Eiffel or Specman or Euphoria
line 561: au BufNewFile,BufRead *.e,*.E^I^I^Icall dist#ft#FTe()
line 562: 
line 563: " Elinks configuration
line 564: au BufNewFile,BufRead elinks.conf^I^Isetf elinks
line 565: 
line 566: " ERicsson LANGuage; Yaws is erlang too
line 567: au BufNewFile,BufRead *.erl,*.hrl,*.yaws^Isetf erlang
line 568: 
line 569: " Elm
line 570: au BufNewFile,BufRead *.elm^I^I^Isetf elm
line 571: 
line 572: " Elm Filter Rules file
line 573: au BufNewFile,BufRead filter-rules^I^Isetf elmfilt
line 574: 
line 575: " ESMTP rc file
line 576: au BufNewFile,BufRead *esmtprc^I^I^Isetf esmtprc
line 577: 
line 578: " ESQL-C
line 579: au BufNewFile,BufRead *.ec,*.EC^I^I^Isetf esqlc
line 580: 
line 581: " Esterel
line 582: au BufNewFile,BufRead *.strl^I^I^Isetf esterel
line 583: 
line 584: " Essbase script
line 585: au BufNewFile,BufRead *.csc^I^I^Isetf csc
line 586: 
line 587: " Exim
line 588: au BufNewFile,BufRead exim.conf^I^I^Isetf exim
line 589: 
line 590: " Expect
line 591: au BufNewFile,BufRead *.exp^I^I^Isetf expect
line 592: 
line 593: " Exports
line 594: au BufNewFile,BufRead exports^I^I^Isetf exports
line 595: 
line 596: " Falcon
line 597: au BufNewFile,BufRead *.fal^I^I^Isetf falcon
line 598: 
line 599: " Fantom
line 600: au BufNewFile,BufRead *.fan,*.fwt^I^Isetf fan
line 601: 
line 602: " Factor
line 603: au BufNewFile,BufRead *.factor^I^I^Isetf factor
line 604: 
line 605: " Fennel
line 606: autocmd BufRead,BufNewFile *.fnl^I^Isetf fennel
line 607: 
line 608: " Fetchmail RC file
line 609: au BufNewFile,BufRead .fetchmailrc^I^Isetf fetchmail
line 610: 
line 611: " FlexWiki - disabled, because it has side effects when a .wiki file
line 612: " is not actually FlexWiki
line 613: "au BufNewFile,BufRead *.wiki^I^I^Isetf flexwiki
line 614: 
line 615: " Focus Executable
line 616: au BufNewFile,BufRead *.fex,*.focexec^I^Isetf focexec
line 617: 
line 618: " Focus Master file (but not for auto.master)
line 619: au BufNewFile,BufRead auto.master^I^Isetf conf
line 620: au BufNewFile,BufRead *.mas,*.master^I^Isetf master
line 621: 
line 622: " Forth
line 623: au BufNewFile,BufRead *.fs,*.ft,*.fth^I^Isetf forth
line 624: 
line 625: " Reva Forth
line 626: au BufNewFile,BufRead *.frt^I^I^Isetf reva
line 627: 
line 628: " Fortran
line 629: if has("fname_case")
line 630:   au BufNewFile,BufRead *.F,*.FOR,*.FPP,*.FTN,*.F77,*.F90,*.F95,*.F03,*.F08^I setf fortran
line 631: endif
line 632: au BufNewFile,BufRead   *.f,*.for,*.fortran,*.fpp,*.ftn,*.f77,*.f90,*.f95,*.f03,*.f08  setf fortran
line 633: 
line 634: " Framescript
line 635: au BufNewFile,BufRead *.fsl^I^I^Isetf framescript
line 636: 
line 637: " FStab
line 638: au BufNewFile,BufRead fstab,mtab^I^Isetf fstab
line 639: 
line 640: " GDB command files
line 641: au BufNewFile,BufRead .gdbinit^I^I^Isetf gdb
line 642: 
line 643: " GDMO
line 644: au BufNewFile,BufRead *.mo,*.gdmo^I^Isetf gdmo
line 645: 
line 646: " Gedcom
line 647: au BufNewFile,BufRead *.ged,lltxxxxx.txt^Isetf gedcom
line 648: 
line 649: " Gift (Moodle)
line 650: autocmd BufRead,BufNewFile *.gift^I^Isetf gift
line 651: 
line 652: " Git
line 653: au BufNewFile,BufRead COMMIT_EDITMSG,MERGE_MSG,TAG_EDITMSG ^Isetf gitcommit
line 654: au BufNewFile,BufRead *.git/config,.gitconfig,/etc/gitconfig ^Isetf gitconfig
line 655: au BufNewFile,BufRead */.config/git/config^I^I^Isetf gitconfig
line 656: au BufNewFile,BufRead .gitmodules,*.git/modules/*/config^Isetf gitconfig
line 657: if !empty($XDG_CONFIG_HOME)
line 658:   au BufNewFile,BufRead $XDG_CONFIG_HOME/git/config^I^Isetf gitconfig
line 659: endif
line 660: au BufNewFile,BufRead git-rebase-todo^I^Isetf gitrebase
line 661: au BufRead,BufNewFile .gitsendemail.msg.??????^Isetf gitsendemail
line 662: au BufNewFile,BufRead .msg.[0-9]* if getline(1) =~ '^From.*# This line is ignored.$' |   setf gitsendemail | endif
line 666: au BufNewFile,BufRead *.git/* if getline(1) =~ '^\x\{40\}\>\|^ref: ' |   setf git | endif
line 670: 
line 671: " Gkrellmrc
line 672: au BufNewFile,BufRead gkrellmrc,gkrellmrc_?^Isetf gkrellmrc
line 673: 
line 674: " GP scripts (2.0 and onward)
line 675: au BufNewFile,BufRead *.gp,.gprc^I^Isetf gp
line 676: 
line 677: " GPG
line 678: au BufNewFile,BufRead */.gnupg/options^I^Isetf gpg
line 679: au BufNewFile,BufRead */.gnupg/gpg.conf^I^Isetf gpg
line 680: au BufNewFile,BufRead */usr/*/gnupg/options.skel setf gpg
line 681: if !empty($GNUPGHOME)
line 682:   au BufNewFile,BufRead $GNUPGHOME/options^Isetf gpg
line 683:   au BufNewFile,BufRead $GNUPGHOME/gpg.conf^Isetf gpg
line 684: endif
line 685: 
line 686: " gnash(1) configuration files
line 687: au BufNewFile,BufRead gnashrc,.gnashrc,gnashpluginrc,.gnashpluginrc setf gnash
line 688: 
line 689: " Gitolite
line 690: au BufNewFile,BufRead gitolite.conf^I^Isetf gitolite
line 691: au BufNewFile,BufRead {,.}gitolite.rc,example.gitolite.rc^Isetf perl
line 692: 
line 693: " Gnuplot scripts
line 694: au BufNewFile,BufRead *.gpi^I^I^Isetf gnuplot
line 695: 
line 696: " Go (Google)
line 697: au BufNewFile,BufRead *.go^I^I^Isetf go
line 698: 
line 699: " GrADS scripts
line 700: au BufNewFile,BufRead *.gs^I^I^Isetf grads
line 701: 
line 702: " Gretl
line 703: au BufNewFile,BufRead *.gretl^I^I^Isetf gretl
line 704: 
line 705: " Groovy
line 706: au BufNewFile,BufRead *.gradle,*.groovy^I^Isetf groovy
line 707: 
line 708: " GNU Server Pages
line 709: au BufNewFile,BufRead *.gsp^I^I^Isetf gsp
line 710: 
line 711: " Group file
line 712: au BufNewFile,BufRead */etc/group,*/etc/group-,*/etc/group.edit,*/etc/gshadow,*/etc/gshadow-,*/etc/gshadow.edit,*/var/backups/group.bak,*/var/backups/gshadow.bak  setf group
line 713: 
line 714: " GTK RC
line 715: au BufNewFile,BufRead .gtkrc,gtkrc^I^Isetf gtkrc
line 716: 
line 717: " Haml
line 718: au BufNewFile,BufRead *.haml^I^I^Isetf haml
line 719: 
line 720: " Hamster Classic | Playground files
line 721: au BufNewFile,BufRead *.hsm^I^I^Isetf hamster
line 722: 
line 723: " Haskell
line 724: au BufNewFile,BufRead *.hs,*.hsc,*.hs-boot,*.hsig setf haskell
line 725: au BufNewFile,BufRead *.lhs^I^I^Isetf lhaskell
line 726: au BufNewFile,BufRead *.chs^I^I^Isetf chaskell
line 727: au BufNewFile,BufRead cabal.project^I^Isetf cabalproject
line 728: au BufNewFile,BufRead $HOME/.cabal/config^Isetf cabalconfig
line 729: au BufNewFile,BufRead cabal.config^I^Isetf cabalconfig
line 730: 
line 731: " Haste
line 732: au BufNewFile,BufRead *.ht^I^I^Isetf haste
line 733: au BufNewFile,BufRead *.htpp^I^I^Isetf hastepreproc
line 734: 
line 735: " Hercules
line 736: au BufNewFile,BufRead *.vc,*.ev,*.sum,*.errsum^Isetf hercules
line 737: 
line 738: " HEX (Intel)
line 739: au BufNewFile,BufRead *.hex,*.h32^I^Isetf hex
line 740: 
line 741: " Hollywood
line 742: au BufRead,BufNewFile *.hws^I^I^Isetf hollywood
line 743: 
line 744: " Tilde (must be before HTML)
line 745: au BufNewFile,BufRead *.t.html^I^I^Isetf tilde
line 746: 
line 747: " HTML (.shtml and .stm for server side)
line 748: au BufNewFile,BufRead *.html,*.htm,*.shtml,*.stm  call dist#ft#FThtml()
line 749: 
line 750: " HTML with Ruby - eRuby
line 751: au BufNewFile,BufRead *.erb,*.rhtml^I^Isetf eruby
line 752: 
line 753: " HTML with M4
line 754: au BufNewFile,BufRead *.html.m4^I^I^Isetf htmlm4
line 755: 
line 756: " Some template.  Used to be HTML Cheetah.
line 757: au BufNewFile,BufRead *.tmpl^I^I^Isetf template
line 758: 
line 759: " Host config
line 760: au BufNewFile,BufRead */etc/host.conf^I^Isetf hostconf
line 761: 
line 762: " Hosts access
line 763: au BufNewFile,BufRead */etc/hosts.allow,*/etc/hosts.deny  setf hostsaccess
line 764: 
line 765: " Hyper Builder
line 766: au BufNewFile,BufRead *.hb^I^I^Isetf hb
line 767: 
line 768: " Httest
line 769: au BufNewFile,BufRead *.htt,*.htb^I^Isetf httest
line 770: 
line 771: " Icon
line 772: au BufNewFile,BufRead *.icn^I^I^Isetf icon
line 773: 
line 774: " IDL (Interface Description Language)
line 775: au BufNewFile,BufRead *.idl^I^I^Icall dist#ft#FTidl()
line 776: 
line 777: " Microsoft IDL (Interface Description Language)  Also *.idl
line 778: " MOF = WMI (Windows Management Instrumentation) Managed Object Format
line 779: au BufNewFile,BufRead *.odl,*.mof^I^Isetf msidl
line 780: 
line 781: " Icewm menu
line 782: au BufNewFile,BufRead */.icewm/menu^I^Isetf icemenu
line 783: 
line 784: " Indent profile (must come before IDL *.pro!)
line 785: au BufNewFile,BufRead .indent.pro^I^Isetf indent
line 786: au BufNewFile,BufRead indent.pro^I^Icall dist#ft#ProtoCheck('indent')
line 787: 
line 788: " IDL (Interactive Data Language)
line 789: au BufNewFile,BufRead *.pro^I^I^Icall dist#ft#ProtoCheck('idlang')
line 790: 
line 791: " Indent RC
line 792: au BufNewFile,BufRead indentrc^I^I^Isetf indent
line 793: 
line 794: " Inform
line 795: au BufNewFile,BufRead *.inf,*.INF^I^Isetf inform
line 796: 
line 797: " Initng
line 798: au BufNewFile,BufRead */etc/initng/*/*.i,*.ii^Isetf initng
line 799: 
line 800: " Innovation Data Processing
line 801: au BufRead,BufNewFile upstream.dat\c,upstream.*.dat\c,*.upstream.dat\c^Isetf upstreamdat
line 802: au BufRead,BufNewFile fdrupstream.log,upstream.log\c,upstream.*.log\c,*.upstream.log\c,UPSTREAM-*.log\c^Isetf upstreamlog
line 803: au BufRead,BufNewFile upstreaminstall.log\c,upstreaminstall.*.log\c,*.upstreaminstall.log\c setf upstreaminstalllog
line 804: au BufRead,BufNewFile usserver.log\c,usserver.*.log\c,*.usserver.log\c^Isetf usserverlog
line 805: au BufRead,BufNewFile usw2kagt.log\c,usw2kagt.*.log\c,*.usw2kagt.log\c^Isetf usw2kagtlog
line 806: 
line 807: " Ipfilter
line 808: au BufNewFile,BufRead ipf.conf,ipf6.conf,ipf.rules^Isetf ipfilter
line 809: 
line 810: " Informix 4GL (source - canonical, include file, I4GL+M4 preproc.)
line 811: au BufNewFile,BufRead *.4gl,*.4gh,*.m4gl^Isetf fgl
line 812: 
line 813: " .INI file for MSDOS
line 814: au BufNewFile,BufRead *.ini^I^I^Isetf dosini
line 815: 
line 816: " SysV Inittab
line 817: au BufNewFile,BufRead inittab^I^I^Isetf inittab
line 818: 
line 819: " Inno Setup
line 820: au BufNewFile,BufRead *.iss^I^I^Isetf iss
line 821: 
line 822: " J
line 823: au BufNewFile,BufRead *.ijs^I^I^Isetf j
line 824: 
line 825: " JAL
line 826: au BufNewFile,BufRead *.jal,*.JAL^I^Isetf jal
line 827: 
line 828: " Jam
line 829: au BufNewFile,BufRead *.jpl,*.jpr^I^Isetf jam
line 830: 
line 831: " Java
line 832: au BufNewFile,BufRead *.java,*.jav^I^Isetf java
line 833: 
line 834: " JavaCC
line 835: au BufNewFile,BufRead *.jj,*.jjt^I^Isetf javacc
line 836: 
line 837: " JavaScript, ECMAScript, ES module script, CommonJS script
line 838: au BufNewFile,BufRead *.js,*.javascript,*.es,*.mjs,*.cjs   setf javascript
line 839: 
line 840: " JavaScript with React
line 841: au BufNewFile,BufRead *.jsx^I^I^Isetf javascriptreact
line 842: 
line 843: " Java Server Pages
line 844: au BufNewFile,BufRead *.jsp^I^I^Isetf jsp
line 845: 
line 846: " Java Properties resource file (note: doesn't catch font.properties.pl)
line 847: au BufNewFile,BufRead *.properties,*.properties_??,*.properties_??_??^Isetf jproperties
line 848: 
line 849: " Jess
line 850: au BufNewFile,BufRead *.clp^I^I^Isetf jess
line 851: 
line 852: " Jgraph
line 853: au BufNewFile,BufRead *.jgr^I^I^Isetf jgraph
line 854: 
line 855: " Jovial
line 856: au BufNewFile,BufRead *.jov,*.j73,*.jovial^Isetf jovial
line 857: 
line 858: " JSON
line 859: au BufNewFile,BufRead *.json,*.jsonp,*.webmanifest^Isetf json
line 860: 
line 861: " JSON Patch (RFC 6902)
line 862: au BufNewFile,BufRead *.json-patch^I^I^Isetf json
line 863: 
line 864: " Jupyter Notebook is also json
line 865: au BufNewFile,BufRead *.ipynb^I^I^I^Isetf json
line 866: 
line 867: " Kixtart
line 868: au BufNewFile,BufRead *.kix^I^I^Isetf kix
line 869: 
line 870: " Kimwitu[++]
line 871: au BufNewFile,BufRead *.k^I^I^Isetf kwt
line 872: 
line 873: " Kivy
line 874: au BufNewFile,BufRead *.kv^I^I^Isetf kivy
line 875: 
line 876: " Kotlin
line 877: au BufNewFile,BufRead *.kt,*.ktm,*.kts^I^Isetf kotlin
line 878: 
line 879: " KDE script
line 880: au BufNewFile,BufRead *.ks^I^I^Isetf kscript
line 881: 
line 882: " Kconfig
line 883: au BufNewFile,BufRead Kconfig,Kconfig.debug^Isetf kconfig
line 884: 
line 885: " Lace (ISE)
line 886: au BufNewFile,BufRead *.ace,*.ACE^I^Isetf lace
line 887: 
line 888: " Latte
line 889: au BufNewFile,BufRead *.latte,*.lte^I^Isetf latte
line 890: 
line 891: " Limits
line 892: au BufNewFile,BufRead */etc/limits,*/etc/*limits.conf,*/etc/*limits.d/*.conf^Isetf limits
line 893: 
line 894: " LambdaProlog (*.mod too, see Modsim)
line 895: au BufNewFile,BufRead *.sig^I^I^Isetf lprolog
line 896: 
line 897: " LDAP LDIF
line 898: au BufNewFile,BufRead *.ldif^I^I^Isetf ldif
line 899: 
line 900: " Ld loader
line 901: au BufNewFile,BufRead *.ld^I^I^Isetf ld
line 902: 
line 903: " Less
line 904: au BufNewFile,BufRead *.less^I^I^Isetf less
line 905: 
line 906: " Lex
line 907: au BufNewFile,BufRead *.lex,*.l,*.lxx,*.l++^Isetf lex
line 908: 
line 909: " Libao
line 910: au BufNewFile,BufRead */etc/libao.conf,*/.libao^Isetf libao
line 911: 
line 912: " Libsensors
line 913: au BufNewFile,BufRead */etc/sensors.conf,*/etc/sensors3.conf^Isetf sensors
line 914: 
line 915: " LFTP
line 916: au BufNewFile,BufRead lftp.conf,.lftprc,*lftp/rc^Isetf lftp
line 917: 
line 918: " Lifelines (or Lex for C++!)
line 919: au BufNewFile,BufRead *.ll^I^I^Isetf lifelines
line 920: 
line 921: " Lilo: Linux loader
line 922: au BufNewFile,BufRead lilo.conf^I^I^Isetf lilo
line 923: 
line 924: " Lisp (*.el = ELisp, *.cl = Common Lisp)
line 925: " *.jl was removed, it's also used for Julia, better skip than guess wrong.
line 926: if has("fname_case")
line 927:   au BufNewFile,BufRead *.lsp,*.lisp,*.el,*.cl,*.L,.emacs,.sawfishrc setf lisp
line 928: else
line 929:   au BufNewFile,BufRead *.lsp,*.lisp,*.el,*.cl,.emacs,.sawfishrc setf lisp
line 930: endif
line 931: 
line 932: " SBCL implementation of Common Lisp
line 933: au BufNewFile,BufRead sbclrc,.sbclrc^I^Isetf lisp
line 934: 
line 935: " Liquid
line 936: au BufNewFile,BufRead *.liquid^I^I^Isetf liquid
line 937: 
line 938: " Lite
line 939: au BufNewFile,BufRead *.lite,*.lt^I^Isetf lite
line 940: 
line 941: " LiteStep RC files
line 942: au BufNewFile,BufRead */LiteStep/*/*.rc^I^Isetf litestep
line 943: 
line 944: " Login access
line 945: au BufNewFile,BufRead */etc/login.access^Isetf loginaccess
line 946: 
line 947: " Login defs
line 948: au BufNewFile,BufRead */etc/login.defs^I^Isetf logindefs
line 949: 
line 950: " Logtalk
line 951: au BufNewFile,BufRead *.lgt^I^I^Isetf logtalk
line 952: 
line 953: " LOTOS
line 954: au BufNewFile,BufRead *.lot,*.lotos^I^Isetf lotos
line 955: 
line 956: " Lout (also: *.lt)
line 957: au BufNewFile,BufRead *.lou,*.lout^I^Isetf lout
line 958: 
line 959: " Lua
line 960: au BufNewFile,BufRead *.lua^I^I^Isetf lua
line 961: 
line 962: " Luarocks
line 963: au BufNewFile,BufRead *.rockspec^I^Isetf lua
line 964: 
line 965: " Linden Scripting Language (Second Life)
line 966: au BufNewFile,BufRead *.lsl^I^I^Isetf lsl
line 967: 
line 968: " Lynx style file (or LotusScript!)
line 969: au BufNewFile,BufRead *.lss^I^I^Isetf lss
line 970: 
line 971: " M4
line 972: au BufNewFile,BufRead *.m4 if expand("<afile>") !~? 'html.m4$\|fvwm2rc' | setf m4 | endif
line 974: 
line 975: " MaGic Point
line 976: au BufNewFile,BufRead *.mgp^I^I^Isetf mgp
line 977: 
line 978: " Mail (for Elm, trn, mutt, muttng, rn, slrn, neomutt)
line 979: au BufNewFile,BufRead snd.\d\+,.letter,.letter.\d\+,.followup,.article,.article.\d\+,pico.\d\+,mutt{ng,}-*-\w\+,mutt[[:alnum:]_-]\\\{6\},neomutt-*-\w\+,neomutt[[:alnum:]_-]\\\{6\},ae\d\+.txt,/tmp/SLRN[0-9A-Z.]\+,*.eml setf mail
line 980: 
line 981: " Mail aliases
line 982: au BufNewFile,BufRead */etc/mail/aliases,*/etc/aliases^Isetf mailaliases
line 983: 
line 984: " Mailcap configuration file
line 985: au BufNewFile,BufRead .mailcap,mailcap^I^Isetf mailcap
line 986: 
line 987: " Makefile
line 988: au BufNewFile,BufRead *[mM]akefile,*.mk,*.mak,*.dsp setf make
line 989: 
line 990: " MakeIndex
line 991: au BufNewFile,BufRead *.ist,*.mst^I^Isetf ist
line 992: 
line 993: " Mallard
line 994: au BufNewFile,BufRead *.page^I^I^Isetf mallard
line 995: 
line 996: " Manpage
line 997: au BufNewFile,BufRead *.man^I^I^Isetf nroff
line 998: 
line 999: " Man config
line 1000: au BufNewFile,BufRead */etc/man.conf,man.config^Isetf manconf
line 1001: 
line 1002: " Maple V
line 1003: au BufNewFile,BufRead *.mv,*.mpl,*.mws^I^Isetf maple
line 1004: 
line 1005: " Map (UMN mapserver config file)
line 1006: au BufNewFile,BufRead *.map^I^I^Isetf map
line 1007: 
line 1008: " Markdown
line 1009: au BufNewFile,BufRead *.markdown,*.mdown,*.mkd,*.mkdn,*.mdwn,*.md  setf markdown
line 1010: 
line 1011: " Mason
line 1012: au BufNewFile,BufRead *.mason,*.mhtml,*.comp^Isetf mason
line 1013: 
line 1014: " Mathematica, Matlab, Murphi or Objective C
line 1015: au BufNewFile,BufRead *.m^I^I^Icall dist#ft#FTm()
line 1016: 
line 1017: " Mathematica notebook
line 1018: au BufNewFile,BufRead *.nb^I^I^Isetf mma
line 1019: 
line 1020: " Maya Extension Language
line 1021: au BufNewFile,BufRead *.mel^I^I^Isetf mel
line 1022: 
line 1023: " Mercurial (hg) commit file
line 1024: au BufNewFile,BufRead hg-editor-*.txt^I^Isetf hgcommit
line 1025: 
line 1026: " Mercurial config (looks like generic config file)
line 1027: au BufNewFile,BufRead *.hgrc,*hgrc^I^Isetf cfg
line 1028: 
line 1029: " Meson Build system config
line 1030: au BufNewFile,BufRead meson.build,meson_options.txt setf meson
line 1031: au BufNewFile,BufRead *.wrap^I^I^Isetf dosini
line 1032: 
line 1033: " Messages (logs mostly)
line 1034: au BufNewFile,BufRead */log/{auth,cron,daemon,debug,kern,lpr,mail,messages,news/news,syslog,user}{,.log,.err,.info,.warn,.crit,.notice}{,.[0-9]*,-[0-9]*} setf messages
line 1035: 
line 1036: " Metafont
line 1037: au BufNewFile,BufRead *.mf^I^I^Isetf mf
line 1038: 
line 1039: " MetaPost
line 1040: au BufNewFile,BufRead *.mp^I^I^Isetf mp
line 1041: 
line 1042: " MGL
line 1043: au BufNewFile,BufRead *.mgl^I^I^Isetf mgl
line 1044: 
line 1045: " MIX - Knuth assembly
line 1046: au BufNewFile,BufRead *.mix,*.mixal^I^Isetf mix
line 1047: 
line 1048: " MMIX or VMS makefile
line 1049: au BufNewFile,BufRead *.mms^I^I^Icall dist#ft#FTmms()
line 1050: 
line 1051: " Symbian meta-makefile definition (MMP)
line 1052: au BufNewFile,BufRead *.mmp^I^I^Isetf mmp
line 1053: 
line 1054: " Modsim III (or LambdaProlog)
line 1055: au BufNewFile,BufRead *.mod if getline(1) =~ '\<module\>' |   setf lprolog | else |   setf modsim3 | endif
line 1061: 
line 1062: " Modula-2  (.md removed in favor of Markdown)
line 1063: au BufNewFile,BufRead *.m2,*.DEF,*.MOD,*.mi^Isetf modula2
line 1064: 
line 1065: " Modula-3 (.m3, .i3, .mg, .ig)
line 1066: au BufNewFile,BufRead *.[mi][3g]^I^Isetf modula3
line 1067: 
line 1068: " Monk
line 1069: au BufNewFile,BufRead *.isc,*.monk,*.ssc,*.tsc^Isetf monk
line 1070: 
line 1071: " MOO
line 1072: au BufNewFile,BufRead *.moo^I^I^Isetf moo
line 1073: 
line 1074: " Modconf
line 1075: au BufNewFile,BufRead */etc/modules.conf,*/etc/modules,*/etc/conf.modules setf modconf
line 1076: 
line 1077: " Mplayer config
line 1078: au BufNewFile,BufRead mplayer.conf,*/.mplayer/config^Isetf mplayerconf
line 1079: 
line 1080: " Motorola S record
line 1081: au BufNewFile,BufRead *.s19,*.s28,*.s37,*.mot,*.srec^Isetf srec
line 1082: 
line 1083: " Mrxvtrc
line 1084: au BufNewFile,BufRead mrxvtrc,.mrxvtrc^I^Isetf mrxvtrc
line 1085: 
line 1086: " Msql
line 1087: au BufNewFile,BufRead *.msql^I^I^Isetf msql
line 1088: 
line 1089: " Mysql
line 1090: au BufNewFile,BufRead *.mysql^I^I^Isetf mysql
line 1091: 
line 1092: " Mutt setup files (must be before catch *.rc)
line 1093: au BufNewFile,BufRead */etc/Muttrc.d/*^I^Icall s:StarSetf('muttrc')
line 1094: 
line 1095: " M$ Resource files
line 1096: au BufNewFile,BufRead *.rc,*.rch^I^Isetf rc
line 1097: 
line 1098: " MuPAD source
line 1099: au BufRead,BufNewFile *.mu^I^I^Isetf mupad
line 1100: 
line 1101: " Mush
line 1102: au BufNewFile,BufRead *.mush^I^I^Isetf mush
line 1103: 
line 1104: " Mutt setup file (also for Muttng)
line 1105: au BufNewFile,BufRead Mutt{ng,}rc^I^Isetf muttrc
line 1106: 
line 1107: " N1QL
line 1108: au BufRead,BufNewfile *.n1ql,*.nql^I^Isetf n1ql
line 1109: 
line 1110: " Nano
line 1111: au BufNewFile,BufRead */etc/nanorc,*.nanorc^Isetf nanorc
line 1112: 
line 1113: " Nastran input/DMAP
line 1114: "au BufNewFile,BufRead *.dat^I^I^Isetf nastran
line 1115: 
line 1116: " Natural
line 1117: au BufNewFile,BufRead *.NS[ACGLMNPS]^I^Isetf natural
line 1118: 
line 1119: " Noemutt setup file
line 1120: au BufNewFile,BufRead Neomuttrc^I^I^Isetf neomuttrc
line 1121: 
line 1122: " Netrc
line 1123: au BufNewFile,BufRead .netrc^I^I^Isetf netrc
line 1124: 
line 1125: " Ninja file
line 1126: au BufNewFile,BufRead *.ninja^I^I^Isetf ninja
line 1127: 
line 1128: " NPM RC file
line 1129: au BufNewFile,BufRead npmrc,.npmrc^I^Isetf dosini
line 1130: 
line 1131: " Novell netware batch files
line 1132: au BufNewFile,BufRead *.ncf^I^I^Isetf ncf
line 1133: 
line 1134: " Nroff/Troff (*.ms and *.t are checked below)
line 1135: au BufNewFile,BufRead *.me if expand("<afile>") != "read.me" && expand("<afile>") != "click.me" |   setf nroff | endif
line 1139: au BufNewFile,BufRead *.tr,*.nr,*.roff,*.tmac,*.mom^Isetf nroff
line 1140: au BufNewFile,BufRead *.[1-9]^I^I^Icall dist#ft#FTnroff()
line 1141: 
line 1142: " Nroff or Objective C++
line 1143: au BufNewFile,BufRead *.mm^I^I^Icall dist#ft#FTmm()
line 1144: 
line 1145: " Not Quite C
line 1146: au BufNewFile,BufRead *.nqc^I^I^Isetf nqc
line 1147: 
line 1148: " NSE - Nmap Script Engine - uses Lua syntax
line 1149: au BufNewFile,BufRead *.nse^I^I^Isetf lua
line 1150: 
line 1151: " NSIS
line 1152: au BufNewFile,BufRead *.nsi,*.nsh^I^Isetf nsis
line 1153: 
line 1154: " OCaml
line 1155: au BufNewFile,BufRead *.ml,*.mli,*.mll,*.mly,.ocamlinit,*.mlt,*.mlp,*.mlip,*.mli.cppo,*.ml.cppo setf ocaml
line 1156: 
line 1157: " Occam
line 1158: au BufNewFile,BufRead *.occ^I^I^Isetf occam
line 1159: 
line 1160: " Omnimark
line 1161: au BufNewFile,BufRead *.xom,*.xin^I^Isetf omnimark
line 1162: 
line 1163: " OPAM
line 1164: au BufNewFile,BufRead opam,*.opam,*.opam.template setf opam
line 1165: 
line 1166: " OpenROAD
line 1167: au BufNewFile,BufRead *.or^I^I^Isetf openroad
line 1168: 
line 1169: " OPL
line 1170: au BufNewFile,BufRead *.[Oo][Pp][Ll]^I^Isetf opl
line 1171: 
line 1172: " Oracle config file
line 1173: au BufNewFile,BufRead *.ora^I^I^Isetf ora
line 1174: 
line 1175: " Packet filter conf
line 1176: au BufNewFile,BufRead pf.conf^I^I^Isetf pf
line 1177: 
line 1178: " Pacman Config (close enough to dosini)
line 1179: au BufNewFile,BufRead */etc/pacman.conf^I^Isetf dosini
line 1180: 
line 1181: " Pacman hooks
line 1182: au BufNewFile,BufRead *.hook if getline(1) == '[Trigger]' |   setf dosini | endif
line 1186: 
line 1187: " Pam conf
line 1188: au BufNewFile,BufRead */etc/pam.conf^I^I^Isetf pamconf
line 1189: 
line 1190: " Pam environment
line 1191: au BufNewFile,BufRead pam_env.conf,.pam_environment^Isetf pamenv
line 1192: 
line 1193: " PApp
line 1194: au BufNewFile,BufRead *.papp,*.pxml,*.pxsl^Isetf papp
line 1195: 
line 1196: " Password file
line 1197: au BufNewFile,BufRead */etc/passwd,*/etc/passwd-,*/etc/passwd.edit,*/etc/shadow,*/etc/shadow-,*/etc/shadow.edit,*/var/backups/passwd.bak,*/var/backups/shadow.bak setf passwd
line 1198: 
line 1199: " Pascal (also *.p, *.pp, *.inc)
line 1200: au BufNewFile,BufRead *.pas^I^I^Isetf pascal
line 1201: 
line 1202: " Pascal or Puppet manifest
line 1203: au BufNewFile,BufRead *.pp^I^I^Icall dist#ft#FTpp()
line 1204: 
line 1205: " Delphi or Lazarus program file
line 1206: au BufNewFile,BufRead *.dpr,*.lpr^I^Isetf pascal
line 1207: 
line 1208: " Free Pascal makefile definition file
line 1209: au BufNewFile,BufRead *.fpc^I^I^Isetf fpcmake
line 1210: 
line 1211: " PDF
line 1212: au BufNewFile,BufRead *.pdf^I^I^Isetf pdf
line 1213: 
line 1214: " PCMK - HAE - crm configure edit
line 1215: au BufNewFile,BufRead *.pcmk^I^I^Isetf pcmk
line 1216: 
line 1217: " Perl
line 1218: if has("fname_case")
line 1219:   au BufNewFile,BufRead *.pl,*.PL^I^Icall dist#ft#FTpl()
line 1220: else
line 1221:   au BufNewFile,BufRead *.pl^I^I^Icall dist#ft#FTpl()
line 1222: endif
line 1223: au BufNewFile,BufRead *.plx,*.al,*.psgi^I^Isetf perl
line 1224: 
line 1225: " Perl, XPM or XPM2
line 1226: au BufNewFile,BufRead *.pm if getline(1) =~ "XPM2" |   setf xpm2 | elseif getline(1) =~ "XPM" |   setf xpm | else |   setf perl | endif
line 1234: 
line 1235: " Perl POD
line 1236: au BufNewFile,BufRead *.pod^I^I^Isetf pod
line 1237: 
line 1238: " Php, php3, php4, etc.
line 1239: " Also Phtml (was used for PHP 2 in the past)
line 1240: " Also .ctp for Cake template file
line 1241: au BufNewFile,BufRead *.php,*.php\d,*.phtml,*.ctp^Isetf php
line 1242: 
line 1243: " PHP config
line 1244: au BufNewFile,BufRead php.ini-*^I^I^Isetf dosini
line 1245: 
line 1246: " Pike and Cmod
line 1247: au BufNewFile,BufRead *.pike,*.pmod^I^Isetf pike
line 1248: au BufNewFile,BufRead *.cmod^I^I^Isetf cmod
line 1249: 
line 1250: " Pinfo config
line 1251: au BufNewFile,BufRead */etc/pinforc,*/.pinforc^Isetf pinfo
line 1252: 
line 1253: " Palm Resource compiler
line 1254: au BufNewFile,BufRead *.rcp^I^I^Isetf pilrc
line 1255: 
line 1256: " Pine config
line 1257: au BufNewFile,BufRead .pinerc,pinerc,.pinercex,pinercex^I^Isetf pine
line 1258: 
line 1259: " Pipenv Pipfiles
line 1260: au BufNewFile,BufRead Pipfile^I^I^Isetf config
line 1261: au BufNewFile,BufRead Pipfile.lock^I^Isetf json
line 1262: 
line 1263: " PL/1, PL/I
line 1264: au BufNewFile,BufRead *.pli,*.pl1^I^Isetf pli
line 1265: 
line 1266: " PL/M (also: *.inp)
line 1267: au BufNewFile,BufRead *.plm,*.p36,*.pac^I^Isetf plm
line 1268: 
line 1269: " PL/SQL
line 1270: au BufNewFile,BufRead *.pls,*.plsql^I^Isetf plsql
line 1271: 
line 1272: " PLP
line 1273: au BufNewFile,BufRead *.plp^I^I^Isetf plp
line 1274: 
line 1275: " PO and PO template (GNU gettext)
line 1276: au BufNewFile,BufRead *.po,*.pot^I^Isetf po
line 1277: 
line 1278: " Postfix main config
line 1279: au BufNewFile,BufRead main.cf^I^I^Isetf pfmain
line 1280: 
line 1281: " PostScript (+ font files, encapsulated PostScript, Adobe Illustrator)
line 1282: au BufNewFile,BufRead *.ps,*.pfa,*.afm,*.eps,*.epsf,*.epsi,*.ai^I  setf postscr
line 1283: 
line 1284: " PostScript Printer Description
line 1285: au BufNewFile,BufRead *.ppd^I^I^Isetf ppd
line 1286: 
line 1287: " Povray
line 1288: au BufNewFile,BufRead *.pov^I^I^Isetf pov
line 1289: 
line 1290: " Povray configuration
line 1291: au BufNewFile,BufRead .povrayrc^I^I^Isetf povini
line 1292: 
line 1293: " Povray, Pascal, PHP or assembly
line 1294: au BufNewFile,BufRead *.inc^I^I^Icall dist#ft#FTinc()
line 1295: 
line 1296: " PowerShell
line 1297: au BufNewFile,BufRead^I*.ps1,*.psd1,*.psm1,*.pssc^Isetf ps1
line 1298: au BufNewFile,BufRead^I*.ps1xml^I^I^Isetf ps1xml
line 1299: au BufNewFile,BufRead^I*.cdxml,*.psc1^I^I^Isetf xml
line 1300: 
line 1301: " Printcap and Termcap
line 1302: au BufNewFile,BufRead *printcap let b:ptcap_type = "print" | setf ptcap
line 1304: au BufNewFile,BufRead *termcap let b:ptcap_type = "term" | setf ptcap
line 1306: 
line 1307: " PCCTS / ANTLR
line 1308: "au BufNewFile,BufRead *.g^I^I^Isetf antlr
line 1309: au BufNewFile,BufRead *.g^I^I^Isetf pccts
line 1310: 
line 1311: " PPWizard
line 1312: au BufNewFile,BufRead *.it,*.ih^I^I^Isetf ppwiz
line 1313: 
line 1314: " Puppet
line 1315: au BufNewFile,BufRead Puppetfile^I^Isetf ruby
line 1316: 
line 1317: " Embedded Puppet
line 1318: au BufNewFile,BufRead *.epp^I^I^Isetf epuppet
line 1319: 
line 1320: " Obj 3D file format
line 1321: " TODO: is there a way to avoid MS-Windows Object files?
line 1322: au BufNewFile,BufRead *.obj^I^I^Isetf obj
line 1323: 
line 1324: " Oracle Pro*C/C++
line 1325: au BufNewFile,BufRead *.pc^I^I^Isetf proc
line 1326: 
line 1327: " Privoxy actions file
line 1328: au BufNewFile,BufRead *.action^I^I^Isetf privoxy
line 1329: 
line 1330: " Procmail
line 1331: au BufNewFile,BufRead .procmail,.procmailrc^Isetf procmail
line 1332: 
line 1333: " Progress or CWEB
line 1334: au BufNewFile,BufRead *.w^I^I^Icall dist#ft#FTprogress_cweb()
line 1335: 
line 1336: " Progress or assembly
line 1337: au BufNewFile,BufRead *.i^I^I^Icall dist#ft#FTprogress_asm()
line 1338: 
line 1339: " Progress or Pascal
line 1340: au BufNewFile,BufRead *.p^I^I^Icall dist#ft#FTprogress_pascal()
line 1341: 
line 1342: " Software Distributor Product Specification File (POSIX 1387.2-1995)
line 1343: au BufNewFile,BufRead *.psf^I^I^Isetf psf
line 1344: au BufNewFile,BufRead INDEX,INFO if getline(1) =~ '^\s*\(distribution\|installed_software\|root\|bundle\|product\)\s*$' |   setf psf | endif
line 1348: 
line 1349: " Prolog
line 1350: au BufNewFile,BufRead *.pdb^I^I^Isetf prolog
line 1351: 
line 1352: " Promela
line 1353: au BufNewFile,BufRead *.pml^I^I^Isetf promela
line 1354: 
line 1355: " Property Specification Language (PSL)
line 1356: au BufNewFile,BufRead *.psl^I^I^Isetf psl
line 1357: 
line 1358: " Google protocol buffers
line 1359: au BufNewFile,BufRead *.proto^I^I^Isetf proto
line 1360: au BufNewFile,BufRead *.pbtxt^I^I^Isetf pbtxt
line 1361: 
line 1362: " Poke
line 1363: au BufNewFile,BufRead *.pk^I^I^Isetf poke
line 1364: 
line 1365: " Protocols
line 1366: au BufNewFile,BufRead */etc/protocols^I^Isetf protocols
line 1367: 
line 1368: " Pyrex
line 1369: au BufNewFile,BufRead *.pyx,*.pxd^I^Isetf pyrex
line 1370: 
line 1371: " Python, Python Shell Startup and Python Stub Files
line 1372: " Quixote (Python-based web framework)
line 1373: au BufNewFile,BufRead *.py,*.pyw,.pythonstartup,.pythonrc  setf python
line 1374: au BufNewFile,BufRead *.ptl,*.pyi,SConstruct^I^I   setf python
line 1375: 
line 1376: " Radiance
line 1377: au BufNewFile,BufRead *.rad,*.mat^I^Isetf radiance
line 1378: 
line 1379: " Raku (formelly Perl6)
line 1380: au BufNewFile,BufRead *.pm6,*.p6,*.t6,*.pod6,*.raku,*.rakumod,*.rakudoc,*.rakutest  setf raku
line 1381: 
line 1382: " Ratpoison config/command files
line 1383: au BufNewFile,BufRead .ratpoisonrc,ratpoisonrc^Isetf ratpoison
line 1384: 
line 1385: " RCS file
line 1386: au BufNewFile,BufRead *\,v^I^I^Isetf rcs
line 1387: 
line 1388: " Readline
line 1389: au BufNewFile,BufRead .inputrc,inputrc^I^Isetf readline
line 1390: 
line 1391: " Registry for MS-Windows
line 1392: au BufNewFile,BufRead *.reg if getline(1) =~? '^REGEDIT[0-9]*\s*$\|^Windows Registry Editor Version \d*\.\d*\s*$' | setf registry | endif
line 1394: 
line 1395: " Renderman Interface Bytestream
line 1396: au BufNewFile,BufRead *.rib^I^I^Isetf rib
line 1397: 
line 1398: " Rego Policy Language
line 1399: au BufNewFile,BufRead *.rego^I^I^Isetf rego
line 1400: 
line 1401: " Rexx
line 1402: au BufNewFile,BufRead *.rex,*.orx,*.rxo,*.rxj,*.jrexx,*.rexxj,*.rexx,*.testGroup,*.testUnit^Isetf rexx
line 1403: 
line 1404: " R Help file
line 1405: if has("fname_case")
line 1406:   au BufNewFile,BufRead *.rd,*.Rd^I^Isetf rhelp
line 1407: else
line 1408:   au BufNewFile,BufRead *.rd^I^I^Isetf rhelp
line 1409: endif
line 1410: 
line 1411: " R noweb file
line 1412: if has("fname_case")
line 1413:   au BufNewFile,BufRead *.Rnw,*.rnw,*.Snw,*.snw^I^Isetf rnoweb
line 1414: else
line 1415:   au BufNewFile,BufRead *.rnw,*.snw^I^I^Isetf rnoweb
line 1416: endif
line 1417: 
line 1418: " R Markdown file
line 1419: if has("fname_case")
line 1420:   au BufNewFile,BufRead *.Rmd,*.rmd,*.Smd,*.smd^I^Isetf rmd
line 1421: else
line 1422:   au BufNewFile,BufRead *.rmd,*.smd^I^I^Isetf rmd
line 1423: endif
line 1424: 
line 1425: " RSS looks like XML
line 1426: au BufNewFile,BufRead *.rss^I^I^I^Isetf xml
line 1427: 
line 1428: " R reStructuredText file
line 1429: if has("fname_case")
line 1430:   au BufNewFile,BufRead *.Rrst,*.rrst,*.Srst,*.srst^Isetf rrst
line 1431: else
line 1432:   au BufNewFile,BufRead *.rrst,*.srst^I^I^Isetf rrst
line 1433: endif
line 1434: 
line 1435: " Rexx, Rebol or R
line 1436: au BufNewFile,BufRead *.r,*.R^I^I^I^Icall dist#ft#FTr()
line 1437: 
line 1438: " Remind
line 1439: au BufNewFile,BufRead .reminders,*.remind,*.rem^I^Isetf remind
line 1440: 
line 1441: " Resolv.conf
line 1442: au BufNewFile,BufRead resolv.conf^I^Isetf resolv
line 1443: 
line 1444: " Relax NG Compact
line 1445: au BufNewFile,BufRead *.rnc^I^I^Isetf rnc
line 1446: 
line 1447: " Relax NG XML
line 1448: au BufNewFile,BufRead *.rng^I^I^Isetf rng
line 1449: 
line 1450: " RPL/2
line 1451: au BufNewFile,BufRead *.rpl^I^I^Isetf rpl
line 1452: 
line 1453: " Robots.txt
line 1454: au BufNewFile,BufRead robots.txt^I^Isetf robots
line 1455: 
line 1456: " Rpcgen
line 1457: au BufNewFile,BufRead *.x^I^I^Isetf rpcgen
line 1458: 
line 1459: " reStructuredText Documentation Format
line 1460: au BufNewFile,BufRead *.rst^I^I^Isetf rst
line 1461: 
line 1462: " RTF
line 1463: au BufNewFile,BufRead *.rtf^I^I^Isetf rtf
line 1464: 
line 1465: " Interactive Ruby shell
line 1466: au BufNewFile,BufRead .irbrc,irbrc^I^Isetf ruby
line 1467: 
line 1468: " Ruby
line 1469: au BufNewFile,BufRead *.rb,*.rbw^I^Isetf ruby
line 1470: 
line 1471: " RubyGems
line 1472: au BufNewFile,BufRead *.gemspec^I^I^Isetf ruby
line 1473: 
line 1474: " RBS (Ruby Signature)
line 1475: au BufNewFile,BufRead *.rbs^I^I^Isetf rbs
line 1476: 
line 1477: " Rackup
line 1478: au BufNewFile,BufRead *.ru^I^I^Isetf ruby
line 1479: 
line 1480: " Bundler
line 1481: au BufNewFile,BufRead Gemfile^I^I^Isetf ruby
line 1482: 
line 1483: " Ruby on Rails
line 1484: au BufNewFile,BufRead *.builder,*.rxml,*.rjs^Isetf ruby
line 1485: 
line 1486: " Rantfile and Rakefile is like Ruby
line 1487: au BufNewFile,BufRead [rR]antfile,*.rant,[rR]akefile,*.rake^Isetf ruby
line 1488: 
line 1489: " Rust
line 1490: au BufNewFile,BufRead *.rs^I^I^Isetf rust
line 1491: 
line 1492: " S-lang (or shader language, or SmallLisp)
line 1493: au BufNewFile,BufRead *.sl^I^I^Isetf slang
line 1494: 
line 1495: " Samba config
line 1496: au BufNewFile,BufRead smb.conf^I^I^Isetf samba
line 1497: 
line 1498: " SAS script
line 1499: au BufNewFile,BufRead *.sas^I^I^Isetf sas
line 1500: 
line 1501: " Sass
line 1502: au BufNewFile,BufRead *.sass^I^I^Isetf sass
line 1503: 
line 1504: " Sather
line 1505: au BufNewFile,BufRead *.sa^I^I^Isetf sather
line 1506: 
line 1507: " Scala
line 1508: au BufNewFile,BufRead *.scala,*.sc^I^Isetf scala
line 1509: 
line 1510: " SBT - Scala Build Tool
line 1511: au BufNewFile,BufRead *.sbt^I^I^Isetf sbt
line 1512: 
line 1513: " Scilab
line 1514: au BufNewFile,BufRead *.sci,*.sce^I^Isetf scilab
line 1515: 
line 1516: " SCSS
line 1517: au BufNewFile,BufRead *.scss^I^I^Isetf scss
line 1518: 
line 1519: " SD: Streaming Descriptors
line 1520: au BufNewFile,BufRead *.sd^I^I^Isetf sd
line 1521: 
line 1522: " SDL
line 1523: au BufNewFile,BufRead *.sdl,*.pr^I^Isetf sdl
line 1524: 
line 1525: " sed
line 1526: au BufNewFile,BufRead *.sed^I^I^Isetf sed
line 1527: 
line 1528: " svelte
line 1529: au BufNewFile,BufRead *.svelte^I^I^Isetf svelte
line 1530: 
line 1531: " Sieve (RFC 3028, 5228)
line 1532: au BufNewFile,BufRead *.siv,*.sieve^I^Isetf sieve
line 1533: 
line 1534: " Sendmail
line 1535: au BufNewFile,BufRead sendmail.cf^I^Isetf sm
line 1536: 
line 1537: " Sendmail .mc files are actually m4.  Could also be MS Message text file.
line 1538: au BufNewFile,BufRead *.mc^I^I^Icall dist#ft#McSetf()
line 1539: 
line 1540: " Services
line 1541: au BufNewFile,BufRead */etc/services^I^Isetf services
line 1542: 
line 1543: " Service Location config
line 1544: au BufNewFile,BufRead */etc/slp.conf^I^Isetf slpconf
line 1545: 
line 1546: " Service Location registration
line 1547: au BufNewFile,BufRead */etc/slp.reg^I^Isetf slpreg
line 1548: 
line 1549: " Service Location SPI
line 1550: au BufNewFile,BufRead */etc/slp.spi^I^Isetf slpspi
line 1551: 
line 1552: " Setserial config
line 1553: au BufNewFile,BufRead */etc/serial.conf^I^Isetf setserial
line 1554: 
line 1555: " SGML
line 1556: au BufNewFile,BufRead *.sgm,*.sgml if getline(1).getline(2).getline(3).getline(4).getline(5) =~? 'linuxdoc' |   setf sgmllnx | elseif getline(1) =~ '<!DOCTYPE.*DocBook' || getline(2) =~ '<!DOCTYPE.*DocBook' |   let b:docbk_type = "sgml" |   let b:docbk_ver = 4 |   setf docbk | else |   setf sgml | endif
line 1566: 
line 1567: " SGMLDECL
line 1568: au BufNewFile,BufRead *.decl,*.dcl,*.dec if getline(1).getline(2).getline(3) =~? '^<!SGML' |    setf sgmldecl | endif
line 1572: 
line 1573: " SGML catalog file
line 1574: au BufNewFile,BufRead catalog^I^I^Isetf catalog
line 1575: 
line 1576: " Shell scripts (sh, ksh, bash, bash2, csh); Allow .profile_foo etc.
line 1577: " Gentoo ebuilds, Arch Linux PKGBUILDs and Alpine Linux APKBUILDs are actually
line 1578: " bash scripts.
line 1579: " NOTE: Patterns ending in a star are further down, these have lower priority.
line 1580: au BufNewFile,BufRead .bashrc,bashrc,bash.bashrc,.bash[_-]profile,.bash[_-]logout,.bash[_-]aliases,bash-fc[-.],*.ebuild,*.bash,*.eclass,PKGBUILD,APKBUILD call dist#ft#SetFileTypeSH("bash")
line 1581: au BufNewFile,BufRead .kshrc,*.ksh call dist#ft#SetFileTypeSH("ksh")
line 1582: au BufNewFile,BufRead */etc/profile,.profile,*.sh,*.env call dist#ft#SetFileTypeSH(getline(1))
line 1583: 
line 1584: " Shell script (Arch Linux) or PHP file (Drupal)
line 1585: au BufNewFile,BufRead *.install if getline(1) =~ '<?php' |   setf php | else |   call dist#ft#SetFileTypeSH("bash") | endif
line 1591: 
line 1592: " tcsh scripts (patterns ending in a star further below)
line 1593: au BufNewFile,BufRead .tcshrc,*.tcsh,tcsh.tcshrc,tcsh.login^Icall dist#ft#SetFileTypeShell("tcsh")
line 1594: 
line 1595: " csh scripts, but might also be tcsh scripts (on some systems csh is tcsh)
line 1596: " (patterns ending in a start further below)
line 1597: au BufNewFile,BufRead .login,.cshrc,csh.cshrc,csh.login,csh.logout,*.csh,.alias  call dist#ft#CSH()
line 1598: 
line 1599: " Z-Shell script (patterns ending in a star further below)
line 1600: au BufNewFile,BufRead .zprofile,*/etc/zprofile,.zfbfmarks  setf zsh
line 1601: au BufNewFile,BufRead .zshrc,.zshenv,.zlogin,.zlogout,.zcompdump setf zsh
line 1602: au BufNewFile,BufRead *.zsh^I^I^Isetf zsh
line 1603: 
line 1604: " Scheme
line 1605: au BufNewFile,BufRead *.scm,*.ss,*.rkt^I^Isetf scheme
line 1606: 
line 1607: " Screen RC
line 1608: au BufNewFile,BufRead .screenrc,screenrc^Isetf screen
line 1609: 
line 1610: " Sexplib
line 1611: au BufNewFile,BufRead *.sexp setf sexplib
line 1612: 
line 1613: " Simula
line 1614: au BufNewFile,BufRead *.sim^I^I^Isetf simula
line 1615: 
line 1616: " SINDA
line 1617: au BufNewFile,BufRead *.sin,*.s85^I^Isetf sinda
line 1618: 
line 1619: " SiSU
line 1620: au BufNewFile,BufRead *.sst,*.ssm,*.ssi,*.-sst,*._sst setf sisu
line 1621: au BufNewFile,BufRead *.sst.meta,*.-sst.meta,*._sst.meta setf sisu
line 1622: 
line 1623: " SKILL
line 1624: au BufNewFile,BufRead *.il,*.ils,*.cdf^I^Isetf skill
line 1625: 
line 1626: " SLRN
line 1627: au BufNewFile,BufRead .slrnrc^I^I^Isetf slrnrc
line 1628: au BufNewFile,BufRead *.score^I^I^Isetf slrnsc
line 1629: 
line 1630: " Smalltalk (and TeX)
line 1631: au BufNewFile,BufRead *.st^I^I^Isetf st
line 1632: au BufNewFile,BufRead *.cls if getline(1) =~ '^%' |  setf tex | elseif getline(1)[0] == '#' && getline(1) =~ 'rexx' |  setf rexx | else |  setf st | endif
line 1640: 
line 1641: " Smarty templates
line 1642: au BufNewFile,BufRead *.tpl^I^I^Isetf smarty
line 1643: 
line 1644: " SMIL or XML
line 1645: au BufNewFile,BufRead *.smil if getline(1) =~ '<?\s*xml.*?>' |   setf xml | else |   setf smil | endif
line 1651: 
line 1652: " SMIL or SNMP MIB file
line 1653: au BufNewFile,BufRead *.smi if getline(1) =~ '\<smil\>' |   setf smil | else |   setf mib | endif
line 1659: 
line 1660: " SMITH
line 1661: au BufNewFile,BufRead *.smt,*.smith^I^Isetf smith
line 1662: 
line 1663: " Snobol4 and spitbol
line 1664: au BufNewFile,BufRead *.sno,*.spt^I^Isetf snobol4
line 1665: 
line 1666: " SNMP MIB files
line 1667: au BufNewFile,BufRead *.mib,*.my^I^Isetf mib
line 1668: 
line 1669: " Snort Configuration
line 1670: au BufNewFile,BufRead *.hog,snort.conf,vision.conf^Isetf hog
line 1671: au BufNewFile,BufRead *.rules^I^I^Icall dist#ft#FTRules()
line 1672: 
line 1673: " SPARQL queries
line 1674: au BufNewFile,BufRead *.rq,*.sparql^I^Isetf sparql
line 1675: 
line 1676: " Spec (Linux RPM)
line 1677: au BufNewFile,BufRead *.spec^I^I^Isetf spec
line 1678: 
line 1679: " Speedup (AspenTech plant simulator)
line 1680: au BufNewFile,BufRead *.speedup,*.spdata,*.spd^Isetf spup
line 1681: 
line 1682: " Slice
line 1683: au BufNewFile,BufRead *.ice^I^I^Isetf slice
line 1684: 
line 1685: " Spice
line 1686: au BufNewFile,BufRead *.sp,*.spice^I^Isetf spice
line 1687: 
line 1688: " Spyce
line 1689: au BufNewFile,BufRead *.spy,*.spi^I^Isetf spyce
line 1690: 
line 1691: " Squid
line 1692: au BufNewFile,BufRead squid.conf^I^Isetf squid
line 1693: 
line 1694: " SQL for Oracle Designer
line 1695: au BufNewFile,BufRead *.tyb,*.typ,*.tyc,*.pkb,*.pks^Isetf sql
line 1696: 
line 1697: " SQL
line 1698: au BufNewFile,BufRead *.sql^I^I^Icall dist#ft#SQL()
line 1699: 
line 1700: " SQLJ
line 1701: au BufNewFile,BufRead *.sqlj^I^I^Isetf sqlj
line 1702: 
line 1703: " SQR
line 1704: au BufNewFile,BufRead *.sqr,*.sqi^I^Isetf sqr
line 1705: 
line 1706: " OpenSSH configuration
line 1707: au BufNewFile,BufRead ssh_config,*/.ssh/config^I^Isetf sshconfig
line 1708: au BufNewFile,BufRead */etc/ssh/ssh_config.d/*.conf^Isetf sshconfig
line 1709: 
line 1710: " OpenSSH server configuration
line 1711: au BufNewFile,BufRead sshd_config^I^I^Isetf sshdconfig
line 1712: au BufNewFile,BufRead */etc/ssh/sshd_config.d/*.conf^Isetf sshdconfig
line 1713: 
line 1714: " Stata
line 1715: au BufNewFile,BufRead *.ado,*.do,*.imata,*.mata^Isetf stata
line 1716: " Also *.class, but not when it's a Java bytecode file
line 1717: au BufNewFile,BufRead *.class if getline(1) !~ "^\xca\xfe\xba\xbe" | setf stata | endif
line 1719: 
line 1720: " SMCL
line 1721: au BufNewFile,BufRead *.hlp,*.ihlp,*.smcl^Isetf smcl
line 1722: 
line 1723: " Stored Procedures
line 1724: au BufNewFile,BufRead *.stp^I^I^Isetf stp
line 1725: 
line 1726: " Standard ML
line 1727: au BufNewFile,BufRead *.sml^I^I^Isetf sml
line 1728: 
line 1729: " Sratus VOS command macro
line 1730: au BufNewFile,BufRead *.cm^I^I^Isetf voscm
line 1731: 
line 1732: " Swift
line 1733: au BufNewFile,BufRead *.swift^I^I^Isetf swift
line 1734: au BufNewFile,BufRead *.swift.gyb^I^Isetf swiftgyb
line 1735: 
line 1736: " Swift Intermediate Language
line 1737: au BufNewFile,BufRead *.sil^I^I^Isetf sil
line 1738: 
line 1739: " Sysctl
line 1740: au BufNewFile,BufRead */etc/sysctl.conf,*/etc/sysctl.d/*.conf^Isetf sysctl
line 1741: 
line 1742: " Systemd unit files
line 1743: au BufNewFile,BufRead */systemd/*.{automount,dnssd,link,mount,netdev,network,nspawn,path,service,slice,socket,swap,target,timer}^Isetf systemd
line 1744: " Systemd overrides
line 1745: au BufNewFile,BufRead */etc/systemd/*.conf.d/*.conf^Isetf systemd
line 1746: au BufNewFile,BufRead */etc/systemd/system/*.d/*.conf^Isetf systemd
line 1747: au BufNewFile,BufRead */.config/systemd/user/*.d/*.conf^Isetf systemd
line 1748: " Systemd temp files
line 1749: au BufNewFile,BufRead */etc/systemd/system/*.d/.#*^Isetf systemd
line 1750: au BufNewFile,BufRead */etc/systemd/system/.#*^I^Isetf systemd
line 1751: au BufNewFile,BufRead */.config/systemd/user/*.d/.#*^Isetf systemd
line 1752: au BufNewFile,BufRead */.config/systemd/user/.#*^Isetf systemd
line 1753: 
line 1754: " Synopsys Design Constraints
line 1755: au BufNewFile,BufRead *.sdc^I^I^Isetf sdc
line 1756: 
line 1757: " Sudoers
line 1758: au BufNewFile,BufRead */etc/sudoers,sudoers.tmp^Isetf sudoers
line 1759: 
line 1760: " SVG (Scalable Vector Graphics)
line 1761: au BufNewFile,BufRead *.svg^I^I^Isetf svg
line 1762: 
line 1763: " Tads (or Nroff or Perl test file)
line 1764: au BufNewFile,BufRead *.t if !dist#ft#FTnroff() && !dist#ft#FTperl() | setf tads | endif
line 1766: 
line 1767: " Tags
line 1768: au BufNewFile,BufRead tags^I^I^Isetf tags
line 1769: 
line 1770: " TAK
line 1771: au BufNewFile,BufRead *.tak^I^I^Isetf tak
line 1772: 
line 1773: " Task
line 1774: au BufRead,BufNewFile {pending,completed,undo}.data  setf taskdata
line 1775: au BufRead,BufNewFile *.task^I^I^Isetf taskedit
line 1776: 
line 1777: " Tcl (JACL too)
line 1778: au BufNewFile,BufRead *.tcl,*.tk,*.itcl,*.itk,*.jacl^Isetf tcl
line 1779: 
line 1780: " TealInfo
line 1781: au BufNewFile,BufRead *.tli^I^I^Isetf tli
line 1782: 
line 1783: " Telix Salt
line 1784: au BufNewFile,BufRead *.slt^I^I^Isetf tsalt
line 1785: 
line 1786: " Tera Term Language or Turtle
line 1787: au BufRead,BufNewFile *.ttl if getline(1) =~ '^@\?\(prefix\|base\)' |   setf turtle | else |   setf teraterm | endif
line 1793: 
line 1794: " Terminfo
line 1795: au BufNewFile,BufRead *.ti^I^I^Isetf terminfo
line 1796: 
line 1797: " TeX
line 1798: au BufNewFile,BufRead *.latex,*.sty,*.dtx,*.ltx,*.bbl^Isetf tex
line 1799: au BufNewFile,BufRead *.tex^I^I^Icall dist#ft#FTtex()
line 1800: 
line 1801: " ConTeXt
line 1802: au BufNewFile,BufRead *.mkii,*.mkiv,*.mkvi,*.mkxl,*.mklx   setf context
line 1803: 
line 1804: " Texinfo
line 1805: au BufNewFile,BufRead *.texinfo,*.texi,*.txi^Isetf texinfo
line 1806: 
line 1807: " TeX configuration
line 1808: au BufNewFile,BufRead texmf.cnf^I^I^Isetf texmf
line 1809: 
line 1810: " Tidy config
line 1811: au BufNewFile,BufRead .tidyrc,tidyrc,tidy.conf^Isetf tidy
line 1812: 
line 1813: " TF mud client
line 1814: au BufNewFile,BufRead *.tf,.tfrc,tfrc^I^Isetf tf
line 1815: 
line 1816: " tmux configuration
line 1817: au BufNewFile,BufRead {.,}tmux*.conf^I^Isetf tmux
line 1818: 
line 1819: " TOML
line 1820: au BufNewFile,BufRead *.toml^I^I^Isetf toml
line 1821: 
line 1822: " TPP - Text Presentation Program
line 1823: au BufNewFile,BufReadPost *.tpp^I^I^Isetf tpp
line 1824: 
line 1825: " Treetop
line 1826: au BufRead,BufNewFile *.treetop^I^I^Isetf treetop
line 1827: 
line 1828: " Trustees
line 1829: au BufNewFile,BufRead trustees.conf^I^Isetf trustees
line 1830: 
line 1831: " TSS - Geometry
line 1832: au BufNewFile,BufReadPost *.tssgm^I^Isetf tssgm
line 1833: 
line 1834: " TSS - Optics
line 1835: au BufNewFile,BufReadPost *.tssop^I^Isetf tssop
line 1836: 
line 1837: " TSS - Command Line (temporary)
line 1838: au BufNewFile,BufReadPost *.tsscl^I^Isetf tsscl
line 1839: 
line 1840: " Tutor mode
line 1841: au BufNewFile,BufReadPost *.tutor^I^Isetf tutor
line 1842: 
line 1843: " TWIG files
line 1844: au BufNewFile,BufReadPost *.twig^I^Isetf twig
line 1845: 
line 1846: " Typescript or Qt translation file (which is XML)
line 1847: au BufNewFile,BufReadPost *.ts if getline(1) =~ '<?xml' |   setf xml | else |   setf typescript | endif
line 1853: 
line 1854: " TypeScript with React
line 1855: au BufNewFile,BufRead *.tsx^I^I^Isetf typescriptreact
line 1856: 
line 1857: " Motif UIT/UIL files
line 1858: au BufNewFile,BufRead *.uit,*.uil^I^Isetf uil
line 1859: 
line 1860: " Udev conf
line 1861: au BufNewFile,BufRead */etc/udev/udev.conf^Isetf udevconf
line 1862: 
line 1863: " Udev permissions
line 1864: au BufNewFile,BufRead */etc/udev/permissions.d/*.permissions setf udevperm
line 1865: "
line 1866: " Udev symlinks config
line 1867: au BufNewFile,BufRead */etc/udev/cdsymlinks.conf^Isetf sh
line 1868: 
line 1869: " UnrealScript
line 1870: au BufNewFile,BufRead *.uc^I^I^Isetf uc
line 1871: 
line 1872: " Updatedb
line 1873: au BufNewFile,BufRead */etc/updatedb.conf^Isetf updatedb
line 1874: 
line 1875: " Upstart (init(8)) config files
line 1876: au BufNewFile,BufRead */usr/share/upstart/*.conf^I       setf upstart
line 1877: au BufNewFile,BufRead */usr/share/upstart/*.override^I       setf upstart
line 1878: au BufNewFile,BufRead */etc/init/*.conf,*/etc/init/*.override  setf upstart
line 1879: au BufNewFile,BufRead */.init/*.conf,*/.init/*.override^I       setf upstart
line 1880: au BufNewFile,BufRead */.config/upstart/*.conf^I^I       setf upstart
line 1881: au BufNewFile,BufRead */.config/upstart/*.override^I       setf upstart
line 1882: 
line 1883: " Vera
line 1884: au BufNewFile,BufRead *.vr,*.vri,*.vrh^I^Isetf vera
line 1885: 
line 1886: " Verilog HDL
line 1887: au BufNewFile,BufRead *.v^I^I^Isetf verilog
line 1888: 
line 1889: " Verilog-AMS HDL
line 1890: au BufNewFile,BufRead *.va,*.vams^I^Isetf verilogams
line 1891: 
line 1892: " SystemVerilog
line 1893: au BufNewFile,BufRead *.sv,*.svh^I^Isetf systemverilog
line 1894: 
line 1895: " VHDL
line 1896: au BufNewFile,BufRead *.hdl,*.vhd,*.vhdl,*.vbe,*.vst,*.vho  setf vhdl
line 1897: 
line 1898: " Vim script
line 1899: au BufNewFile,BufRead *.vim,*.vba,.exrc,_exrc^Isetf vim
line 1900: 
line 1901: " Viminfo file
line 1902: au BufNewFile,BufRead .viminfo,_viminfo^I^Isetf viminfo
line 1903: 
line 1904: " Virata Config Script File or Drupal module
line 1905: au BufRead,BufNewFile *.hw,*.module,*.pkg if getline(1) =~ '<?php' |   setf php | else |   setf virata | endif
line 1911: 
line 1912: " Visual Basic (also uses *.bas) or FORM
line 1913: au BufNewFile,BufRead *.frm^I^I^Icall dist#ft#FTVB("form")
line 1914: 
line 1915: " SaxBasic is close to Visual Basic
line 1916: au BufNewFile,BufRead *.sba^I^I^Isetf vb
line 1917: 
line 1918: " Vgrindefs file
line 1919: au BufNewFile,BufRead vgrindefs^I^I^Isetf vgrindefs
line 1920: 
line 1921: " VRML V1.0c
line 1922: au BufNewFile,BufRead *.wrl^I^I^Isetf vrml
line 1923: 
line 1924: " Vroom (vim testing and executable documentation)
line 1925: au BufNewFile,BufRead *.vroom^I^I^Isetf vroom
line 1926: 
line 1927: " Vue.js Single File Component
line 1928: au BufNewFile,BufRead *.vue^I^I^Isetf vue
line 1929: 
line 1930: " WebAssembly
line 1931: au BufNewFile,BufRead *.wast,*.wat^I^Isetf wast
line 1932: 
line 1933: " Webmacro
line 1934: au BufNewFile,BufRead *.wm^I^I^Isetf webmacro
line 1935: 
line 1936: " Wget config
line 1937: au BufNewFile,BufRead .wgetrc,wgetrc^I^Isetf wget
line 1938: 
line 1939: " Website MetaLanguage
line 1940: au BufNewFile,BufRead *.wml^I^I^Isetf wml
line 1941: 
line 1942: " Winbatch
line 1943: au BufNewFile,BufRead *.wbt^I^I^Isetf winbatch
line 1944: 
line 1945: " WSML
line 1946: au BufNewFile,BufRead *.wsml^I^I^Isetf wsml
line 1947: 
line 1948: " WPL
line 1949: au BufNewFile,BufRead *.wpl^I^I^Isetf xml
line 1950: 
line 1951: " WvDial
line 1952: au BufNewFile,BufRead wvdial.conf,.wvdialrc^Isetf wvdial
line 1953: 
line 1954: " CVS RC file
line 1955: au BufNewFile,BufRead .cvsrc^I^I^Isetf cvsrc
line 1956: 
line 1957: " CVS commit file
line 1958: au BufNewFile,BufRead cvs\d\+^I^I^Isetf cvs
line 1959: 
line 1960: " WEB (*.web is also used for Winbatch: Guess, based on expecting "%" comment
line 1961: " lines in a WEB file).
line 1962: au BufNewFile,BufRead *.web if getline(1)[0].getline(2)[0].getline(3)[0].getline(4)[0].getline(5)[0] =~ "%" |   setf web | else |   setf winbatch | endif
line 1968: 
line 1969: " Windows Scripting Host and Windows Script Component
line 1970: au BufNewFile,BufRead *.ws[fc]^I^I^Isetf wsh
line 1971: 
line 1972: " XHTML
line 1973: au BufNewFile,BufRead *.xhtml,*.xht^I^Isetf xhtml
line 1974: 
line 1975: " X Pixmap (dynamically sets colors, use BufEnter to make it work better)
line 1976: au BufEnter *.xpm if getline(1) =~ "XPM2" |   setf xpm2 | else |   setf xpm | endif
line 1982: au BufEnter *.xpm2^I^I^I^Isetf xpm2
line 1983: 
line 1984: " XFree86 config
line 1985: au BufNewFile,BufRead XF86Config if getline(1) =~ '\<XConfigurator\>' |   let b:xf86conf_xfree86_version = 3 | endif | setf xf86conf
line 1990: au BufNewFile,BufRead */xorg.conf.d/*.conf let b:xf86conf_xfree86_version = 4 | setf xf86conf
line 1993: 
line 1994: " Xorg config
line 1995: au BufNewFile,BufRead xorg.conf,xorg.conf-4^Ilet b:xf86conf_xfree86_version = 4 | setf xf86conf
line 1996: 
line 1997: " Xinetd conf
line 1998: au BufNewFile,BufRead */etc/xinetd.conf^I^Isetf xinetd
line 1999: 
line 2000: " XS Perl extension interface language
line 2001: au BufNewFile,BufRead *.xs^I^I^Isetf xs
line 2002: 
line 2003: " X resources file
line 2004: au BufNewFile,BufRead .Xdefaults,.Xpdefaults,.Xresources,xdm-config,*.ad setf xdefaults
line 2005: 
line 2006: " Xmath
line 2007: au BufNewFile,BufRead *.msc,*.msf^I^Isetf xmath
line 2008: au BufNewFile,BufRead *.ms if !dist#ft#FTnroff() | setf xmath | endif
line 2010: 
line 2011: " XML  specific variants: docbk and xbl
line 2012: au BufNewFile,BufRead *.xml^I^I^Icall dist#ft#FTxml()
line 2013: 
line 2014: " XMI (holding UML models) is also XML
line 2015: au BufNewFile,BufRead *.xmi^I^I^Isetf xml
line 2016: 
line 2017: " CSPROJ files are Visual Studio.NET's XML-based project config files
line 2018: au BufNewFile,BufRead *.csproj,*.csproj.user^Isetf xml
line 2019: 
line 2020: " Qt Linguist translation source and Qt User Interface Files are XML
line 2021: " However, for .ts Typescript is more common.
line 2022: au BufNewFile,BufRead *.ui^I^I^Isetf xml
line 2023: 
line 2024: " TPM's are RDF-based descriptions of TeX packages (Nikolai Weibull)
line 2025: au BufNewFile,BufRead *.tpm^I^I^Isetf xml
line 2026: 
line 2027: " Xdg menus
line 2028: au BufNewFile,BufRead */etc/xdg/menus/*.menu^Isetf xml
line 2029: 
line 2030: " ATI graphics driver configuration
line 2031: au BufNewFile,BufRead fglrxrc^I^I^Isetf xml
line 2032: 
line 2033: " Web Services Description Language (WSDL)
line 2034: au BufNewFile,BufRead *.wsdl^I^I^Isetf xml
line 2035: 
line 2036: " XLIFF (XML Localisation Interchange File Format) is also XML
line 2037: au BufNewFile,BufRead *.xlf^I^I^Isetf xml
line 2038: au BufNewFile,BufRead *.xliff^I^I^Isetf xml
line 2039: 
line 2040: " XML User Interface Language
line 2041: au BufNewFile,BufRead *.xul^I^I^Isetf xml
line 2042: 
line 2043: " X11 xmodmap (also see below)
line 2044: au BufNewFile,BufRead *Xmodmap^I^I^Isetf xmodmap
line 2045: 
line 2046: " Xquery
line 2047: au BufNewFile,BufRead *.xq,*.xql,*.xqm,*.xquery,*.xqy^Isetf xquery
line 2048: 
line 2049: " XSD
line 2050: au BufNewFile,BufRead *.xsd^I^I^Isetf xsd
line 2051: 
line 2052: " Xslt
line 2053: au BufNewFile,BufRead *.xsl,*.xslt^I^Isetf xslt
line 2054: 
line 2055: " Yacc
line 2056: au BufNewFile,BufRead *.yy,*.yxx,*.y++^I^Isetf yacc
line 2057: 
line 2058: " Yacc or racc
line 2059: au BufNewFile,BufRead *.y^I^I^Icall dist#ft#FTy()
line 2060: 
line 2061: " Yaml
line 2062: au BufNewFile,BufRead *.yaml,*.yml^I^Isetf yaml
line 2063: 
line 2064: " Raml
line 2065: au BufNewFile,BufRead *.raml^I^I^Isetf raml
line 2066: 
line 2067: " yum conf (close enough to dosini)
line 2068: au BufNewFile,BufRead */etc/yum.conf^I^Isetf dosini
line 2069: 
line 2070: " Zimbu
line 2071: au BufNewFile,BufRead *.zu^I^I^Isetf zimbu
line 2072: " Zimbu Templates
line 2073: au BufNewFile,BufRead *.zut^I^I^Isetf zimbutempl
line 2074: 
line 2075: " Zope
line 2076: "   dtml (zope dynamic template markup language), pt (zope page template),
line 2077: "   cpt (zope form controller page template)
line 2078: au BufNewFile,BufRead *.dtml,*.pt,*.cpt^I^Icall dist#ft#FThtml()
line 2079: "   zsql (zope sql method)
line 2080: au BufNewFile,BufRead *.zsql^I^I^Icall dist#ft#SQL()
line 2081: 
line 2082: " Z80 assembler asz80
line 2083: au BufNewFile,BufRead *.z8a^I^I^Isetf z8a
line 2084: 
line 2085: augroup END
line 2086: 
line 2087: 
line 2088: " Source the user-specified filetype file, for backwards compatibility with
line 2089: " Vim 5.x.
line 2090: if exists("myfiletypefile") && filereadable(expand(myfiletypefile))
line 2091:   execute "source " . myfiletypefile
line 2092: endif
line 2093: 
line 2094: 
line 2095: " Check for "*" after loading myfiletypefile, so that scripts.vim is only used
line 2096: " when there are no matching file name extensions.
line 2097: " Don't do this for compressed files.
line 2098: augroup filetypedetect
line 2099: au BufNewFile,BufRead * if !did_filetype() && expand("<amatch>") !~ g:ft_ignore_pat | runtime! scripts.vim | endif
line 2102: au StdinReadPost * if !did_filetype() | runtime! scripts.vim | endif
line 2103: 
line 2104: 
line 2105: " Extra checks for when no filetype has been detected now.  Mostly used for
line 2106: " patterns that end in "*".  E.g., "zsh*" matches "zsh.vim", but that's a Vim
line 2107: " script file.
line 2108: " Most of these should call s:StarSetf() to avoid names ending in .gz and the
line 2109: " like are used.
line 2110: 
line 2111: " More Apache style config files
line 2112: au BufNewFile,BufRead */etc/proftpd/*.conf*,*/etc/proftpd/conf.*/*^Icall s:StarSetf('apachestyle')
line 2113: au BufNewFile,BufRead proftpd.conf*^I^I^I^I^Icall s:StarSetf('apachestyle')
line 2114: 
line 2115: " More Apache config files
line 2116: au BufNewFile,BufRead access.conf*,apache.conf*,apache2.conf*,httpd.conf*,srm.conf*^Icall s:StarSetf('apache')
line 2117: au BufNewFile,BufRead */etc/apache2/*.conf*,*/etc/apache2/conf.*/*,*/etc/apache2/mods-*/*,*/etc/apache2/sites-*/*,*/etc/httpd/conf.d/*.conf*^I^Icall s:StarSetf('apache')
line 2118: 
line 2119: " Asterisk config file
line 2120: au BufNewFile,BufRead *asterisk/*.conf*^I^Icall s:StarSetf('asterisk')
line 2121: au BufNewFile,BufRead *asterisk*/*voicemail.conf* call s:StarSetf('asteriskvm')
line 2122: 
line 2123: " Bazaar version control
line 2124: au BufNewFile,BufRead bzr_log.*^I^I^Isetf bzr
line 2125: 
line 2126: " Bazel build file
line 2127: if !has("fname_case")
line 2128:   au BufNewFile,BufRead *.BUILD,BUILD^I^Isetf bzl
line 2129: endif
line 2130: 
line 2131: " BIND zone
line 2132: au BufNewFile,BufRead */named/db.*,*/bind/db.*^Icall s:StarSetf('bindzone')
line 2133: 
line 2134: au BufNewFile,BufRead cabal.project.*^I^Icall s:StarSetf('cabalproject')
line 2135: 
line 2136: " Calendar
line 2137: au BufNewFile,BufRead */.calendar/*,*/share/calendar/*/calendar.*,*/share/calendar/calendar.*^I^I^I^I^Icall s:StarSetf('calendar')
line 2140: 
line 2141: " Changelog
line 2142: au BufNewFile,BufRead [cC]hange[lL]og* if getline(1) =~ '; urgency='|  call s:StarSetf('debchangelog')|else|  call s:StarSetf('changelog')|endif
line 2148: 
line 2149: " Crontab
line 2150: au BufNewFile,BufRead crontab,crontab.*,*/etc/cron.d/*^I^Icall s:StarSetf('crontab')
line 2151: 
line 2152: " dnsmasq(8) configuration
line 2153: au BufNewFile,BufRead */etc/dnsmasq.d/*^I^Icall s:StarSetf('dnsmasq')
line 2154: 
line 2155: " Dracula
line 2156: au BufNewFile,BufRead drac.*^I^I^Icall s:StarSetf('dracula')
line 2157: 
line 2158: " Fvwm
line 2159: au BufNewFile,BufRead */.fvwm/*^I^I^Icall s:StarSetf('fvwm')
line 2160: au BufNewFile,BufRead *fvwmrc*,*fvwm95*.hook let b:fvwm_version = 1 | call s:StarSetf('fvwm')
line 2162: au BufNewFile,BufRead *fvwm2rc* if expand("<afile>:e") == "m4"|  call s:StarSetf('fvwm2m4')|else|  let b:fvwm_version = 2 | call s:StarSetf('fvwm')|endif
line 2168: 
line 2169: " Gedcom
line 2170: au BufNewFile,BufRead */tmp/lltmp*^I^Icall s:StarSetf('gedcom')
line 2171: 
line 2172: " Git
line 2173: au BufNewFile,BufRead */.gitconfig.d/*,/etc/gitconfig.d/*^Icall s:StarSetf('gitconfig')
line 2174: 
line 2175: " Gitolite
line 2176: au BufNewFile,BufRead */gitolite-admin/conf/*^Icall s:StarSetf('gitolite')
line 2177: 
line 2178: " GTK RC
line 2179: au BufNewFile,BufRead .gtkrc*,gtkrc*^I^Icall s:StarSetf('gtkrc')
line 2180: 
line 2181: " Jam
line 2182: au BufNewFile,BufRead Prl*.*,JAM*.*^I^Icall s:StarSetf('jam')
line 2183: 
line 2184: " Jargon
line 2185: au! BufNewFile,BufRead *jarg* if getline(1).getline(2).getline(3).getline(4).getline(5) =~? 'THIS IS THE JARGON FILE'|  call s:StarSetf('jargon')|endif
line 2189: 
line 2190: " Java Properties resource file (note: doesn't catch font.properties.pl)
line 2191: au BufNewFile,BufRead *.properties_??_??_*^Icall s:StarSetf('jproperties')
line 2192: 
line 2193: " Kconfig
line 2194: au BufNewFile,BufRead Kconfig.*^I^I^Icall s:StarSetf('kconfig')
line 2195: 
line 2196: " Lilo: Linux loader
line 2197: au BufNewFile,BufRead lilo.conf*^I^Icall s:StarSetf('lilo')
line 2198: 
line 2199: " Logcheck
line 2200: au BufNewFile,BufRead */etc/logcheck/*.d*/*^Icall s:StarSetf('logcheck')
line 2201: 
line 2202: " Makefile
line 2203: au BufNewFile,BufRead [mM]akefile*^I^Icall s:StarSetf('make')
line 2204: 
line 2205: " Ruby Makefile
line 2206: au BufNewFile,BufRead [rR]akefile*^I^Icall s:StarSetf('ruby')
line 2207: 
line 2208: " Mail (also matches muttrc.vim, so this is below the other checks)
line 2209: au BufNewFile,BufRead {neo,}mutt[[:alnum:]._-]\\\{6\}^Isetf mail
line 2210: 
line 2211: au BufNewFile,BufRead reportbug-*^I^Icall s:StarSetf('mail')
line 2212: 
line 2213: " Modconf
line 2214: au BufNewFile,BufRead */etc/modutils/* if executable(expand("<afile>")) != 1|  call s:StarSetf('modconf')|endif
line 2218: au BufNewFile,BufRead */etc/modprobe.*^I^Icall s:StarSetf('modconf')
line 2219: 
line 2220: " Mutt setup file
line 2221: au BufNewFile,BufRead .mutt{ng,}rc*,*/.mutt{ng,}/mutt{ng,}rc*^Icall s:StarSetf('muttrc')
line 2222: au BufNewFile,BufRead mutt{ng,}rc*,Mutt{ng,}rc*^I^Icall s:StarSetf('muttrc')
line 2223: 
line 2224: " Neomutt setup file
line 2225: au BufNewFile,BufRead .neomuttrc*,*/.neomutt/neomuttrc*^Icall s:StarSetf('neomuttrc')
line 2226: au BufNewFile,BufRead neomuttrc*,Neomuttrc*^I^Icall s:StarSetf('neomuttrc')
line 2227: 
line 2228: " Nroff macros
line 2229: au BufNewFile,BufRead tmac.*^I^I^Icall s:StarSetf('nroff')
line 2230: 
line 2231: " OpenBSD hostname.if
line 2232: au BufNewFile,BufRead /etc/hostname.*^I^Icall s:StarSetf('config')
line 2233: 
line 2234: " Pam conf
line 2235: au BufNewFile,BufRead */etc/pam.d/*^I^Icall s:StarSetf('pamconf')
line 2236: 
line 2237: " Printcap and Termcap
line 2238: au BufNewFile,BufRead *printcap* if !did_filetype()|  let b:ptcap_type = "print" | call s:StarSetf('ptcap')|endif
line 2242: au BufNewFile,BufRead *termcap* if !did_filetype()|  let b:ptcap_type = "term" | call s:StarSetf('ptcap')|endif
line 2246: 
line 2247: " ReDIF
line 2248: " Only used when the .rdf file was not detected to be XML.
line 2249: au BufRead,BufNewFile *.rdf^I^I^Icall dist#ft#Redif()
line 2250: 
line 2251: " Remind
line 2252: au BufNewFile,BufRead .reminders*^I^Icall s:StarSetf('remind')
line 2253: 
line 2254: " SGML catalog file
line 2255: au BufNewFile,BufRead sgml.catalog*^I^Icall s:StarSetf('catalog')
line 2256: 
line 2257: " avoid doc files being recognized a shell files
line 2258: au BufNewFile,BufRead */doc/{,.}bash[_-]completion{,.d,.sh}{,/*} setf text
line 2259: 
line 2260: " Shell scripts ending in a star
line 2261: au BufNewFile,BufRead .bashrc*,.bash[_-]profile*,.bash[_-]logout*,.bash[_-]aliases*,bash-fc[-.]*,PKGBUILD*,APKBUILD*,*/{,.}bash[_-]completion{,.d,.sh}{,/*} call dist#ft#SetFileTypeSH("bash")
line 2262: au BufNewFile,BufRead .kshrc* call dist#ft#SetFileTypeSH("ksh")
line 2263: au BufNewFile,BufRead .profile* call dist#ft#SetFileTypeSH(getline(1))
line 2264: 
line 2265: " tcsh scripts ending in a star
line 2266: au BufNewFile,BufRead .tcshrc*^Icall dist#ft#SetFileTypeShell("tcsh")
line 2267: 
line 2268: " csh scripts ending in a star
line 2269: au BufNewFile,BufRead .login*,.cshrc*  call dist#ft#CSH()
line 2270: 
line 2271: " VHDL
line 2272: au BufNewFile,BufRead *.vhdl_[0-9]*^I^Icall s:StarSetf('vhdl')
line 2273: 
line 2274: " Vim script
line 2275: au BufNewFile,BufRead *vimrc*^I^I^Icall s:StarSetf('vim')
line 2276: 
line 2277: " Subversion commit file
line 2278: au BufNewFile,BufRead svn-commit*.tmp^I^Isetf svn
line 2279: 
line 2280: " X resources file
line 2281: au BufNewFile,BufRead Xresources*,*/app-defaults/*,*/Xresources/* call s:StarSetf('xdefaults')
line 2282: 
line 2283: " XFree86 config
line 2284: au BufNewFile,BufRead XF86Config-4* let b:xf86conf_xfree86_version = 4 | call s:StarSetf('xf86conf')
line 2286: au BufNewFile,BufRead XF86Config* if getline(1) =~ '\<XConfigurator\>'|  let b:xf86conf_xfree86_version = 3|endif|call s:StarSetf('xf86conf')
line 2291: 
line 2292: " X11 xmodmap
line 2293: au BufNewFile,BufRead *xmodmap*^I^I^Icall s:StarSetf('xmodmap')
line 2294: 
line 2295: " Xinetd conf
line 2296: au BufNewFile,BufRead */etc/xinetd.d/*^I^Icall s:StarSetf('xinetd')
line 2297: 
line 2298: " yum conf (close enough to dosini)
line 2299: au BufNewFile,BufRead */etc/yum.repos.d/*^Icall s:StarSetf('dosini')
line 2300: 
line 2301: " Z-Shell script ending in a star
line 2302: au BufNewFile,BufRead .zsh*,.zlog*,.zcompdump*  call s:StarSetf('zsh')
line 2303: au BufNewFile,BufRead zsh*,zlog*^I^Icall s:StarSetf('zsh')
line 2304: 
line 2305: 
line 2306: " Plain text files, needs to be far down to not override others.  This avoids
line 2307: " the "conf" type being used if there is a line starting with '#'.
line 2308: au BufNewFile,BufRead *.text,README setf text
line 2309: 
line 2310: " Help files match *.txt but should have a last line that is a modeline. 
line 2311: au BufNewFile,BufRead *.txt  if getline('$') !~ 'vim:.*ft=help'|   setf text| endif       
line 2315: 
line 2316: " Use the filetype detect plugins.  They may overrule any of the previously
line 2317: " detected filetypes.
line 2318: runtime! ftdetect/*.vim
Searching for "ftdetect/*.vim" in "/Users/andrewgu/.config/nvim,/etc/xdg/nvim,/Users/andrewgu/.local/share/nvim/site,/usr/local/share/nvim/site,/usr/share/nvim/site,/usr/local/Cellar/neovim/0.5.0/share/nvim/runtime,/usr/local/Cellar/neovim/0.5.0/lib/nvim,/usr/share/nvim/site/after,/usr/local/share/nvim/site/after,/Users/andrewgu/.local/share/nvim/site/after,/etc/xdg/nvim/after,/Users/andrewgu/.config/nvim/after"
Searching for "/Users/andrewgu/.config/nvim/ftdetect/*.vim"
Searching for "/etc/xdg/nvim/ftdetect/*.vim"
Searching for "/Users/andrewgu/.local/share/nvim/site/ftdetect/*.vim"
Searching for "/usr/local/share/nvim/site/ftdetect/*.vim"
Searching for "/usr/share/nvim/site/ftdetect/*.vim"
Searching for "/usr/local/Cellar/neovim/0.5.0/share/nvim/runtime/ftdetect/*.vim"
Searching for "/usr/local/Cellar/neovim/0.5.0/lib/nvim/ftdetect/*.vim"
Searching for "/usr/share/nvim/site/after/ftdetect/*.vim"
Searching for "/usr/local/share/nvim/site/after/ftdetect/*.vim"
Searching for "/Users/andrewgu/.local/share/nvim/site/after/ftdetect/*.vim"
Searching for "/etc/xdg/nvim/after/ftdetect/*.vim"
Searching for "/Users/andrewgu/.config/nvim/after/ftdetect/*.vim"
not found in 'runtimepath': "ftdetect/*.vim"
Searching for "pack/*/start/*/ftdetect/*.vim" in "/Users/andrewgu/.config/nvim,/etc/xdg/nvim,/Users/andrewgu/.local/share/nvim/site,/usr/local/share/nvim/site,/usr/share/nvim/site,/usr/local/Cellar/neovim/0.5.0/share/nvim/runtime,/usr/local/Cellar/neovim/0.5.0/lib/nvim,/usr/share/nvim/site/after,/usr/local/share/nvim/site/after,/Users/andrewgu/.local/share/nvim/site/after,/etc/xdg/nvim/after,/Users/andrewgu/.config/nvim/after"
Searching for "/Users/andrewgu/.config/nvim/pack/*/start/*/ftdetect/*.vim"
Searching for "/etc/xdg/nvim/pack/*/start/*/ftdetect/*.vim"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/*/start/*/ftdetect/*.vim"
Searching for "/usr/local/share/nvim/site/pack/*/start/*/ftdetect/*.vim"
Searching for "/usr/share/nvim/site/pack/*/start/*/ftdetect/*.vim"
Searching for "/usr/local/Cellar/neovim/0.5.0/share/nvim/runtime/pack/*/start/*/ftdetect/*.vim"
Searching for "/usr/local/Cellar/neovim/0.5.0/lib/nvim/pack/*/start/*/ftdetect/*.vim"
Searching for "/usr/share/nvim/site/after/pack/*/start/*/ftdetect/*.vim"
Searching for "/usr/local/share/nvim/site/after/pack/*/start/*/ftdetect/*.vim"
Searching for "/Users/andrewgu/.local/share/nvim/site/after/pack/*/start/*/ftdetect/*.vim"
Searching for "/etc/xdg/nvim/after/pack/*/start/*/ftdetect/*.vim"
Searching for "/Users/andrewgu/.config/nvim/after/pack/*/start/*/ftdetect/*.vim"
not found in 'packpath': "pack/*/start/*/ftdetect/*.vim"
Searching for "start/*/ftdetect/*.vim" in "/Users/andrewgu/.config/nvim,/etc/xdg/nvim,/Users/andrewgu/.local/share/nvim/site,/usr/local/share/nvim/site,/usr/share/nvim/site,/usr/local/Cellar/neovim/0.5.0/share/nvim/runtime,/usr/local/Cellar/neovim/0.5.0/lib/nvim,/usr/share/nvim/site/after,/usr/local/share/nvim/site/after,/Users/andrewgu/.local/share/nvim/site/after,/etc/xdg/nvim/after,/Users/andrewgu/.config/nvim/after"
Searching for "/Users/andrewgu/.config/nvim/start/*/ftdetect/*.vim"
Searching for "/etc/xdg/nvim/start/*/ftdetect/*.vim"
Searching for "/Users/andrewgu/.local/share/nvim/site/start/*/ftdetect/*.vim"
Searching for "/usr/local/share/nvim/site/start/*/ftdetect/*.vim"
Searching for "/usr/share/nvim/site/start/*/ftdetect/*.vim"
Searching for "/usr/local/Cellar/neovim/0.5.0/share/nvim/runtime/start/*/ftdetect/*.vim"
Searching for "/usr/local/Cellar/neovim/0.5.0/lib/nvim/start/*/ftdetect/*.vim"
Searching for "/usr/share/nvim/site/after/start/*/ftdetect/*.vim"
Searching for "/usr/local/share/nvim/site/after/start/*/ftdetect/*.vim"
Searching for "/Users/andrewgu/.local/share/nvim/site/after/start/*/ftdetect/*.vim"
Searching for "/etc/xdg/nvim/after/start/*/ftdetect/*.vim"
Searching for "/Users/andrewgu/.config/nvim/after/start/*/ftdetect/*.vim"
not found in 'packpath': "start/*/ftdetect/*.vim"
line 2319: runtime! ftdetect/*.lua
Searching for "ftdetect/*.lua" in "/Users/andrewgu/.config/nvim,/etc/xdg/nvim,/Users/andrewgu/.local/share/nvim/site,/usr/local/share/nvim/site,/usr/share/nvim/site,/usr/local/Cellar/neovim/0.5.0/share/nvim/runtime,/usr/local/Cellar/neovim/0.5.0/lib/nvim,/usr/share/nvim/site/after,/usr/local/share/nvim/site/after,/Users/andrewgu/.local/share/nvim/site/after,/etc/xdg/nvim/after,/Users/andrewgu/.config/nvim/after"
Searching for "/Users/andrewgu/.config/nvim/ftdetect/*.lua"
Searching for "/etc/xdg/nvim/ftdetect/*.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/ftdetect/*.lua"
Searching for "/usr/local/share/nvim/site/ftdetect/*.lua"
Searching for "/usr/share/nvim/site/ftdetect/*.lua"
Searching for "/usr/local/Cellar/neovim/0.5.0/share/nvim/runtime/ftdetect/*.lua"
Searching for "/usr/local/Cellar/neovim/0.5.0/lib/nvim/ftdetect/*.lua"
Searching for "/usr/share/nvim/site/after/ftdetect/*.lua"
Searching for "/usr/local/share/nvim/site/after/ftdetect/*.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/after/ftdetect/*.lua"
Searching for "/etc/xdg/nvim/after/ftdetect/*.lua"
Searching for "/Users/andrewgu/.config/nvim/after/ftdetect/*.lua"
not found in 'runtimepath': "ftdetect/*.lua"
Searching for "pack/*/start/*/ftdetect/*.lua" in "/Users/andrewgu/.config/nvim,/etc/xdg/nvim,/Users/andrewgu/.local/share/nvim/site,/usr/local/share/nvim/site,/usr/share/nvim/site,/usr/local/Cellar/neovim/0.5.0/share/nvim/runtime,/usr/local/Cellar/neovim/0.5.0/lib/nvim,/usr/share/nvim/site/after,/usr/local/share/nvim/site/after,/Users/andrewgu/.local/share/nvim/site/after,/etc/xdg/nvim/after,/Users/andrewgu/.config/nvim/after"
Searching for "/Users/andrewgu/.config/nvim/pack/*/start/*/ftdetect/*.lua"
Searching for "/etc/xdg/nvim/pack/*/start/*/ftdetect/*.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/*/start/*/ftdetect/*.lua"
Searching for "/usr/local/share/nvim/site/pack/*/start/*/ftdetect/*.lua"
Searching for "/usr/share/nvim/site/pack/*/start/*/ftdetect/*.lua"
Searching for "/usr/local/Cellar/neovim/0.5.0/share/nvim/runtime/pack/*/start/*/ftdetect/*.lua"
Searching for "/usr/local/Cellar/neovim/0.5.0/lib/nvim/pack/*/start/*/ftdetect/*.lua"
Searching for "/usr/share/nvim/site/after/pack/*/start/*/ftdetect/*.lua"
Searching for "/usr/local/share/nvim/site/after/pack/*/start/*/ftdetect/*.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/after/pack/*/start/*/ftdetect/*.lua"
Searching for "/etc/xdg/nvim/after/pack/*/start/*/ftdetect/*.lua"
Searching for "/Users/andrewgu/.config/nvim/after/pack/*/start/*/ftdetect/*.lua"
not found in 'packpath': "pack/*/start/*/ftdetect/*.lua"
Searching for "start/*/ftdetect/*.lua" in "/Users/andrewgu/.config/nvim,/etc/xdg/nvim,/Users/andrewgu/.local/share/nvim/site,/usr/local/share/nvim/site,/usr/share/nvim/site,/usr/local/Cellar/neovim/0.5.0/share/nvim/runtime,/usr/local/Cellar/neovim/0.5.0/lib/nvim,/usr/share/nvim/site/after,/usr/local/share/nvim/site/after,/Users/andrewgu/.local/share/nvim/site/after,/etc/xdg/nvim/after,/Users/andrewgu/.config/nvim/after"
Searching for "/Users/andrewgu/.config/nvim/start/*/ftdetect/*.lua"
Searching for "/etc/xdg/nvim/start/*/ftdetect/*.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/start/*/ftdetect/*.lua"
Searching for "/usr/local/share/nvim/site/start/*/ftdetect/*.lua"
Searching for "/usr/share/nvim/site/start/*/ftdetect/*.lua"
Searching for "/usr/local/Cellar/neovim/0.5.0/share/nvim/runtime/start/*/ftdetect/*.lua"
Searching for "/usr/local/Cellar/neovim/0.5.0/lib/nvim/start/*/ftdetect/*.lua"
Searching for "/usr/share/nvim/site/after/start/*/ftdetect/*.lua"
Searching for "/usr/local/share/nvim/site/after/start/*/ftdetect/*.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/after/start/*/ftdetect/*.lua"
Searching for "/etc/xdg/nvim/after/start/*/ftdetect/*.lua"
Searching for "/Users/andrewgu/.config/nvim/after/start/*/ftdetect/*.lua"
not found in 'packpath': "start/*/ftdetect/*.lua"
line 2320: 
line 2321: " NOTE: The above command could have ended the filetypedetect autocmd group
line 2322: " and started another one. Let's make sure it has ended to get to a consistent
line 2323: " state.
line 2324: augroup END
line 2325: 
line 2326: " Generic configuration file. Use FALLBACK, it's just guessing!
line 2327: au filetypedetect BufNewFile,BufRead,StdinReadPost * if !did_filetype() && expand("<amatch>") !~ g:ft_ignore_pat    && (getline(1) =~ '^#' || getline(2) =~ '^#' || getline(3) =~ '^#'^I|| getline(4) =~ '^#' || getline(5) =~ '^#') |   setf FALLBACK conf | endif
line 2333: 
line 2334: 
line 2335: " If the GUI is already running, may still need to install the Syntax menu.
line 2336: " Don't do it when the 'M' flag is included in 'guioptions'.
line 2337: if has("menu") && has("gui_running") && !exists("did_install_syntax_menu") && &guioptions !~# "M"
line 2339:   source <sfile>:p:h/menu.vim
line 2340: endif
line 2341: 
line 2342: " Function called for testing all functions defined here.  These are
line 2343: " script-local, thus need to be executed here.
line 2344: " Returns a string with error messages (hopefully empty).
line 2345: func! TestFiletypeFuncs(testlist)
line 2356: 
line 2357: " Restore 'cpoptions'
line 2358: let &cpo = s:cpo_save
line 2359: unlet s:cpo_save
finished sourcing /usr/local/Cellar/neovim/0.5.0/share/nvim/runtime/filetype.vim
continuing in nvim_exec() called at /Users/andrewgu/.config/nvim/init.lua:0
Searching for "/usr/local/Cellar/neovim/0.5.0/lib/nvim/filetype.vim"
Searching for "/usr/share/nvim/site/after/filetype.vim"
Searching for "/usr/local/share/nvim/site/after/filetype.vim"
Searching for "/Users/andrewgu/.local/share/nvim/site/after/filetype.vim"
Searching for "/etc/xdg/nvim/after/filetype.vim"
Searching for "/Users/andrewgu/.config/nvim/after/filetype.vim"
Searching for "pack/*/start/*/filetype.vim" in "/Users/andrewgu/.config/nvim,/etc/xdg/nvim,/Users/andrewgu/.local/share/nvim/site,/usr/local/share/nvim/site,/usr/share/nvim/site,/usr/local/Cellar/neovim/0.5.0/share/nvim/runtime,/usr/local/Cellar/neovim/0.5.0/lib/nvim,/usr/share/nvim/site/after,/usr/local/share/nvim/site/after,/Users/andrewgu/.local/share/nvim/site/after,/etc/xdg/nvim/after,/Users/andrewgu/.config/nvim/after"
Searching for "/Users/andrewgu/.config/nvim/pack/*/start/*/filetype.vim"
Searching for "/etc/xdg/nvim/pack/*/start/*/filetype.vim"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/*/start/*/filetype.vim"
Searching for "/usr/local/share/nvim/site/pack/*/start/*/filetype.vim"
Searching for "/usr/share/nvim/site/pack/*/start/*/filetype.vim"
Searching for "/usr/local/Cellar/neovim/0.5.0/share/nvim/runtime/pack/*/start/*/filetype.vim"
Searching for "/usr/local/Cellar/neovim/0.5.0/lib/nvim/pack/*/start/*/filetype.vim"
Searching for "/usr/share/nvim/site/after/pack/*/start/*/filetype.vim"
Searching for "/usr/local/share/nvim/site/after/pack/*/start/*/filetype.vim"
Searching for "/Users/andrewgu/.local/share/nvim/site/after/pack/*/start/*/filetype.vim"
Searching for "/etc/xdg/nvim/after/pack/*/start/*/filetype.vim"
Searching for "/Users/andrewgu/.config/nvim/after/pack/*/start/*/filetype.vim"
not found in 'packpath': "pack/*/start/*/filetype.vim"
Searching for "start/*/filetype.vim" in "/Users/andrewgu/.config/nvim,/etc/xdg/nvim,/Users/andrewgu/.local/share/nvim/site,/usr/local/share/nvim/site,/usr/share/nvim/site,/usr/local/Cellar/neovim/0.5.0/share/nvim/runtime,/usr/local/Cellar/neovim/0.5.0/lib/nvim,/usr/share/nvim/site/after,/usr/local/share/nvim/site/after,/Users/andrewgu/.local/share/nvim/site/after,/etc/xdg/nvim/after,/Users/andrewgu/.config/nvim/after"
Searching for "/Users/andrewgu/.config/nvim/start/*/filetype.vim"
Searching for "/etc/xdg/nvim/start/*/filetype.vim"
Searching for "/Users/andrewgu/.local/share/nvim/site/start/*/filetype.vim"
Searching for "/usr/local/share/nvim/site/start/*/filetype.vim"
Searching for "/usr/share/nvim/site/start/*/filetype.vim"
Searching for "/usr/local/Cellar/neovim/0.5.0/share/nvim/runtime/start/*/filetype.vim"
Searching for "/usr/local/Cellar/neovim/0.5.0/lib/nvim/start/*/filetype.vim"
Searching for "/usr/share/nvim/site/after/start/*/filetype.vim"
Searching for "/usr/local/share/nvim/site/after/start/*/filetype.vim"
Searching for "/Users/andrewgu/.local/share/nvim/site/after/start/*/filetype.vim"
Searching for "/etc/xdg/nvim/after/start/*/filetype.vim"
Searching for "/Users/andrewgu/.config/nvim/after/start/*/filetype.vim"
not found in 'packpath': "start/*/filetype.vim"
Searching for "indent.vim" in "/Users/andrewgu/.config/nvim,/etc/xdg/nvim,/Users/andrewgu/.local/share/nvim/site,/usr/local/share/nvim/site,/usr/share/nvim/site,/usr/local/Cellar/neovim/0.5.0/share/nvim/runtime,/usr/local/Cellar/neovim/0.5.0/lib/nvim,/usr/share/nvim/site/after,/usr/local/share/nvim/site/after,/Users/andrewgu/.local/share/nvim/site/after,/etc/xdg/nvim/after,/Users/andrewgu/.config/nvim/after"
Searching for "/Users/andrewgu/.config/nvim/indent.vim"
Searching for "/etc/xdg/nvim/indent.vim"
Searching for "/Users/andrewgu/.local/share/nvim/site/indent.vim"
Searching for "/usr/local/share/nvim/site/indent.vim"
Searching for "/usr/share/nvim/site/indent.vim"
Searching for "/usr/local/Cellar/neovim/0.5.0/share/nvim/runtime/indent.vim"
chdir(/Users/andrewgu/.config/nvim)
chdir(/usr/local/Cellar/neovim/0.5.0/share/nvim/runtime)
chdir(/Users/andrewgu/.config/nvim)
line 0: sourcing "/usr/local/Cellar/neovim/0.5.0/share/nvim/runtime/indent.vim"
line 1: " Vim support file to switch on loading indent files for file types
line 2: "
line 3: " Maintainer:^IBram Moolenaar <Bram@vim.org>
line 4: " Last Change:^I2008 Feb 22
line 5: 
line 6: if exists("did_indent_on")
line 7:   finish
line 8: endif
line 9: let did_indent_on = 1
line 10: 
line 11: augroup filetypeindent
line 12:   au FileType * call s:LoadIndent()
line 13:   func! s:LoadIndent()
line 32: augroup END
finished sourcing /usr/local/Cellar/neovim/0.5.0/share/nvim/runtime/indent.vim
continuing in nvim_exec() called at /Users/andrewgu/.config/nvim/init.lua:0
Searching for "/usr/local/Cellar/neovim/0.5.0/lib/nvim/indent.vim"
Searching for "/usr/share/nvim/site/after/indent.vim"
Searching for "/usr/local/share/nvim/site/after/indent.vim"
Searching for "/Users/andrewgu/.local/share/nvim/site/after/indent.vim"
Searching for "/etc/xdg/nvim/after/indent.vim"
Searching for "/Users/andrewgu/.config/nvim/after/indent.vim"
Searching for "pack/*/start/*/indent.vim" in "/Users/andrewgu/.config/nvim,/etc/xdg/nvim,/Users/andrewgu/.local/share/nvim/site,/usr/local/share/nvim/site,/usr/share/nvim/site,/usr/local/Cellar/neovim/0.5.0/share/nvim/runtime,/usr/local/Cellar/neovim/0.5.0/lib/nvim,/usr/share/nvim/site/after,/usr/local/share/nvim/site/after,/Users/andrewgu/.local/share/nvim/site/after,/etc/xdg/nvim/after,/Users/andrewgu/.config/nvim/after"
Searching for "/Users/andrewgu/.config/nvim/pack/*/start/*/indent.vim"
Searching for "/etc/xdg/nvim/pack/*/start/*/indent.vim"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/*/start/*/indent.vim"
Searching for "/usr/local/share/nvim/site/pack/*/start/*/indent.vim"
Searching for "/usr/share/nvim/site/pack/*/start/*/indent.vim"
Searching for "/usr/local/Cellar/neovim/0.5.0/share/nvim/runtime/pack/*/start/*/indent.vim"
Searching for "/usr/local/Cellar/neovim/0.5.0/lib/nvim/pack/*/start/*/indent.vim"
Searching for "/usr/share/nvim/site/after/pack/*/start/*/indent.vim"
Searching for "/usr/local/share/nvim/site/after/pack/*/start/*/indent.vim"
Searching for "/Users/andrewgu/.local/share/nvim/site/after/pack/*/start/*/indent.vim"
Searching for "/etc/xdg/nvim/after/pack/*/start/*/indent.vim"
Searching for "/Users/andrewgu/.config/nvim/after/pack/*/start/*/indent.vim"
not found in 'packpath': "pack/*/start/*/indent.vim"
Searching for "start/*/indent.vim" in "/Users/andrewgu/.config/nvim,/etc/xdg/nvim,/Users/andrewgu/.local/share/nvim/site,/usr/local/share/nvim/site,/usr/share/nvim/site,/usr/local/Cellar/neovim/0.5.0/share/nvim/runtime,/usr/local/Cellar/neovim/0.5.0/lib/nvim,/usr/share/nvim/site/after,/usr/local/share/nvim/site/after,/Users/andrewgu/.local/share/nvim/site/after,/etc/xdg/nvim/after,/Users/andrewgu/.config/nvim/after"
Searching for "/Users/andrewgu/.config/nvim/start/*/indent.vim"
Searching for "/etc/xdg/nvim/start/*/indent.vim"
Searching for "/Users/andrewgu/.local/share/nvim/site/start/*/indent.vim"
Searching for "/usr/local/share/nvim/site/start/*/indent.vim"
Searching for "/usr/share/nvim/site/start/*/indent.vim"
Searching for "/usr/local/Cellar/neovim/0.5.0/share/nvim/runtime/start/*/indent.vim"
Searching for "/usr/local/Cellar/neovim/0.5.0/lib/nvim/start/*/indent.vim"
Searching for "/usr/share/nvim/site/after/start/*/indent.vim"
Searching for "/usr/local/share/nvim/site/after/start/*/indent.vim"
Searching for "/Users/andrewgu/.local/share/nvim/site/after/start/*/indent.vim"
Searching for "/etc/xdg/nvim/after/start/*/indent.vim"
Searching for "/Users/andrewgu/.config/nvim/after/start/*/indent.vim"
not found in 'packpath': "start/*/indent.vim"
Executing: autocmd BufWritePre * :%s/\s\+$//e
finished sourcing /Users/andrewgu/.config/nvim/init.lua
Searching for "ftplugin.vim" in "/Users/andrewgu/.config/nvim,/etc/xdg/nvim,/Users/andrewgu/.local/share/nvim/site,/usr/local/share/nvim/site,/usr/share/nvim/site,/usr/local/Cellar/neovim/0.5.0/share/nvim/runtime,/usr/local/Cellar/neovim/0.5.0/lib/nvim,/usr/share/nvim/site/after,/usr/local/share/nvim/site/after,/Users/andrewgu/.local/share/nvim/site/after,/etc/xdg/nvim/after,/Users/andrewgu/.config/nvim/after"
Searching for "/Users/andrewgu/.config/nvim/ftplugin.vim"
Searching for "/etc/xdg/nvim/ftplugin.vim"
Searching for "/Users/andrewgu/.local/share/nvim/site/ftplugin.vim"
Searching for "/usr/local/share/nvim/site/ftplugin.vim"
Searching for "/usr/share/nvim/site/ftplugin.vim"
Searching for "/usr/local/Cellar/neovim/0.5.0/share/nvim/runtime/ftplugin.vim"
chdir(/Users/andrewgu/.config/nvim)
chdir(/usr/local/Cellar/neovim/0.5.0/share/nvim/runtime)
chdir(/Users/andrewgu/.config/nvim)
sourcing "/usr/local/Cellar/neovim/0.5.0/share/nvim/runtime/ftplugin.vim"
line 1: " Vim support file to switch on loading plugins for file types
line 2: "
line 3: " Maintainer:^IBram Moolenaar <Bram@vim.org>
line 4: " Last change:^I2006 Apr 30
line 5: 
line 6: if exists("did_load_ftplugin")
line 7:   finish
line 8: endif
line 9: let did_load_ftplugin = 1
line 10: 
line 11: augroup filetypeplugin
line 12:   au FileType * call s:LoadFTPlugin()
line 13: 
line 14:   func! s:LoadFTPlugin()
line 37: augroup END
finished sourcing /usr/local/Cellar/neovim/0.5.0/share/nvim/runtime/ftplugin.vim
Searching for "/usr/local/Cellar/neovim/0.5.0/lib/nvim/ftplugin.vim"
Searching for "/usr/share/nvim/site/after/ftplugin.vim"
Searching for "/usr/local/share/nvim/site/after/ftplugin.vim"
Searching for "/Users/andrewgu/.local/share/nvim/site/after/ftplugin.vim"
Searching for "/etc/xdg/nvim/after/ftplugin.vim"
Searching for "/Users/andrewgu/.config/nvim/after/ftplugin.vim"
Searching for "pack/*/start/*/ftplugin.vim" in "/Users/andrewgu/.config/nvim,/etc/xdg/nvim,/Users/andrewgu/.local/share/nvim/site,/usr/local/share/nvim/site,/usr/share/nvim/site,/usr/local/Cellar/neovim/0.5.0/share/nvim/runtime,/usr/local/Cellar/neovim/0.5.0/lib/nvim,/usr/share/nvim/site/after,/usr/local/share/nvim/site/after,/Users/andrewgu/.local/share/nvim/site/after,/etc/xdg/nvim/after,/Users/andrewgu/.config/nvim/after"
Searching for "/Users/andrewgu/.config/nvim/pack/*/start/*/ftplugin.vim"
Searching for "/etc/xdg/nvim/pack/*/start/*/ftplugin.vim"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/*/start/*/ftplugin.vim"
Searching for "/usr/local/share/nvim/site/pack/*/start/*/ftplugin.vim"
Searching for "/usr/share/nvim/site/pack/*/start/*/ftplugin.vim"
Searching for "/usr/local/Cellar/neovim/0.5.0/share/nvim/runtime/pack/*/start/*/ftplugin.vim"
Searching for "/usr/local/Cellar/neovim/0.5.0/lib/nvim/pack/*/start/*/ftplugin.vim"
Searching for "/usr/share/nvim/site/after/pack/*/start/*/ftplugin.vim"
Searching for "/usr/local/share/nvim/site/after/pack/*/start/*/ftplugin.vim"
Searching for "/Users/andrewgu/.local/share/nvim/site/after/pack/*/start/*/ftplugin.vim"
Searching for "/etc/xdg/nvim/after/pack/*/start/*/ftplugin.vim"
Searching for "/Users/andrewgu/.config/nvim/after/pack/*/start/*/ftplugin.vim"
not found in 'packpath': "pack/*/start/*/ftplugin.vim"
Searching for "start/*/ftplugin.vim" in "/Users/andrewgu/.config/nvim,/etc/xdg/nvim,/Users/andrewgu/.local/share/nvim/site,/usr/local/share/nvim/site,/usr/share/nvim/site,/usr/local/Cellar/neovim/0.5.0/share/nvim/runtime,/usr/local/Cellar/neovim/0.5.0/lib/nvim,/usr/share/nvim/site/after,/usr/local/share/nvim/site/after,/Users/andrewgu/.local/share/nvim/site/after,/etc/xdg/nvim/after,/Users/andrewgu/.config/nvim/after"
Searching for "/Users/andrewgu/.config/nvim/start/*/ftplugin.vim"
Searching for "/etc/xdg/nvim/start/*/ftplugin.vim"
Searching for "/Users/andrewgu/.local/share/nvim/site/start/*/ftplugin.vim"
Searching for "/usr/local/share/nvim/site/start/*/ftplugin.vim"
Searching for "/usr/share/nvim/site/start/*/ftplugin.vim"
Searching for "/usr/local/Cellar/neovim/0.5.0/share/nvim/runtime/start/*/ftplugin.vim"
Searching for "/usr/local/Cellar/neovim/0.5.0/lib/nvim/start/*/ftplugin.vim"
Searching for "/usr/share/nvim/site/after/start/*/ftplugin.vim"
Searching for "/usr/local/share/nvim/site/after/start/*/ftplugin.vim"
Searching for "/Users/andrewgu/.local/share/nvim/site/after/start/*/ftplugin.vim"
Searching for "/etc/xdg/nvim/after/start/*/ftplugin.vim"
Searching for "/Users/andrewgu/.config/nvim/after/start/*/ftplugin.vim"
not found in 'packpath': "start/*/ftplugin.vim"
Executing: so $VIMRUNTIME/syntax/syntax.vim
chdir(/Users/andrewgu/.config/nvim)
chdir(/usr/local/Cellar/neovim/0.5.0/share/nvim/runtime/syntax)
chdir(/Users/andrewgu/.config/nvim)
sourcing "/usr/local/Cellar/neovim/0.5.0/share/nvim/runtime/syntax/syntax.vim"
line 1: " Vim syntax support file
line 2: " Maintainer:^IBram Moolenaar <Bram@vim.org>
line 3: " Last Change:^I2001 Sep 04
line 4: 
line 5: " This file is used for ":syntax on".
line 6: " It installs the autocommands and starts highlighting for all buffers.
line 7: 
line 8: if !has("syntax")
line 9:   finish
line 10: endif
line 11: 
line 12: " If Syntax highlighting appears to be on already, turn it off first, so that
line 13: " any leftovers are cleared.
line 14: if exists("syntax_on") || exists("syntax_manual")
line 15:   so <sfile>:p:h/nosyntax.vim
line 16: endif
line 17: 
line 18: " Load the Syntax autocommands and set the default methods for highlighting.
line 19: runtime syntax/synload.vim
Searching for "syntax/synload.vim" in "/Users/andrewgu/.config/nvim,/etc/xdg/nvim,/Users/andrewgu/.local/share/nvim/site,/usr/local/share/nvim/site,/usr/share/nvim/site,/usr/local/Cellar/neovim/0.5.0/share/nvim/runtime,/usr/local/Cellar/neovim/0.5.0/lib/nvim,/usr/share/nvim/site/after,/usr/local/share/nvim/site/after,/Users/andrewgu/.local/share/nvim/site/after,/etc/xdg/nvim/after,/Users/andrewgu/.config/nvim/after"
Searching for "/Users/andrewgu/.config/nvim/syntax/synload.vim"
Searching for "/etc/xdg/nvim/syntax/synload.vim"
Searching for "/Users/andrewgu/.local/share/nvim/site/syntax/synload.vim"
Searching for "/usr/local/share/nvim/site/syntax/synload.vim"
Searching for "/usr/share/nvim/site/syntax/synload.vim"
Searching for "/usr/local/Cellar/neovim/0.5.0/share/nvim/runtime/syntax/synload.vim"
chdir(/Users/andrewgu/.config/nvim)
chdir(/usr/local/Cellar/neovim/0.5.0/share/nvim/runtime/syntax)
chdir(/Users/andrewgu/.config/nvim)
line 19: sourcing "/usr/local/Cellar/neovim/0.5.0/share/nvim/runtime/syntax/synload.vim"
line 1: " Vim syntax support file
line 2: " Maintainer:^IBram Moolenaar <Bram@vim.org>
line 3: " Last Change:^I2020 Apr 13
line 4: 
line 5: " This file sets up for syntax highlighting.
line 6: " It is loaded from "syntax.vim" and "manual.vim".
line 7: " 1. Set the default highlight groups.
line 8: " 2. Install Syntax autocommands for all the available syntax files.
line 9: 
line 10: if !has("syntax")
line 11:   finish
line 12: endif
line 13: 
line 14: " let others know that syntax has been switched on
line 15: let syntax_on = 1
line 16: 
line 17: " Set the default highlighting colors.  Use a color scheme if specified.
line 18: if exists("colors_name")
line 19:   exe "colors " . colors_name
line 19: colors onedark
Searching for "colors/onedark.vim" in "/Users/andrewgu/.config/nvim,/etc/xdg/nvim,/Users/andrewgu/.local/share/nvim/site,/usr/local/share/nvim/site,/usr/share/nvim/site,/usr/local/Cellar/neovim/0.5.0/share/nvim/runtime,/usr/local/Cellar/neovim/0.5.0/lib/nvim,/usr/share/nvim/site/after,/usr/local/share/nvim/site/after,/Users/andrewgu/.local/share/nvim/site/after,/etc/xdg/nvim/after,/Users/andrewgu/.config/nvim/after"
Searching for "/Users/andrewgu/.config/nvim/colors/onedark.vim"
Searching for "/etc/xdg/nvim/colors/onedark.vim"
Searching for "/Users/andrewgu/.local/share/nvim/site/colors/onedark.vim"
Searching for "/usr/local/share/nvim/site/colors/onedark.vim"
Searching for "/usr/share/nvim/site/colors/onedark.vim"
Searching for "/usr/local/Cellar/neovim/0.5.0/share/nvim/runtime/colors/onedark.vim"
Searching for "/usr/local/Cellar/neovim/0.5.0/lib/nvim/colors/onedark.vim"
Searching for "/usr/share/nvim/site/after/colors/onedark.vim"
Searching for "/usr/local/share/nvim/site/after/colors/onedark.vim"
Searching for "/Users/andrewgu/.local/share/nvim/site/after/colors/onedark.vim"
Searching for "/etc/xdg/nvim/after/colors/onedark.vim"
Searching for "/Users/andrewgu/.config/nvim/after/colors/onedark.vim"
not found in 'runtimepath': "colors/onedark.vim"
Searching for "pack/*/start/*/colors/onedark.vim" in "/Users/andrewgu/.config/nvim,/etc/xdg/nvim,/Users/andrewgu/.local/share/nvim/site,/usr/local/share/nvim/site,/usr/share/nvim/site,/usr/local/Cellar/neovim/0.5.0/share/nvim/runtime,/usr/local/Cellar/neovim/0.5.0/lib/nvim,/usr/share/nvim/site/after,/usr/local/share/nvim/site/after,/Users/andrewgu/.local/share/nvim/site/after,/etc/xdg/nvim/after,/Users/andrewgu/.config/nvim/after"
Searching for "/Users/andrewgu/.config/nvim/pack/*/start/*/colors/onedark.vim"
Searching for "/etc/xdg/nvim/pack/*/start/*/colors/onedark.vim"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/*/start/*/colors/onedark.vim"
chdir(/Users/andrewgu/.config/nvim)
chdir(/Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors)
chdir(/Users/andrewgu/.config/nvim)
line 19: sourcing "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim"
line 1: " vim:fdm=marker
line 2: " Vim Color File
line 3: " Name:       onedark.vim
line 4: " Maintainer: https://github.com/joshdick/onedark.vim/
line 5: " License:    The MIT License (MIT)
line 6: " Based On:   https://github.com/MaxSt/FlatColor/
line 7: 
line 8: " Companion statusline plugin and terminal themes are included with onedark.vim:
line 9: "  * https://github.com/joshdick/onedark.vim#lightlinevim-colorscheme
line 10: "  * https://github.com/joshdick/onedark.vim#vim-airline-theme
line 11: "  * https://github.com/joshdick/onedark.vim/tree/main/term
line 12: 
line 13: " Color Reference {{{
line 14: 
line 15: " The following colors were measured inside Atom using its built-in inspector.
line 16: 
line 17: " +---------------------------------------------+
line 18: " |  Color Name  |         RGB        |   Hex   |
line 19: " |--------------+--------------------+---------|
line 20: " | Black        | rgb(40, 44, 52)    | #282c34 |
line 21: " |--------------+--------------------+---------|
line 22: " | White        | rgb(171, 178, 191) | #abb2bf |
line 23: " |--------------+--------------------+---------|
line 24: " | Light Red    | rgb(224, 108, 117) | #e06c75 |
line 25: " |--------------+--------------------+---------|
line 26: " | Dark Red     | rgb(190, 80, 70)   | #be5046 |
line 27: " |--------------+--------------------+---------|
line 28: " | Green        | rgb(152, 195, 121) | #98c379 |
line 29: " |--------------+--------------------+---------|
line 30: " | Light Yellow | rgb(229, 192, 123) | #e5c07b |
line 31: " |--------------+--------------------+---------|
line 32: " | Dark Yellow  | rgb(209, 154, 102) | #d19a66 |
line 33: " |--------------+--------------------+---------|
line 34: " | Blue         | rgb(97, 175, 239)  | #61afef |
line 35: " |--------------+--------------------+---------|
line 36: " | Magenta      | rgb(198, 120, 221) | #c678dd |
line 37: " |--------------+--------------------+---------|
line 38: " | Cyan         | rgb(86, 182, 194)  | #56b6c2 |
line 39: " |--------------+--------------------+---------|
line 40: " | Gutter Grey  | rgb(76, 82, 99)    | #4b5263 |
line 41: " |--------------+--------------------+---------|
line 42: " | Comment Grey | rgb(92, 99, 112)   | #5c6370 |
line 43: " +---------------------------------------------+
line 44: 
line 45: " }}}
line 46: 
line 47: " Initialization {{{
line 48: 
line 49: highlight clear
Searching for "syntax/syncolor.vim" in "/Users/andrewgu/.config/nvim,/etc/xdg/nvim,/Users/andrewgu/.local/share/nvim/site,/usr/local/share/nvim/site,/usr/share/nvim/site,/usr/local/Cellar/neovim/0.5.0/share/nvim/runtime,/usr/local/Cellar/neovim/0.5.0/lib/nvim,/usr/share/nvim/site/after,/usr/local/share/nvim/site/after,/Users/andrewgu/.local/share/nvim/site/after,/etc/xdg/nvim/after,/Users/andrewgu/.config/nvim/after"
Searching for "/Users/andrewgu/.config/nvim/syntax/syncolor.vim"
Searching for "/etc/xdg/nvim/syntax/syncolor.vim"
Searching for "/Users/andrewgu/.local/share/nvim/site/syntax/syncolor.vim"
Searching for "/usr/local/share/nvim/site/syntax/syncolor.vim"
Searching for "/usr/share/nvim/site/syntax/syncolor.vim"
Searching for "/usr/local/Cellar/neovim/0.5.0/share/nvim/runtime/syntax/syncolor.vim"
chdir(/Users/andrewgu/.config/nvim)
chdir(/usr/local/Cellar/neovim/0.5.0/share/nvim/runtime/syntax)
chdir(/Users/andrewgu/.config/nvim)
line 49: sourcing "/usr/local/Cellar/neovim/0.5.0/share/nvim/runtime/syntax/syncolor.vim"
line 1: " Vim syntax support file
line 2: " Maintainer:^IBram Moolenaar <Bram@vim.org>
line 3: " Last Change:^I2020 Feb 13
line 4: 
line 5: " This file sets up the default methods for highlighting.
line 6: " It is loaded from "synload.vim" and from Vim for ":syntax reset".
line 7: " Also used from init_highlight().
line 8: 
line 9: if !exists("syntax_cmd") || syntax_cmd == "on"
line 10:   " ":syntax on" works like in Vim 5.7: set colors but keep links
line 11:   command -nargs=* SynColor hi <args>
line 12:   command -nargs=* SynLink hi link <args>
line 13: else
line 14:   if syntax_cmd == "enable"
line 15:     " ":syntax enable" keeps any existing colors
line 16:     command -nargs=* SynColor hi def <args>
line 17:     command -nargs=* SynLink hi def link <args>
line 18:   elseif syntax_cmd == "reset"
line 19:     " ":syntax reset" resets all colors to the default
line 20:     command -nargs=* SynColor hi <args>
line 21:     command -nargs=* SynLink hi! link <args>
line 22:   else
line 23:     " User defined syncolor file has already set the colors.
line 24:     finish
line 25:   endif
line 26: endif
line 27: 
line 28: " Many terminals can only use six different colors (plus black and white).
line 29: " Therefore the number of colors used is kept low. It doesn't look nice with
line 30: " too many colors anyway.
line 31: " Careful with "cterm=bold", it changes the color to bright for some terminals.
line 32: " There are two sets of defaults: for a dark and a light background.
line 33: if &background == "dark"
line 34:   SynColor Comment^Iterm=bold cterm=NONE ctermfg=Cyan ctermbg=NONE gui=NONE guifg=#80a0ff guibg=NONE
line 34: hi def Comment^Iterm=bold cterm=NONE ctermfg=Cyan ctermbg=NONE gui=NONE guifg=#80a0ff guibg=NONE
line 35:   SynColor Constant^Iterm=underline cterm=NONE ctermfg=Magenta ctermbg=NONE gui=NONE guifg=#ffa0a0 guibg=NONE
line 35: hi def Constant^Iterm=underline cterm=NONE ctermfg=Magenta ctermbg=NONE gui=NONE guifg=#ffa0a0 guibg=NONE
line 36:   SynColor Special^Iterm=bold cterm=NONE ctermfg=LightRed ctermbg=NONE gui=NONE guifg=Orange guibg=NONE
line 36: hi def Special^Iterm=bold cterm=NONE ctermfg=LightRed ctermbg=NONE gui=NONE guifg=Orange guibg=NONE
line 37:   SynColor Identifier^Iterm=underline cterm=bold ctermfg=Cyan ctermbg=NONE gui=NONE guifg=#40ffff guibg=NONE
line 37: hi def Identifier^Iterm=underline cterm=bold ctermfg=Cyan ctermbg=NONE gui=NONE guifg=#40ffff guibg=NONE
line 38:   SynColor Statement^Iterm=bold cterm=NONE ctermfg=Yellow ctermbg=NONE gui=bold guifg=#ffff60 guibg=NONE
line 38: hi def Statement^Iterm=bold cterm=NONE ctermfg=Yellow ctermbg=NONE gui=bold guifg=#ffff60 guibg=NONE
line 39:   SynColor PreProc^Iterm=underline cterm=NONE ctermfg=LightBlue ctermbg=NONE gui=NONE guifg=#ff80ff guibg=NONE
line 39: hi def PreProc^Iterm=underline cterm=NONE ctermfg=LightBlue ctermbg=NONE gui=NONE guifg=#ff80ff guibg=NONE
line 40:   SynColor Type^I^Iterm=underline cterm=NONE ctermfg=LightGreen ctermbg=NONE gui=bold guifg=#60ff60 guibg=NONE
line 40: hi def Type^I^Iterm=underline cterm=NONE ctermfg=LightGreen ctermbg=NONE gui=bold guifg=#60ff60 guibg=NONE
line 41:   SynColor Underlined^Iterm=underline cterm=underline ctermfg=LightBlue gui=underline guifg=#80a0ff
line 41: hi def Underlined^Iterm=underline cterm=underline ctermfg=LightBlue gui=underline guifg=#80a0ff
line 42:   SynColor Ignore^Iterm=NONE cterm=NONE ctermfg=black ctermbg=NONE gui=NONE guifg=bg guibg=NONE
line 42: hi def Ignore^Iterm=NONE cterm=NONE ctermfg=black ctermbg=NONE gui=NONE guifg=bg guibg=NONE
line 43: else
line 44:   SynColor Comment^Iterm=bold cterm=NONE ctermfg=DarkBlue ctermbg=NONE gui=NONE guifg=Blue guibg=NONE
line 45:   SynColor Constant^Iterm=underline cterm=NONE ctermfg=DarkRed ctermbg=NONE gui=NONE guifg=Magenta guibg=NONE
line 46:   " #6a5acd is SlateBlue
line 47:   SynColor Special^Iterm=bold cterm=NONE ctermfg=DarkMagenta ctermbg=NONE gui=NONE guifg=#6a5acd guibg=NONE
line 48:   SynColor Identifier^Iterm=underline cterm=NONE ctermfg=DarkCyan ctermbg=NONE gui=NONE guifg=DarkCyan guibg=NONE
line 49:   SynColor Statement^Iterm=bold cterm=NONE ctermfg=Brown ctermbg=NONE gui=bold guifg=Brown guibg=NONE
line 50:   " #6a0dad is Purple
line 51:   SynColor PreProc^Iterm=underline cterm=NONE ctermfg=DarkMagenta ctermbg=NONE gui=NONE guifg=#6a0dad guibg=NONE
line 52:   SynColor Type^I^Iterm=underline cterm=NONE ctermfg=DarkGreen ctermbg=NONE gui=bold guifg=SeaGreen guibg=NONE
line 53:   SynColor Underlined^Iterm=underline cterm=underline ctermfg=DarkMagenta gui=underline guifg=SlateBlue
line 54:   SynColor Ignore^Iterm=NONE cterm=NONE ctermfg=white ctermbg=NONE gui=NONE guifg=bg guibg=NONE
line 55: endif
line 56: SynColor Error^I^Iterm=reverse cterm=NONE ctermfg=White ctermbg=Red gui=NONE guifg=White guibg=Red
line 56: hi def Error^I^Iterm=reverse cterm=NONE ctermfg=White ctermbg=Red gui=NONE guifg=White guibg=Red
line 57: SynColor Todo^I^Iterm=standout cterm=NONE ctermfg=Black ctermbg=Yellow gui=NONE guifg=Blue guibg=Yellow
line 57: hi def Todo^I^Iterm=standout cterm=NONE ctermfg=Black ctermbg=Yellow gui=NONE guifg=Blue guibg=Yellow
line 58: 
line 59: " Common groups that link to default highlighting.
line 60: " You can specify other highlighting easily.
line 61: SynLink String^I^IConstant
line 61: hi def link String^I^IConstant
line 62: SynLink Character^IConstant
line 62: hi def link Character^IConstant
line 63: SynLink Number^I^IConstant
line 63: hi def link Number^I^IConstant
line 64: SynLink Boolean^I^IConstant
line 64: hi def link Boolean^I^IConstant
line 65: SynLink Float^I^INumber
line 65: hi def link Float^I^INumber
line 66: SynLink Function^IIdentifier
line 66: hi def link Function^IIdentifier
line 67: SynLink Conditional^IStatement
line 67: hi def link Conditional^IStatement
line 68: SynLink Repeat^I^IStatement
line 68: hi def link Repeat^I^IStatement
line 69: SynLink Label^I^IStatement
line 69: hi def link Label^I^IStatement
line 70: SynLink Operator^IStatement
line 70: hi def link Operator^IStatement
line 71: SynLink Keyword^I^IStatement
line 71: hi def link Keyword^I^IStatement
line 72: SynLink Exception^IStatement
line 72: hi def link Exception^IStatement
line 73: SynLink Include^I^IPreProc
line 73: hi def link Include^I^IPreProc
line 74: SynLink Define^I^IPreProc
line 74: hi def link Define^I^IPreProc
line 75: SynLink Macro^I^IPreProc
line 75: hi def link Macro^I^IPreProc
line 76: SynLink PreCondit^IPreProc
line 76: hi def link PreCondit^IPreProc
line 77: SynLink StorageClass^IType
line 77: hi def link StorageClass^IType
line 78: SynLink Structure^IType
line 78: hi def link Structure^IType
line 79: SynLink Typedef^I^IType
line 79: hi def link Typedef^I^IType
line 80: SynLink Tag^I^ISpecial
line 80: hi def link Tag^I^ISpecial
line 81: SynLink SpecialChar^ISpecial
line 81: hi def link SpecialChar^ISpecial
line 82: SynLink Delimiter^ISpecial
line 82: hi def link Delimiter^ISpecial
line 83: SynLink SpecialComment^ISpecial
line 83: hi def link SpecialComment^ISpecial
line 84: SynLink Debug^I^ISpecial
line 84: hi def link Debug^I^ISpecial
line 85: 
line 86: delcommand SynColor
line 87: delcommand SynLink
finished sourcing /usr/local/Cellar/neovim/0.5.0/share/nvim/runtime/syntax/syncolor.vim
continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim
Searching for "/usr/local/Cellar/neovim/0.5.0/lib/nvim/syntax/syncolor.vim"
Searching for "/usr/share/nvim/site/after/syntax/syncolor.vim"
Searching for "/usr/local/share/nvim/site/after/syntax/syncolor.vim"
Searching for "/Users/andrewgu/.local/share/nvim/site/after/syntax/syncolor.vim"
Searching for "/etc/xdg/nvim/after/syntax/syncolor.vim"
Searching for "/Users/andrewgu/.config/nvim/after/syntax/syncolor.vim"
Searching for "pack/*/start/*/syntax/syncolor.vim" in "/Users/andrewgu/.config/nvim,/etc/xdg/nvim,/Users/andrewgu/.local/share/nvim/site,/usr/local/share/nvim/site,/usr/share/nvim/site,/usr/local/Cellar/neovim/0.5.0/share/nvim/runtime,/usr/local/Cellar/neovim/0.5.0/lib/nvim,/usr/share/nvim/site/after,/usr/local/share/nvim/site/after,/Users/andrewgu/.local/share/nvim/site/after,/etc/xdg/nvim/after,/Users/andrewgu/.config/nvim/after"
Searching for "/Users/andrewgu/.config/nvim/pack/*/start/*/syntax/syncolor.vim"
Searching for "/etc/xdg/nvim/pack/*/start/*/syntax/syncolor.vim"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/*/start/*/syntax/syncolor.vim"
Searching for "/usr/local/share/nvim/site/pack/*/start/*/syntax/syncolor.vim"
Searching for "/usr/share/nvim/site/pack/*/start/*/syntax/syncolor.vim"
Searching for "/usr/local/Cellar/neovim/0.5.0/share/nvim/runtime/pack/*/start/*/syntax/syncolor.vim"
Searching for "/usr/local/Cellar/neovim/0.5.0/lib/nvim/pack/*/start/*/syntax/syncolor.vim"
Searching for "/usr/share/nvim/site/after/pack/*/start/*/syntax/syncolor.vim"
Searching for "/usr/local/share/nvim/site/after/pack/*/start/*/syntax/syncolor.vim"
Searching for "/Users/andrewgu/.local/share/nvim/site/after/pack/*/start/*/syntax/syncolor.vim"
Searching for "/etc/xdg/nvim/after/pack/*/start/*/syntax/syncolor.vim"
Searching for "/Users/andrewgu/.config/nvim/after/pack/*/start/*/syntax/syncolor.vim"
not found in 'packpath': "pack/*/start/*/syntax/syncolor.vim"
Searching for "start/*/syntax/syncolor.vim" in "/Users/andrewgu/.config/nvim,/etc/xdg/nvim,/Users/andrewgu/.local/share/nvim/site,/usr/local/share/nvim/site,/usr/share/nvim/site,/usr/local/Cellar/neovim/0.5.0/share/nvim/runtime,/usr/local/Cellar/neovim/0.5.0/lib/nvim,/usr/share/nvim/site/after,/usr/local/share/nvim/site/after,/Users/andrewgu/.local/share/nvim/site/after,/etc/xdg/nvim/after,/Users/andrewgu/.config/nvim/after"
Searching for "/Users/andrewgu/.config/nvim/start/*/syntax/syncolor.vim"
Searching for "/etc/xdg/nvim/start/*/syntax/syncolor.vim"
Searching for "/Users/andrewgu/.local/share/nvim/site/start/*/syntax/syncolor.vim"
Searching for "/usr/local/share/nvim/site/start/*/syntax/syncolor.vim"
Searching for "/usr/share/nvim/site/start/*/syntax/syncolor.vim"
Searching for "/usr/local/Cellar/neovim/0.5.0/share/nvim/runtime/start/*/syntax/syncolor.vim"
Searching for "/usr/local/Cellar/neovim/0.5.0/lib/nvim/start/*/syntax/syncolor.vim"
Searching for "/usr/share/nvim/site/after/start/*/syntax/syncolor.vim"
Searching for "/usr/local/share/nvim/site/after/start/*/syntax/syncolor.vim"
Searching for "/Users/andrewgu/.local/share/nvim/site/after/start/*/syntax/syncolor.vim"
Searching for "/etc/xdg/nvim/after/start/*/syntax/syncolor.vim"
Searching for "/Users/andrewgu/.config/nvim/after/start/*/syntax/syncolor.vim"
not found in 'packpath': "start/*/syntax/syncolor.vim"
line 50: 
line 51: if exists("syntax_on")
line 52:   syntax reset
line 52: runtime! syntax/syncolor.vim
Searching for "syntax/syncolor.vim" in "/Users/andrewgu/.config/nvim,/etc/xdg/nvim,/Users/andrewgu/.local/share/nvim/site,/usr/local/share/nvim/site,/usr/share/nvim/site,/usr/local/Cellar/neovim/0.5.0/share/nvim/runtime,/usr/local/Cellar/neovim/0.5.0/lib/nvim,/usr/share/nvim/site/after,/usr/local/share/nvim/site/after,/Users/andrewgu/.local/share/nvim/site/after,/etc/xdg/nvim/after,/Users/andrewgu/.config/nvim/after"
Searching for "/Users/andrewgu/.config/nvim/syntax/syncolor.vim"
Searching for "/etc/xdg/nvim/syntax/syncolor.vim"
Searching for "/Users/andrewgu/.local/share/nvim/site/syntax/syncolor.vim"
Searching for "/usr/local/share/nvim/site/syntax/syncolor.vim"
Searching for "/usr/share/nvim/site/syntax/syncolor.vim"
Searching for "/usr/local/Cellar/neovim/0.5.0/share/nvim/runtime/syntax/syncolor.vim"
chdir(/Users/andrewgu/.config/nvim)
chdir(/usr/local/Cellar/neovim/0.5.0/share/nvim/runtime/syntax)
chdir(/Users/andrewgu/.config/nvim)
line 52: sourcing "/usr/local/Cellar/neovim/0.5.0/share/nvim/runtime/syntax/syncolor.vim"
line 1: " Vim syntax support file
line 2: " Maintainer:^IBram Moolenaar <Bram@vim.org>
line 3: " Last Change:^I2020 Feb 13
line 4: 
line 5: " This file sets up the default methods for highlighting.
line 6: " It is loaded from "synload.vim" and from Vim for ":syntax reset".
line 7: " Also used from init_highlight().
line 8: 
line 9: if !exists("syntax_cmd") || syntax_cmd == "on"
line 10:   " ":syntax on" works like in Vim 5.7: set colors but keep links
line 11:   command -nargs=* SynColor hi <args>
line 12:   command -nargs=* SynLink hi link <args>
line 13: else
line 14:   if syntax_cmd == "enable"
line 15:     " ":syntax enable" keeps any existing colors
line 16:     command -nargs=* SynColor hi def <args>
line 17:     command -nargs=* SynLink hi def link <args>
line 18:   elseif syntax_cmd == "reset"
line 19:     " ":syntax reset" resets all colors to the default
line 20:     command -nargs=* SynColor hi <args>
line 21:     command -nargs=* SynLink hi! link <args>
line 22:   else
line 23:     " User defined syncolor file has already set the colors.
line 24:     finish
line 25:   endif
line 26: endif
line 27: 
line 28: " Many terminals can only use six different colors (plus black and white).
line 29: " Therefore the number of colors used is kept low. It doesn't look nice with
line 30: " too many colors anyway.
line 31: " Careful with "cterm=bold", it changes the color to bright for some terminals.
line 32: " There are two sets of defaults: for a dark and a light background.
line 33: if &background == "dark"
line 34:   SynColor Comment^Iterm=bold cterm=NONE ctermfg=Cyan ctermbg=NONE gui=NONE guifg=#80a0ff guibg=NONE
line 34: hi Comment^Iterm=bold cterm=NONE ctermfg=Cyan ctermbg=NONE gui=NONE guifg=#80a0ff guibg=NONE
line 35:   SynColor Constant^Iterm=underline cterm=NONE ctermfg=Magenta ctermbg=NONE gui=NONE guifg=#ffa0a0 guibg=NONE
line 35: hi Constant^Iterm=underline cterm=NONE ctermfg=Magenta ctermbg=NONE gui=NONE guifg=#ffa0a0 guibg=NONE
line 36:   SynColor Special^Iterm=bold cterm=NONE ctermfg=LightRed ctermbg=NONE gui=NONE guifg=Orange guibg=NONE
line 36: hi Special^Iterm=bold cterm=NONE ctermfg=LightRed ctermbg=NONE gui=NONE guifg=Orange guibg=NONE
line 37:   SynColor Identifier^Iterm=underline cterm=bold ctermfg=Cyan ctermbg=NONE gui=NONE guifg=#40ffff guibg=NONE
line 37: hi Identifier^Iterm=underline cterm=bold ctermfg=Cyan ctermbg=NONE gui=NONE guifg=#40ffff guibg=NONE
line 38:   SynColor Statement^Iterm=bold cterm=NONE ctermfg=Yellow ctermbg=NONE gui=bold guifg=#ffff60 guibg=NONE
line 38: hi Statement^Iterm=bold cterm=NONE ctermfg=Yellow ctermbg=NONE gui=bold guifg=#ffff60 guibg=NONE
line 39:   SynColor PreProc^Iterm=underline cterm=NONE ctermfg=LightBlue ctermbg=NONE gui=NONE guifg=#ff80ff guibg=NONE
line 39: hi PreProc^Iterm=underline cterm=NONE ctermfg=LightBlue ctermbg=NONE gui=NONE guifg=#ff80ff guibg=NONE
line 40:   SynColor Type^I^Iterm=underline cterm=NONE ctermfg=LightGreen ctermbg=NONE gui=bold guifg=#60ff60 guibg=NONE
line 40: hi Type^I^Iterm=underline cterm=NONE ctermfg=LightGreen ctermbg=NONE gui=bold guifg=#60ff60 guibg=NONE
line 41:   SynColor Underlined^Iterm=underline cterm=underline ctermfg=LightBlue gui=underline guifg=#80a0ff
line 41: hi Underlined^Iterm=underline cterm=underline ctermfg=LightBlue gui=underline guifg=#80a0ff
line 42:   SynColor Ignore^Iterm=NONE cterm=NONE ctermfg=black ctermbg=NONE gui=NONE guifg=bg guibg=NONE
line 42: hi Ignore^Iterm=NONE cterm=NONE ctermfg=black ctermbg=NONE gui=NONE guifg=bg guibg=NONE
line 43: else
line 44:   SynColor Comment^Iterm=bold cterm=NONE ctermfg=DarkBlue ctermbg=NONE gui=NONE guifg=Blue guibg=NONE
line 45:   SynColor Constant^Iterm=underline cterm=NONE ctermfg=DarkRed ctermbg=NONE gui=NONE guifg=Magenta guibg=NONE
line 46:   " #6a5acd is SlateBlue
line 47:   SynColor Special^Iterm=bold cterm=NONE ctermfg=DarkMagenta ctermbg=NONE gui=NONE guifg=#6a5acd guibg=NONE
line 48:   SynColor Identifier^Iterm=underline cterm=NONE ctermfg=DarkCyan ctermbg=NONE gui=NONE guifg=DarkCyan guibg=NONE
line 49:   SynColor Statement^Iterm=bold cterm=NONE ctermfg=Brown ctermbg=NONE gui=bold guifg=Brown guibg=NONE
line 50:   " #6a0dad is Purple
line 51:   SynColor PreProc^Iterm=underline cterm=NONE ctermfg=DarkMagenta ctermbg=NONE gui=NONE guifg=#6a0dad guibg=NONE
line 52:   SynColor Type^I^Iterm=underline cterm=NONE ctermfg=DarkGreen ctermbg=NONE gui=bold guifg=SeaGreen guibg=NONE
line 53:   SynColor Underlined^Iterm=underline cterm=underline ctermfg=DarkMagenta gui=underline guifg=SlateBlue
line 54:   SynColor Ignore^Iterm=NONE cterm=NONE ctermfg=white ctermbg=NONE gui=NONE guifg=bg guibg=NONE
line 55: endif
line 56: SynColor Error^I^Iterm=reverse cterm=NONE ctermfg=White ctermbg=Red gui=NONE guifg=White guibg=Red
line 56: hi Error^I^Iterm=reverse cterm=NONE ctermfg=White ctermbg=Red gui=NONE guifg=White guibg=Red
line 57: SynColor Todo^I^Iterm=standout cterm=NONE ctermfg=Black ctermbg=Yellow gui=NONE guifg=Blue guibg=Yellow
line 57: hi Todo^I^Iterm=standout cterm=NONE ctermfg=Black ctermbg=Yellow gui=NONE guifg=Blue guibg=Yellow
line 58: 
line 59: " Common groups that link to default highlighting.
line 60: " You can specify other highlighting easily.
line 61: SynLink String^I^IConstant
line 61: hi! link String^I^IConstant
line 62: SynLink Character^IConstant
line 62: hi! link Character^IConstant
line 63: SynLink Number^I^IConstant
line 63: hi! link Number^I^IConstant
line 64: SynLink Boolean^I^IConstant
line 64: hi! link Boolean^I^IConstant
line 65: SynLink Float^I^INumber
line 65: hi! link Float^I^INumber
line 66: SynLink Function^IIdentifier
line 66: hi! link Function^IIdentifier
line 67: SynLink Conditional^IStatement
line 67: hi! link Conditional^IStatement
line 68: SynLink Repeat^I^IStatement
line 68: hi! link Repeat^I^IStatement
line 69: SynLink Label^I^IStatement
line 69: hi! link Label^I^IStatement
line 70: SynLink Operator^IStatement
line 70: hi! link Operator^IStatement
line 71: SynLink Keyword^I^IStatement
line 71: hi! link Keyword^I^IStatement
line 72: SynLink Exception^IStatement
line 72: hi! link Exception^IStatement
line 73: SynLink Include^I^IPreProc
line 73: hi! link Include^I^IPreProc
line 74: SynLink Define^I^IPreProc
line 74: hi! link Define^I^IPreProc
line 75: SynLink Macro^I^IPreProc
line 75: hi! link Macro^I^IPreProc
line 76: SynLink PreCondit^IPreProc
line 76: hi! link PreCondit^IPreProc
line 77: SynLink StorageClass^IType
line 77: hi! link StorageClass^IType
line 78: SynLink Structure^IType
line 78: hi! link Structure^IType
line 79: SynLink Typedef^I^IType
line 79: hi! link Typedef^I^IType
line 80: SynLink Tag^I^ISpecial
line 80: hi! link Tag^I^ISpecial
line 81: SynLink SpecialChar^ISpecial
line 81: hi! link SpecialChar^ISpecial
line 82: SynLink Delimiter^ISpecial
line 82: hi! link Delimiter^ISpecial
line 83: SynLink SpecialComment^ISpecial
line 83: hi! link SpecialComment^ISpecial
line 84: SynLink Debug^I^ISpecial
line 84: hi! link Debug^I^ISpecial
line 85: 
line 86: delcommand SynColor
line 87: delcommand SynLink
finished sourcing /usr/local/Cellar/neovim/0.5.0/share/nvim/runtime/syntax/syncolor.vim
continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim
Searching for "/usr/local/Cellar/neovim/0.5.0/lib/nvim/syntax/syncolor.vim"
Searching for "/usr/share/nvim/site/after/syntax/syncolor.vim"
Searching for "/usr/local/share/nvim/site/after/syntax/syncolor.vim"
Searching for "/Users/andrewgu/.local/share/nvim/site/after/syntax/syncolor.vim"
Searching for "/etc/xdg/nvim/after/syntax/syncolor.vim"
Searching for "/Users/andrewgu/.config/nvim/after/syntax/syncolor.vim"
Searching for "pack/*/start/*/syntax/syncolor.vim" in "/Users/andrewgu/.config/nvim,/etc/xdg/nvim,/Users/andrewgu/.local/share/nvim/site,/usr/local/share/nvim/site,/usr/share/nvim/site,/usr/local/Cellar/neovim/0.5.0/share/nvim/runtime,/usr/local/Cellar/neovim/0.5.0/lib/nvim,/usr/share/nvim/site/after,/usr/local/share/nvim/site/after,/Users/andrewgu/.local/share/nvim/site/after,/etc/xdg/nvim/after,/Users/andrewgu/.config/nvim/after"
Searching for "/Users/andrewgu/.config/nvim/pack/*/start/*/syntax/syncolor.vim"
Searching for "/etc/xdg/nvim/pack/*/start/*/syntax/syncolor.vim"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/*/start/*/syntax/syncolor.vim"
Searching for "/usr/local/share/nvim/site/pack/*/start/*/syntax/syncolor.vim"
Searching for "/usr/share/nvim/site/pack/*/start/*/syntax/syncolor.vim"
Searching for "/usr/local/Cellar/neovim/0.5.0/share/nvim/runtime/pack/*/start/*/syntax/syncolor.vim"
Searching for "/usr/local/Cellar/neovim/0.5.0/lib/nvim/pack/*/start/*/syntax/syncolor.vim"
Searching for "/usr/share/nvim/site/after/pack/*/start/*/syntax/syncolor.vim"
Searching for "/usr/local/share/nvim/site/after/pack/*/start/*/syntax/syncolor.vim"
Searching for "/Users/andrewgu/.local/share/nvim/site/after/pack/*/start/*/syntax/syncolor.vim"
Searching for "/etc/xdg/nvim/after/pack/*/start/*/syntax/syncolor.vim"
Searching for "/Users/andrewgu/.config/nvim/after/pack/*/start/*/syntax/syncolor.vim"
not found in 'packpath': "pack/*/start/*/syntax/syncolor.vim"
Searching for "start/*/syntax/syncolor.vim" in "/Users/andrewgu/.config/nvim,/etc/xdg/nvim,/Users/andrewgu/.local/share/nvim/site,/usr/local/share/nvim/site,/usr/share/nvim/site,/usr/local/Cellar/neovim/0.5.0/share/nvim/runtime,/usr/local/Cellar/neovim/0.5.0/lib/nvim,/usr/share/nvim/site/after,/usr/local/share/nvim/site/after,/Users/andrewgu/.local/share/nvim/site/after,/etc/xdg/nvim/after,/Users/andrewgu/.config/nvim/after"
Searching for "/Users/andrewgu/.config/nvim/start/*/syntax/syncolor.vim"
Searching for "/etc/xdg/nvim/start/*/syntax/syncolor.vim"
Searching for "/Users/andrewgu/.local/share/nvim/site/start/*/syntax/syncolor.vim"
Searching for "/usr/local/share/nvim/site/start/*/syntax/syncolor.vim"
Searching for "/usr/share/nvim/site/start/*/syntax/syncolor.vim"
Searching for "/usr/local/Cellar/neovim/0.5.0/share/nvim/runtime/start/*/syntax/syncolor.vim"
Searching for "/usr/local/Cellar/neovim/0.5.0/lib/nvim/start/*/syntax/syncolor.vim"
Searching for "/usr/share/nvim/site/after/start/*/syntax/syncolor.vim"
Searching for "/usr/local/share/nvim/site/after/start/*/syntax/syncolor.vim"
Searching for "/Users/andrewgu/.local/share/nvim/site/after/start/*/syntax/syncolor.vim"
Searching for "/etc/xdg/nvim/after/start/*/syntax/syncolor.vim"
Searching for "/Users/andrewgu/.config/nvim/after/start/*/syntax/syncolor.vim"
not found in 'packpath': "start/*/syntax/syncolor.vim"
line 53: endif
line 54: 
line 55: set t_Co=256
line 56: 
line 57: let g:colors_name="onedark"
line 58: 
line 59: " Set to "256" for 256-color terminals, or
line 60: " set to "16" to use your terminal emulator's native colors
line 61: " (a 16-color palette for this color scheme is available; see
line 62: " < https://github.com/joshdick/onedark.vim/blob/main/README.md >
line 63: " for more information.)
line 64: if !exists("g:onedark_termcolors")
line 65:   let g:onedark_termcolors = 256
line 66: endif
line 67: 
line 68: " Not all terminals support italics properly. If yours does, opt-in.
line 69: if !exists("g:onedark_terminal_italics")
line 70:   let g:onedark_terminal_italics = 0
line 71: endif
line 72: 
line 73: " This function is based on one from FlatColor: https://github.com/MaxSt/FlatColor/
line 74: " Which in turn was based on one found in hemisu: https://github.com/noahfrederick/vim-hemisu/
line 75: let s:group_colors = {} " Cache of default highlight group settings, for later reference via `onedark#extend_highlight`
line 76: function! s:h(group, style, ...)
line 119: 
line 120: " public {{{
line 121: 
line 122: function! onedark#set_highlight(group, style)
line 125: 
line 126: function! onedark#extend_highlight(group, style)
line 129: 
line 130: " }}}
line 131: 
line 132: " }}}
line 133: 
line 134: " Color Variables {{{
line 135: 
line 136: let s:colors = onedark#GetColors()
calling function onedark#GetColors()

line 1:   return s:colors
function onedark#GetColors returning {'background': {'gui': '#282C34', 'cte...E4452', 'cterm': '59', 'cterm16': '7'}}

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 137: 
line 138: let s:red = s:colors.red
line 139: let s:dark_red = s:colors.dark_red
line 140: let s:green = s:colors.green
line 141: let s:yellow = s:colors.yellow
line 142: let s:dark_yellow = s:colors.dark_yellow
line 143: let s:blue = s:colors.blue
line 144: let s:purple = s:colors.purple
line 145: let s:cyan = s:colors.cyan
line 146: let s:white = s:colors.white
line 147: let s:black = s:colors.black
line 148: let s:foreground = s:colors.foreground
line 149: let s:background = s:colors.background
line 150: let s:comment_grey = s:colors.comment_grey
line 151: let s:gutter_fg_grey = s:colors.gutter_fg_grey
line 152: let s:cursor_grey = s:colors.cursor_grey
line 153: let s:visual_grey = s:colors.visual_grey
line 154: let s:menu_grey = s:colors.menu_grey
line 155: let s:special_grey = s:colors.special_grey
line 156: let s:vertsplit = s:colors.vertsplit
line 157: 
line 158: " }}}
line 159: 
line 160: " Terminal Colors {{{
line 161: 
line 162: let g:terminal_ansi_colors = [ s:black.gui, s:red.gui, s:green.gui, s:yellow.gui, s:blue.gui, s:purple.gui, s:cyan.gui, s:comment_grey.gui, s:visual_grey.gui, s:red.gui, s:green.gui, s:yellow.gui, s:blue.gui, s:purple.gui, s:cyan.gui, s:white.gui]
line 168: 
line 169: " }}}
line 170: 
line 171: " Syntax Groups (descriptions and ordering from `:h w18`) {{{
line 172: 
line 173: call s:h("Comment", { "fg": s:comment_grey, "gui": "italic", "cterm": "italic" }) " any comment
calling function <SNR>2_h('Comment', {'gui': 'italic', 'fg': {'gui': '#5C63...9', 'cterm16': '7'}, 'cterm': 'italic'})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight Comment guifg= #5C6370 guibg= NONE guisp= NONE gui= NONE ctermfg=59 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 174: call s:h("Constant", { "fg": s:cyan }) " any constant
calling function <SNR>2_h('Constant', {'fg': {'gui': '#56B6C2', 'cterm': '38', 'cterm16': '6'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight Constant guifg= #56B6C2 guibg= NONE guisp= NONE gui= NONE ctermfg=38 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 175: call s:h("String", { "fg": s:green }) " a string constant: "this is a string"
calling function <SNR>2_h('String', {'fg': {'gui': '#98C379', 'cterm': '114', 'cterm16': '2'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight String guifg= #98C379 guibg= NONE guisp= NONE gui= NONE ctermfg=114 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 176: call s:h("Character", { "fg": s:green }) " a character constant: 'c', '\n'
calling function <SNR>2_h('Character', {'fg': {'gui': '#98C379', 'cterm': '114', 'cterm16': '2'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight Character guifg= #98C379 guibg= NONE guisp= NONE gui= NONE ctermfg=114 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 177: call s:h("Number", { "fg": s:dark_yellow }) " a number constant: 234, 0xff
calling function <SNR>2_h('Number', {'fg': {'gui': '#D19A66', 'cterm': '173', 'cterm16': '11'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight Number guifg= #D19A66 guibg= NONE guisp= NONE gui= NONE ctermfg=173 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 178: call s:h("Boolean", { "fg": s:dark_yellow }) " a boolean constant: TRUE, false
calling function <SNR>2_h('Boolean', {'fg': {'gui': '#D19A66', 'cterm': '173', 'cterm16': '11'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight Boolean guifg= #D19A66 guibg= NONE guisp= NONE gui= NONE ctermfg=173 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 179: call s:h("Float", { "fg": s:dark_yellow }) " a floating point constant: 2.3e10
calling function <SNR>2_h('Float', {'fg': {'gui': '#D19A66', 'cterm': '173', 'cterm16': '11'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight Float guifg= #D19A66 guibg= NONE guisp= NONE gui= NONE ctermfg=173 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 180: call s:h("Identifier", { "fg": s:red }) " any variable name
calling function <SNR>2_h('Identifier', {'fg': {'gui': '#E06C75', 'cterm': '204', 'cterm16': '1'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight Identifier guifg= #E06C75 guibg= NONE guisp= NONE gui= NONE ctermfg=204 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 181: call s:h("Function", { "fg": s:blue }) " function name (also: methods for classes)
calling function <SNR>2_h('Function', {'fg': {'gui': '#61AFEF', 'cterm': '39', 'cterm16': '4'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight Function guifg= #61AFEF guibg= NONE guisp= NONE gui= NONE ctermfg=39 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 182: call s:h("Statement", { "fg": s:purple }) " any statement
calling function <SNR>2_h('Statement', {'fg': {'gui': '#C678DD', 'cterm': '170', 'cterm16': '5'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight Statement guifg= #C678DD guibg= NONE guisp= NONE gui= NONE ctermfg=170 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 183: call s:h("Conditional", { "fg": s:purple }) " if, then, else, endif, switch, etc.
calling function <SNR>2_h('Conditional', {'fg': {'gui': '#C678DD', 'cterm': '170', 'cterm16': '5'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight Conditional guifg= #C678DD guibg= NONE guisp= NONE gui= NONE ctermfg=170 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 184: call s:h("Repeat", { "fg": s:purple }) " for, do, while, etc.
calling function <SNR>2_h('Repeat', {'fg': {'gui': '#C678DD', 'cterm': '170', 'cterm16': '5'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight Repeat guifg= #C678DD guibg= NONE guisp= NONE gui= NONE ctermfg=170 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 185: call s:h("Label", { "fg": s:purple }) " case, default, etc.
calling function <SNR>2_h('Label', {'fg': {'gui': '#C678DD', 'cterm': '170', 'cterm16': '5'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight Label guifg= #C678DD guibg= NONE guisp= NONE gui= NONE ctermfg=170 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 186: call s:h("Operator", { "fg": s:purple }) " sizeof", "+", "*", etc.
calling function <SNR>2_h('Operator', {'fg': {'gui': '#C678DD', 'cterm': '170', 'cterm16': '5'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight Operator guifg= #C678DD guibg= NONE guisp= NONE gui= NONE ctermfg=170 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 187: call s:h("Keyword", { "fg": s:red }) " any other keyword
calling function <SNR>2_h('Keyword', {'fg': {'gui': '#E06C75', 'cterm': '204', 'cterm16': '1'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight Keyword guifg= #E06C75 guibg= NONE guisp= NONE gui= NONE ctermfg=204 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 188: call s:h("Exception", { "fg": s:purple }) " try, catch, throw
calling function <SNR>2_h('Exception', {'fg': {'gui': '#C678DD', 'cterm': '170', 'cterm16': '5'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight Exception guifg= #C678DD guibg= NONE guisp= NONE gui= NONE ctermfg=170 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 189: call s:h("PreProc", { "fg": s:yellow }) " generic Preprocessor
calling function <SNR>2_h('PreProc', {'fg': {'gui': '#E5C07B', 'cterm': '180', 'cterm16': '3'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight PreProc guifg= #E5C07B guibg= NONE guisp= NONE gui= NONE ctermfg=180 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 190: call s:h("Include", { "fg": s:blue }) " preprocessor #include
calling function <SNR>2_h('Include', {'fg': {'gui': '#61AFEF', 'cterm': '39', 'cterm16': '4'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight Include guifg= #61AFEF guibg= NONE guisp= NONE gui= NONE ctermfg=39 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 191: call s:h("Define", { "fg": s:purple }) " preprocessor #define
calling function <SNR>2_h('Define', {'fg': {'gui': '#C678DD', 'cterm': '170', 'cterm16': '5'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight Define guifg= #C678DD guibg= NONE guisp= NONE gui= NONE ctermfg=170 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 192: call s:h("Macro", { "fg": s:purple }) " same as Define
calling function <SNR>2_h('Macro', {'fg': {'gui': '#C678DD', 'cterm': '170', 'cterm16': '5'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight Macro guifg= #C678DD guibg= NONE guisp= NONE gui= NONE ctermfg=170 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 193: call s:h("PreCondit", { "fg": s:yellow }) " preprocessor #if, #else, #endif, etc.
calling function <SNR>2_h('PreCondit', {'fg': {'gui': '#E5C07B', 'cterm': '180', 'cterm16': '3'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight PreCondit guifg= #E5C07B guibg= NONE guisp= NONE gui= NONE ctermfg=180 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 194: call s:h("Type", { "fg": s:yellow }) " int, long, char, etc.
calling function <SNR>2_h('Type', {'fg': {'gui': '#E5C07B', 'cterm': '180', 'cterm16': '3'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight Type guifg= #E5C07B guibg= NONE guisp= NONE gui= NONE ctermfg=180 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 195: call s:h("StorageClass", { "fg": s:yellow }) " static, register, volatile, etc.
calling function <SNR>2_h('StorageClass', {'fg': {'gui': '#E5C07B', 'cterm': '180', 'cterm16': '3'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight StorageClass guifg= #E5C07B guibg= NONE guisp= NONE gui= NONE ctermfg=180 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 196: call s:h("Structure", { "fg": s:yellow }) " struct, union, enum, etc.
calling function <SNR>2_h('Structure', {'fg': {'gui': '#E5C07B', 'cterm': '180', 'cterm16': '3'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight Structure guifg= #E5C07B guibg= NONE guisp= NONE gui= NONE ctermfg=180 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 197: call s:h("Typedef", { "fg": s:yellow }) " A typedef
calling function <SNR>2_h('Typedef', {'fg': {'gui': '#E5C07B', 'cterm': '180', 'cterm16': '3'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight Typedef guifg= #E5C07B guibg= NONE guisp= NONE gui= NONE ctermfg=180 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 198: call s:h("Special", { "fg": s:blue }) " any special symbol
calling function <SNR>2_h('Special', {'fg': {'gui': '#61AFEF', 'cterm': '39', 'cterm16': '4'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight Special guifg= #61AFEF guibg= NONE guisp= NONE gui= NONE ctermfg=39 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 199: call s:h("SpecialChar", { "fg": s:dark_yellow }) " special character in a constant
calling function <SNR>2_h('SpecialChar', {'fg': {'gui': '#D19A66', 'cterm': '173', 'cterm16': '11'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight SpecialChar guifg= #D19A66 guibg= NONE guisp= NONE gui= NONE ctermfg=173 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 200: call s:h("Tag", {}) " you can use CTRL-] on this
calling function <SNR>2_h('Tag', {})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight Tag guifg= NONE guibg= NONE guisp= NONE gui= NONE ctermfg=NONE ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 201: call s:h("Delimiter", {}) " character that needs attention
calling function <SNR>2_h('Delimiter', {})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight Delimiter guifg= NONE guibg= NONE guisp= NONE gui= NONE ctermfg=NONE ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 202: call s:h("SpecialComment", { "fg": s:comment_grey }) " special things inside a comment
calling function <SNR>2_h('SpecialComment', {'fg': {'gui': '#5C6370', 'cterm': '59', 'cterm16': '7'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight SpecialComment guifg= #5C6370 guibg= NONE guisp= NONE gui= NONE ctermfg=59 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 203: call s:h("Debug", {}) " debugging statements
calling function <SNR>2_h('Debug', {})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight Debug guifg= NONE guibg= NONE guisp= NONE gui= NONE ctermfg=NONE ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 204: call s:h("Underlined", { "gui": "underline", "cterm": "underline" }) " text that stands out, HTML links
calling function <SNR>2_h('Underlined', {'gui': 'underline', 'cterm': 'underline'})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight Underlined guifg= NONE guibg= NONE guisp= NONE gui= underline ctermfg=NONE ctermbg=NONE cterm= underline
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 205: call s:h("Ignore", {}) " left blank, hidden
calling function <SNR>2_h('Ignore', {})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight Ignore guifg= NONE guibg= NONE guisp= NONE gui= NONE ctermfg=NONE ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 206: call s:h("Error", { "fg": s:red }) " any erroneous construct
calling function <SNR>2_h('Error', {'fg': {'gui': '#E06C75', 'cterm': '204', 'cterm16': '1'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight Error guifg= #E06C75 guibg= NONE guisp= NONE gui= NONE ctermfg=204 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 207: call s:h("Todo", { "fg": s:purple }) " anything that needs extra attention; mostly the keywords TODO FIXME and XXX
calling function <SNR>2_h('Todo', {'fg': {'gui': '#C678DD', 'cterm': '170', 'cterm16': '5'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight Todo guifg= #C678DD guibg= NONE guisp= NONE gui= NONE ctermfg=170 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 208: 
line 209: " }}}
line 210: 
line 211: " Highlighting Groups (descriptions and ordering from `:h highlight-groups`) {{{
line 212: call s:h("ColorColumn", { "bg": s:cursor_grey }) " used for the columns set with 'colorcolumn'
calling function <SNR>2_h('ColorColumn', {'bg': {'gui': '#2C323C', 'cterm': '236', 'cterm16': '0'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight ColorColumn guifg= NONE guibg= #2C323C guisp= NONE gui= NONE ctermfg=NONE ctermbg=236 cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 213: call s:h("Conceal", {}) " placeholder characters substituted for concealed text (see 'conceallevel')
calling function <SNR>2_h('Conceal', {})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight Conceal guifg= NONE guibg= NONE guisp= NONE gui= NONE ctermfg=NONE ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 214: call s:h("Cursor", { "fg": s:black, "bg": s:blue }) " the character under the cursor
calling function <SNR>2_h('Cursor', {'bg': {'gui': '#61AFEF', 'cterm': '39...2C34', 'cterm': '235', 'cterm16': '0'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight Cursor guifg= #282C34 guibg= #61AFEF guisp= NONE gui= NONE ctermfg=235 ctermbg=39 cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 215: call s:h("CursorIM", {}) " like Cursor, but used when in IME mode
calling function <SNR>2_h('CursorIM', {})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight CursorIM guifg= NONE guibg= NONE guisp= NONE gui= NONE ctermfg=NONE ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 216: call s:h("CursorColumn", { "bg": s:cursor_grey }) " the screen column that the cursor is in when 'cursorcolumn' is set
calling function <SNR>2_h('CursorColumn', {'bg': {'gui': '#2C323C', 'cterm': '236', 'cterm16': '0'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight CursorColumn guifg= NONE guibg= #2C323C guisp= NONE gui= NONE ctermfg=NONE ctermbg=236 cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 217: if &diff
line 218:   " Don't change the background color in diff mode
line 219:   call s:h("CursorLine", { "gui": "underline" }) " the screen line that the cursor is in when 'cursorline' is set
line 220: else
line 221:   call s:h("CursorLine", { "bg": s:cursor_grey }) " the screen line that the cursor is in when 'cursorline' is set
calling function <SNR>2_h('CursorLine', {'bg': {'gui': '#2C323C', 'cterm': '236', 'cterm16': '0'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight CursorLine guifg= NONE guibg= #2C323C guisp= NONE gui= NONE ctermfg=NONE ctermbg=236 cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 222: endif
line 223: call s:h("Directory", { "fg": s:blue }) " directory names (and other special names in listings)
calling function <SNR>2_h('Directory', {'fg': {'gui': '#61AFEF', 'cterm': '39', 'cterm16': '4'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight Directory guifg= #61AFEF guibg= NONE guisp= NONE gui= NONE ctermfg=39 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 224: call s:h("DiffAdd", { "bg": s:green, "fg": s:black }) " diff mode: Added line
calling function <SNR>2_h('DiffAdd', {'bg': {'gui': '#98C379', 'cterm': '11...2C34', 'cterm': '235', 'cterm16': '0'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight DiffAdd guifg= #282C34 guibg= #98C379 guisp= NONE gui= NONE ctermfg=235 ctermbg=114 cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 225: call s:h("DiffChange", { "fg": s:yellow, "gui": "underline", "cterm": "underline" }) " diff mode: Changed line
calling function <SNR>2_h('DiffChange', {'gui': 'underline', 'fg': {'gui': '#E... 'cterm16': '3'}, 'cterm': 'underline'})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight DiffChange guifg= #E5C07B guibg= NONE guisp= NONE gui= underline ctermfg=180 ctermbg=NONE cterm= underline
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 226: call s:h("DiffDelete", { "bg": s:red, "fg": s:black }) " diff mode: Deleted line
calling function <SNR>2_h('DiffDelete', {'bg': {'gui': '#E06C75', 'cterm': '20...2C34', 'cterm': '235', 'cterm16': '0'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight DiffDelete guifg= #282C34 guibg= #E06C75 guisp= NONE gui= NONE ctermfg=235 ctermbg=204 cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 227: call s:h("DiffText", { "bg": s:yellow, "fg": s:black }) " diff mode: Changed text within a changed line
calling function <SNR>2_h('DiffText', {'bg': {'gui': '#E5C07B', 'cterm': '18...2C34', 'cterm': '235', 'cterm16': '0'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight DiffText guifg= #282C34 guibg= #E5C07B guisp= NONE gui= NONE ctermfg=235 ctermbg=180 cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 228: if get(g:, 'onedark_hide_endofbuffer', 0)
line 229:     " If enabled, will style end-of-buffer filler lines (~) to appear to be hidden.
line 230:     call s:h("EndOfBuffer", { "fg": s:black }) " filler lines (~) after the last line in the buffer
line 231: endif
line 232: call s:h("ErrorMsg", { "fg": s:red }) " error messages on the command line
calling function <SNR>2_h('ErrorMsg', {'fg': {'gui': '#E06C75', 'cterm': '204', 'cterm16': '1'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight ErrorMsg guifg= #E06C75 guibg= NONE guisp= NONE gui= NONE ctermfg=204 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 233: call s:h("VertSplit", { "fg": s:vertsplit }) " the column separating vertically split windows
calling function <SNR>2_h('VertSplit', {'fg': {'gui': '#3E4452', 'cterm': '59', 'cterm16': '7'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight VertSplit guifg= #3E4452 guibg= NONE guisp= NONE gui= NONE ctermfg=59 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 234: call s:h("Folded", { "fg": s:comment_grey }) " line used for closed folds
calling function <SNR>2_h('Folded', {'fg': {'gui': '#5C6370', 'cterm': '59', 'cterm16': '7'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight Folded guifg= #5C6370 guibg= NONE guisp= NONE gui= NONE ctermfg=59 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 235: call s:h("FoldColumn", {}) " 'foldcolumn'
calling function <SNR>2_h('FoldColumn', {})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight FoldColumn guifg= NONE guibg= NONE guisp= NONE gui= NONE ctermfg=NONE ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 236: call s:h("SignColumn", {}) " column where signs are displayed
calling function <SNR>2_h('SignColumn', {})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight SignColumn guifg= NONE guibg= NONE guisp= NONE gui= NONE ctermfg=NONE ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 237: call s:h("IncSearch", { "fg": s:yellow, "bg": s:comment_grey }) " 'incsearch' highlighting; also used for the text replaced with ":s///c"
calling function <SNR>2_h('IncSearch', {'bg': {'gui': '#5C6370', 'cterm': '59...C07B', 'cterm': '180', 'cterm16': '3'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight IncSearch guifg= #E5C07B guibg= #5C6370 guisp= NONE gui= NONE ctermfg=180 ctermbg=59 cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 238: call s:h("LineNr", { "fg": s:gutter_fg_grey }) " Line number for ":number" and ":#" commands, and when 'number' or 'relativenumber' option is set.
calling function <SNR>2_h('LineNr', {'fg': {'gui': '#4B5263', 'cterm': '238', 'cterm16': '8'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight LineNr guifg= #4B5263 guibg= NONE guisp= NONE gui= NONE ctermfg=238 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 239: call s:h("CursorLineNr", {}) " Like LineNr when 'cursorline' or 'relativenumber' is set for the cursor line.
calling function <SNR>2_h('CursorLineNr', {})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight CursorLineNr guifg= NONE guibg= NONE guisp= NONE gui= NONE ctermfg=NONE ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 240: call s:h("MatchParen", { "fg": s:blue, "gui": "underline", "cterm": "underline" }) " The character under the cursor or just before it, if it is a paired bracket, and its match.
calling function <SNR>2_h('MatchParen', {'gui': 'underline', 'fg': {'gui': '#6... 'cterm16': '4'}, 'cterm': 'underline'})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight MatchParen guifg= #61AFEF guibg= NONE guisp= NONE gui= underline ctermfg=39 ctermbg=NONE cterm= underline
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 241: call s:h("ModeMsg", {}) " 'showmode' message (e.g., "-- INSERT --")
calling function <SNR>2_h('ModeMsg', {})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight ModeMsg guifg= NONE guibg= NONE guisp= NONE gui= NONE ctermfg=NONE ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 242: call s:h("MoreMsg", {}) " more-prompt
calling function <SNR>2_h('MoreMsg', {})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight MoreMsg guifg= NONE guibg= NONE guisp= NONE gui= NONE ctermfg=NONE ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 243: call s:h("NonText", { "fg": s:special_grey }) " '~' and '@' at the end of the window, characters from 'showbreak' and other characters that do not really exist in the text (e.g., ">" displayed when a double-wide character doesn't fit at the end of the line).
calling function <SNR>2_h('NonText', {'fg': {'gui': '#3B4048', 'cterm': '238', 'cterm16': '7'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight NonText guifg= #3B4048 guibg= NONE guisp= NONE gui= NONE ctermfg=238 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 244: call s:h("Normal", { "fg": s:foreground, "bg": s:background }) " normal text
calling function <SNR>2_h('Normal', {'bg': {'gui': '#282C34', 'cterm': '23...F', 'cterm': '145', 'cterm16': 'NONE'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight Normal guifg= #ABB2BF guibg= #282C34 guisp= NONE gui= NONE ctermfg=145 ctermbg=235 cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 245: call s:h("Pmenu", { "fg": s:white, "bg": s:menu_grey }) " Popup menu: normal item.
calling function <SNR>2_h('Pmenu', {'bg': {'gui': '#3E4452', 'cterm': '23...2BF', 'cterm': '145', 'cterm16': '15'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight Pmenu guifg= #ABB2BF guibg= #3E4452 guisp= NONE gui= NONE ctermfg=145 ctermbg=237 cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 246: call s:h("PmenuSel", { "fg": s:cursor_grey, "bg": s:blue }) " Popup menu: selected item.
calling function <SNR>2_h('PmenuSel', {'bg': {'gui': '#61AFEF', 'cterm': '39...323C', 'cterm': '236', 'cterm16': '0'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight PmenuSel guifg= #2C323C guibg= #61AFEF guisp= NONE gui= NONE ctermfg=236 ctermbg=39 cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 247: call s:h("PmenuSbar", { "bg": s:cursor_grey }) " Popup menu: scrollbar.
calling function <SNR>2_h('PmenuSbar', {'bg': {'gui': '#2C323C', 'cterm': '236', 'cterm16': '0'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight PmenuSbar guifg= NONE guibg= #2C323C guisp= NONE gui= NONE ctermfg=NONE ctermbg=236 cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 248: call s:h("PmenuThumb", { "bg": s:white }) " Popup menu: Thumb of the scrollbar.
calling function <SNR>2_h('PmenuThumb', {'bg': {'gui': '#ABB2BF', 'cterm': '145', 'cterm16': '15'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight PmenuThumb guifg= NONE guibg= #ABB2BF guisp= NONE gui= NONE ctermfg=NONE ctermbg=145 cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 249: call s:h("Question", { "fg": s:purple }) " hit-enter prompt and yes/no questions
calling function <SNR>2_h('Question', {'fg': {'gui': '#C678DD', 'cterm': '170', 'cterm16': '5'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight Question guifg= #C678DD guibg= NONE guisp= NONE gui= NONE ctermfg=170 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 250: call s:h("QuickFixLine", { "fg": s:black, "bg": s:yellow }) " Current quickfix item in the quickfix window.
calling function <SNR>2_h('QuickFixLine', {'bg': {'gui': '#E5C07B', 'cterm': '18...2C34', 'cterm': '235', 'cterm16': '0'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight QuickFixLine guifg= #282C34 guibg= #E5C07B guisp= NONE gui= NONE ctermfg=235 ctermbg=180 cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 251: call s:h("Search", { "fg": s:black, "bg": s:yellow }) " Last search pattern highlighting (see 'hlsearch'). Also used for similar items that need to stand out.
calling function <SNR>2_h('Search', {'bg': {'gui': '#E5C07B', 'cterm': '18...2C34', 'cterm': '235', 'cterm16': '0'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight Search guifg= #282C34 guibg= #E5C07B guisp= NONE gui= NONE ctermfg=235 ctermbg=180 cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 252: call s:h("SpecialKey", { "fg": s:special_grey }) " Meta and special keys listed with ":map", also for text used to show unprintable characters in the text, 'listchars'. Generally: text that is displayed differently from what it really is.
calling function <SNR>2_h('SpecialKey', {'fg': {'gui': '#3B4048', 'cterm': '238', 'cterm16': '7'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight SpecialKey guifg= #3B4048 guibg= NONE guisp= NONE gui= NONE ctermfg=238 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 253: call s:h("SpellBad", { "fg": s:red, "gui": "underline", "cterm": "underline" }) " Word that is not recognized by the spellchecker. This will be combined with the highlighting used otherwise.
calling function <SNR>2_h('SpellBad', {'gui': 'underline', 'fg': {'gui': '#E... 'cterm16': '1'}, 'cterm': 'underline'})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight SpellBad guifg= #E06C75 guibg= NONE guisp= NONE gui= underline ctermfg=204 ctermbg=NONE cterm= underline
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 254: call s:h("SpellCap", { "fg": s:dark_yellow }) " Word that should start with a capital. This will be combined with the highlighting used otherwise.
calling function <SNR>2_h('SpellCap', {'fg': {'gui': '#D19A66', 'cterm': '173', 'cterm16': '11'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight SpellCap guifg= #D19A66 guibg= NONE guisp= NONE gui= NONE ctermfg=173 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 255: call s:h("SpellLocal", { "fg": s:dark_yellow }) " Word that is recognized by the spellchecker as one that is used in another region. This will be combined with the highlighting used otherwise.
calling function <SNR>2_h('SpellLocal', {'fg': {'gui': '#D19A66', 'cterm': '173', 'cterm16': '11'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight SpellLocal guifg= #D19A66 guibg= NONE guisp= NONE gui= NONE ctermfg=173 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 256: call s:h("SpellRare", { "fg": s:dark_yellow }) " Word that is recognized by the spellchecker as one that is hardly ever used. spell This will be combined with the highlighting used otherwise.
calling function <SNR>2_h('SpellRare', {'fg': {'gui': '#D19A66', 'cterm': '173', 'cterm16': '11'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight SpellRare guifg= #D19A66 guibg= NONE guisp= NONE gui= NONE ctermfg=173 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 257: call s:h("StatusLine", { "fg": s:white, "bg": s:cursor_grey }) " status line of current window
calling function <SNR>2_h('StatusLine', {'bg': {'gui': '#2C323C', 'cterm': '23...2BF', 'cterm': '145', 'cterm16': '15'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight StatusLine guifg= #ABB2BF guibg= #2C323C guisp= NONE gui= NONE ctermfg=145 ctermbg=236 cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 258: call s:h("StatusLineNC", { "fg": s:comment_grey }) " status lines of not-current windows Note: if this is equal to "StatusLine" Vim will use "^^^" in the status line of the current window.
calling function <SNR>2_h('StatusLineNC', {'fg': {'gui': '#5C6370', 'cterm': '59', 'cterm16': '7'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight StatusLineNC guifg= #5C6370 guibg= NONE guisp= NONE gui= NONE ctermfg=59 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 259: call s:h("StatusLineTerm", { "fg": s:white, "bg": s:cursor_grey }) " status line of current :terminal window
calling function <SNR>2_h('StatusLineTerm', {'bg': {'gui': '#2C323C', 'cterm': '23...2BF', 'cterm': '145', 'cterm16': '15'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight StatusLineTerm guifg= #ABB2BF guibg= #2C323C guisp= NONE gui= NONE ctermfg=145 ctermbg=236 cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 260: call s:h("StatusLineTermNC", { "fg": s:comment_grey }) " status line of non-current :terminal window
calling function <SNR>2_h('StatusLineTermNC', {'fg': {'gui': '#5C6370', 'cterm': '59', 'cterm16': '7'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight StatusLineTermNC guifg= #5C6370 guibg= NONE guisp= NONE gui= NONE ctermfg=59 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 261: call s:h("TabLine", { "fg": s:comment_grey }) " tab pages line, not active tab page label
calling function <SNR>2_h('TabLine', {'fg': {'gui': '#5C6370', 'cterm': '59', 'cterm16': '7'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight TabLine guifg= #5C6370 guibg= NONE guisp= NONE gui= NONE ctermfg=59 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 262: call s:h("TabLineFill", {}) " tab pages line, where there are no labels
calling function <SNR>2_h('TabLineFill', {})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight TabLineFill guifg= NONE guibg= NONE guisp= NONE gui= NONE ctermfg=NONE ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 263: call s:h("TabLineSel", { "fg": s:white }) " tab pages line, active tab page label
calling function <SNR>2_h('TabLineSel', {'fg': {'gui': '#ABB2BF', 'cterm': '145', 'cterm16': '15'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight TabLineSel guifg= #ABB2BF guibg= NONE guisp= NONE gui= NONE ctermfg=145 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 264: call s:h("Terminal", { "fg": s:white, "bg": s:black }) " terminal window (see terminal-size-color)
calling function <SNR>2_h('Terminal', {'bg': {'gui': '#282C34', 'cterm': '23...2BF', 'cterm': '145', 'cterm16': '15'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight Terminal guifg= #ABB2BF guibg= #282C34 guisp= NONE gui= NONE ctermfg=145 ctermbg=235 cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 265: call s:h("Title", { "fg": s:green }) " titles for output from ":set all", ":autocmd" etc.
calling function <SNR>2_h('Title', {'fg': {'gui': '#98C379', 'cterm': '114', 'cterm16': '2'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight Title guifg= #98C379 guibg= NONE guisp= NONE gui= NONE ctermfg=114 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 266: call s:h("Visual", { "bg": s:visual_grey }) " Visual mode selection
calling function <SNR>2_h('Visual', {'bg': {'gui': '#3E4452', 'cterm': '237', 'cterm16': '8'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight Visual guifg= NONE guibg= #3E4452 guisp= NONE gui= NONE ctermfg=NONE ctermbg=237 cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 267: call s:h("VisualNOS", { "bg": s:visual_grey }) " Visual mode selection when vim is "Not Owning the Selection". Only X11 Gui's gui-x11 and xterm-clipboard supports this.
calling function <SNR>2_h('VisualNOS', {'bg': {'gui': '#3E4452', 'cterm': '237', 'cterm16': '8'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight VisualNOS guifg= NONE guibg= #3E4452 guisp= NONE gui= NONE ctermfg=NONE ctermbg=237 cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 268: call s:h("WarningMsg", { "fg": s:yellow }) " warning messages
calling function <SNR>2_h('WarningMsg', {'fg': {'gui': '#E5C07B', 'cterm': '180', 'cterm16': '3'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight WarningMsg guifg= #E5C07B guibg= NONE guisp= NONE gui= NONE ctermfg=180 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 269: call s:h("WildMenu", { "fg": s:black, "bg": s:blue }) " current match in 'wildmenu' completion
calling function <SNR>2_h('WildMenu', {'bg': {'gui': '#61AFEF', 'cterm': '39...2C34', 'cterm': '235', 'cterm16': '0'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight WildMenu guifg= #282C34 guibg= #61AFEF guisp= NONE gui= NONE ctermfg=235 ctermbg=39 cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 270: 
line 271: " }}}
line 272: 
line 273: " Termdebug highlighting for Vim 8.1+ {{{
line 274: 
line 275: " See `:h hl-debugPC` and `:h hl-debugBreakpoint`.
line 276: call s:h("debugPC", { "bg": s:special_grey }) " the current position
calling function <SNR>2_h('debugPC', {'bg': {'gui': '#3B4048', 'cterm': '238', 'cterm16': '7'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight debugPC guifg= NONE guibg= #3B4048 guisp= NONE gui= NONE ctermfg=NONE ctermbg=238 cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 277: call s:h("debugBreakpoint", { "fg": s:black, "bg": s:red }) " a breakpoint
calling function <SNR>2_h('debugBreakpoint', {'bg': {'gui': '#E06C75', 'cterm': '20...2C34', 'cterm': '235', 'cterm16': '0'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight debugBreakpoint guifg= #282C34 guibg= #E06C75 guisp= NONE gui= NONE ctermfg=235 ctermbg=204 cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 278: 
line 279: " }}}
line 280: 
line 281: " Language-Specific Highlighting {{{
line 282: 
line 283: " CSS
line 284: call s:h("cssAttrComma", { "fg": s:purple })
calling function <SNR>2_h('cssAttrComma', {'fg': {'gui': '#C678DD', 'cterm': '170', 'cterm16': '5'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight cssAttrComma guifg= #C678DD guibg= NONE guisp= NONE gui= NONE ctermfg=170 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 285: call s:h("cssAttributeSelector", { "fg": s:green })
calling function <SNR>2_h('cssAttributeSelector', {'fg': {'gui': '#98C379', 'cterm': '114', 'cterm16': '2'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight cssAttributeSelector guifg= #98C379 guibg= NONE guisp= NONE gui= NONE ctermfg=114 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 286: call s:h("cssBraces", { "fg": s:white })
calling function <SNR>2_h('cssBraces', {'fg': {'gui': '#ABB2BF', 'cterm': '145', 'cterm16': '15'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight cssBraces guifg= #ABB2BF guibg= NONE guisp= NONE gui= NONE ctermfg=145 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 287: call s:h("cssClassName", { "fg": s:dark_yellow })
calling function <SNR>2_h('cssClassName', {'fg': {'gui': '#D19A66', 'cterm': '173', 'cterm16': '11'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight cssClassName guifg= #D19A66 guibg= NONE guisp= NONE gui= NONE ctermfg=173 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 288: call s:h("cssClassNameDot", { "fg": s:dark_yellow })
calling function <SNR>2_h('cssClassNameDot', {'fg': {'gui': '#D19A66', 'cterm': '173', 'cterm16': '11'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight cssClassNameDot guifg= #D19A66 guibg= NONE guisp= NONE gui= NONE ctermfg=173 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 289: call s:h("cssDefinition", { "fg": s:purple })
calling function <SNR>2_h('cssDefinition', {'fg': {'gui': '#C678DD', 'cterm': '170', 'cterm16': '5'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight cssDefinition guifg= #C678DD guibg= NONE guisp= NONE gui= NONE ctermfg=170 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 290: call s:h("cssFontAttr", { "fg": s:dark_yellow })
calling function <SNR>2_h('cssFontAttr', {'fg': {'gui': '#D19A66', 'cterm': '173', 'cterm16': '11'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight cssFontAttr guifg= #D19A66 guibg= NONE guisp= NONE gui= NONE ctermfg=173 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 291: call s:h("cssFontDescriptor", { "fg": s:purple })
calling function <SNR>2_h('cssFontDescriptor', {'fg': {'gui': '#C678DD', 'cterm': '170', 'cterm16': '5'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight cssFontDescriptor guifg= #C678DD guibg= NONE guisp= NONE gui= NONE ctermfg=170 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 292: call s:h("cssFunctionName", { "fg": s:blue })
calling function <SNR>2_h('cssFunctionName', {'fg': {'gui': '#61AFEF', 'cterm': '39', 'cterm16': '4'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight cssFunctionName guifg= #61AFEF guibg= NONE guisp= NONE gui= NONE ctermfg=39 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 293: call s:h("cssIdentifier", { "fg": s:blue })
calling function <SNR>2_h('cssIdentifier', {'fg': {'gui': '#61AFEF', 'cterm': '39', 'cterm16': '4'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight cssIdentifier guifg= #61AFEF guibg= NONE guisp= NONE gui= NONE ctermfg=39 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 294: call s:h("cssImportant", { "fg": s:purple })
calling function <SNR>2_h('cssImportant', {'fg': {'gui': '#C678DD', 'cterm': '170', 'cterm16': '5'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight cssImportant guifg= #C678DD guibg= NONE guisp= NONE gui= NONE ctermfg=170 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 295: call s:h("cssInclude", { "fg": s:white })
calling function <SNR>2_h('cssInclude', {'fg': {'gui': '#ABB2BF', 'cterm': '145', 'cterm16': '15'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight cssInclude guifg= #ABB2BF guibg= NONE guisp= NONE gui= NONE ctermfg=145 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 296: call s:h("cssIncludeKeyword", { "fg": s:purple })
calling function <SNR>2_h('cssIncludeKeyword', {'fg': {'gui': '#C678DD', 'cterm': '170', 'cterm16': '5'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight cssIncludeKeyword guifg= #C678DD guibg= NONE guisp= NONE gui= NONE ctermfg=170 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 297: call s:h("cssMediaType", { "fg": s:dark_yellow })
calling function <SNR>2_h('cssMediaType', {'fg': {'gui': '#D19A66', 'cterm': '173', 'cterm16': '11'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight cssMediaType guifg= #D19A66 guibg= NONE guisp= NONE gui= NONE ctermfg=173 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 298: call s:h("cssProp", { "fg": s:white })
calling function <SNR>2_h('cssProp', {'fg': {'gui': '#ABB2BF', 'cterm': '145', 'cterm16': '15'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight cssProp guifg= #ABB2BF guibg= NONE guisp= NONE gui= NONE ctermfg=145 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 299: call s:h("cssPseudoClassId", { "fg": s:dark_yellow })
calling function <SNR>2_h('cssPseudoClassId', {'fg': {'gui': '#D19A66', 'cterm': '173', 'cterm16': '11'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight cssPseudoClassId guifg= #D19A66 guibg= NONE guisp= NONE gui= NONE ctermfg=173 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 300: call s:h("cssSelectorOp", { "fg": s:purple })
calling function <SNR>2_h('cssSelectorOp', {'fg': {'gui': '#C678DD', 'cterm': '170', 'cterm16': '5'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight cssSelectorOp guifg= #C678DD guibg= NONE guisp= NONE gui= NONE ctermfg=170 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 301: call s:h("cssSelectorOp2", { "fg": s:purple })
calling function <SNR>2_h('cssSelectorOp2', {'fg': {'gui': '#C678DD', 'cterm': '170', 'cterm16': '5'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight cssSelectorOp2 guifg= #C678DD guibg= NONE guisp= NONE gui= NONE ctermfg=170 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 302: call s:h("cssTagName", { "fg": s:red })
calling function <SNR>2_h('cssTagName', {'fg': {'gui': '#E06C75', 'cterm': '204', 'cterm16': '1'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight cssTagName guifg= #E06C75 guibg= NONE guisp= NONE gui= NONE ctermfg=204 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 303: 
line 304: " Fish Shell
line 305: call s:h("fishKeyword", { "fg": s:purple })
calling function <SNR>2_h('fishKeyword', {'fg': {'gui': '#C678DD', 'cterm': '170', 'cterm16': '5'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight fishKeyword guifg= #C678DD guibg= NONE guisp= NONE gui= NONE ctermfg=170 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 306: call s:h("fishConditional", { "fg": s:purple })
calling function <SNR>2_h('fishConditional', {'fg': {'gui': '#C678DD', 'cterm': '170', 'cterm16': '5'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight fishConditional guifg= #C678DD guibg= NONE guisp= NONE gui= NONE ctermfg=170 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 307: 
line 308: " Go
line 309: call s:h("goDeclaration", { "fg": s:purple })
calling function <SNR>2_h('goDeclaration', {'fg': {'gui': '#C678DD', 'cterm': '170', 'cterm16': '5'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight goDeclaration guifg= #C678DD guibg= NONE guisp= NONE gui= NONE ctermfg=170 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 310: call s:h("goBuiltins", { "fg": s:cyan })
calling function <SNR>2_h('goBuiltins', {'fg': {'gui': '#56B6C2', 'cterm': '38', 'cterm16': '6'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight goBuiltins guifg= #56B6C2 guibg= NONE guisp= NONE gui= NONE ctermfg=38 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 311: call s:h("goFunctionCall", { "fg": s:blue })
calling function <SNR>2_h('goFunctionCall', {'fg': {'gui': '#61AFEF', 'cterm': '39', 'cterm16': '4'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight goFunctionCall guifg= #61AFEF guibg= NONE guisp= NONE gui= NONE ctermfg=39 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 312: call s:h("goVarDefs", { "fg": s:red })
calling function <SNR>2_h('goVarDefs', {'fg': {'gui': '#E06C75', 'cterm': '204', 'cterm16': '1'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight goVarDefs guifg= #E06C75 guibg= NONE guisp= NONE gui= NONE ctermfg=204 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 313: call s:h("goVarAssign", { "fg": s:red })
calling function <SNR>2_h('goVarAssign', {'fg': {'gui': '#E06C75', 'cterm': '204', 'cterm16': '1'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight goVarAssign guifg= #E06C75 guibg= NONE guisp= NONE gui= NONE ctermfg=204 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 314: call s:h("goVar", { "fg": s:purple })
calling function <SNR>2_h('goVar', {'fg': {'gui': '#C678DD', 'cterm': '170', 'cterm16': '5'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight goVar guifg= #C678DD guibg= NONE guisp= NONE gui= NONE ctermfg=170 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 315: call s:h("goConst", { "fg": s:purple })
calling function <SNR>2_h('goConst', {'fg': {'gui': '#C678DD', 'cterm': '170', 'cterm16': '5'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight goConst guifg= #C678DD guibg= NONE guisp= NONE gui= NONE ctermfg=170 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 316: call s:h("goType", { "fg": s:yellow })
calling function <SNR>2_h('goType', {'fg': {'gui': '#E5C07B', 'cterm': '180', 'cterm16': '3'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight goType guifg= #E5C07B guibg= NONE guisp= NONE gui= NONE ctermfg=180 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 317: call s:h("goTypeName", { "fg": s:yellow })
calling function <SNR>2_h('goTypeName', {'fg': {'gui': '#E5C07B', 'cterm': '180', 'cterm16': '3'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight goTypeName guifg= #E5C07B guibg= NONE guisp= NONE gui= NONE ctermfg=180 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 318: call s:h("goDeclType", { "fg": s:cyan })
calling function <SNR>2_h('goDeclType', {'fg': {'gui': '#56B6C2', 'cterm': '38', 'cterm16': '6'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight goDeclType guifg= #56B6C2 guibg= NONE guisp= NONE gui= NONE ctermfg=38 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 319: call s:h("goTypeDecl", { "fg": s:purple })
calling function <SNR>2_h('goTypeDecl', {'fg': {'gui': '#C678DD', 'cterm': '170', 'cterm16': '5'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight goTypeDecl guifg= #C678DD guibg= NONE guisp= NONE gui= NONE ctermfg=170 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 320: 
line 321: " HTML (keep consistent with Markdown, below)
line 322: call s:h("htmlArg", { "fg": s:dark_yellow })
calling function <SNR>2_h('htmlArg', {'fg': {'gui': '#D19A66', 'cterm': '173', 'cterm16': '11'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight htmlArg guifg= #D19A66 guibg= NONE guisp= NONE gui= NONE ctermfg=173 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 323: call s:h("htmlBold", { "fg": s:dark_yellow, "gui": "bold", "cterm": "bold" })
calling function <SNR>2_h('htmlBold', {'gui': 'bold', 'fg': {'gui': '#D19A66...73', 'cterm16': '11'}, 'cterm': 'bold'})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight htmlBold guifg= #D19A66 guibg= NONE guisp= NONE gui= bold ctermfg=173 ctermbg=NONE cterm= bold
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 324: call s:h("htmlEndTag", { "fg": s:white })
calling function <SNR>2_h('htmlEndTag', {'fg': {'gui': '#ABB2BF', 'cterm': '145', 'cterm16': '15'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight htmlEndTag guifg= #ABB2BF guibg= NONE guisp= NONE gui= NONE ctermfg=145 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 325: call s:h("htmlH1", { "fg": s:red })
calling function <SNR>2_h('htmlH1', {'fg': {'gui': '#E06C75', 'cterm': '204', 'cterm16': '1'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight htmlH1 guifg= #E06C75 guibg= NONE guisp= NONE gui= NONE ctermfg=204 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 326: call s:h("htmlH2", { "fg": s:red })
calling function <SNR>2_h('htmlH2', {'fg': {'gui': '#E06C75', 'cterm': '204', 'cterm16': '1'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight htmlH2 guifg= #E06C75 guibg= NONE guisp= NONE gui= NONE ctermfg=204 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 327: call s:h("htmlH3", { "fg": s:red })
calling function <SNR>2_h('htmlH3', {'fg': {'gui': '#E06C75', 'cterm': '204', 'cterm16': '1'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight htmlH3 guifg= #E06C75 guibg= NONE guisp= NONE gui= NONE ctermfg=204 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 328: call s:h("htmlH4", { "fg": s:red })
calling function <SNR>2_h('htmlH4', {'fg': {'gui': '#E06C75', 'cterm': '204', 'cterm16': '1'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight htmlH4 guifg= #E06C75 guibg= NONE guisp= NONE gui= NONE ctermfg=204 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 329: call s:h("htmlH5", { "fg": s:red })
calling function <SNR>2_h('htmlH5', {'fg': {'gui': '#E06C75', 'cterm': '204', 'cterm16': '1'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight htmlH5 guifg= #E06C75 guibg= NONE guisp= NONE gui= NONE ctermfg=204 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 330: call s:h("htmlH6", { "fg": s:red })
calling function <SNR>2_h('htmlH6', {'fg': {'gui': '#E06C75', 'cterm': '204', 'cterm16': '1'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight htmlH6 guifg= #E06C75 guibg= NONE guisp= NONE gui= NONE ctermfg=204 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 331: call s:h("htmlItalic", { "fg": s:purple, "gui": "italic", "cterm": "italic" })
calling function <SNR>2_h('htmlItalic', {'gui': 'italic', 'fg': {'gui': '#C678...0', 'cterm16': '5'}, 'cterm': 'italic'})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight htmlItalic guifg= #C678DD guibg= NONE guisp= NONE gui= NONE ctermfg=170 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 332: call s:h("htmlLink", { "fg": s:cyan, "gui": "underline", "cterm": "underline" })
calling function <SNR>2_h('htmlLink', {'gui': 'underline', 'fg': {'gui': '#5... 'cterm16': '6'}, 'cterm': 'underline'})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight htmlLink guifg= #56B6C2 guibg= NONE guisp= NONE gui= underline ctermfg=38 ctermbg=NONE cterm= underline
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 333: call s:h("htmlSpecialChar", { "fg": s:dark_yellow })
calling function <SNR>2_h('htmlSpecialChar', {'fg': {'gui': '#D19A66', 'cterm': '173', 'cterm16': '11'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight htmlSpecialChar guifg= #D19A66 guibg= NONE guisp= NONE gui= NONE ctermfg=173 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 334: call s:h("htmlSpecialTagName", { "fg": s:red })
calling function <SNR>2_h('htmlSpecialTagName', {'fg': {'gui': '#E06C75', 'cterm': '204', 'cterm16': '1'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight htmlSpecialTagName guifg= #E06C75 guibg= NONE guisp= NONE gui= NONE ctermfg=204 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 335: call s:h("htmlTag", { "fg": s:white })
calling function <SNR>2_h('htmlTag', {'fg': {'gui': '#ABB2BF', 'cterm': '145', 'cterm16': '15'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight htmlTag guifg= #ABB2BF guibg= NONE guisp= NONE gui= NONE ctermfg=145 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 336: call s:h("htmlTagN", { "fg": s:red })
calling function <SNR>2_h('htmlTagN', {'fg': {'gui': '#E06C75', 'cterm': '204', 'cterm16': '1'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight htmlTagN guifg= #E06C75 guibg= NONE guisp= NONE gui= NONE ctermfg=204 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 337: call s:h("htmlTagName", { "fg": s:red })
calling function <SNR>2_h('htmlTagName', {'fg': {'gui': '#E06C75', 'cterm': '204', 'cterm16': '1'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight htmlTagName guifg= #E06C75 guibg= NONE guisp= NONE gui= NONE ctermfg=204 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 338: call s:h("htmlTitle", { "fg": s:white })
calling function <SNR>2_h('htmlTitle', {'fg': {'gui': '#ABB2BF', 'cterm': '145', 'cterm16': '15'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight htmlTitle guifg= #ABB2BF guibg= NONE guisp= NONE gui= NONE ctermfg=145 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 339: 
line 340: " JavaScript
line 341: call s:h("javaScriptBraces", { "fg": s:white })
calling function <SNR>2_h('javaScriptBraces', {'fg': {'gui': '#ABB2BF', 'cterm': '145', 'cterm16': '15'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight javaScriptBraces guifg= #ABB2BF guibg= NONE guisp= NONE gui= NONE ctermfg=145 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 342: call s:h("javaScriptFunction", { "fg": s:purple })
calling function <SNR>2_h('javaScriptFunction', {'fg': {'gui': '#C678DD', 'cterm': '170', 'cterm16': '5'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight javaScriptFunction guifg= #C678DD guibg= NONE guisp= NONE gui= NONE ctermfg=170 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 343: call s:h("javaScriptIdentifier", { "fg": s:purple })
calling function <SNR>2_h('javaScriptIdentifier', {'fg': {'gui': '#C678DD', 'cterm': '170', 'cterm16': '5'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight javaScriptIdentifier guifg= #C678DD guibg= NONE guisp= NONE gui= NONE ctermfg=170 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 344: call s:h("javaScriptNull", { "fg": s:dark_yellow })
calling function <SNR>2_h('javaScriptNull', {'fg': {'gui': '#D19A66', 'cterm': '173', 'cterm16': '11'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight javaScriptNull guifg= #D19A66 guibg= NONE guisp= NONE gui= NONE ctermfg=173 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 345: call s:h("javaScriptNumber", { "fg": s:dark_yellow })
calling function <SNR>2_h('javaScriptNumber', {'fg': {'gui': '#D19A66', 'cterm': '173', 'cterm16': '11'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight javaScriptNumber guifg= #D19A66 guibg= NONE guisp= NONE gui= NONE ctermfg=173 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 346: call s:h("javaScriptRequire", { "fg": s:cyan })
calling function <SNR>2_h('javaScriptRequire', {'fg': {'gui': '#56B6C2', 'cterm': '38', 'cterm16': '6'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight javaScriptRequire guifg= #56B6C2 guibg= NONE guisp= NONE gui= NONE ctermfg=38 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 347: call s:h("javaScriptReserved", { "fg": s:purple })
calling function <SNR>2_h('javaScriptReserved', {'fg': {'gui': '#C678DD', 'cterm': '170', 'cterm16': '5'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight javaScriptReserved guifg= #C678DD guibg= NONE guisp= NONE gui= NONE ctermfg=170 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 348: " https://github.com/pangloss/vim-javascript
line 349: call s:h("jsArrowFunction", { "fg": s:purple })
calling function <SNR>2_h('jsArrowFunction', {'fg': {'gui': '#C678DD', 'cterm': '170', 'cterm16': '5'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight jsArrowFunction guifg= #C678DD guibg= NONE guisp= NONE gui= NONE ctermfg=170 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 350: call s:h("jsClassKeyword", { "fg": s:purple })
calling function <SNR>2_h('jsClassKeyword', {'fg': {'gui': '#C678DD', 'cterm': '170', 'cterm16': '5'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight jsClassKeyword guifg= #C678DD guibg= NONE guisp= NONE gui= NONE ctermfg=170 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 351: call s:h("jsClassMethodType", { "fg": s:purple })
calling function <SNR>2_h('jsClassMethodType', {'fg': {'gui': '#C678DD', 'cterm': '170', 'cterm16': '5'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight jsClassMethodType guifg= #C678DD guibg= NONE guisp= NONE gui= NONE ctermfg=170 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 352: call s:h("jsDocParam", { "fg": s:blue })
calling function <SNR>2_h('jsDocParam', {'fg': {'gui': '#61AFEF', 'cterm': '39', 'cterm16': '4'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight jsDocParam guifg= #61AFEF guibg= NONE guisp= NONE gui= NONE ctermfg=39 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 353: call s:h("jsDocTags", { "fg": s:purple })
calling function <SNR>2_h('jsDocTags', {'fg': {'gui': '#C678DD', 'cterm': '170', 'cterm16': '5'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight jsDocTags guifg= #C678DD guibg= NONE guisp= NONE gui= NONE ctermfg=170 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 354: call s:h("jsExport", { "fg": s:purple })
calling function <SNR>2_h('jsExport', {'fg': {'gui': '#C678DD', 'cterm': '170', 'cterm16': '5'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight jsExport guifg= #C678DD guibg= NONE guisp= NONE gui= NONE ctermfg=170 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 355: call s:h("jsExportDefault", { "fg": s:purple })
calling function <SNR>2_h('jsExportDefault', {'fg': {'gui': '#C678DD', 'cterm': '170', 'cterm16': '5'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight jsExportDefault guifg= #C678DD guibg= NONE guisp= NONE gui= NONE ctermfg=170 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 356: call s:h("jsExtendsKeyword", { "fg": s:purple })
calling function <SNR>2_h('jsExtendsKeyword', {'fg': {'gui': '#C678DD', 'cterm': '170', 'cterm16': '5'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight jsExtendsKeyword guifg= #C678DD guibg= NONE guisp= NONE gui= NONE ctermfg=170 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 357: call s:h("jsFrom", { "fg": s:purple })
calling function <SNR>2_h('jsFrom', {'fg': {'gui': '#C678DD', 'cterm': '170', 'cterm16': '5'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight jsFrom guifg= #C678DD guibg= NONE guisp= NONE gui= NONE ctermfg=170 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 358: call s:h("jsFuncCall", { "fg": s:blue })
calling function <SNR>2_h('jsFuncCall', {'fg': {'gui': '#61AFEF', 'cterm': '39', 'cterm16': '4'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight jsFuncCall guifg= #61AFEF guibg= NONE guisp= NONE gui= NONE ctermfg=39 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 359: call s:h("jsFunction", { "fg": s:purple })
calling function <SNR>2_h('jsFunction', {'fg': {'gui': '#C678DD', 'cterm': '170', 'cterm16': '5'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight jsFunction guifg= #C678DD guibg= NONE guisp= NONE gui= NONE ctermfg=170 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 360: call s:h("jsGenerator", { "fg": s:yellow })
calling function <SNR>2_h('jsGenerator', {'fg': {'gui': '#E5C07B', 'cterm': '180', 'cterm16': '3'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight jsGenerator guifg= #E5C07B guibg= NONE guisp= NONE gui= NONE ctermfg=180 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 361: call s:h("jsGlobalObjects", { "fg": s:yellow })
calling function <SNR>2_h('jsGlobalObjects', {'fg': {'gui': '#E5C07B', 'cterm': '180', 'cterm16': '3'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight jsGlobalObjects guifg= #E5C07B guibg= NONE guisp= NONE gui= NONE ctermfg=180 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 362: call s:h("jsImport", { "fg": s:purple })
calling function <SNR>2_h('jsImport', {'fg': {'gui': '#C678DD', 'cterm': '170', 'cterm16': '5'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight jsImport guifg= #C678DD guibg= NONE guisp= NONE gui= NONE ctermfg=170 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 363: call s:h("jsModuleAs", { "fg": s:purple })
calling function <SNR>2_h('jsModuleAs', {'fg': {'gui': '#C678DD', 'cterm': '170', 'cterm16': '5'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight jsModuleAs guifg= #C678DD guibg= NONE guisp= NONE gui= NONE ctermfg=170 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 364: call s:h("jsModuleWords", { "fg": s:purple })
calling function <SNR>2_h('jsModuleWords', {'fg': {'gui': '#C678DD', 'cterm': '170', 'cterm16': '5'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight jsModuleWords guifg= #C678DD guibg= NONE guisp= NONE gui= NONE ctermfg=170 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 365: call s:h("jsModules", { "fg": s:purple })
calling function <SNR>2_h('jsModules', {'fg': {'gui': '#C678DD', 'cterm': '170', 'cterm16': '5'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight jsModules guifg= #C678DD guibg= NONE guisp= NONE gui= NONE ctermfg=170 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 366: call s:h("jsNull", { "fg": s:dark_yellow })
calling function <SNR>2_h('jsNull', {'fg': {'gui': '#D19A66', 'cterm': '173', 'cterm16': '11'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight jsNull guifg= #D19A66 guibg= NONE guisp= NONE gui= NONE ctermfg=173 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 367: call s:h("jsOperator", { "fg": s:purple })
calling function <SNR>2_h('jsOperator', {'fg': {'gui': '#C678DD', 'cterm': '170', 'cterm16': '5'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight jsOperator guifg= #C678DD guibg= NONE guisp= NONE gui= NONE ctermfg=170 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 368: call s:h("jsStorageClass", { "fg": s:purple })
calling function <SNR>2_h('jsStorageClass', {'fg': {'gui': '#C678DD', 'cterm': '170', 'cterm16': '5'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight jsStorageClass guifg= #C678DD guibg= NONE guisp= NONE gui= NONE ctermfg=170 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 369: call s:h("jsSuper", { "fg": s:red })
calling function <SNR>2_h('jsSuper', {'fg': {'gui': '#E06C75', 'cterm': '204', 'cterm16': '1'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight jsSuper guifg= #E06C75 guibg= NONE guisp= NONE gui= NONE ctermfg=204 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 370: call s:h("jsTemplateBraces", { "fg": s:dark_red })
calling function <SNR>2_h('jsTemplateBraces', {'fg': {'gui': '#BE5046', 'cterm': '196', 'cterm16': '9'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight jsTemplateBraces guifg= #BE5046 guibg= NONE guisp= NONE gui= NONE ctermfg=196 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 371: call s:h("jsTemplateVar", { "fg": s:green })
calling function <SNR>2_h('jsTemplateVar', {'fg': {'gui': '#98C379', 'cterm': '114', 'cterm16': '2'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight jsTemplateVar guifg= #98C379 guibg= NONE guisp= NONE gui= NONE ctermfg=114 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 372: call s:h("jsThis", { "fg": s:red })
calling function <SNR>2_h('jsThis', {'fg': {'gui': '#E06C75', 'cterm': '204', 'cterm16': '1'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight jsThis guifg= #E06C75 guibg= NONE guisp= NONE gui= NONE ctermfg=204 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 373: call s:h("jsUndefined", { "fg": s:dark_yellow })
calling function <SNR>2_h('jsUndefined', {'fg': {'gui': '#D19A66', 'cterm': '173', 'cterm16': '11'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight jsUndefined guifg= #D19A66 guibg= NONE guisp= NONE gui= NONE ctermfg=173 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 374: " https://github.com/othree/yajs.vim
line 375: call s:h("javascriptArrowFunc", { "fg": s:purple })
calling function <SNR>2_h('javascriptArrowFunc', {'fg': {'gui': '#C678DD', 'cterm': '170', 'cterm16': '5'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight javascriptArrowFunc guifg= #C678DD guibg= NONE guisp= NONE gui= NONE ctermfg=170 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 376: call s:h("javascriptClassExtends", { "fg": s:purple })
calling function <SNR>2_h('javascriptClassExtends', {'fg': {'gui': '#C678DD', 'cterm': '170', 'cterm16': '5'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight javascriptClassExtends guifg= #C678DD guibg= NONE guisp= NONE gui= NONE ctermfg=170 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 377: call s:h("javascriptClassKeyword", { "fg": s:purple })
calling function <SNR>2_h('javascriptClassKeyword', {'fg': {'gui': '#C678DD', 'cterm': '170', 'cterm16': '5'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight javascriptClassKeyword guifg= #C678DD guibg= NONE guisp= NONE gui= NONE ctermfg=170 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 378: call s:h("javascriptDocNotation", { "fg": s:purple })
calling function <SNR>2_h('javascriptDocNotation', {'fg': {'gui': '#C678DD', 'cterm': '170', 'cterm16': '5'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight javascriptDocNotation guifg= #C678DD guibg= NONE guisp= NONE gui= NONE ctermfg=170 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 379: call s:h("javascriptDocParamName", { "fg": s:blue })
calling function <SNR>2_h('javascriptDocParamName', {'fg': {'gui': '#61AFEF', 'cterm': '39', 'cterm16': '4'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight javascriptDocParamName guifg= #61AFEF guibg= NONE guisp= NONE gui= NONE ctermfg=39 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 380: call s:h("javascriptDocTags", { "fg": s:purple })
calling function <SNR>2_h('javascriptDocTags', {'fg': {'gui': '#C678DD', 'cterm': '170', 'cterm16': '5'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight javascriptDocTags guifg= #C678DD guibg= NONE guisp= NONE gui= NONE ctermfg=170 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 381: call s:h("javascriptEndColons", { "fg": s:white })
calling function <SNR>2_h('javascriptEndColons', {'fg': {'gui': '#ABB2BF', 'cterm': '145', 'cterm16': '15'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight javascriptEndColons guifg= #ABB2BF guibg= NONE guisp= NONE gui= NONE ctermfg=145 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 382: call s:h("javascriptExport", { "fg": s:purple })
calling function <SNR>2_h('javascriptExport', {'fg': {'gui': '#C678DD', 'cterm': '170', 'cterm16': '5'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight javascriptExport guifg= #C678DD guibg= NONE guisp= NONE gui= NONE ctermfg=170 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 383: call s:h("javascriptFuncArg", { "fg": s:white })
calling function <SNR>2_h('javascriptFuncArg', {'fg': {'gui': '#ABB2BF', 'cterm': '145', 'cterm16': '15'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight javascriptFuncArg guifg= #ABB2BF guibg= NONE guisp= NONE gui= NONE ctermfg=145 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 384: call s:h("javascriptFuncKeyword", { "fg": s:purple })
calling function <SNR>2_h('javascriptFuncKeyword', {'fg': {'gui': '#C678DD', 'cterm': '170', 'cterm16': '5'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight javascriptFuncKeyword guifg= #C678DD guibg= NONE guisp= NONE gui= NONE ctermfg=170 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 385: call s:h("javascriptIdentifier", { "fg": s:red })
calling function <SNR>2_h('javascriptIdentifier', {'fg': {'gui': '#E06C75', 'cterm': '204', 'cterm16': '1'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight javascriptIdentifier guifg= #E06C75 guibg= NONE guisp= NONE gui= NONE ctermfg=204 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 386: call s:h("javascriptImport", { "fg": s:purple })
calling function <SNR>2_h('javascriptImport', {'fg': {'gui': '#C678DD', 'cterm': '170', 'cterm16': '5'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight javascriptImport guifg= #C678DD guibg= NONE guisp= NONE gui= NONE ctermfg=170 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 387: call s:h("javascriptMethodName", { "fg": s:white })
calling function <SNR>2_h('javascriptMethodName', {'fg': {'gui': '#ABB2BF', 'cterm': '145', 'cterm16': '15'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight javascriptMethodName guifg= #ABB2BF guibg= NONE guisp= NONE gui= NONE ctermfg=145 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 388: call s:h("javascriptObjectLabel", { "fg": s:white })
calling function <SNR>2_h('javascriptObjectLabel', {'fg': {'gui': '#ABB2BF', 'cterm': '145', 'cterm16': '15'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight javascriptObjectLabel guifg= #ABB2BF guibg= NONE guisp= NONE gui= NONE ctermfg=145 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 389: call s:h("javascriptOpSymbol", { "fg": s:cyan })
calling function <SNR>2_h('javascriptOpSymbol', {'fg': {'gui': '#56B6C2', 'cterm': '38', 'cterm16': '6'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight javascriptOpSymbol guifg= #56B6C2 guibg= NONE guisp= NONE gui= NONE ctermfg=38 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 390: call s:h("javascriptOpSymbols", { "fg": s:cyan })
calling function <SNR>2_h('javascriptOpSymbols', {'fg': {'gui': '#56B6C2', 'cterm': '38', 'cterm16': '6'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight javascriptOpSymbols guifg= #56B6C2 guibg= NONE guisp= NONE gui= NONE ctermfg=38 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 391: call s:h("javascriptPropertyName", { "fg": s:green })
calling function <SNR>2_h('javascriptPropertyName', {'fg': {'gui': '#98C379', 'cterm': '114', 'cterm16': '2'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight javascriptPropertyName guifg= #98C379 guibg= NONE guisp= NONE gui= NONE ctermfg=114 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 392: call s:h("javascriptTemplateSB", { "fg": s:dark_red })
calling function <SNR>2_h('javascriptTemplateSB', {'fg': {'gui': '#BE5046', 'cterm': '196', 'cterm16': '9'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight javascriptTemplateSB guifg= #BE5046 guibg= NONE guisp= NONE gui= NONE ctermfg=196 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 393: call s:h("javascriptVariable", { "fg": s:purple })
calling function <SNR>2_h('javascriptVariable', {'fg': {'gui': '#C678DD', 'cterm': '170', 'cterm16': '5'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight javascriptVariable guifg= #C678DD guibg= NONE guisp= NONE gui= NONE ctermfg=170 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 394: 
line 395: " JSON
line 396: call s:h("jsonCommentError", { "fg": s:white })
calling function <SNR>2_h('jsonCommentError', {'fg': {'gui': '#ABB2BF', 'cterm': '145', 'cterm16': '15'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight jsonCommentError guifg= #ABB2BF guibg= NONE guisp= NONE gui= NONE ctermfg=145 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 397: call s:h("jsonKeyword", { "fg": s:red })
calling function <SNR>2_h('jsonKeyword', {'fg': {'gui': '#E06C75', 'cterm': '204', 'cterm16': '1'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight jsonKeyword guifg= #E06C75 guibg= NONE guisp= NONE gui= NONE ctermfg=204 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 398: call s:h("jsonBoolean", { "fg": s:dark_yellow })
calling function <SNR>2_h('jsonBoolean', {'fg': {'gui': '#D19A66', 'cterm': '173', 'cterm16': '11'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight jsonBoolean guifg= #D19A66 guibg= NONE guisp= NONE gui= NONE ctermfg=173 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 399: call s:h("jsonNumber", { "fg": s:dark_yellow })
calling function <SNR>2_h('jsonNumber', {'fg': {'gui': '#D19A66', 'cterm': '173', 'cterm16': '11'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight jsonNumber guifg= #D19A66 guibg= NONE guisp= NONE gui= NONE ctermfg=173 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 400: call s:h("jsonQuote", { "fg": s:white })
calling function <SNR>2_h('jsonQuote', {'fg': {'gui': '#ABB2BF', 'cterm': '145', 'cterm16': '15'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight jsonQuote guifg= #ABB2BF guibg= NONE guisp= NONE gui= NONE ctermfg=145 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 401: call s:h("jsonMissingCommaError", { "fg": s:red, "gui": "reverse" })
calling function <SNR>2_h('jsonMissingCommaError', {'gui': 'reverse', 'fg': {'gui': '#E06C75', 'cterm': '204', 'cterm16': '1'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight jsonMissingCommaError guifg= #E06C75 guibg= NONE guisp= NONE gui= reverse ctermfg=204 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 402: call s:h("jsonNoQuotesError", { "fg": s:red, "gui": "reverse" })
calling function <SNR>2_h('jsonNoQuotesError', {'gui': 'reverse', 'fg': {'gui': '#E06C75', 'cterm': '204', 'cterm16': '1'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight jsonNoQuotesError guifg= #E06C75 guibg= NONE guisp= NONE gui= reverse ctermfg=204 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 403: call s:h("jsonNumError", { "fg": s:red, "gui": "reverse" })
calling function <SNR>2_h('jsonNumError', {'gui': 'reverse', 'fg': {'gui': '#E06C75', 'cterm': '204', 'cterm16': '1'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight jsonNumError guifg= #E06C75 guibg= NONE guisp= NONE gui= reverse ctermfg=204 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 404: call s:h("jsonString", { "fg": s:green })
calling function <SNR>2_h('jsonString', {'fg': {'gui': '#98C379', 'cterm': '114', 'cterm16': '2'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight jsonString guifg= #98C379 guibg= NONE guisp= NONE gui= NONE ctermfg=114 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 405: call s:h("jsonStringSQError", { "fg": s:red, "gui": "reverse" })
calling function <SNR>2_h('jsonStringSQError', {'gui': 'reverse', 'fg': {'gui': '#E06C75', 'cterm': '204', 'cterm16': '1'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight jsonStringSQError guifg= #E06C75 guibg= NONE guisp= NONE gui= reverse ctermfg=204 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 406: call s:h("jsonSemicolonError", { "fg": s:red, "gui": "reverse" })
calling function <SNR>2_h('jsonSemicolonError', {'gui': 'reverse', 'fg': {'gui': '#E06C75', 'cterm': '204', 'cterm16': '1'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight jsonSemicolonError guifg= #E06C75 guibg= NONE guisp= NONE gui= reverse ctermfg=204 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 407: 
line 408: " LESS
line 409: call s:h("lessVariable", { "fg": s:purple })
calling function <SNR>2_h('lessVariable', {'fg': {'gui': '#C678DD', 'cterm': '170', 'cterm16': '5'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight lessVariable guifg= #C678DD guibg= NONE guisp= NONE gui= NONE ctermfg=170 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 410: call s:h("lessAmpersandChar", { "fg": s:white })
calling function <SNR>2_h('lessAmpersandChar', {'fg': {'gui': '#ABB2BF', 'cterm': '145', 'cterm16': '15'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight lessAmpersandChar guifg= #ABB2BF guibg= NONE guisp= NONE gui= NONE ctermfg=145 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 411: call s:h("lessClass", { "fg": s:dark_yellow })
calling function <SNR>2_h('lessClass', {'fg': {'gui': '#D19A66', 'cterm': '173', 'cterm16': '11'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight lessClass guifg= #D19A66 guibg= NONE guisp= NONE gui= NONE ctermfg=173 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 412: 
line 413: " Markdown (keep consistent with HTML, above)
line 414: call s:h("markdownBlockquote", { "fg": s:comment_grey })
calling function <SNR>2_h('markdownBlockquote', {'fg': {'gui': '#5C6370', 'cterm': '59', 'cterm16': '7'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight markdownBlockquote guifg= #5C6370 guibg= NONE guisp= NONE gui= NONE ctermfg=59 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 415: call s:h("markdownBold", { "fg": s:dark_yellow, "gui": "bold", "cterm": "bold" })
calling function <SNR>2_h('markdownBold', {'gui': 'bold', 'fg': {'gui': '#D19A66...73', 'cterm16': '11'}, 'cterm': 'bold'})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight markdownBold guifg= #D19A66 guibg= NONE guisp= NONE gui= bold ctermfg=173 ctermbg=NONE cterm= bold
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 416: call s:h("markdownCode", { "fg": s:green })
calling function <SNR>2_h('markdownCode', {'fg': {'gui': '#98C379', 'cterm': '114', 'cterm16': '2'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight markdownCode guifg= #98C379 guibg= NONE guisp= NONE gui= NONE ctermfg=114 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 417: call s:h("markdownCodeBlock", { "fg": s:green })
calling function <SNR>2_h('markdownCodeBlock', {'fg': {'gui': '#98C379', 'cterm': '114', 'cterm16': '2'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight markdownCodeBlock guifg= #98C379 guibg= NONE guisp= NONE gui= NONE ctermfg=114 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 418: call s:h("markdownCodeDelimiter", { "fg": s:green })
calling function <SNR>2_h('markdownCodeDelimiter', {'fg': {'gui': '#98C379', 'cterm': '114', 'cterm16': '2'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight markdownCodeDelimiter guifg= #98C379 guibg= NONE guisp= NONE gui= NONE ctermfg=114 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 419: call s:h("markdownH1", { "fg": s:red })
calling function <SNR>2_h('markdownH1', {'fg': {'gui': '#E06C75', 'cterm': '204', 'cterm16': '1'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight markdownH1 guifg= #E06C75 guibg= NONE guisp= NONE gui= NONE ctermfg=204 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 420: call s:h("markdownH2", { "fg": s:red })
calling function <SNR>2_h('markdownH2', {'fg': {'gui': '#E06C75', 'cterm': '204', 'cterm16': '1'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight markdownH2 guifg= #E06C75 guibg= NONE guisp= NONE gui= NONE ctermfg=204 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 421: call s:h("markdownH3", { "fg": s:red })
calling function <SNR>2_h('markdownH3', {'fg': {'gui': '#E06C75', 'cterm': '204', 'cterm16': '1'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight markdownH3 guifg= #E06C75 guibg= NONE guisp= NONE gui= NONE ctermfg=204 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 422: call s:h("markdownH4", { "fg": s:red })
calling function <SNR>2_h('markdownH4', {'fg': {'gui': '#E06C75', 'cterm': '204', 'cterm16': '1'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight markdownH4 guifg= #E06C75 guibg= NONE guisp= NONE gui= NONE ctermfg=204 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 423: call s:h("markdownH5", { "fg": s:red })
calling function <SNR>2_h('markdownH5', {'fg': {'gui': '#E06C75', 'cterm': '204', 'cterm16': '1'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight markdownH5 guifg= #E06C75 guibg= NONE guisp= NONE gui= NONE ctermfg=204 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 424: call s:h("markdownH6", { "fg": s:red })
calling function <SNR>2_h('markdownH6', {'fg': {'gui': '#E06C75', 'cterm': '204', 'cterm16': '1'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight markdownH6 guifg= #E06C75 guibg= NONE guisp= NONE gui= NONE ctermfg=204 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 425: call s:h("markdownHeadingDelimiter", { "fg": s:red })
calling function <SNR>2_h('markdownHeadingDelimiter', {'fg': {'gui': '#E06C75', 'cterm': '204', 'cterm16': '1'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight markdownHeadingDelimiter guifg= #E06C75 guibg= NONE guisp= NONE gui= NONE ctermfg=204 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 426: call s:h("markdownHeadingRule", { "fg": s:comment_grey })
calling function <SNR>2_h('markdownHeadingRule', {'fg': {'gui': '#5C6370', 'cterm': '59', 'cterm16': '7'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight markdownHeadingRule guifg= #5C6370 guibg= NONE guisp= NONE gui= NONE ctermfg=59 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 427: call s:h("markdownId", { "fg": s:purple })
calling function <SNR>2_h('markdownId', {'fg': {'gui': '#C678DD', 'cterm': '170', 'cterm16': '5'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight markdownId guifg= #C678DD guibg= NONE guisp= NONE gui= NONE ctermfg=170 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 428: call s:h("markdownIdDeclaration", { "fg": s:blue })
calling function <SNR>2_h('markdownIdDeclaration', {'fg': {'gui': '#61AFEF', 'cterm': '39', 'cterm16': '4'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight markdownIdDeclaration guifg= #61AFEF guibg= NONE guisp= NONE gui= NONE ctermfg=39 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 429: call s:h("markdownIdDelimiter", { "fg": s:purple })
calling function <SNR>2_h('markdownIdDelimiter', {'fg': {'gui': '#C678DD', 'cterm': '170', 'cterm16': '5'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight markdownIdDelimiter guifg= #C678DD guibg= NONE guisp= NONE gui= NONE ctermfg=170 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 430: call s:h("markdownItalic", { "fg": s:purple, "gui": "italic", "cterm": "italic" })
calling function <SNR>2_h('markdownItalic', {'gui': 'italic', 'fg': {'gui': '#C678...0', 'cterm16': '5'}, 'cterm': 'italic'})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight markdownItalic guifg= #C678DD guibg= NONE guisp= NONE gui= NONE ctermfg=170 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 431: call s:h("markdownLinkDelimiter", { "fg": s:purple })
calling function <SNR>2_h('markdownLinkDelimiter', {'fg': {'gui': '#C678DD', 'cterm': '170', 'cterm16': '5'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight markdownLinkDelimiter guifg= #C678DD guibg= NONE guisp= NONE gui= NONE ctermfg=170 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 432: call s:h("markdownLinkText", { "fg": s:blue })
calling function <SNR>2_h('markdownLinkText', {'fg': {'gui': '#61AFEF', 'cterm': '39', 'cterm16': '4'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight markdownLinkText guifg= #61AFEF guibg= NONE guisp= NONE gui= NONE ctermfg=39 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 433: call s:h("markdownListMarker", { "fg": s:red })
calling function <SNR>2_h('markdownListMarker', {'fg': {'gui': '#E06C75', 'cterm': '204', 'cterm16': '1'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight markdownListMarker guifg= #E06C75 guibg= NONE guisp= NONE gui= NONE ctermfg=204 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 434: call s:h("markdownOrderedListMarker", { "fg": s:red })
calling function <SNR>2_h('markdownOrderedListMarker', {'fg': {'gui': '#E06C75', 'cterm': '204', 'cterm16': '1'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight markdownOrderedListMarker guifg= #E06C75 guibg= NONE guisp= NONE gui= NONE ctermfg=204 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 435: call s:h("markdownRule", { "fg": s:comment_grey })
calling function <SNR>2_h('markdownRule', {'fg': {'gui': '#5C6370', 'cterm': '59', 'cterm16': '7'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight markdownRule guifg= #5C6370 guibg= NONE guisp= NONE gui= NONE ctermfg=59 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 436: call s:h("markdownUrl", { "fg": s:cyan, "gui": "underline", "cterm": "underline" })
calling function <SNR>2_h('markdownUrl', {'gui': 'underline', 'fg': {'gui': '#5... 'cterm16': '6'}, 'cterm': 'underline'})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight markdownUrl guifg= #56B6C2 guibg= NONE guisp= NONE gui= underline ctermfg=38 ctermbg=NONE cterm= underline
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 437: 
line 438: " Perl
line 439: call s:h("perlFiledescRead", { "fg": s:green })
calling function <SNR>2_h('perlFiledescRead', {'fg': {'gui': '#98C379', 'cterm': '114', 'cterm16': '2'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight perlFiledescRead guifg= #98C379 guibg= NONE guisp= NONE gui= NONE ctermfg=114 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 440: call s:h("perlFunction", { "fg": s:purple })
calling function <SNR>2_h('perlFunction', {'fg': {'gui': '#C678DD', 'cterm': '170', 'cterm16': '5'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight perlFunction guifg= #C678DD guibg= NONE guisp= NONE gui= NONE ctermfg=170 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 441: call s:h("perlMatchStartEnd",{ "fg": s:blue })
calling function <SNR>2_h('perlMatchStartEnd', {'fg': {'gui': '#61AFEF', 'cterm': '39', 'cterm16': '4'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight perlMatchStartEnd guifg= #61AFEF guibg= NONE guisp= NONE gui= NONE ctermfg=39 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 442: call s:h("perlMethod", { "fg": s:purple })
calling function <SNR>2_h('perlMethod', {'fg': {'gui': '#C678DD', 'cterm': '170', 'cterm16': '5'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight perlMethod guifg= #C678DD guibg= NONE guisp= NONE gui= NONE ctermfg=170 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 443: call s:h("perlPOD", { "fg": s:comment_grey })
calling function <SNR>2_h('perlPOD', {'fg': {'gui': '#5C6370', 'cterm': '59', 'cterm16': '7'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight perlPOD guifg= #5C6370 guibg= NONE guisp= NONE gui= NONE ctermfg=59 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 444: call s:h("perlSharpBang", { "fg": s:comment_grey })
calling function <SNR>2_h('perlSharpBang', {'fg': {'gui': '#5C6370', 'cterm': '59', 'cterm16': '7'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight perlSharpBang guifg= #5C6370 guibg= NONE guisp= NONE gui= NONE ctermfg=59 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 445: call s:h("perlSpecialString",{ "fg": s:dark_yellow })
calling function <SNR>2_h('perlSpecialString', {'fg': {'gui': '#D19A66', 'cterm': '173', 'cterm16': '11'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight perlSpecialString guifg= #D19A66 guibg= NONE guisp= NONE gui= NONE ctermfg=173 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 446: call s:h("perlStatementFiledesc", { "fg": s:red })
calling function <SNR>2_h('perlStatementFiledesc', {'fg': {'gui': '#E06C75', 'cterm': '204', 'cterm16': '1'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight perlStatementFiledesc guifg= #E06C75 guibg= NONE guisp= NONE gui= NONE ctermfg=204 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 447: call s:h("perlStatementFlow",{ "fg": s:red })
calling function <SNR>2_h('perlStatementFlow', {'fg': {'gui': '#E06C75', 'cterm': '204', 'cterm16': '1'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight perlStatementFlow guifg= #E06C75 guibg= NONE guisp= NONE gui= NONE ctermfg=204 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 448: call s:h("perlStatementInclude", { "fg": s:purple })
calling function <SNR>2_h('perlStatementInclude', {'fg': {'gui': '#C678DD', 'cterm': '170', 'cterm16': '5'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight perlStatementInclude guifg= #C678DD guibg= NONE guisp= NONE gui= NONE ctermfg=170 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 449: call s:h("perlStatementScalar",{ "fg": s:purple })
calling function <SNR>2_h('perlStatementScalar', {'fg': {'gui': '#C678DD', 'cterm': '170', 'cterm16': '5'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight perlStatementScalar guifg= #C678DD guibg= NONE guisp= NONE gui= NONE ctermfg=170 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 450: call s:h("perlStatementStorage", { "fg": s:purple })
calling function <SNR>2_h('perlStatementStorage', {'fg': {'gui': '#C678DD', 'cterm': '170', 'cterm16': '5'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight perlStatementStorage guifg= #C678DD guibg= NONE guisp= NONE gui= NONE ctermfg=170 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 451: call s:h("perlSubName",{ "fg": s:yellow })
calling function <SNR>2_h('perlSubName', {'fg': {'gui': '#E5C07B', 'cterm': '180', 'cterm16': '3'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight perlSubName guifg= #E5C07B guibg= NONE guisp= NONE gui= NONE ctermfg=180 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 452: call s:h("perlVarPlain",{ "fg": s:blue })
calling function <SNR>2_h('perlVarPlain', {'fg': {'gui': '#61AFEF', 'cterm': '39', 'cterm16': '4'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight perlVarPlain guifg= #61AFEF guibg= NONE guisp= NONE gui= NONE ctermfg=39 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 453: 
line 454: " PHP
line 455: call s:h("phpVarSelector", { "fg": s:red })
calling function <SNR>2_h('phpVarSelector', {'fg': {'gui': '#E06C75', 'cterm': '204', 'cterm16': '1'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight phpVarSelector guifg= #E06C75 guibg= NONE guisp= NONE gui= NONE ctermfg=204 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 456: call s:h("phpOperator", { "fg": s:white })
calling function <SNR>2_h('phpOperator', {'fg': {'gui': '#ABB2BF', 'cterm': '145', 'cterm16': '15'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight phpOperator guifg= #ABB2BF guibg= NONE guisp= NONE gui= NONE ctermfg=145 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 457: call s:h("phpParent", { "fg": s:white })
calling function <SNR>2_h('phpParent', {'fg': {'gui': '#ABB2BF', 'cterm': '145', 'cterm16': '15'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight phpParent guifg= #ABB2BF guibg= NONE guisp= NONE gui= NONE ctermfg=145 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 458: call s:h("phpMemberSelector", { "fg": s:white })
calling function <SNR>2_h('phpMemberSelector', {'fg': {'gui': '#ABB2BF', 'cterm': '145', 'cterm16': '15'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight phpMemberSelector guifg= #ABB2BF guibg= NONE guisp= NONE gui= NONE ctermfg=145 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 459: call s:h("phpType", { "fg": s:purple })
calling function <SNR>2_h('phpType', {'fg': {'gui': '#C678DD', 'cterm': '170', 'cterm16': '5'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight phpType guifg= #C678DD guibg= NONE guisp= NONE gui= NONE ctermfg=170 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 460: call s:h("phpKeyword", { "fg": s:purple })
calling function <SNR>2_h('phpKeyword', {'fg': {'gui': '#C678DD', 'cterm': '170', 'cterm16': '5'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight phpKeyword guifg= #C678DD guibg= NONE guisp= NONE gui= NONE ctermfg=170 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 461: call s:h("phpClass", { "fg": s:yellow })
calling function <SNR>2_h('phpClass', {'fg': {'gui': '#E5C07B', 'cterm': '180', 'cterm16': '3'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight phpClass guifg= #E5C07B guibg= NONE guisp= NONE gui= NONE ctermfg=180 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 462: call s:h("phpUseClass", { "fg": s:white })
calling function <SNR>2_h('phpUseClass', {'fg': {'gui': '#ABB2BF', 'cterm': '145', 'cterm16': '15'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight phpUseClass guifg= #ABB2BF guibg= NONE guisp= NONE gui= NONE ctermfg=145 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 463: call s:h("phpUseAlias", { "fg": s:white })
calling function <SNR>2_h('phpUseAlias', {'fg': {'gui': '#ABB2BF', 'cterm': '145', 'cterm16': '15'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight phpUseAlias guifg= #ABB2BF guibg= NONE guisp= NONE gui= NONE ctermfg=145 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 464: call s:h("phpInclude", { "fg": s:purple })
calling function <SNR>2_h('phpInclude', {'fg': {'gui': '#C678DD', 'cterm': '170', 'cterm16': '5'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight phpInclude guifg= #C678DD guibg= NONE guisp= NONE gui= NONE ctermfg=170 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 465: call s:h("phpClassExtends", { "fg": s:green })
calling function <SNR>2_h('phpClassExtends', {'fg': {'gui': '#98C379', 'cterm': '114', 'cterm16': '2'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight phpClassExtends guifg= #98C379 guibg= NONE guisp= NONE gui= NONE ctermfg=114 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 466: call s:h("phpDocTags", { "fg": s:white })
calling function <SNR>2_h('phpDocTags', {'fg': {'gui': '#ABB2BF', 'cterm': '145', 'cterm16': '15'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight phpDocTags guifg= #ABB2BF guibg= NONE guisp= NONE gui= NONE ctermfg=145 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 467: call s:h("phpFunction", { "fg": s:blue })
calling function <SNR>2_h('phpFunction', {'fg': {'gui': '#61AFEF', 'cterm': '39', 'cterm16': '4'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight phpFunction guifg= #61AFEF guibg= NONE guisp= NONE gui= NONE ctermfg=39 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 468: call s:h("phpFunctions", { "fg": s:cyan })
calling function <SNR>2_h('phpFunctions', {'fg': {'gui': '#56B6C2', 'cterm': '38', 'cterm16': '6'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight phpFunctions guifg= #56B6C2 guibg= NONE guisp= NONE gui= NONE ctermfg=38 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 469: call s:h("phpMethodsVar", { "fg": s:dark_yellow })
calling function <SNR>2_h('phpMethodsVar', {'fg': {'gui': '#D19A66', 'cterm': '173', 'cterm16': '11'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight phpMethodsVar guifg= #D19A66 guibg= NONE guisp= NONE gui= NONE ctermfg=173 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 470: call s:h("phpMagicConstants", { "fg": s:dark_yellow })
calling function <SNR>2_h('phpMagicConstants', {'fg': {'gui': '#D19A66', 'cterm': '173', 'cterm16': '11'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight phpMagicConstants guifg= #D19A66 guibg= NONE guisp= NONE gui= NONE ctermfg=173 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 471: call s:h("phpSuperglobals", { "fg": s:red })
calling function <SNR>2_h('phpSuperglobals', {'fg': {'gui': '#E06C75', 'cterm': '204', 'cterm16': '1'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight phpSuperglobals guifg= #E06C75 guibg= NONE guisp= NONE gui= NONE ctermfg=204 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 472: call s:h("phpConstants", { "fg": s:dark_yellow })
calling function <SNR>2_h('phpConstants', {'fg': {'gui': '#D19A66', 'cterm': '173', 'cterm16': '11'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight phpConstants guifg= #D19A66 guibg= NONE guisp= NONE gui= NONE ctermfg=173 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 473: 
line 474: " Ruby
line 475: call s:h("rubyBlockParameter", { "fg": s:red})
calling function <SNR>2_h('rubyBlockParameter', {'fg': {'gui': '#E06C75', 'cterm': '204', 'cterm16': '1'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight rubyBlockParameter guifg= #E06C75 guibg= NONE guisp= NONE gui= NONE ctermfg=204 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 476: call s:h("rubyBlockParameterList", { "fg": s:red })
calling function <SNR>2_h('rubyBlockParameterList', {'fg': {'gui': '#E06C75', 'cterm': '204', 'cterm16': '1'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight rubyBlockParameterList guifg= #E06C75 guibg= NONE guisp= NONE gui= NONE ctermfg=204 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 477: call s:h("rubyClass", { "fg": s:purple})
calling function <SNR>2_h('rubyClass', {'fg': {'gui': '#C678DD', 'cterm': '170', 'cterm16': '5'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight rubyClass guifg= #C678DD guibg= NONE guisp= NONE gui= NONE ctermfg=170 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 478: call s:h("rubyConstant", { "fg": s:yellow})
calling function <SNR>2_h('rubyConstant', {'fg': {'gui': '#E5C07B', 'cterm': '180', 'cterm16': '3'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight rubyConstant guifg= #E5C07B guibg= NONE guisp= NONE gui= NONE ctermfg=180 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 479: call s:h("rubyControl", { "fg": s:purple })
calling function <SNR>2_h('rubyControl', {'fg': {'gui': '#C678DD', 'cterm': '170', 'cterm16': '5'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight rubyControl guifg= #C678DD guibg= NONE guisp= NONE gui= NONE ctermfg=170 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 480: call s:h("rubyEscape", { "fg": s:red})
calling function <SNR>2_h('rubyEscape', {'fg': {'gui': '#E06C75', 'cterm': '204', 'cterm16': '1'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight rubyEscape guifg= #E06C75 guibg= NONE guisp= NONE gui= NONE ctermfg=204 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 481: call s:h("rubyFunction", { "fg": s:blue})
calling function <SNR>2_h('rubyFunction', {'fg': {'gui': '#61AFEF', 'cterm': '39', 'cterm16': '4'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight rubyFunction guifg= #61AFEF guibg= NONE guisp= NONE gui= NONE ctermfg=39 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 482: call s:h("rubyGlobalVariable", { "fg": s:red})
calling function <SNR>2_h('rubyGlobalVariable', {'fg': {'gui': '#E06C75', 'cterm': '204', 'cterm16': '1'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight rubyGlobalVariable guifg= #E06C75 guibg= NONE guisp= NONE gui= NONE ctermfg=204 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 483: call s:h("rubyInclude", { "fg": s:blue})
calling function <SNR>2_h('rubyInclude', {'fg': {'gui': '#61AFEF', 'cterm': '39', 'cterm16': '4'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight rubyInclude guifg= #61AFEF guibg= NONE guisp= NONE gui= NONE ctermfg=39 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 484: call s:h("rubyIncluderubyGlobalVariable", { "fg": s:red})
calling function <SNR>2_h('rubyIncluderubyGlobalVariable', {'fg': {'gui': '#E06C75', 'cterm': '204', 'cterm16': '1'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight rubyIncluderubyGlobalVariable guifg= #E06C75 guibg= NONE guisp= NONE gui= NONE ctermfg=204 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 485: call s:h("rubyInstanceVariable", { "fg": s:red})
calling function <SNR>2_h('rubyInstanceVariable', {'fg': {'gui': '#E06C75', 'cterm': '204', 'cterm16': '1'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight rubyInstanceVariable guifg= #E06C75 guibg= NONE guisp= NONE gui= NONE ctermfg=204 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 486: call s:h("rubyInterpolation", { "fg": s:cyan })
calling function <SNR>2_h('rubyInterpolation', {'fg': {'gui': '#56B6C2', 'cterm': '38', 'cterm16': '6'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight rubyInterpolation guifg= #56B6C2 guibg= NONE guisp= NONE gui= NONE ctermfg=38 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 487: call s:h("rubyInterpolationDelimiter", { "fg": s:red })
calling function <SNR>2_h('rubyInterpolationDelimiter', {'fg': {'gui': '#E06C75', 'cterm': '204', 'cterm16': '1'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight rubyInterpolationDelimiter guifg= #E06C75 guibg= NONE guisp= NONE gui= NONE ctermfg=204 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 488: call s:h("rubyInterpolationDelimiter", { "fg": s:red})
calling function <SNR>2_h('rubyInterpolationDelimiter', {'fg': {'gui': '#E06C75', 'cterm': '204', 'cterm16': '1'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight rubyInterpolationDelimiter guifg= #E06C75 guibg= NONE guisp= NONE gui= NONE ctermfg=204 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 489: call s:h("rubyRegexp", { "fg": s:cyan})
calling function <SNR>2_h('rubyRegexp', {'fg': {'gui': '#56B6C2', 'cterm': '38', 'cterm16': '6'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight rubyRegexp guifg= #56B6C2 guibg= NONE guisp= NONE gui= NONE ctermfg=38 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 490: call s:h("rubyRegexpDelimiter", { "fg": s:cyan})
calling function <SNR>2_h('rubyRegexpDelimiter', {'fg': {'gui': '#56B6C2', 'cterm': '38', 'cterm16': '6'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight rubyRegexpDelimiter guifg= #56B6C2 guibg= NONE guisp= NONE gui= NONE ctermfg=38 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 491: call s:h("rubyStringDelimiter", { "fg": s:green})
calling function <SNR>2_h('rubyStringDelimiter', {'fg': {'gui': '#98C379', 'cterm': '114', 'cterm16': '2'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight rubyStringDelimiter guifg= #98C379 guibg= NONE guisp= NONE gui= NONE ctermfg=114 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 492: call s:h("rubySymbol", { "fg": s:cyan})
calling function <SNR>2_h('rubySymbol', {'fg': {'gui': '#56B6C2', 'cterm': '38', 'cterm16': '6'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight rubySymbol guifg= #56B6C2 guibg= NONE guisp= NONE gui= NONE ctermfg=38 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 493: 
line 494: " Sass
line 495: " https://github.com/tpope/vim-haml
line 496: call s:h("sassAmpersand", { "fg": s:red })
calling function <SNR>2_h('sassAmpersand', {'fg': {'gui': '#E06C75', 'cterm': '204', 'cterm16': '1'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight sassAmpersand guifg= #E06C75 guibg= NONE guisp= NONE gui= NONE ctermfg=204 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 497: call s:h("sassClass", { "fg": s:dark_yellow })
calling function <SNR>2_h('sassClass', {'fg': {'gui': '#D19A66', 'cterm': '173', 'cterm16': '11'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight sassClass guifg= #D19A66 guibg= NONE guisp= NONE gui= NONE ctermfg=173 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 498: call s:h("sassControl", { "fg": s:purple })
calling function <SNR>2_h('sassControl', {'fg': {'gui': '#C678DD', 'cterm': '170', 'cterm16': '5'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight sassControl guifg= #C678DD guibg= NONE guisp= NONE gui= NONE ctermfg=170 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 499: call s:h("sassExtend", { "fg": s:purple })
calling function <SNR>2_h('sassExtend', {'fg': {'gui': '#C678DD', 'cterm': '170', 'cterm16': '5'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight sassExtend guifg= #C678DD guibg= NONE guisp= NONE gui= NONE ctermfg=170 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 500: call s:h("sassFor", { "fg": s:white })
calling function <SNR>2_h('sassFor', {'fg': {'gui': '#ABB2BF', 'cterm': '145', 'cterm16': '15'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight sassFor guifg= #ABB2BF guibg= NONE guisp= NONE gui= NONE ctermfg=145 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 501: call s:h("sassFunction", { "fg": s:cyan })
calling function <SNR>2_h('sassFunction', {'fg': {'gui': '#56B6C2', 'cterm': '38', 'cterm16': '6'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight sassFunction guifg= #56B6C2 guibg= NONE guisp= NONE gui= NONE ctermfg=38 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 502: call s:h("sassId", { "fg": s:blue })
calling function <SNR>2_h('sassId', {'fg': {'gui': '#61AFEF', 'cterm': '39', 'cterm16': '4'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight sassId guifg= #61AFEF guibg= NONE guisp= NONE gui= NONE ctermfg=39 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 503: call s:h("sassInclude", { "fg": s:purple })
calling function <SNR>2_h('sassInclude', {'fg': {'gui': '#C678DD', 'cterm': '170', 'cterm16': '5'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight sassInclude guifg= #C678DD guibg= NONE guisp= NONE gui= NONE ctermfg=170 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 504: call s:h("sassMedia", { "fg": s:purple })
calling function <SNR>2_h('sassMedia', {'fg': {'gui': '#C678DD', 'cterm': '170', 'cterm16': '5'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight sassMedia guifg= #C678DD guibg= NONE guisp= NONE gui= NONE ctermfg=170 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 505: call s:h("sassMediaOperators", { "fg": s:white })
calling function <SNR>2_h('sassMediaOperators', {'fg': {'gui': '#ABB2BF', 'cterm': '145', 'cterm16': '15'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight sassMediaOperators guifg= #ABB2BF guibg= NONE guisp= NONE gui= NONE ctermfg=145 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 506: call s:h("sassMixin", { "fg": s:purple })
calling function <SNR>2_h('sassMixin', {'fg': {'gui': '#C678DD', 'cterm': '170', 'cterm16': '5'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight sassMixin guifg= #C678DD guibg= NONE guisp= NONE gui= NONE ctermfg=170 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 507: call s:h("sassMixinName", { "fg": s:blue })
calling function <SNR>2_h('sassMixinName', {'fg': {'gui': '#61AFEF', 'cterm': '39', 'cterm16': '4'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight sassMixinName guifg= #61AFEF guibg= NONE guisp= NONE gui= NONE ctermfg=39 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 508: call s:h("sassMixing", { "fg": s:purple })
calling function <SNR>2_h('sassMixing', {'fg': {'gui': '#C678DD', 'cterm': '170', 'cterm16': '5'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight sassMixing guifg= #C678DD guibg= NONE guisp= NONE gui= NONE ctermfg=170 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 509: call s:h("sassVariable", { "fg": s:purple })
calling function <SNR>2_h('sassVariable', {'fg': {'gui': '#C678DD', 'cterm': '170', 'cterm16': '5'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight sassVariable guifg= #C678DD guibg= NONE guisp= NONE gui= NONE ctermfg=170 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 510: " https://github.com/cakebaker/scss-syntax.vim
line 511: call s:h("scssExtend", { "fg": s:purple })
calling function <SNR>2_h('scssExtend', {'fg': {'gui': '#C678DD', 'cterm': '170', 'cterm16': '5'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight scssExtend guifg= #C678DD guibg= NONE guisp= NONE gui= NONE ctermfg=170 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 512: call s:h("scssImport", { "fg": s:purple })
calling function <SNR>2_h('scssImport', {'fg': {'gui': '#C678DD', 'cterm': '170', 'cterm16': '5'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight scssImport guifg= #C678DD guibg= NONE guisp= NONE gui= NONE ctermfg=170 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 513: call s:h("scssInclude", { "fg": s:purple })
calling function <SNR>2_h('scssInclude', {'fg': {'gui': '#C678DD', 'cterm': '170', 'cterm16': '5'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight scssInclude guifg= #C678DD guibg= NONE guisp= NONE gui= NONE ctermfg=170 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 514: call s:h("scssMixin", { "fg": s:purple })
calling function <SNR>2_h('scssMixin', {'fg': {'gui': '#C678DD', 'cterm': '170', 'cterm16': '5'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight scssMixin guifg= #C678DD guibg= NONE guisp= NONE gui= NONE ctermfg=170 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 515: call s:h("scssSelectorName", { "fg": s:dark_yellow })
calling function <SNR>2_h('scssSelectorName', {'fg': {'gui': '#D19A66', 'cterm': '173', 'cterm16': '11'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight scssSelectorName guifg= #D19A66 guibg= NONE guisp= NONE gui= NONE ctermfg=173 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 516: call s:h("scssVariable", { "fg": s:purple })
calling function <SNR>2_h('scssVariable', {'fg': {'gui': '#C678DD', 'cterm': '170', 'cterm16': '5'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight scssVariable guifg= #C678DD guibg= NONE guisp= NONE gui= NONE ctermfg=170 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 517: 
line 518: " TeX
line 519: call s:h("texStatement", { "fg": s:purple })
calling function <SNR>2_h('texStatement', {'fg': {'gui': '#C678DD', 'cterm': '170', 'cterm16': '5'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight texStatement guifg= #C678DD guibg= NONE guisp= NONE gui= NONE ctermfg=170 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 520: call s:h("texSubscripts", { "fg": s:dark_yellow })
calling function <SNR>2_h('texSubscripts', {'fg': {'gui': '#D19A66', 'cterm': '173', 'cterm16': '11'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight texSubscripts guifg= #D19A66 guibg= NONE guisp= NONE gui= NONE ctermfg=173 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 521: call s:h("texSuperscripts", { "fg": s:dark_yellow })
calling function <SNR>2_h('texSuperscripts', {'fg': {'gui': '#D19A66', 'cterm': '173', 'cterm16': '11'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight texSuperscripts guifg= #D19A66 guibg= NONE guisp= NONE gui= NONE ctermfg=173 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 522: call s:h("texTodo", { "fg": s:dark_red })
calling function <SNR>2_h('texTodo', {'fg': {'gui': '#BE5046', 'cterm': '196', 'cterm16': '9'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight texTodo guifg= #BE5046 guibg= NONE guisp= NONE gui= NONE ctermfg=196 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 523: call s:h("texBeginEnd", { "fg": s:purple })
calling function <SNR>2_h('texBeginEnd', {'fg': {'gui': '#C678DD', 'cterm': '170', 'cterm16': '5'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight texBeginEnd guifg= #C678DD guibg= NONE guisp= NONE gui= NONE ctermfg=170 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 524: call s:h("texBeginEndName", { "fg": s:blue })
calling function <SNR>2_h('texBeginEndName', {'fg': {'gui': '#61AFEF', 'cterm': '39', 'cterm16': '4'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight texBeginEndName guifg= #61AFEF guibg= NONE guisp= NONE gui= NONE ctermfg=39 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 525: call s:h("texMathMatcher", { "fg": s:blue })
calling function <SNR>2_h('texMathMatcher', {'fg': {'gui': '#61AFEF', 'cterm': '39', 'cterm16': '4'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight texMathMatcher guifg= #61AFEF guibg= NONE guisp= NONE gui= NONE ctermfg=39 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 526: call s:h("texMathDelim", { "fg": s:blue })
calling function <SNR>2_h('texMathDelim', {'fg': {'gui': '#61AFEF', 'cterm': '39', 'cterm16': '4'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight texMathDelim guifg= #61AFEF guibg= NONE guisp= NONE gui= NONE ctermfg=39 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 527: call s:h("texDelimiter", { "fg": s:dark_yellow })
calling function <SNR>2_h('texDelimiter', {'fg': {'gui': '#D19A66', 'cterm': '173', 'cterm16': '11'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight texDelimiter guifg= #D19A66 guibg= NONE guisp= NONE gui= NONE ctermfg=173 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 528: call s:h("texSpecialChar", { "fg": s:dark_yellow })
calling function <SNR>2_h('texSpecialChar', {'fg': {'gui': '#D19A66', 'cterm': '173', 'cterm16': '11'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight texSpecialChar guifg= #D19A66 guibg= NONE guisp= NONE gui= NONE ctermfg=173 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 529: call s:h("texCite", { "fg": s:blue })
calling function <SNR>2_h('texCite', {'fg': {'gui': '#61AFEF', 'cterm': '39', 'cterm16': '4'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight texCite guifg= #61AFEF guibg= NONE guisp= NONE gui= NONE ctermfg=39 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 530: call s:h("texRefZone", { "fg": s:blue })
calling function <SNR>2_h('texRefZone', {'fg': {'gui': '#61AFEF', 'cterm': '39', 'cterm16': '4'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight texRefZone guifg= #61AFEF guibg= NONE guisp= NONE gui= NONE ctermfg=39 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 531: 
line 532: " TypeScript
line 533: call s:h("typescriptReserved", { "fg": s:purple })
calling function <SNR>2_h('typescriptReserved', {'fg': {'gui': '#C678DD', 'cterm': '170', 'cterm16': '5'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight typescriptReserved guifg= #C678DD guibg= NONE guisp= NONE gui= NONE ctermfg=170 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 534: call s:h("typescriptEndColons", { "fg": s:white })
calling function <SNR>2_h('typescriptEndColons', {'fg': {'gui': '#ABB2BF', 'cterm': '145', 'cterm16': '15'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight typescriptEndColons guifg= #ABB2BF guibg= NONE guisp= NONE gui= NONE ctermfg=145 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 535: call s:h("typescriptBraces", { "fg": s:white })
calling function <SNR>2_h('typescriptBraces', {'fg': {'gui': '#ABB2BF', 'cterm': '145', 'cterm16': '15'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight typescriptBraces guifg= #ABB2BF guibg= NONE guisp= NONE gui= NONE ctermfg=145 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 536: 
line 537: " XML
line 538: call s:h("xmlAttrib", { "fg": s:dark_yellow })
calling function <SNR>2_h('xmlAttrib', {'fg': {'gui': '#D19A66', 'cterm': '173', 'cterm16': '11'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight xmlAttrib guifg= #D19A66 guibg= NONE guisp= NONE gui= NONE ctermfg=173 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 539: call s:h("xmlEndTag", { "fg": s:red })
calling function <SNR>2_h('xmlEndTag', {'fg': {'gui': '#E06C75', 'cterm': '204', 'cterm16': '1'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight xmlEndTag guifg= #E06C75 guibg= NONE guisp= NONE gui= NONE ctermfg=204 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 540: call s:h("xmlTag", { "fg": s:red })
calling function <SNR>2_h('xmlTag', {'fg': {'gui': '#E06C75', 'cterm': '204', 'cterm16': '1'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight xmlTag guifg= #E06C75 guibg= NONE guisp= NONE gui= NONE ctermfg=204 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 541: call s:h("xmlTagName", { "fg": s:red })
calling function <SNR>2_h('xmlTagName', {'fg': {'gui': '#E06C75', 'cterm': '204', 'cterm16': '1'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight xmlTagName guifg= #E06C75 guibg= NONE guisp= NONE gui= NONE ctermfg=204 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 542: 
line 543: " }}}
line 544: 
line 545: " Plugin Highlighting {{{
line 546: 
line 547: " airblade/vim-gitgutter
line 548: call s:h("GitGutterAdd", { "fg": s:green })
calling function <SNR>2_h('GitGutterAdd', {'fg': {'gui': '#98C379', 'cterm': '114', 'cterm16': '2'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight GitGutterAdd guifg= #98C379 guibg= NONE guisp= NONE gui= NONE ctermfg=114 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 549: call s:h("GitGutterChange", { "fg": s:yellow })
calling function <SNR>2_h('GitGutterChange', {'fg': {'gui': '#E5C07B', 'cterm': '180', 'cterm16': '3'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight GitGutterChange guifg= #E5C07B guibg= NONE guisp= NONE gui= NONE ctermfg=180 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 550: call s:h("GitGutterDelete", { "fg": s:red })
calling function <SNR>2_h('GitGutterDelete', {'fg': {'gui': '#E06C75', 'cterm': '204', 'cterm16': '1'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight GitGutterDelete guifg= #E06C75 guibg= NONE guisp= NONE gui= NONE ctermfg=204 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 551: 
line 552: " dense-analysis/ale
line 553: call s:h("ALEError", { "fg": s:red, "gui": "underline", "cterm": "underline" })
calling function <SNR>2_h('ALEError', {'gui': 'underline', 'fg': {'gui': '#E... 'cterm16': '1'}, 'cterm': 'underline'})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight ALEError guifg= #E06C75 guibg= NONE guisp= NONE gui= underline ctermfg=204 ctermbg=NONE cterm= underline
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 554: call s:h("ALEWarning", { "fg": s:yellow, "gui": "underline", "cterm": "underline"})
calling function <SNR>2_h('ALEWarning', {'gui': 'underline', 'fg': {'gui': '#E... 'cterm16': '3'}, 'cterm': 'underline'})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight ALEWarning guifg= #E5C07B guibg= NONE guisp= NONE gui= underline ctermfg=180 ctermbg=NONE cterm= underline
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 555: call s:h("ALEInfo", { "gui": "underline", "cterm": "underline"})
calling function <SNR>2_h('ALEInfo', {'gui': 'underline', 'cterm': 'underline'})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight ALEInfo guifg= NONE guibg= NONE guisp= NONE gui= underline ctermfg=NONE ctermbg=NONE cterm= underline
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 556: 
line 557: " easymotion/vim-easymotion
line 558: call s:h("EasyMotionTarget", { "fg": s:red, "gui": "bold", "cterm": "bold" })
calling function <SNR>2_h('EasyMotionTarget', {'gui': 'bold', 'fg': {'gui': '#E06C75...204', 'cterm16': '1'}, 'cterm': 'bold'})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight EasyMotionTarget guifg= #E06C75 guibg= NONE guisp= NONE gui= bold ctermfg=204 ctermbg=NONE cterm= bold
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 559: call s:h("EasyMotionTarget2First", { "fg": s:yellow, "gui": "bold", "cterm": "bold" })
calling function <SNR>2_h('EasyMotionTarget2First', {'gui': 'bold', 'fg': {'gui': '#E5C07B...180', 'cterm16': '3'}, 'cterm': 'bold'})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight EasyMotionTarget2First guifg= #E5C07B guibg= NONE guisp= NONE gui= bold ctermfg=180 ctermbg=NONE cterm= bold
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 560: call s:h("EasyMotionTarget2Second", { "fg": s:dark_yellow, "gui": "bold", "cterm": "bold" })
calling function <SNR>2_h('EasyMotionTarget2Second', {'gui': 'bold', 'fg': {'gui': '#D19A66...73', 'cterm16': '11'}, 'cterm': 'bold'})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight EasyMotionTarget2Second guifg= #D19A66 guibg= NONE guisp= NONE gui= bold ctermfg=173 ctermbg=NONE cterm= bold
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 561: call s:h("EasyMotionShade",  { "fg": s:comment_grey })
calling function <SNR>2_h('EasyMotionShade', {'fg': {'gui': '#5C6370', 'cterm': '59', 'cterm16': '7'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight EasyMotionShade guifg= #5C6370 guibg= NONE guisp= NONE gui= NONE ctermfg=59 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 562: 
line 563: " lewis6991/gitsigns.nvim
line 564: hi link GitSignsAdd    GitGutterAdd
line 565: hi link GitSignsChange GitGutterChange
line 566: hi link GitSignsDelete GitGutterDelete
line 567: 
line 568: " mhinz/vim-signify
line 569: hi link SignifySignAdd    GitGutterAdd
line 570: hi link SignifySignChange GitGutterChange
line 571: hi link SignifySignDelete GitGutterDelete
line 572: 
line 573: " neoclide/coc.nvim
line 574: call s:h("CocErrorSign", { "fg": s:red })
calling function <SNR>2_h('CocErrorSign', {'fg': {'gui': '#E06C75', 'cterm': '204', 'cterm16': '1'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight CocErrorSign guifg= #E06C75 guibg= NONE guisp= NONE gui= NONE ctermfg=204 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 575: call s:h("CocWarningSign", { "fg": s:yellow })
calling function <SNR>2_h('CocWarningSign', {'fg': {'gui': '#E5C07B', 'cterm': '180', 'cterm16': '3'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight CocWarningSign guifg= #E5C07B guibg= NONE guisp= NONE gui= NONE ctermfg=180 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 576: call s:h("CocInfoSign", { "fg": s:blue })
calling function <SNR>2_h('CocInfoSign', {'fg': {'gui': '#61AFEF', 'cterm': '39', 'cterm16': '4'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight CocInfoSign guifg= #61AFEF guibg= NONE guisp= NONE gui= NONE ctermfg=39 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 577: call s:h("CocHintSign", { "fg": s:cyan })
calling function <SNR>2_h('CocHintSign', {'fg': {'gui': '#56B6C2', 'cterm': '38', 'cterm16': '6'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight CocHintSign guifg= #56B6C2 guibg= NONE guisp= NONE gui= NONE ctermfg=38 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 578: 
line 579: " neomake/neomake
line 580: call s:h("NeomakeErrorSign", { "fg": s:red })
calling function <SNR>2_h('NeomakeErrorSign', {'fg': {'gui': '#E06C75', 'cterm': '204', 'cterm16': '1'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight NeomakeErrorSign guifg= #E06C75 guibg= NONE guisp= NONE gui= NONE ctermfg=204 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 581: call s:h("NeomakeWarningSign", { "fg": s:yellow })
calling function <SNR>2_h('NeomakeWarningSign', {'fg': {'gui': '#E5C07B', 'cterm': '180', 'cterm16': '3'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight NeomakeWarningSign guifg= #E5C07B guibg= NONE guisp= NONE gui= NONE ctermfg=180 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 582: call s:h("NeomakeInfoSign", { "fg": s:blue })
calling function <SNR>2_h('NeomakeInfoSign', {'fg': {'gui': '#61AFEF', 'cterm': '39', 'cterm16': '4'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight NeomakeInfoSign guifg= #61AFEF guibg= NONE guisp= NONE gui= NONE ctermfg=39 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 583: 
line 584: " plasticboy/vim-markdown (keep consistent with Markdown, above)
line 585: call s:h("mkdDelimiter", { "fg": s:purple })
calling function <SNR>2_h('mkdDelimiter', {'fg': {'gui': '#C678DD', 'cterm': '170', 'cterm16': '5'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight mkdDelimiter guifg= #C678DD guibg= NONE guisp= NONE gui= NONE ctermfg=170 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 586: call s:h("mkdHeading", { "fg": s:red })
calling function <SNR>2_h('mkdHeading', {'fg': {'gui': '#E06C75', 'cterm': '204', 'cterm16': '1'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight mkdHeading guifg= #E06C75 guibg= NONE guisp= NONE gui= NONE ctermfg=204 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 587: call s:h("mkdLink", { "fg": s:blue })
calling function <SNR>2_h('mkdLink', {'fg': {'gui': '#61AFEF', 'cterm': '39', 'cterm16': '4'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight mkdLink guifg= #61AFEF guibg= NONE guisp= NONE gui= NONE ctermfg=39 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 588: call s:h("mkdURL", { "fg": s:cyan, "gui": "underline", "cterm": "underline" })
calling function <SNR>2_h('mkdURL', {'gui': 'underline', 'fg': {'gui': '#5... 'cterm16': '6'}, 'cterm': 'underline'})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight mkdURL guifg= #56B6C2 guibg= NONE guisp= NONE gui= underline ctermfg=38 ctermbg=NONE cterm= underline
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 589: 
line 590: " prabirshrestha/vim-lsp
line 591: call s:h("LspError", { "fg": s:red })
calling function <SNR>2_h('LspError', {'fg': {'gui': '#E06C75', 'cterm': '204', 'cterm16': '1'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight LspError guifg= #E06C75 guibg= NONE guisp= NONE gui= NONE ctermfg=204 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 592: call s:h("LspWarning", { "fg": s:yellow })
calling function <SNR>2_h('LspWarning', {'fg': {'gui': '#E5C07B', 'cterm': '180', 'cterm16': '3'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight LspWarning guifg= #E5C07B guibg= NONE guisp= NONE gui= NONE ctermfg=180 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 593: call s:h("LspInformation", { "fg": s:blue })
calling function <SNR>2_h('LspInformation', {'fg': {'gui': '#61AFEF', 'cterm': '39', 'cterm16': '4'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight LspInformation guifg= #61AFEF guibg= NONE guisp= NONE gui= NONE ctermfg=39 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 594: call s:h("LspHint", { "fg": s:cyan })
calling function <SNR>2_h('LspHint', {'fg': {'gui': '#56B6C2', 'cterm': '38', 'cterm16': '6'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight LspHint guifg= #56B6C2 guibg= NONE guisp= NONE gui= NONE ctermfg=38 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 595: 
line 596: " tpope/vim-fugitive
line 597: call s:h("diffAdded", { "fg": s:green })
calling function <SNR>2_h('diffAdded', {'fg': {'gui': '#98C379', 'cterm': '114', 'cterm16': '2'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight diffAdded guifg= #98C379 guibg= NONE guisp= NONE gui= NONE ctermfg=114 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 598: call s:h("diffRemoved", { "fg": s:red })
calling function <SNR>2_h('diffRemoved', {'fg': {'gui': '#E06C75', 'cterm': '204', 'cterm16': '1'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight diffRemoved guifg= #E06C75 guibg= NONE guisp= NONE gui= NONE ctermfg=204 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 599: 
line 600: " }}}
line 601: 
line 602: " Git Highlighting {{{
line 603: 
line 604: call s:h("gitcommitComment", { "fg": s:comment_grey })
calling function <SNR>2_h('gitcommitComment', {'fg': {'gui': '#5C6370', 'cterm': '59', 'cterm16': '7'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight gitcommitComment guifg= #5C6370 guibg= NONE guisp= NONE gui= NONE ctermfg=59 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 605: call s:h("gitcommitUnmerged", { "fg": s:green })
calling function <SNR>2_h('gitcommitUnmerged', {'fg': {'gui': '#98C379', 'cterm': '114', 'cterm16': '2'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight gitcommitUnmerged guifg= #98C379 guibg= NONE guisp= NONE gui= NONE ctermfg=114 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 606: call s:h("gitcommitOnBranch", {})
calling function <SNR>2_h('gitcommitOnBranch', {})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight gitcommitOnBranch guifg= NONE guibg= NONE guisp= NONE gui= NONE ctermfg=NONE ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 607: call s:h("gitcommitBranch", { "fg": s:purple })
calling function <SNR>2_h('gitcommitBranch', {'fg': {'gui': '#C678DD', 'cterm': '170', 'cterm16': '5'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight gitcommitBranch guifg= #C678DD guibg= NONE guisp= NONE gui= NONE ctermfg=170 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 608: call s:h("gitcommitDiscardedType", { "fg": s:red })
calling function <SNR>2_h('gitcommitDiscardedType', {'fg': {'gui': '#E06C75', 'cterm': '204', 'cterm16': '1'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight gitcommitDiscardedType guifg= #E06C75 guibg= NONE guisp= NONE gui= NONE ctermfg=204 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 609: call s:h("gitcommitSelectedType", { "fg": s:green })
calling function <SNR>2_h('gitcommitSelectedType', {'fg': {'gui': '#98C379', 'cterm': '114', 'cterm16': '2'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight gitcommitSelectedType guifg= #98C379 guibg= NONE guisp= NONE gui= NONE ctermfg=114 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 610: call s:h("gitcommitHeader", {})
calling function <SNR>2_h('gitcommitHeader', {})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight gitcommitHeader guifg= NONE guibg= NONE guisp= NONE gui= NONE ctermfg=NONE ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 611: call s:h("gitcommitUntrackedFile", { "fg": s:cyan })
calling function <SNR>2_h('gitcommitUntrackedFile', {'fg': {'gui': '#56B6C2', 'cterm': '38', 'cterm16': '6'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight gitcommitUntrackedFile guifg= #56B6C2 guibg= NONE guisp= NONE gui= NONE ctermfg=38 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 612: call s:h("gitcommitDiscardedFile", { "fg": s:red })
calling function <SNR>2_h('gitcommitDiscardedFile', {'fg': {'gui': '#E06C75', 'cterm': '204', 'cterm16': '1'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight gitcommitDiscardedFile guifg= #E06C75 guibg= NONE guisp= NONE gui= NONE ctermfg=204 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 613: call s:h("gitcommitSelectedFile", { "fg": s:green })
calling function <SNR>2_h('gitcommitSelectedFile', {'fg': {'gui': '#98C379', 'cterm': '114', 'cterm16': '2'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight gitcommitSelectedFile guifg= #98C379 guibg= NONE guisp= NONE gui= NONE ctermfg=114 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 614: call s:h("gitcommitUnmergedFile", { "fg": s:yellow })
calling function <SNR>2_h('gitcommitUnmergedFile', {'fg': {'gui': '#E5C07B', 'cterm': '180', 'cterm16': '3'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight gitcommitUnmergedFile guifg= #E5C07B guibg= NONE guisp= NONE gui= NONE ctermfg=180 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 615: call s:h("gitcommitFile", {})
calling function <SNR>2_h('gitcommitFile', {})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight gitcommitFile guifg= NONE guibg= NONE guisp= NONE gui= NONE ctermfg=NONE ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 616: call s:h("gitcommitSummary", { "fg": s:white })
calling function <SNR>2_h('gitcommitSummary', {'fg': {'gui': '#ABB2BF', 'cterm': '145', 'cterm16': '15'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight gitcommitSummary guifg= #ABB2BF guibg= NONE guisp= NONE gui= NONE ctermfg=145 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 617: call s:h("gitcommitOverflow", { "fg": s:red })
calling function <SNR>2_h('gitcommitOverflow', {'fg': {'gui': '#E06C75', 'cterm': '204', 'cterm16': '1'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight gitcommitOverflow guifg= #E06C75 guibg= NONE guisp= NONE gui= NONE ctermfg=204 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 618: hi link gitcommitNoBranch gitcommitBranch
line 619: hi link gitcommitUntracked gitcommitComment
line 620: hi link gitcommitDiscarded gitcommitComment
line 621: hi link gitcommitSelected gitcommitComment
line 622: hi link gitcommitDiscardedArrow gitcommitDiscardedFile
line 623: hi link gitcommitSelectedArrow gitcommitSelectedFile
line 624: hi link gitcommitUnmergedArrow gitcommitUnmergedFile
line 625: 
line 626: " }}}
line 627: 
line 628: " Neovim-Specific Highlighting {{{
line 629: 
line 630: if has("nvim")
line 631:   " Neovim terminal colors {{{
line 632:   let g:terminal_color_0 =  s:black.gui
line 633:   let g:terminal_color_1 =  s:red.gui
line 634:   let g:terminal_color_2 =  s:green.gui
line 635:   let g:terminal_color_3 =  s:yellow.gui
line 636:   let g:terminal_color_4 =  s:blue.gui
line 637:   let g:terminal_color_5 =  s:purple.gui
line 638:   let g:terminal_color_6 =  s:cyan.gui
line 639:   let g:terminal_color_7 =  s:white.gui
line 640:   let g:terminal_color_8 =  s:visual_grey.gui
line 641:   let g:terminal_color_9 =  s:dark_red.gui
line 642:   let g:terminal_color_10 = s:green.gui " No dark version
line 643:   let g:terminal_color_11 = s:dark_yellow.gui
line 644:   let g:terminal_color_12 = s:blue.gui " No dark version
line 645:   let g:terminal_color_13 = s:purple.gui " No dark version
line 646:   let g:terminal_color_14 = s:cyan.gui " No dark version
line 647:   let g:terminal_color_15 = s:comment_grey.gui
line 648:   let g:terminal_color_background = s:background.gui
line 649:   let g:terminal_color_foreground = s:foreground.gui
line 650:   " }}}
line 651: 
line 652:   " Neovim LSP {{{
line 653:   call s:h("LspDiagnosticsDefaultError", { "fg": s:red })
calling function <SNR>2_h('LspDiagnosticsDefaultError', {'fg': {'gui': '#E06C75', 'cterm': '204', 'cterm16': '1'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight LspDiagnosticsDefaultError guifg= #E06C75 guibg= NONE guisp= NONE gui= NONE ctermfg=204 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 654:   call s:h("LspDiagnosticsDefaultWarning", { "fg": s:yellow })
calling function <SNR>2_h('LspDiagnosticsDefaultWarning', {'fg': {'gui': '#E5C07B', 'cterm': '180', 'cterm16': '3'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight LspDiagnosticsDefaultWarning guifg= #E5C07B guibg= NONE guisp= NONE gui= NONE ctermfg=180 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 655:   call s:h("LspDiagnosticsDefaultInformation", { "fg": s:blue })
calling function <SNR>2_h('LspDiagnosticsDefaultInformation', {'fg': {'gui': '#61AFEF', 'cterm': '39', 'cterm16': '4'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight LspDiagnosticsDefaultInformation guifg= #61AFEF guibg= NONE guisp= NONE gui= NONE ctermfg=39 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 656:   call s:h("LspDiagnosticsDefaultHint", { "fg": s:cyan })
calling function <SNR>2_h('LspDiagnosticsDefaultHint', {'fg': {'gui': '#56B6C2', 'cterm': '38', 'cterm16': '6'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight LspDiagnosticsDefaultHint guifg= #56B6C2 guibg= NONE guisp= NONE gui= NONE ctermfg=38 ctermbg=NONE cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 657:   call s:h("LspDiagnosticsUnderlineError", { "fg": s:red, "gui": "underline", "cterm": "underline" })
calling function <SNR>2_h('LspDiagnosticsUnderlineError', {'gui': 'underline', 'fg': {'gui': '#E... 'cterm16': '1'}, 'cterm': 'underline'})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight LspDiagnosticsUnderlineError guifg= #E06C75 guibg= NONE guisp= NONE gui= underline ctermfg=204 ctermbg=NONE cterm= underline
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 658:   call s:h("LspDiagnosticsUnderlineWarning", { "fg": s:yellow, "gui": "underline", "cterm": "underline" })
calling function <SNR>2_h('LspDiagnosticsUnderlineWarning', {'gui': 'underline', 'fg': {'gui': '#E... 'cterm16': '3'}, 'cterm': 'underline'})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight LspDiagnosticsUnderlineWarning guifg= #E5C07B guibg= NONE guisp= NONE gui= underline ctermfg=180 ctermbg=NONE cterm= underline
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 659:   call s:h("LspDiagnosticsUnderlineInformation", { "fg": s:blue, "gui": "underline", "cterm": "underline" })
calling function <SNR>2_h('LspDiagnosticsUnderlineInformation', {'gui': 'underline', 'fg': {'gui': '#6... 'cterm16': '4'}, 'cterm': 'underline'})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight LspDiagnosticsUnderlineInformation guifg= #61AFEF guibg= NONE guisp= NONE gui= underline ctermfg=39 ctermbg=NONE cterm= underline
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 660:   call s:h("LspDiagnosticsUnderlineHint", { "fg": s:cyan, "gui": "underline", "cterm": "underline" })
calling function <SNR>2_h('LspDiagnosticsUnderlineHint', {'gui': 'underline', 'fg': {'gui': '#5... 'cterm16': '6'}, 'cterm': 'underline'})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight LspDiagnosticsUnderlineHint guifg= #56B6C2 guibg= NONE guisp= NONE gui= underline ctermfg=38 ctermbg=NONE cterm= underline
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 661:   call s:h("LspDiagnosticsVirtualTextError", { "fg": s:red, "bg": s:cursor_grey  })
calling function <SNR>2_h('LspDiagnosticsVirtualTextError', {'bg': {'gui': '#2C323C', 'cterm': '23...6C75', 'cterm': '204', 'cterm16': '1'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight LspDiagnosticsVirtualTextError guifg= #E06C75 guibg= #2C323C guisp= NONE gui= NONE ctermfg=204 ctermbg=236 cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 662:   call s:h("LspDiagnosticsVirtualTextWarning", { "fg": s:yellow, "bg": s:cursor_grey  })
calling function <SNR>2_h('LspDiagnosticsVirtualTextWarning', {'bg': {'gui': '#2C323C', 'cterm': '23...C07B', 'cterm': '180', 'cterm16': '3'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight LspDiagnosticsVirtualTextWarning guifg= #E5C07B guibg= #2C323C guisp= NONE gui= NONE ctermfg=180 ctermbg=236 cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 663:   call s:h("LspDiagnosticsVirtualTextInformation", { "fg": s:blue, "bg": s:cursor_grey  })
calling function <SNR>2_h('LspDiagnosticsVirtualTextInformation', {'bg': {'gui': '#2C323C', 'cterm': '23...1AFEF', 'cterm': '39', 'cterm16': '4'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight LspDiagnosticsVirtualTextInformation guifg= #61AFEF guibg= #2C323C guisp= NONE gui= NONE ctermfg=39 ctermbg=236 cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 664:   call s:h("LspDiagnosticsVirtualTextHint", { "fg": s:cyan, "bg": s:cursor_grey  })
calling function <SNR>2_h('LspDiagnosticsVirtualTextHint', {'bg': {'gui': '#2C323C', 'cterm': '23...6B6C2', 'cterm': '38', 'cterm16': '6'}})

line 1:   if (a:0 > 0) " Will be true if we got here from onedark#extend_highlight
line 2:     let s:highlight = s:group_colors[a:group]
line 3:     for style_type in ["fg", "bg", "sp"]
line 4:       if (has_key(a:style, style_type))
line 5:         let l:default_style = (has_key(s:highlight, style_type) ? copy(s:highlight[style_type]) : { "cterm16": "NONE", "cterm": "NONE", "gui": "NONE" })
line 6:         let s:highlight[style_type] = extend(l:default_style, a:style[style_type])
line 7:       endif
line 8:     endfor
line 9:     if (has_key(a:style, "gui"))
line 10:       let s:highlight.gui = a:style.gui
line 11:     endif
line 12:   else
line 13:     let s:highlight = a:style
line 14:     let s:group_colors[a:group] = s:highlight " Cache default highlight group settings
line 15:   endif
line 16: 
line 17:   if g:onedark_terminal_italics == 0
line 18:     if has_key(s:highlight, "cterm") && s:highlight["cterm"] == "italic"
line 19:       unlet s:highlight.cterm
line 20:     endif
line 21:     if has_key(s:highlight, "gui") && s:highlight["gui"] == "italic"
line 22:       unlet s:highlight.gui
line 23:     endif
line 24:   endif
line 25: 
line 26:   if g:onedark_termcolors == 16
line 27:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm16 : "NONE")
line 28:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm16 : "NONE")
line 29:   else
line 30:     let l:ctermfg = (has_key(s:highlight, "fg") ? s:highlight.fg.cterm : "NONE")
line 31:     let l:ctermbg = (has_key(s:highlight, "bg") ? s:highlight.bg.cterm : "NONE")
line 32:   endif
line 33: 
line 34:   execute "highlight" a:group "guifg="   (has_key(s:highlight, "fg")    ? s:highlight.fg.gui   : "NONE") "guibg="   (has_key(s:highlight, "bg")    ? s:highlight.bg.gui   : "NONE") "guisp="   (has_key(s:highlight, "sp")    ? s:highlight.sp.gui   : "NONE") "gui="     (has_key(s:highlight, "gui")   ? s:highlight.gui      : "NONE") "ctermfg=" . l:ctermfg "ctermbg=" . l:ctermbg "cterm="   (has_key(s:highlight, "cterm") ? s:highlight.cterm    : "NONE")
line 34: highlight LspDiagnosticsVirtualTextHint guifg= #56B6C2 guibg= #2C323C guisp= NONE gui= NONE ctermfg=38 ctermbg=236 cterm= NONE
function <SNR>2_h returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim

line 665:   " }}}
line 666: endif
line 667: 
line 668: " }}}
line 669: 
line 670: " Must appear at the end of the file to work around this oddity:
line 671: " https://groups.google.com/forum/#!msg/vim_dev/afPqwAFNdrU/nqh6tOM87QUJ
line 672: set background=dark
finished sourcing /Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/colors/onedark.vim
continuing in /usr/local/Cellar/neovim/0.5.0/share/nvim/runtime/syntax/synload.vim
line 20: else
line 21:   runtime! syntax/syncolor.vim
line 22: endif
line 23: 
line 24: " Line continuation is used here, remove 'C' from 'cpoptions'
line 25: let s:cpo_save = &cpo
line 26: set cpo&vim
line 27: 
line 28: " First remove all old syntax autocommands.
line 29: au! Syntax
line 30: 
line 31: au Syntax *^I^Icall s:SynSet()
line 32: 
line 33: fun! s:SynSet()
line 64: 
line 65: 
line 66: " Handle adding doxygen to other languages (C, C++, C#, IDL, java, php, DataScript)
line 67: au Syntax c,cpp,cs,idl,java,php,datascript if (exists('b:load_doxygen_syntax') && b:load_doxygen_syntax)^I|| (exists('g:load_doxygen_syntax') && g:load_doxygen_syntax)   | runtime! syntax/doxygen.vim | endif
line 72: 
line 73: 
line 74: " Source the user-specified syntax highlighting file
line 75: if exists("mysyntaxfile")
line 76:   let s:fname = expand(mysyntaxfile)
line 77:   if filereadable(s:fname)
line 78:     execute "source " . fnameescape(s:fname)
line 79:   endif
line 80: endif
line 81: 
line 82: " Restore 'cpoptions'
line 83: let &cpo = s:cpo_save
line 84: unlet s:cpo_save
finished sourcing /usr/local/Cellar/neovim/0.5.0/share/nvim/runtime/syntax/synload.vim
continuing in /usr/local/Cellar/neovim/0.5.0/share/nvim/runtime/syntax/syntax.vim
line 20: 
line 21: " Load the FileType autocommands if not done yet.
line 22: if exists("did_load_filetypes")
line 23:   let s:did_ft = 1
line 24: else
line 25:   filetype on
line 26:   let s:did_ft = 0
line 27: endif
line 28: 
line 29: " Set up the connection between FileType and Syntax autocommands.
line 30: " This makes the syntax automatically set when the file type is detected.
line 31: augroup syntaxset
line 32:   au! FileType *^Iexe "set syntax=" . expand("<amatch>")
line 33: augroup END
line 34: 
line 35: 
line 36: " Execute the syntax autocommands for the each buffer.
line 37: " If the filetype wasn't detected yet, do that now.
line 38: " Always do the syntaxset autocommands, for buffers where the 'filetype'
line 39: " already was set manually (e.g., help buffers).
line 40: doautoall syntaxset FileType
Executing FileType Autocommands for "*"
autocommand exe "set syntax=" . expand("<amatch>")

Executing: exe "set syntax=" . expand("<amatch>")
Executing: set syntax=
Executing Syntax Autocommands for "*"
autocommand call s:SynSet()

Executing: call s:SynSet()
calling function <SNR>8_SynSet()

line 1:   " clear syntax for :set syntax=OFF  and any syntax name that doesn't exist
line 2:   syn clear
line 3:   if exists("b:current_syntax")
line 4:     unlet b:current_syntax
line 5:   endif
line 6: 
line 7:   let s = expand("<amatch>")
line 8:   if s == "ON"
line 9:     " :set syntax=ON
line 10:     if &filetype == ""
line 11:       echohl ErrorMsg
line 12:       echo "filetype unknown"
line 13:       echohl None
line 14:     endif
line 15:     let s = &filetype
line 16:   elseif s == "OFF"
line 17:     let s = ""
line 18:   endif
line 19: 
line 20:   if s != ""
line 21:     " Load the syntax file(s).  When there are several, separated by dots,
line 22:     " load each in sequence.  Skip empty entries.
line 23:     for name in split(s, '\.')
line 24:       if !empty(name)
line 25:         exe "runtime! syntax/" . name . ".vim syntax/" . name . "/*.vim"
line 26:         exe "runtime! syntax/" . name . ".lua syntax/" . name . "/*.lua"
line 27:       endif
line 28:     endfor
line 29:   endif
function <SNR>8_SynSet returning #0

continuing in Syntax Autocommands for "*"

line 41: if !s:did_ft
line 42:   doautoall filetypedetect BufRead
line 43: endif
finished sourcing /usr/local/Cellar/neovim/0.5.0/share/nvim/runtime/syntax/syntax.vim
Searching for "pack/*/start/*" in "/Users/andrewgu/.config/nvim,/etc/xdg/nvim,/Users/andrewgu/.local/share/nvim/site,/usr/local/share/nvim/site,/usr/share/nvim/site,/usr/local/Cellar/neovim/0.5.0/share/nvim/runtime,/usr/local/Cellar/neovim/0.5.0/lib/nvim,/usr/share/nvim/site/after,/usr/local/share/nvim/site/after,/Users/andrewgu/.local/share/nvim/site/after,/etc/xdg/nvim/after,/Users/andrewgu/.config/nvim/after"
Searching for "/Users/andrewgu/.config/nvim/pack/*/start/*"
Searching for "/etc/xdg/nvim/pack/*/start/*"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/*/start/*"
chdir(/Users/andrewgu/.config/nvim)
chdir(/Users/andrewgu/.local/share/nvim/site)
chdir(/Users/andrewgu/.config/nvim)
chdir(/Users/andrewgu/.config/nvim)
chdir(/Users/andrewgu/.config/nvim)
chdir(/Users/andrewgu/.config/nvim)
chdir(/Users/andrewgu/.config/nvim)
chdir(/etc/xdg/nvim)
chdir(/Users/andrewgu/.config/nvim)
chdir(/Users/andrewgu/.config/nvim)
chdir(/Users/andrewgu/.local/share/nvim/site)
chdir(/Users/andrewgu/.config/nvim)
chdir(/Users/andrewgu/.config/nvim)
chdir(/Users/andrewgu/.local/share/nvim/site)
chdir(/Users/andrewgu/.config/nvim)
chdir(/Users/andrewgu/.config/nvim)
chdir(/Users/andrewgu/.config/nvim)
chdir(/Users/andrewgu/.config/nvim)
chdir(/Users/andrewgu/.config/nvim)
chdir(/etc/xdg/nvim)
chdir(/Users/andrewgu/.config/nvim)
chdir(/Users/andrewgu/.config/nvim)
chdir(/Users/andrewgu/.local/share/nvim/site)
chdir(/Users/andrewgu/.config/nvim)
chdir(/Users/andrewgu/.config/nvim)
chdir(/Users/andrewgu/.local/share/nvim/site)
chdir(/Users/andrewgu/.config/nvim)
chdir(/Users/andrewgu/.config/nvim)
chdir(/Users/andrewgu/.config/nvim)
chdir(/Users/andrewgu/.config/nvim)
chdir(/Users/andrewgu/.config/nvim)
chdir(/etc/xdg/nvim)
chdir(/Users/andrewgu/.config/nvim)
chdir(/Users/andrewgu/.config/nvim)
chdir(/Users/andrewgu/.local/share/nvim/site)
chdir(/Users/andrewgu/.config/nvim)
chdir(/Users/andrewgu/.config/nvim)
chdir(/Users/andrewgu/.local/share/nvim/site)
chdir(/Users/andrewgu/.config/nvim)
chdir(/Users/andrewgu/.config/nvim)
chdir(/Users/andrewgu/.config/nvim)
chdir(/Users/andrewgu/.config/nvim)
chdir(/Users/andrewgu/.config/nvim)
chdir(/etc/xdg/nvim)
chdir(/Users/andrewgu/.config/nvim)
chdir(/Users/andrewgu/.config/nvim)
chdir(/Users/andrewgu/.local/share/nvim/site)
chdir(/Users/andrewgu/.config/nvim)
chdir(/Users/andrewgu/.config/nvim)
chdir(/Users/andrewgu/.local/share/nvim/site)
chdir(/Users/andrewgu/.config/nvim)
chdir(/Users/andrewgu/.config/nvim)
chdir(/Users/andrewgu/.config/nvim)
chdir(/Users/andrewgu/.config/nvim)
chdir(/Users/andrewgu/.config/nvim)
chdir(/etc/xdg/nvim)
chdir(/Users/andrewgu/.config/nvim)
chdir(/Users/andrewgu/.config/nvim)
chdir(/Users/andrewgu/.local/share/nvim/site)
chdir(/Users/andrewgu/.config/nvim)
chdir(/Users/andrewgu/.config/nvim)
chdir(/Users/andrewgu/.local/share/nvim/site)
chdir(/Users/andrewgu/.config/nvim)
chdir(/Users/andrewgu/.config/nvim)
chdir(/Users/andrewgu/.config/nvim)
chdir(/Users/andrewgu/.config/nvim)
chdir(/Users/andrewgu/.config/nvim)
chdir(/etc/xdg/nvim)
chdir(/Users/andrewgu/.config/nvim)
chdir(/Users/andrewgu/.config/nvim)
chdir(/Users/andrewgu/.local/share/nvim/site)
chdir(/Users/andrewgu/.config/nvim)
chdir(/Users/andrewgu/.config/nvim)
chdir(/Users/andrewgu/.local/share/nvim/site)
chdir(/Users/andrewgu/.config/nvim)
chdir(/Users/andrewgu/.config/nvim)
chdir(/Users/andrewgu/.config/nvim)
chdir(/Users/andrewgu/.config/nvim)
chdir(/Users/andrewgu/.config/nvim)
chdir(/etc/xdg/nvim)
chdir(/Users/andrewgu/.config/nvim)
chdir(/Users/andrewgu/.config/nvim)
chdir(/Users/andrewgu/.local/share/nvim/site)
chdir(/Users/andrewgu/.config/nvim)
chdir(/Users/andrewgu/.config/nvim)
chdir(/Users/andrewgu/.local/share/nvim/site)
chdir(/Users/andrewgu/.config/nvim)
chdir(/Users/andrewgu/.config/nvim)
chdir(/Users/andrewgu/.config/nvim)
chdir(/Users/andrewgu/.config/nvim)
chdir(/Users/andrewgu/.config/nvim)
chdir(/etc/xdg/nvim)
chdir(/Users/andrewgu/.config/nvim)
chdir(/Users/andrewgu/.config/nvim)
chdir(/Users/andrewgu/.local/share/nvim/site)
chdir(/Users/andrewgu/.config/nvim)
chdir(/Users/andrewgu/.config/nvim)
chdir(/Users/andrewgu/.local/share/nvim/site)
chdir(/Users/andrewgu/.config/nvim)
chdir(/Users/andrewgu/.config/nvim)
chdir(/Users/andrewgu/.config/nvim)
chdir(/Users/andrewgu/.config/nvim)
chdir(/Users/andrewgu/.config/nvim)
chdir(/etc/xdg/nvim)
chdir(/Users/andrewgu/.config/nvim)
chdir(/Users/andrewgu/.config/nvim)
chdir(/Users/andrewgu/.local/share/nvim/site)
chdir(/Users/andrewgu/.config/nvim)
chdir(/Users/andrewgu/.config/nvim)
chdir(/Users/andrewgu/.local/share/nvim/site)
chdir(/Users/andrewgu/.config/nvim)
chdir(/Users/andrewgu/.config/nvim)
chdir(/Users/andrewgu/.config/nvim)
chdir(/Users/andrewgu/.config/nvim)
chdir(/Users/andrewgu/.config/nvim)
chdir(/etc/xdg/nvim)
chdir(/Users/andrewgu/.config/nvim)
chdir(/Users/andrewgu/.config/nvim)
chdir(/Users/andrewgu/.local/share/nvim/site)
chdir(/Users/andrewgu/.config/nvim)
chdir(/Users/andrewgu/.config/nvim)
chdir(/Users/andrewgu/.local/share/nvim/site)
chdir(/Users/andrewgu/.config/nvim)
chdir(/Users/andrewgu/.config/nvim)
chdir(/Users/andrewgu/.config/nvim)
chdir(/Users/andrewgu/.config/nvim)
chdir(/Users/andrewgu/.config/nvim)
chdir(/etc/xdg/nvim)
chdir(/Users/andrewgu/.config/nvim)
chdir(/Users/andrewgu/.config/nvim)
chdir(/Users/andrewgu/.local/share/nvim/site)
chdir(/Users/andrewgu/.config/nvim)
chdir(/Users/andrewgu/.config/nvim)
chdir(/Users/andrewgu/.local/share/nvim/site)
chdir(/Users/andrewgu/.config/nvim)
chdir(/Users/andrewgu/.config/nvim)
chdir(/Users/andrewgu/.config/nvim)
chdir(/Users/andrewgu/.config/nvim)
chdir(/Users/andrewgu/.config/nvim)
chdir(/etc/xdg/nvim)
chdir(/Users/andrewgu/.config/nvim)
chdir(/Users/andrewgu/.config/nvim)
chdir(/Users/andrewgu/.local/share/nvim/site)
chdir(/Users/andrewgu/.config/nvim)
chdir(/Users/andrewgu/.config/nvim)
chdir(/Users/andrewgu/.local/share/nvim/site)
chdir(/Users/andrewgu/.config/nvim)
chdir(/Users/andrewgu/.config/nvim)
chdir(/Users/andrewgu/.config/nvim)
chdir(/Users/andrewgu/.config/nvim)
chdir(/Users/andrewgu/.config/nvim)
chdir(/etc/xdg/nvim)
chdir(/Users/andrewgu/.config/nvim)
chdir(/Users/andrewgu/.config/nvim)
chdir(/Users/andrewgu/.local/share/nvim/site)
chdir(/Users/andrewgu/.config/nvim)
chdir(/Users/andrewgu/.config/nvim)
chdir(/Users/andrewgu/.local/share/nvim/site)
chdir(/Users/andrewgu/.config/nvim)
chdir(/Users/andrewgu/.config/nvim)
chdir(/Users/andrewgu/.config/nvim)
chdir(/Users/andrewgu/.config/nvim)
chdir(/Users/andrewgu/.config/nvim)
chdir(/etc/xdg/nvim)
chdir(/Users/andrewgu/.config/nvim)
chdir(/Users/andrewgu/.config/nvim)
chdir(/Users/andrewgu/.local/share/nvim/site)
chdir(/Users/andrewgu/.config/nvim)
chdir(/Users/andrewgu/.config/nvim)
chdir(/Users/andrewgu/.local/share/nvim/site)
chdir(/Users/andrewgu/.config/nvim)
chdir(/Users/andrewgu/.config/nvim)
chdir(/Users/andrewgu/.config/nvim)
chdir(/Users/andrewgu/.config/nvim)
chdir(/Users/andrewgu/.config/nvim)
chdir(/etc/xdg/nvim)
chdir(/Users/andrewgu/.config/nvim)
chdir(/Users/andrewgu/.config/nvim)
chdir(/Users/andrewgu/.local/share/nvim/site)
chdir(/Users/andrewgu/.config/nvim)
chdir(/Users/andrewgu/.config/nvim)
chdir(/Users/andrewgu/.local/share/nvim/site)
chdir(/Users/andrewgu/.config/nvim)
chdir(/Users/andrewgu/.config/nvim)
chdir(/Users/andrewgu/.config/nvim)
chdir(/Users/andrewgu/.config/nvim)
chdir(/Users/andrewgu/.config/nvim)
chdir(/etc/xdg/nvim)
chdir(/Users/andrewgu/.config/nvim)
chdir(/Users/andrewgu/.config/nvim)
chdir(/Users/andrewgu/.local/share/nvim/site)
chdir(/Users/andrewgu/.config/nvim)
Searching for "/usr/local/share/nvim/site/pack/*/start/*"
Searching for "/usr/share/nvim/site/pack/*/start/*"
Searching for "/usr/local/Cellar/neovim/0.5.0/share/nvim/runtime/pack/*/start/*"
Searching for "/usr/local/Cellar/neovim/0.5.0/lib/nvim/pack/*/start/*"
Searching for "/usr/share/nvim/site/after/pack/*/start/*"
Searching for "/usr/local/share/nvim/site/after/pack/*/start/*"
Searching for "/Users/andrewgu/.local/share/nvim/site/after/pack/*/start/*"
Searching for "/etc/xdg/nvim/after/pack/*/start/*"
Searching for "/Users/andrewgu/.config/nvim/after/pack/*/start/*"
Searching for "start/*" in "/Users/andrewgu/.config/nvim,/etc/xdg/nvim,/Users/andrewgu/.local/share/nvim/site,/usr/local/share/nvim/site,/usr/share/nvim/site,/usr/local/Cellar/neovim/0.5.0/share/nvim/runtime,/usr/local/Cellar/neovim/0.5.0/lib/nvim,/usr/share/nvim/site/after,/usr/local/share/nvim/site/after,/Users/andrewgu/.local/share/nvim/site/after,/etc/xdg/nvim/after,/Users/andrewgu/.config/nvim/after"
Searching for "/Users/andrewgu/.config/nvim/start/*"
Searching for "/etc/xdg/nvim/start/*"
Searching for "/Users/andrewgu/.local/share/nvim/site/start/*"
Searching for "/usr/local/share/nvim/site/start/*"
Searching for "/usr/share/nvim/site/start/*"
Searching for "/usr/local/Cellar/neovim/0.5.0/share/nvim/runtime/start/*"
Searching for "/usr/local/Cellar/neovim/0.5.0/lib/nvim/start/*"
Searching for "/usr/share/nvim/site/after/start/*"
Searching for "/usr/local/share/nvim/site/after/start/*"
Searching for "/Users/andrewgu/.local/share/nvim/site/after/start/*"
Searching for "/etc/xdg/nvim/after/start/*"
Searching for "/Users/andrewgu/.config/nvim/after/start/*"
not found in 'packpath': "start/*"
Searching for "plugin/**/*.vim" in "/Users/andrewgu/.config/nvim,/etc/xdg/nvim,/Users/andrewgu/.local/share/nvim/site,/usr/local/share/nvim/site,/usr/share/nvim/site,/usr/local/Cellar/neovim/0.5.0/share/nvim/runtime,/usr/local/Cellar/neovim/0.5.0/lib/nvim,/usr/share/nvim/site/after,/usr/local/share/nvim/site/after,/Users/andrewgu/.local/share/nvim/site/after,/etc/xdg/nvim/after,/Users/andrewgu/.config/nvim/after"
Searching for "/Users/andrewgu/.config/nvim/plugin/**/*.vim"
Searching for "/etc/xdg/nvim/plugin/**/*.vim"
Searching for "/Users/andrewgu/.local/share/nvim/site/plugin/**/*.vim"
Searching for "/usr/local/share/nvim/site/plugin/**/*.vim"
Searching for "/usr/share/nvim/site/plugin/**/*.vim"
Searching for "/usr/local/Cellar/neovim/0.5.0/share/nvim/runtime/plugin/**/*.vim"
chdir(/Users/andrewgu/.config/nvim)
chdir(/usr/local/Cellar/neovim/0.5.0/share/nvim/runtime/plugin)
chdir(/Users/andrewgu/.config/nvim)
sourcing "/usr/local/Cellar/neovim/0.5.0/share/nvim/runtime/plugin/gzip.vim"
line 1: " Vim plugin for editing compressed files.
line 2: " Maintainer: Bram Moolenaar <Bram@vim.org>
line 3: " Last Change: 2016 Oct 30
line 4: 
line 5: " Exit quickly when:
line 6: " - this plugin was already loaded
line 7: " - when 'compatible' is set
line 8: " - some autocommands are already taking care of compressed files
line 9: if exists("loaded_gzip") || &cp || exists("#BufReadPre#*.gz")
line 10:   finish
line 11: endif
line 12: let loaded_gzip = 1
line 13: 
line 14: augroup gzip
line 15:   " Remove all gzip autocommands
line 16:   au!
line 17: 
line 18:   " Enable editing of gzipped files.
line 19:   " The functions are defined in autoload/gzip.vim.
line 20:   "
line 21:   " Set binary mode before reading the file.
line 22:   " Use "gzip -d", gunzip isn't always available.
line 23:   autocmd BufReadPre,FileReadPre^I*.gz,*.bz2,*.Z,*.lzma,*.xz,*.lz,*.zst,*.br,*.lzo setlocal bin
line 24:   autocmd BufReadPost,FileReadPost^I*.gz  call gzip#read("gzip -dn")
line 25:   autocmd BufReadPost,FileReadPost^I*.bz2 call gzip#read("bzip2 -d")
line 26:   autocmd BufReadPost,FileReadPost^I*.Z   call gzip#read("uncompress")
line 27:   autocmd BufReadPost,FileReadPost^I*.lzma call gzip#read("lzma -d")
line 28:   autocmd BufReadPost,FileReadPost^I*.xz  call gzip#read("xz -d")
line 29:   autocmd BufReadPost,FileReadPost^I*.lz  call gzip#read("lzip -d")
line 30:   autocmd BufReadPost,FileReadPost^I*.zst call gzip#read("zstd -d --rm")
line 31:   autocmd BufReadPost,FileReadPost^I*.br call gzip#read("brotli -d --rm")
line 32:   autocmd BufReadPost,FileReadPost^I*.lzo call gzip#read("lzop -d -U")
line 33:   autocmd BufWritePost,FileWritePost^I*.gz  call gzip#write("gzip")
line 34:   autocmd BufWritePost,FileWritePost^I*.bz2 call gzip#write("bzip2")
line 35:   autocmd BufWritePost,FileWritePost^I*.Z   call gzip#write("compress -f")
line 36:   autocmd BufWritePost,FileWritePost^I*.lzma call gzip#write("lzma -z")
line 37:   autocmd BufWritePost,FileWritePost^I*.xz  call gzip#write("xz -z")
line 38:   autocmd BufWritePost,FileWritePost^I*.lz  call gzip#write("lzip")
line 39:   autocmd BufWritePost,FileWritePost^I*.zst  call gzip#write("zstd --rm")
line 40:   autocmd BufWritePost,FileWritePost^I*.br  call gzip#write("brotli --rm")
line 41:   autocmd BufWritePost,FileWritePost^I*.lzo  call gzip#write("lzop -U")
line 42:   autocmd FileAppendPre^I^I^I*.gz  call gzip#appre("gzip -dn")
line 43:   autocmd FileAppendPre^I^I^I*.bz2 call gzip#appre("bzip2 -d")
line 44:   autocmd FileAppendPre^I^I^I*.Z   call gzip#appre("uncompress")
line 45:   autocmd FileAppendPre^I^I^I*.lzma call gzip#appre("lzma -d")
line 46:   autocmd FileAppendPre^I^I^I*.xz   call gzip#appre("xz -d")
line 47:   autocmd FileAppendPre^I^I^I*.lz   call gzip#appre("lzip -d")
line 48:   autocmd FileAppendPre^I^I^I*.zst call gzip#appre("zstd -d --rm")
line 49:   autocmd FileAppendPre^I^I^I*.br call gzip#appre("brotli -d --rm")
line 50:   autocmd FileAppendPre^I^I^I*.lzo call gzip#appre("lzop -d -U")
line 51:   autocmd FileAppendPost^I^I*.gz  call gzip#write("gzip")
line 52:   autocmd FileAppendPost^I^I*.bz2 call gzip#write("bzip2")
line 53:   autocmd FileAppendPost^I^I*.Z   call gzip#write("compress -f")
line 54:   autocmd FileAppendPost^I^I*.lzma call gzip#write("lzma -z")
line 55:   autocmd FileAppendPost^I^I*.xz call gzip#write("xz -z")
line 56:   autocmd FileAppendPost^I^I*.lz call gzip#write("lzip")
line 57:   autocmd FileAppendPost^I^I*.zst call gzip#write("zstd --rm")
line 58:   autocmd FileAppendPost^I^I*.br call gzip#write("brotli --rm")
line 59:   autocmd FileAppendPost^I^I*.lzo call gzip#write("lzop -U")
line 60: augroup END
finished sourcing /usr/local/Cellar/neovim/0.5.0/share/nvim/runtime/plugin/gzip.vim
chdir(/Users/andrewgu/.config/nvim)
chdir(/usr/local/Cellar/neovim/0.5.0/share/nvim/runtime/plugin)
chdir(/Users/andrewgu/.config/nvim)
sourcing "/usr/local/Cellar/neovim/0.5.0/share/nvim/runtime/plugin/health.vim"
line 1: autocmd CmdUndefined CheckHealth checkhealth
finished sourcing /usr/local/Cellar/neovim/0.5.0/share/nvim/runtime/plugin/health.vim
chdir(/Users/andrewgu/.config/nvim)
chdir(/usr/local/Cellar/neovim/0.5.0/share/nvim/runtime/plugin)
chdir(/Users/andrewgu/.config/nvim)
sourcing "/usr/local/Cellar/neovim/0.5.0/share/nvim/runtime/plugin/man.vim"
line 1: " Maintainer: Anmol Sethi <hi@nhooyr.io>
line 2: 
line 3: if exists('g:loaded_man')
line 4:   finish
line 5: endif
line 6: let g:loaded_man = 1
line 7: 
line 8: command! -bang -bar -range=-1 -complete=customlist,man#complete -nargs=* Man if <bang>0 | set ft=man | else | call man#open_page(<count>, <q-mods>, <f-args>) | endif
line 11: 
line 12: augroup man
line 13:   autocmd!
line 14:   autocmd BufReadCmd man://* call man#read_page(matchstr(expand('<amatch>'), 'man://\zs.*'))
line 15: augroup END
finished sourcing /usr/local/Cellar/neovim/0.5.0/share/nvim/runtime/plugin/man.vim
chdir(/Users/andrewgu/.config/nvim)
chdir(/usr/local/Cellar/neovim/0.5.0/share/nvim/runtime/plugin)
chdir(/Users/andrewgu/.config/nvim)
sourcing "/usr/local/Cellar/neovim/0.5.0/share/nvim/runtime/plugin/matchit.vim"
line 1: " Nvim: load the matchit plugin by default.
line 2: if !exists("g:loaded_matchit") && stridx(&packpath, $VIMRUNTIME) >= 0
line 3:   packadd matchit
Searching for "pack/*/start/matchit" in "/Users/andrewgu/.config/nvim,/etc/xdg/nvim,/Users/andrewgu/.local/share/nvim/site,/usr/local/share/nvim/site,/usr/share/nvim/site,/usr/local/Cellar/neovim/0.5.0/share/nvim/runtime,/usr/local/Cellar/neovim/0.5.0/lib/nvim,/usr/share/nvim/site/after,/usr/local/share/nvim/site/after,/Users/andrewgu/.local/share/nvim/site/after,/etc/xdg/nvim/after,/Users/andrewgu/.config/nvim/after"
Searching for "/Users/andrewgu/.config/nvim/pack/*/start/matchit"
Searching for "/etc/xdg/nvim/pack/*/start/matchit"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/*/start/matchit"
Searching for "/usr/local/share/nvim/site/pack/*/start/matchit"
Searching for "/usr/share/nvim/site/pack/*/start/matchit"
Searching for "/usr/local/Cellar/neovim/0.5.0/share/nvim/runtime/pack/*/start/matchit"
Searching for "/usr/local/Cellar/neovim/0.5.0/lib/nvim/pack/*/start/matchit"
Searching for "/usr/share/nvim/site/after/pack/*/start/matchit"
Searching for "/usr/local/share/nvim/site/after/pack/*/start/matchit"
Searching for "/Users/andrewgu/.local/share/nvim/site/after/pack/*/start/matchit"
Searching for "/etc/xdg/nvim/after/pack/*/start/matchit"
Searching for "/Users/andrewgu/.config/nvim/after/pack/*/start/matchit"
not found in 'packpath': "pack/*/start/matchit"
Searching for "pack/*/opt/matchit" in "/Users/andrewgu/.config/nvim,/etc/xdg/nvim,/Users/andrewgu/.local/share/nvim/site,/usr/local/share/nvim/site,/usr/share/nvim/site,/usr/local/Cellar/neovim/0.5.0/share/nvim/runtime,/usr/local/Cellar/neovim/0.5.0/lib/nvim,/usr/share/nvim/site/after,/usr/local/share/nvim/site/after,/Users/andrewgu/.local/share/nvim/site/after,/etc/xdg/nvim/after,/Users/andrewgu/.config/nvim/after"
Searching for "/Users/andrewgu/.config/nvim/pack/*/opt/matchit"
Searching for "/etc/xdg/nvim/pack/*/opt/matchit"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/*/opt/matchit"
Searching for "/usr/local/share/nvim/site/pack/*/opt/matchit"
Searching for "/usr/share/nvim/site/pack/*/opt/matchit"
Searching for "/usr/local/Cellar/neovim/0.5.0/share/nvim/runtime/pack/*/opt/matchit"
chdir(/Users/andrewgu/.config/nvim)
chdir(/usr/local/Cellar/neovim/0.5.0/share/nvim/runtime)
chdir(/Users/andrewgu/.config/nvim)
chdir(/Users/andrewgu/.config/nvim)
chdir(/Users/andrewgu/.config/nvim)
chdir(/Users/andrewgu/.config/nvim)
chdir(/Users/andrewgu/.config/nvim)
chdir(/etc/xdg/nvim)
chdir(/Users/andrewgu/.config/nvim)
chdir(/Users/andrewgu/.config/nvim)
chdir(/Users/andrewgu/.local/share/nvim/site)
chdir(/Users/andrewgu/.config/nvim)
chdir(/Users/andrewgu/.config/nvim)
chdir(/Users/andrewgu/.local/share/nvim/site/pack/packer/start/telescope.nvim)
chdir(/Users/andrewgu/.config/nvim)
chdir(/Users/andrewgu/.config/nvim)
chdir(/Users/andrewgu/.local/share/nvim/site/pack/packer/start/popup.nvim)
chdir(/Users/andrewgu/.config/nvim)
chdir(/Users/andrewgu/.config/nvim)
chdir(/Users/andrewgu/.local/share/nvim/site/pack/packer/start/plenary.nvim)
chdir(/Users/andrewgu/.config/nvim)
chdir(/Users/andrewgu/.config/nvim)
chdir(/Users/andrewgu/.local/share/nvim/site/pack/packer/start/packer.nvim)
chdir(/Users/andrewgu/.config/nvim)
chdir(/Users/andrewgu/.config/nvim)
chdir(/Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim)
chdir(/Users/andrewgu/.config/nvim)
chdir(/Users/andrewgu/.config/nvim)
chdir(/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-web-devicons)
chdir(/Users/andrewgu/.config/nvim)
chdir(/Users/andrewgu/.config/nvim)
chdir(/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-tree.lua)
chdir(/Users/andrewgu/.config/nvim)
chdir(/Users/andrewgu/.config/nvim)
chdir(/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-lspconfig)
chdir(/Users/andrewgu/.config/nvim)
chdir(/Users/andrewgu/.config/nvim)
chdir(/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-compe)
chdir(/Users/andrewgu/.config/nvim)
chdir(/Users/andrewgu/.config/nvim)
chdir(/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-base16.lua)
chdir(/Users/andrewgu/.config/nvim)
chdir(/Users/andrewgu/.config/nvim)
chdir(/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-autopairs)
chdir(/Users/andrewgu/.config/nvim)
chdir(/Users/andrewgu/.config/nvim)
chdir(/Users/andrewgu/.local/share/nvim/site/pack/packer/start/neoformat)
chdir(/Users/andrewgu/.config/nvim)
chdir(/Users/andrewgu/.config/nvim)
chdir(/Users/andrewgu/.local/share/nvim/site/pack/packer/start/lualine.nvim)
chdir(/Users/andrewgu/.config/nvim)
chdir(/Users/andrewgu/.config/nvim)
chdir(/Users/andrewgu/.local/share/nvim/site/pack/packer/start/indent-blankline.nvim)
chdir(/Users/andrewgu/.config/nvim)
chdir(/Users/andrewgu/.config/nvim)
chdir(/Users/andrewgu/.local/share/nvim/site/pack/packer/start/gitsigns.nvim)
chdir(/Users/andrewgu/.config/nvim)
chdir(/Users/andrewgu/.config/nvim)
chdir(/Users/andrewgu/.local/share/nvim/site/pack/packer/start/barbar.nvim)
chdir(/Users/andrewgu/.config/nvim)
chdir(/Users/andrewgu/.config/nvim)
chdir(/usr/local/share/nvim/site)
chdir(/Users/andrewgu/.config/nvim)
chdir(/Users/andrewgu/.config/nvim)
chdir(/usr/share/nvim/site)
chdir(/Users/andrewgu/.config/nvim)
chdir(/Users/andrewgu/.config/nvim)
chdir(/usr/local/Cellar/neovim/0.5.0/share/nvim/runtime)
chdir(/Users/andrewgu/.config/nvim)
chdir(/Users/andrewgu/.config/nvim)
chdir(/usr/local/Cellar/neovim/0.5.0/share/nvim/runtime/pack/dist/opt)
chdir(/Users/andrewgu/.config/nvim)
chdir(/Users/andrewgu/.config/nvim)
chdir(/usr/local/Cellar/neovim/0.5.0/share/nvim/runtime/pack/dist/opt/matchit/plugin)
chdir(/Users/andrewgu/.config/nvim)
line 3: sourcing "/usr/local/Cellar/neovim/0.5.0/share/nvim/runtime/pack/dist/opt/matchit/plugin/matchit.vim"
line 1: "  matchit.vim: (global plugin) Extended "%" matching
line 2: "  Maintainer:  Christian Brabandt
line 3: "  Version:     1.17
line 4: "  Last Change: 2019 Oct 24
line 5: "  Repository:  https://github.com/chrisbra/matchit
line 6: "  Previous URL:http://www.vim.org/script.php?script_id=39
line 7: "  Previous Maintainer:  Benji Fisher PhD   <benji@member.AMS.org>
line 8: 
line 9: " Documentation:
line 10: "  The documentation is in a separate file: ../doc/matchit.txt
line 11: 
line 12: " Credits:
line 13: "  Vim editor by Bram Moolenaar (Thanks, Bram!)
line 14: "  Original script and design by Raul Segura Acevedo
line 15: "  Support for comments by Douglas Potts
line 16: "  Support for back references and other improvements by Benji Fisher
line 17: "  Support for many languages by Johannes Zellner
line 18: "  Suggestions for improvement, bug reports, and support for additional
line 19: "  languages by Jordi-Albert Batalla, Neil Bird, Servatius Brandt, Mark
line 20: "  Collett, Stephen Wall, Dany St-Amant, Yuheng Xie, and Johannes Zellner.
line 21: 
line 22: " Debugging:
line 23: "  If you'd like to try the built-in debugging commands...
line 24: "   :MatchDebug      to activate debugging for the current buffer
line 25: "  This saves the values of several key script variables as buffer-local
line 26: "  variables.  See the MatchDebug() function, below, for details.
line 27: 
line 28: " TODO:  I should think about multi-line patterns for b:match_words.
line 29: "   This would require an option:  how many lines to scan (default 1).
line 30: "   This would be useful for Python, maybe also for *ML.
line 31: " TODO:  Maybe I should add a menu so that people will actually use some of
line 32: "   the features that I have implemented.
line 33: " TODO:  Eliminate the MultiMatch function.  Add yet another argument to
line 34: "   Match_wrapper() instead.
line 35: " TODO:  Allow :let b:match_words = '\(\(foo\)\(bar\)\):\3\2:end\1'
line 36: " TODO:  Make backrefs safer by using '\V' (very no-magic).
line 37: " TODO:  Add a level of indirection, so that custom % scripts can use my
line 38: "   work but extend it.
line 39: 
line 40: " Allow user to prevent loading and prevent duplicate loading.
line 41: if exists("g:loaded_matchit") || &cp
line 42:   finish
line 43: endif
line 44: let g:loaded_matchit = 1
line 45: 
line 46: let s:save_cpo = &cpo
line 47: set cpo&vim
line 48: 
line 49: nnoremap <silent> <Plug>(MatchitNormalForward)     :<C-U>call matchit#Match_wrapper('',1,'n')<CR>
line 50: nnoremap <silent> <Plug>(MatchitNormalBackward)    :<C-U>call matchit#Match_wrapper('',0,'n')<CR>
line 51: xnoremap <silent> <Plug>(MatchitVisualForward)     :<C-U>call matchit#Match_wrapper('',1,'v')<CR>m'gv``
line 52: xnoremap <silent> <Plug>(MatchitVisualBackward)    :<C-U>call matchit#Match_wrapper('',0,'v')<CR>m'gv``
line 53: onoremap <silent> <Plug>(MatchitOperationForward)  :<C-U>call matchit#Match_wrapper('',1,'o')<CR>
line 54: onoremap <silent> <Plug>(MatchitOperationBackward) :<C-U>call matchit#Match_wrapper('',0,'o')<CR>
line 55: 
line 56: nmap <silent> %  <Plug>(MatchitNormalForward)
line 57: nmap <silent> g% <Plug>(MatchitNormalBackward)
line 58: xmap <silent> %  <Plug>(MatchitVisualForward)
line 59: xmap <silent> g% <Plug>(MatchitVisualBackward)
line 60: omap <silent> %  <Plug>(MatchitOperationForward)
line 61: omap <silent> g% <Plug>(MatchitOperationBackward)
line 62: 
line 63: " Analogues of [{ and ]} using matching patterns:
line 64: nnoremap <silent> <Plug>(MatchitNormalMultiBackward)    :<C-U>call matchit#MultiMatch("bW", "n")<CR>
line 65: nnoremap <silent> <Plug>(MatchitNormalMultiForward)     :<C-U>call matchit#MultiMatch("W",  "n")<CR>
line 66: xnoremap <silent> <Plug>(MatchitVisualMultiBackward)    :<C-U>call matchit#MultiMatch("bW", "n")<CR>m'gv``
line 67: xnoremap <silent> <Plug>(MatchitVisualMultiForward)     :<C-U>call matchit#MultiMatch("W",  "n")<CR>m'gv``
line 68: onoremap <silent> <Plug>(MatchitOperationMultiBackward) :<C-U>call matchit#MultiMatch("bW", "o")<CR>
line 69: onoremap <silent> <Plug>(MatchitOperationMultiForward)  :<C-U>call matchit#MultiMatch("W",  "o")<CR>
line 70: 
line 71: nmap <silent> [% <Plug>(MatchitNormalMultiBackward)
line 72: nmap <silent> ]% <Plug>(MatchitNormalMultiForward)
line 73: xmap <silent> [% <Plug>(MatchitVisualMultiBackward)
line 74: xmap <silent> ]% <Plug>(MatchitVisualMultiForward)
line 75: omap <silent> [% <Plug>(MatchitOperationMultiBackward)
line 76: omap <silent> ]% <Plug>(MatchitOperationMultiForward)
line 77: 
line 78: " text object:
line 79: xmap <silent> <Plug>(MatchitVisualTextObject) <Plug>(MatchitVisualMultiBackward)o<Plug>(MatchitVisualMultiForward)
line 80: xmap a% <Plug>(MatchitVisualTextObject)
line 81: 
line 82: " Call this function to turn on debugging information.  Every time the main
line 83: " script is run, buffer variables will be saved.  These can be used directly
line 84: " or viewed using the menu items below.
line 85: if !exists(":MatchDebug")
line 86:   command! -nargs=0 MatchDebug call matchit#Match_debug()
line 87: endif
line 88: 
line 89: let &cpo = s:save_cpo
line 90: unlet s:save_cpo
line 91: 
line 92: " vim:sts=2:sw=2:et:
finished sourcing /usr/local/Cellar/neovim/0.5.0/share/nvim/runtime/pack/dist/opt/matchit/plugin/matchit.vim
continuing in /usr/local/Cellar/neovim/0.5.0/share/nvim/runtime/plugin/matchit.vim
line 3: augroup filetypedetect
line 3: augroup END
Searching for "/usr/local/Cellar/neovim/0.5.0/lib/nvim/pack/*/opt/matchit"
Searching for "/usr/share/nvim/site/after/pack/*/opt/matchit"
Searching for "/usr/local/share/nvim/site/after/pack/*/opt/matchit"
Searching for "/Users/andrewgu/.local/share/nvim/site/after/pack/*/opt/matchit"
Searching for "/etc/xdg/nvim/after/pack/*/opt/matchit"
Searching for "/Users/andrewgu/.config/nvim/after/pack/*/opt/matchit"
line 4: endif
finished sourcing /usr/local/Cellar/neovim/0.5.0/share/nvim/runtime/plugin/matchit.vim
chdir(/Users/andrewgu/.config/nvim)
chdir(/usr/local/Cellar/neovim/0.5.0/share/nvim/runtime/plugin)
chdir(/Users/andrewgu/.config/nvim)
sourcing "/usr/local/Cellar/neovim/0.5.0/share/nvim/runtime/plugin/matchparen.vim"
line 1: " Vim plugin for showing matching parens
line 2: " Maintainer:  Bram Moolenaar <Bram@vim.org>
line 3: " Last Change: 2021 Apr 08
line 4: 
line 5: " Exit quickly when:
line 6: " - this plugin was already loaded (or disabled)
line 7: " - when 'compatible' is set
line 8: " - the "CursorMoved" autocmd event is not available.
line 9: if exists("g:loaded_matchparen") || &cp || !exists("##CursorMoved")
line 10:   finish
line 11: endif
line 12: let g:loaded_matchparen = 1
line 13: 
line 14: if !exists("g:matchparen_timeout")
line 15:   let g:matchparen_timeout = 300
line 16: endif
line 17: if !exists("g:matchparen_insert_timeout")
line 18:   let g:matchparen_insert_timeout = 60
line 19: endif
line 20: 
line 21: augroup matchparen
line 22:   " Replace all matchparen autocommands
line 23:   autocmd! CursorMoved,CursorMovedI,WinEnter * call s:Highlight_Matching_Pair()
line 24:   autocmd! WinLeave * call s:Remove_Matches()
line 25:   if exists('##TextChanged')
line 26:     autocmd! TextChanged,TextChangedI * call s:Highlight_Matching_Pair()
line 27:   endif
line 28: augroup END
line 29: 
line 30: " Skip the rest if it was already done.
line 31: if exists("*s:Highlight_Matching_Pair")
line 32:   finish
line 33: endif
line 34: 
line 35: let s:cpo_save = &cpo
line 36: set cpo-=C
line 37: 
line 38: " The function that is invoked (very often) to define a ":match" highlighting
line 39: " for any matching paren.
line 40: func s:Highlight_Matching_Pair()
line 196: 
line 197: func s:Remove_Matches()
line 203: 
line 204: 
line 205: " Define commands that will disable and enable the plugin.
line 206: command DoMatchParen call s:DoMatchParen()
line 207: command NoMatchParen call s:NoMatchParen()
line 208: 
line 209: func s:NoMatchParen()
line 216: 
line 217: func s:DoMatchParen()
line 223: 
line 224: let &cpo = s:cpo_save
line 225: unlet s:cpo_save
finished sourcing /usr/local/Cellar/neovim/0.5.0/share/nvim/runtime/plugin/matchparen.vim
chdir(/Users/andrewgu/.config/nvim)
chdir(/usr/local/Cellar/neovim/0.5.0/share/nvim/runtime/plugin)
chdir(/Users/andrewgu/.config/nvim)
sourcing "/usr/local/Cellar/neovim/0.5.0/share/nvim/runtime/plugin/netrwPlugin.vim"
line 1: " netrwPlugin.vim: Handles file transfer and remote directory listing across a network
line 2: "            PLUGIN SECTION
line 3: " Date:^I^IFeb 08, 2016 - Jan 07, 2020
line 4: " Maintainer:^ICharles E Campbell <NcampObell@SdrPchip.AorgM-NOSPAM>
line 5: " GetLatestVimScripts: 1075 1 :AutoInstall: netrw.vim
line 6: " Copyright:    Copyright (C) 1999-2013 Charles E. Campbell {{{1
line 7: "               Permission is hereby granted to use and distribute this code,
line 8: "               with or without modifications, provided that this copyright
line 9: "               notice is copied with it. Like anything else that's free,
line 10: "               netrw.vim, netrwPlugin.vim, and netrwSettings.vim are provided
line 11: "               *as is* and comes with no warranty of any kind, either
line 12: "               expressed or implied. By using this plugin, you agree that
line 13: "               in no event will the copyright holder be liable for any damages
line 14: "               resulting from the use of this software.
line 15: "
line 16: "  But be doers of the Word, and not only hearers, deluding your own selves {{{1
line 17: "  (James 1:22 RSV)
line 18: " =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
line 19: " Load Once: {{{1
line 20: if &cp || exists("g:loaded_netrwPlugin")
line 21:  finish
line 22: endif
line 23: let g:loaded_netrwPlugin = "v170"
line 24: let s:keepcpo = &cpo
line 25: set cpo&vim
line 26: "DechoRemOn
line 27: 
line 28: " ---------------------------------------------------------------------
line 29: " Public Interface: {{{1
line 30: 
line 31: " Local Browsing Autocmds: {{{2
line 32: augroup FileExplorer
line 33:  au!
line 34:  au BufLeave *  if &ft != "netrw"|let w:netrw_prvfile= expand("%:p")|endif
line 35:  au BufEnter *^Isil call s:LocalBrowse(expand("<amatch>"))
line 36:  au VimEnter *^Isil call s:VimEnter(expand("<amatch>"))
line 37:  if has("win32") || has("win95") || has("win64") || has("win16")
line 38:   au BufEnter .* sil call s:LocalBrowse(expand("<amatch>"))
line 39:  endif
line 40: augroup END
line 41: 
line 42: " Network Browsing Reading Writing: {{{2
line 43: augroup Network
line 44:  au!
line 45:  au BufReadCmd   file://*^I^I^I^I^I^I^I^I^I^I^Icall netrw#FileUrlEdit(expand("<amatch>"))
line 46:  au BufReadCmd   ftp://*,rcp://*,scp://*,http://*,https://*,dav://*,davs://*,rsync://*,sftp://*^Iexe "sil doau BufReadPre ".fnameescape(expand("<amatch>"))|call netrw#Nread(2,expand("<amatch>"))|exe "sil doau BufReadPost ".fnameescape(expand("<amatch>"))
line 47:  au FileReadCmd  ftp://*,rcp://*,scp://*,http://*,file://*,https://*,dav://*,davs://*,rsync://*,sftp://*^Iexe "sil doau FileReadPre ".fnameescape(expand("<amatch>"))|call netrw#Nread(1,expand("<amatch>"))|exe "sil doau FileReadPost ".fnameescape(expand("<amatch>"))
line 48:  au BufWriteCmd  ftp://*,rcp://*,scp://*,http://*,file://*,dav://*,davs://*,rsync://*,sftp://*^I^I^Iexe "sil doau BufWritePre ".fnameescape(expand("<amatch>"))|exe 'Nwrite '.fnameescape(expand("<amatch>"))|exe "sil doau BufWritePost ".fnameescape(expand("<amatch>"))
line 49:  au FileWriteCmd ftp://*,rcp://*,scp://*,http://*,file://*,dav://*,davs://*,rsync://*,sftp://*^I^I^Iexe "sil doau FileWritePre ".fnameescape(expand("<amatch>"))|exe "'[,']".'Nwrite '.fnameescape(expand("<amatch>"))|exe "sil doau FileWritePost ".fnameescape(expand("<amatch>"))
line 50:  try
line 51:   au SourceCmd   ftp://*,rcp://*,scp://*,http://*,file://*,https://*,dav://*,davs://*,rsync://*,sftp://*^Iexe 'Nsource '.fnameescape(expand("<amatch>"))
line 52:  catch /^Vim\%((\a\+)\)\=:E216/
line 53:   au SourcePre   ftp://*,rcp://*,scp://*,http://*,file://*,https://*,dav://*,davs://*,rsync://*,sftp://*^Iexe 'Nsource '.fnameescape(expand("<amatch>"))
line 54:  endtry
line 55: augroup END
line 56: 
line 57: " Commands: :Nread, :Nwrite, :NetUserPass {{{2
line 58: com! -count=1 -nargs=*^INread^I^Ilet s:svpos= winsaveview()<bar>call netrw#NetRead(<count>,<f-args>)<bar>call winrestview(s:svpos)
line 59: com! -range=% -nargs=*^INwrite^I^Ilet s:svpos= winsaveview()<bar><line1>,<line2>call netrw#NetWrite(<f-args>)<bar>call winrestview(s:svpos)
line 60: com! -nargs=*^I^INetUserPass^Icall NetUserPass(<f-args>)
line 61: com! -nargs=*^I        Nsource^I^Ilet s:svpos= winsaveview()<bar>call netrw#NetSource(<f-args>)<bar>call winrestview(s:svpos)
line 62: com! -nargs=?^I^INtree^I^Icall netrw#SetTreetop(1,<q-args>)
line 63: 
line 64: " Commands: :Explore, :Sexplore, Hexplore, Vexplore, Lexplore {{{2
line 65: com! -nargs=* -bar -bang -count=0 -complete=dir^IExplore^I^Icall netrw#Explore(<count>,0,0+<bang>0,<q-args>)
line 66: com! -nargs=* -bar -bang -count=0 -complete=dir^ISexplore^Icall netrw#Explore(<count>,1,0+<bang>0,<q-args>)
line 67: com! -nargs=* -bar -bang -count=0 -complete=dir^IHexplore^Icall netrw#Explore(<count>,1,2+<bang>0,<q-args>)
line 68: com! -nargs=* -bar -bang -count=0 -complete=dir^IVexplore^Icall netrw#Explore(<count>,1,4+<bang>0,<q-args>)
line 69: com! -nargs=* -bar       -count=0 -complete=dir^ITexplore^Icall netrw#Explore(<count>,0,6        ,<q-args>)
line 70: com! -nargs=* -bar -bang^I^I^INexplore^Icall netrw#Explore(-1,0,0,<q-args>)
line 71: com! -nargs=* -bar -bang^I^I^IPexplore^Icall netrw#Explore(-2,0,0,<q-args>)
line 72: com! -nargs=* -bar -bang -count=0 -complete=dir Lexplore^Icall netrw#Lexplore(<count>,<bang>0,<q-args>)
line 73: 
line 74: " Commands: NetrwSettings {{{2
line 75: com! -nargs=0^INetrwSettings^Icall netrwSettings#NetrwSettings()
line 76: com! -bang^INetrwClean^Icall netrw#Clean(<bang>0)
line 77: 
line 78: " Maps:
line 79: if !exists("g:netrw_nogx")
line 80:  if maparg('gx','n') == ""
line 81:   if !hasmapto('<Plug>NetrwBrowseX')
line 82:    nmap <unique> gx <Plug>NetrwBrowseX
line 83:   endif
line 84:   nno <silent> <Plug>NetrwBrowseX :call netrw#BrowseX(netrw#GX(),netrw#CheckIfRemote(netrw#GX()))<cr>
line 85:  endif
line 86:  if maparg('gx','v') == ""
line 87:   if !hasmapto('<Plug>NetrwBrowseXVis')
line 88:    vmap <unique> gx <Plug>NetrwBrowseXVis
line 89:   endif
line 90:   vno <silent> <Plug>NetrwBrowseXVis :<c-u>call netrw#BrowseXVis()<cr>
line 91:  endif
line 92: endif
line 93: if exists("g:netrw_usetab") && g:netrw_usetab
line 94:  if maparg('<c-tab>','n') == ""
line 95:   nmap <unique> <c-tab> <Plug>NetrwShrink
line 96:  endif
line 97:  nno <silent> <Plug>NetrwShrink :call netrw#Shrink()<cr>
line 98: endif
line 99: 
line 100: " ---------------------------------------------------------------------
line 101: " LocalBrowse: invokes netrw#LocalBrowseCheck() on directory buffers {{{2
line 102: fun! s:LocalBrowse(dirname)
line 144: 
line 145: " ---------------------------------------------------------------------
line 146: " s:VimEnter: after all vim startup stuff is done, this function is called. {{{2
line 147: "             Its purpose: to look over all windows and run s:LocalBrowse() on
line 148: "             them, which checks if they're directories and will create a directory
line 149: "             listing when appropriate.
line 150: "             It also sets s:vimentered, letting s:LocalBrowse() know that s:VimEnter()
line 151: "             has already been called.
line 152: fun! s:VimEnter(dirname)
line 160: 
line 161: " ---------------------------------------------------------------------
line 162: " NetrwStatusLine: {{{1
line 163: fun! NetrwStatusLine()
line 174: 
line 175: " ------------------------------------------------------------------------
line 176: " NetUserPass: set username and password for subsequent ftp transfer {{{1
line 177: "   Usage:  :call NetUserPass()^I^I^I-- will prompt for userid and password
line 178: "^I    :call NetUserPass("uid")^I^I-- will prompt for password
line 179: "^I    :call NetUserPass("uid","password") -- sets global userid and password
line 180: fun! NetUserPass(...)
line 204: 
line 205: " ------------------------------------------------------------------------
line 206: " Modelines And Restoration: {{{1
line 207: let &cpo= s:keepcpo
line 208: unlet s:keepcpo
line 209: " vim:ts=8 fdm=marker
finished sourcing /usr/local/Cellar/neovim/0.5.0/share/nvim/runtime/plugin/netrwPlugin.vim
chdir(/Users/andrewgu/.config/nvim)
chdir(/usr/local/Cellar/neovim/0.5.0/share/nvim/runtime/plugin)
chdir(/Users/andrewgu/.config/nvim)
sourcing "/usr/local/Cellar/neovim/0.5.0/share/nvim/runtime/plugin/rplugin.vim"
line 1: if exists('g:loaded_remote_plugins')
line 2:   finish
line 3: endif
line 4: let g:loaded_remote_plugins = '/path/to/manifest'
line 5: 
line 6: " Get the path to the rplugin manifest file.
line 7: function! s:GetManifestPath() abort
line 24: 
line 25: " Old manifest file based on known script locations.
line 26: function! s:GetOldManifestPaths() abort
line 41: 
line 42: function! s:GetManifest() abort
line 55: 
line 56: function! s:LoadRemotePlugins() abort
line 62: 
line 63: command! -bar UpdateRemotePlugins call remote#host#UpdateRemotePlugins()
line 64: 
line 65: call s:LoadRemotePlugins()
calling function <SNR>17_LoadRemotePlugins()

line 1:   let g:loaded_remote_plugins = s:GetManifest()
calling function <SNR>17_LoadRemotePlugins[1]..<SNR>17_GetManifest()

line 1:   let manifest = s:GetManifestPath()
calling function <SNR>17_LoadRemotePlugins[1]..<SNR>17_GetManifest[1]..<SNR>17_GetManifestPath()

line 1:   let manifest_base = ''
line 2: 
line 3:   if exists('$NVIM_RPLUGIN_MANIFEST')
line 4:     return fnamemodify($NVIM_RPLUGIN_MANIFEST, ':p')
line 5:   endif
line 6: 
line 7:   let dest = stdpath('data')
line 8:   if !empty(dest)
line 9:     if !isdirectory(dest)
line 10:       call mkdir(dest, 'p', 0700)
line 11:     endif
line 12:     let manifest_base = dest
line 13:   endif
line 14: 
line 15:   return manifest_base.'/rplugin.vim'
function <SNR>17_LoadRemotePlugins[1]..<SNR>17_GetManifest[1]..<SNR>17_GetManifestPath returning '/Users/andrewgu/.local/share/nvim/rplugin.vim'

continuing in function <SNR>17_LoadRemotePlugins[1]..<SNR>17_GetManifest

line 2:   if !filereadable(manifest)
line 3:     " Check if an old manifest file exists and move it to the new location.
line 4:     for old_manifest in s:GetOldManifestPaths()
line 5:       if filereadable(old_manifest)
line 6:         call rename(old_manifest, manifest)
line 7:         break
line 8:       endif
line 9:     endfor
line 10:   endif
line 11:   return manifest
function <SNR>17_LoadRemotePlugins[1]..<SNR>17_GetManifest returning '/Users/andrewgu/.local/share/nvim/rplugin.vim'

continuing in function <SNR>17_LoadRemotePlugins

line 2:   if filereadable(g:loaded_remote_plugins)
line 3:     execute 'source' fnameescape(g:loaded_remote_plugins)
line 3: source /Users/andrewgu/.local/share/nvim/rplugin.vim
chdir(/Users/andrewgu/.config/nvim)
chdir(/Users/andrewgu/.local/share/nvim)
chdir(/Users/andrewgu/.config/nvim)
line 3: sourcing "/Users/andrewgu/.local/share/nvim/rplugin.vim"
line 1: " perl plugins
line 2: 
line 3: 
line 4: " node plugins
line 5: 
line 6: 
line 7: " python3 plugins
line 8: 
line 9: 
line 10: " ruby plugins
line 11: 
line 12: 
line 13: " python plugins
line 14: 
line 15: 
finished sourcing /Users/andrewgu/.local/share/nvim/rplugin.vim
continuing in function <SNR>17_LoadRemotePlugins
line 4:   endif
function <SNR>17_LoadRemotePlugins returning #0

continuing in /usr/local/Cellar/neovim/0.5.0/share/nvim/runtime/plugin/rplugin.vim

finished sourcing /usr/local/Cellar/neovim/0.5.0/share/nvim/runtime/plugin/rplugin.vim
chdir(/Users/andrewgu/.config/nvim)
chdir(/usr/local/Cellar/neovim/0.5.0/share/nvim/runtime/plugin)
chdir(/Users/andrewgu/.config/nvim)
sourcing "/usr/local/Cellar/neovim/0.5.0/share/nvim/runtime/plugin/shada.vim"
line 1: if exists('g:loaded_shada_plugin')
line 2:   finish
line 3: endif
line 4: let g:loaded_shada_plugin = 1
line 5: 
line 6: augroup ShaDaCommands
line 7:   autocmd!
line 8:   autocmd BufReadCmd *.shada,*.shada.tmp.[a-z] :if !empty(v:cmdarg)|throw '++opt not supported'|endif |call setline('.', shada#get_strings(readfile(expand('<afile>'),'b'))) |setlocal filetype=shada
line 12:   autocmd FileReadCmd *.shada,*.shada.tmp.[a-z] :if !empty(v:cmdarg)|throw '++opt not supported'|endif |call append("'[", shada#get_strings(readfile(expand('<afile>'), 'b')))
line 15:   autocmd BufWriteCmd *.shada,*.shada.tmp.[a-z] :if !empty(v:cmdarg)|throw '++opt not supported'|endif |if writefile(shada#get_binstrings(getline(1, '$')),expand('<afile>'), 'b') == 0 |  let &l:modified = (expand('<afile>') is# bufname(+expand('<abuf>'))? 0: stridx(&cpoptions, '+') != -1) |endif
line 23:   autocmd FileWriteCmd *.shada,*.shada.tmp.[a-z] :if !empty(v:cmdarg)|throw '++opt not supported'|endif |call writefile(shada#get_binstrings(getline(min([line("'["), line("']")]),max([line("'["), line("']")]))),expand('<afile>'),'b')
line 30:   autocmd FileAppendCmd *.shada,*.shada.tmp.[a-z] :if !empty(v:cmdarg)|throw '++opt not supported'|endif |call writefile(shada#get_binstrings(getline(min([line("'["), line("']")]),max([line("'["), line("']")]))),expand('<afile>'),'ab')
line 37:   autocmd SourceCmd *.shada,*.shada.tmp.[a-z] :execute 'rshada' fnameescape(expand('<afile>'))
line 39: augroup END
finished sourcing /usr/local/Cellar/neovim/0.5.0/share/nvim/runtime/plugin/shada.vim
chdir(/Users/andrewgu/.config/nvim)
chdir(/usr/local/Cellar/neovim/0.5.0/share/nvim/runtime/plugin)
chdir(/Users/andrewgu/.config/nvim)
sourcing "/usr/local/Cellar/neovim/0.5.0/share/nvim/runtime/plugin/spellfile.vim"
line 1: " Vim plugin for downloading spell files
line 2: 
line 3: if exists("loaded_spellfile_plugin") || &cp || exists("#SpellFileMissing")
line 4:   finish
line 5: endif
line 6: let loaded_spellfile_plugin = 1
line 7: 
line 8: autocmd SpellFileMissing * call spellfile#LoadFile(expand('<amatch>'))
finished sourcing /usr/local/Cellar/neovim/0.5.0/share/nvim/runtime/plugin/spellfile.vim
chdir(/Users/andrewgu/.config/nvim)
chdir(/usr/local/Cellar/neovim/0.5.0/share/nvim/runtime/plugin)
chdir(/Users/andrewgu/.config/nvim)
sourcing "/usr/local/Cellar/neovim/0.5.0/share/nvim/runtime/plugin/tarPlugin.vim"
line 1: " tarPlugin.vim -- a Vim plugin for browsing tarfiles
line 2: " Original was copyright (c) 2002, Michael C. Toren <mct@toren.net>
line 3: " Modified by Charles E. Campbell
line 4: " Distributed under the GNU General Public License.
line 5: "
line 6: " Updates are available from <http://michael.toren.net/code/>.  If you
line 7: " find this script useful, or have suggestions for improvements, please
line 8: " let me know.
line 9: " Also look there for further comments and documentation.
line 10: "
line 11: " This part only sets the autocommands.  The functions are in autoload/tar.vim.
line 12: " ---------------------------------------------------------------------
line 13: "  Load Once: {{{1
line 14: if &cp || exists("g:loaded_tarPlugin")
line 15:  finish
line 16: endif
line 17: let g:loaded_tarPlugin = "v32"
line 18: let s:keepcpo          = &cpo
line 19: set cpo&vim
line 20: 
line 21: " ---------------------------------------------------------------------
line 22: "  Public Interface: {{{1
line 23: augroup tar
line 24:   au!
line 25:   au BufReadCmd   tarfile::*^Icall tar#Read(expand("<amatch>"), 1)
line 26:   au FileReadCmd  tarfile::*^Icall tar#Read(expand("<amatch>"), 0)
line 27:   au BufWriteCmd  tarfile::*^Icall tar#Write(expand("<amatch>"))
line 28:   au FileWriteCmd tarfile::*^Icall tar#Write(expand("<amatch>"))
line 29: 
line 30:   if has("unix")
line 31:    au BufReadCmd   tarfile::*/*^Icall tar#Read(expand("<amatch>"), 1)
line 32:    au FileReadCmd  tarfile::*/*^Icall tar#Read(expand("<amatch>"), 0)
line 33:    au BufWriteCmd  tarfile::*/*^Icall tar#Write(expand("<amatch>"))
line 34:    au FileWriteCmd tarfile::*/*^Icall tar#Write(expand("<amatch>"))
line 35:   endif
line 36: 
line 37:   au BufReadCmd   *.tar.gz^I^Icall tar#Browse(expand("<amatch>"))
line 38:   au BufReadCmd   *.tar^I^I^Icall tar#Browse(expand("<amatch>"))
line 39:   au BufReadCmd   *.lrp^I^I^Icall tar#Browse(expand("<amatch>"))
line 40:   au BufReadCmd   *.tar.bz2^I^Icall tar#Browse(expand("<amatch>"))
line 41:   au BufReadCmd   *.tar.Z^I^Icall tar#Browse(expand("<amatch>"))
line 42:   au BufReadCmd   *.tbz^I^I^Icall tar#Browse(expand("<amatch>"))
line 43:   au BufReadCmd   *.tgz^I^I^Icall tar#Browse(expand("<amatch>"))
line 44:   au BufReadCmd   *.tar.lzma^Icall tar#Browse(expand("<amatch>"))
line 45:   au BufReadCmd   *.tar.xz^I^Icall tar#Browse(expand("<amatch>"))
line 46:   au BufReadCmd   *.txz^I^I^Icall tar#Browse(expand("<amatch>"))
line 47:   au BufReadCmd   *.tar.zst^I^Icall tar#Browse(expand("<amatch>"))
line 48:   au BufReadCmd   *.tzs^I^I^Icall tar#Browse(expand("<amatch>"))
line 49: augroup END
line 50: com! -nargs=? -complete=file Vimuntar call tar#Vimuntar(<q-args>)
line 51: 
line 52: " ---------------------------------------------------------------------
line 53: " Restoration And Modelines: {{{1
line 54: " vim: fdm=marker
line 55: let &cpo= s:keepcpo
line 56: unlet s:keepcpo
finished sourcing /usr/local/Cellar/neovim/0.5.0/share/nvim/runtime/plugin/tarPlugin.vim
chdir(/Users/andrewgu/.config/nvim)
chdir(/usr/local/Cellar/neovim/0.5.0/share/nvim/runtime/plugin)
chdir(/Users/andrewgu/.config/nvim)
sourcing "/usr/local/Cellar/neovim/0.5.0/share/nvim/runtime/plugin/tohtml.vim"
line 1: " Vim plugin for converting a syntax highlighted file to HTML.
line 2: " Maintainer: Ben Fritz <fritzophrenic@gmail.com>
line 3: " Last Change: 2019 Nov 13
line 4: "
line 5: " The core of the code is in $VIMRUNTIME/autoload/tohtml.vim and
line 6: " $VIMRUNTIME/syntax/2html.vim
line 7: "
line 8: if exists('g:loaded_2html_plugin')
line 9:   finish
line 10: endif
line 11: let g:loaded_2html_plugin = 'vim8.1_v2'
line 12: 
line 13: "
line 14: " Changelog: {{{
line 15: "   8.1_v2  (this version): - Fix Bitbucket issue #19: fix calculation of tab
line 16: "                             stop position to use in expanding a tab, when that
line 17: "                             tab occurs after a syntax match which in turn
line 18: "                             comes after previously expanded tabs.
line 19: "                           - Set eventignore while splitting a window for the
line 20: "                             destination file to ignore FileType events;
line 21: "                             speeds up processing when the destination file
line 22: "                             already exists and HTML highlight takes too long.
line 23: "                           - Fix Bitbucket issue #20: progress bar could not be
line 24: "                             seen when DiffDelete background color matched
line 25: "                             StatusLine background color. Added TOhtmlProgress
line 26: "                             highlight group for manual user override, but
line 27: "                             calculate it to be visible compared to StatusLine
line 28: "                             by default.
line 29: "                           - Fix Bitbucket issue #1: Remove workaround for old
line 30: "                             browsers which don't support 'ch' CSS unit, since
line 31: "                             all modern browsers, including IE>=9, support it.
line 32: "                           - Fix Bitbucket issue #10: support termguicolors
line 33: "                           - Fix Bitbucket issue #21: default to using
line 34: "                             generated content instead of <input> tags for
line 35: "                             uncopyable text, so that text is correctly
line 36: "                             prevented from being copied in chrome. Use
line 37: "                             g:html_use_input_for_pc option to control the
line 38: "                             method used.
line 39: "                           - Switch to HTML5 to allow using vnu as a validator
line 40: "                             in unit test.
line 41: "                           - Fix fallback sizing of <input> tags for browsers
line 42: "                             without "ch" support.
line 43: "                           - Fix cursor on unselectable diff filler text.
line 44: "   8.1_v1  (Vim 8.1.0528): - Fix Bitbucket issue #6: Don't generate empty
line 45: "                             script tag.
line 46: "                           - Fix Bitbucket issue #5: javascript should
line 47: "                             declare variables with "var".
line 48: "                           - Fix Bitbucket issue #13: errors thrown sourcing
line 49: "                             2html.vim directly when plugins not loaded.
line 50: "                           - Fix Bitbucket issue #16: support 'vartabstop'.
line 51: "
line 52: "   7.4 updates: {{{
line 53: "   7.4_v2  (Vim 7.4.0899): Fix error raised when converting a diff containing
line 54: "                           an empty buffer. Jan Stocker: allow g:html_font to
line 55: "                           take a list so it is easier to specfiy fallback
line 56: "                           fonts in the generated CSS.
line 57: "   7.4_v1  (Vim 7.4.0000): Fix modeline mangling for new "Vim:" format, and
line 58: "^I^I^I    also for version-specific modelines like "vim>703:".
line 59: "}}}
line 60: "
line 61: "   7.3 updates: {{{
line 62: "   7.3_v14 (Vim 7.3.1246): Allow suppressing line number anchors using
line 63: "^I^I^I    g:html_line_ids=0. Allow customizing
line 64: "^I^I^I    important IDs (like line IDs and fold IDs) using
line 65: "^I^I^I    g:html_id_expr evalutated when the buffer conversion
line 66: "^I^I^I    is started.
line 67: "   7.3_v13 (Vim 7.3.1088): Keep foldmethod at manual in the generated file and
line 68: "^I^I^I    insert modeline to set it to manual.
line 69: "^I^I^I    Fix bug: diff mode with 2 unsaved buffers creates a
line 70: "^I^I^I    duplicate of one buffer instead of including both.
line 71: "^I^I^I    Add anchors to each line so you can put '#L123'
line 72: "^I^I^I    or '#123' at the end of the URL to jump to line 123
line 73: "^I^I^I    (idea by Andy Spencer). Add javascript to open folds
line 74: "^I^I^I    to show the anchor being jumped to if it is hidden.
line 75: "^I^I^I    Fix XML validation error: &nsbp; not part of XML.
line 76: "^I^I^I    Allow TOhtml to chain together with other commands
line 77: "^I^I^I    using |.
line 78: "   7.3_v12 (Vim 7.3.0616): Fix modeline mangling to also work for when multiple
line 79: "^I^I^I    highlight groups make up the start-of-modeline text.
line 80: "^I^I^I    Improve render time of page with uncopyable regions
line 81: "^I^I^I    by not using one-input-per-char. Change name of
line 82: "^I^I^I    uncopyable option from html_unselectable to
line 83: "^I^I^I    html_prevent_copy. Added html_no_invalid option and
line 84: "^I^I^I    default to inserting invalid markup for uncopyable
line 85: "^I^I^I    regions to prevent MS Word from pasting undeletable
line 86: "^I^I^I    <input> elements. Fix 'cpo' handling (Thilo Six).
line 87: "^I^I 7.3_v12b1: Add html_unselectable option. Rework logic to
line 88: "^I^I^I    eliminate post-processing substitute commands in
line 89: "^I^I^I    favor of doing the work up front. Remove unnecessary
line 90: "^I^I^I    special treatment of 'LineNr' highlight group. Minor
line 91: "^I^I^I    speed improvements. Fix modeline mangling in
line 92: "^I^I^I    generated output so it works for text in the first
line 93: "^I^I^I    column. Fix missing line number and fold column in
line 94: "^I^I^I    diff filler lines. Fix that some fonts have a 1px
line 95: "^I^I^I    gap (using a dirty hack, improvements welcome). Add
line 96: "^I^I^I    "colorscheme" meta tag. Does NOT include support for
line 97: "^I^I^I    the new default foldtext added in v11, as the patch
line 98: "^I^I^I    adding it has not yet been included in Vim.
line 99: "   7.3_v11 ( unreleased ): Support new default foldtext from patch by Christian
line 100: "^I^I^I    Brabandt in
line 101: "^I^I^I    http://groups.google.com/d/topic/vim_dev/B6FSGfq9VoI/discussion.
line 102: "^I^I^I    This patch has not yet been included in Vim, thus
line 103: "^I^I^I    these changes are removed in the next version.
line 104: "   7.3_v10 (Vim 7.3.0227): Fix error E684 when converting a range wholly inside
line 105: "^I^I^I    multiple nested folds with dynamic folding on.
line 106: "^I^I^I    Also fix problem with foldtext in this situation.
line 107: "   7.3_v9  (Vim 7.3.0170): Add html_pre_wrap option active with html_use_css
line 108: "^I^I^I    and without html_no_pre, default value same as
line 109: "^I^I^I    'wrap' option, (Andy Spencer). Don't use
line 110: "^I^I^I    'fileencoding' for converted document encoding if
line 111: "^I^I^I    'buftype' indicates a special buffer which isn't
line 112: "^I^I^I    written.
line 113: "   7.3_v8  (Vim 7.3.0100): Add html_expand_tabs option to allow leaving tab
line 114: "^I^I^I    characters in generated output (Andy Spencer).
line 115: "^I^I^I    Escape text that looks like a modeline so Vim
line 116: "^I^I^I    doesn't use anything in the converted HTML as a
line 117: "^I^I^I    modeline. Bugfixes: Fix folding when a fold starts
line 118: "^I^I^I    before the conversion range. Remove fold column when
line 119: "^I^I^I    there are no folds.
line 120: "   7.3_v7  (Vim 7-3-0063): see betas released on vim_dev below:
line 121: "^I^I  7.3_v7b3: Fixed bug, convert Unicode to UTF-8 all the way.
line 122: "^I^I  7.3_v7b2: Remove automatic detection of encodings that are not
line 123: "^I^I^I    supported by all major browsers according to
line 124: "^I^I^I    http://wiki.whatwg.org/wiki/Web_Encodings and
line 125: "^I^I^I    convert to UTF-8 for all Unicode encodings. Make
line 126: "^I^I^I    HTML encoding to Vim encoding detection be
line 127: "^I^I^I    case-insensitive for built-in pairs.
line 128: "^I^I  7.3_v7b1: Remove use of setwinvar() function which cannot be
line 129: "^I^I^I    called in restricted mode (Andy Spencer). Use
line 130: "^I^I^I    'fencoding' instead of 'encoding' to determine by
line 131: "^I^I^I    charset, and make sure the 'fenc' of the generated
line 132: "^I^I^I    file matches its indicated charset. Add charsets for
line 133: "^I^I^I    all of Vim's natively supported encodings.
line 134: "   7.3_v6  (Vim 7.3.0000): Really fix bug with 'nowrapscan', 'magic' and other
line 135: "^I^I^I    user settings interfering with diff mode generation,
line 136: "^I^I^I    trailing whitespace (e.g. line number column) when
line 137: "^I^I^I    using html_no_pre, and bugs when using
line 138: "^I^I^I    html_hover_unfold.
line 139: "   7.3_v5  ( unreleased ): Fix bug with 'nowrapscan' and also with out-of-sync
line 140: "^I^I^I    folds in diff mode when first line was folded.
line 141: "   7.3_v4  (Vim 7.3.0000): Bugfixes, especially for xhtml markup, and diff mode
line 142: "   7.3_v3  (Vim 7.3.0000): Refactor option handling and make html_use_css
line 143: "^I^I^I    default to true when not set to anything. Use strict
line 144: "^I^I^I    doctypes where possible. Rename use_xhtml option to
line 145: "^I^I^I    html_use_xhtml for consistency. Use .xhtml extension
line 146: "^I^I^I    when using this option. Add meta tag for settings.
line 147: "   7.3_v2  (Vim 7.3.0000): Fix syntax highlighting in diff mode to use both the
line 148: "^I^I^I    diff colors and the normal syntax colors
line 149: "   7.3_v1  (Vim 7.3.0000): Add conceal support and meta tags in output
line 150: "}}}
line 151: "}}}
line 152: 
line 153: " TODO: {{{
line 154: "   * Check the issue tracker:
line 155: "     https://bitbucket.org/fritzophrenic/vim-tohtml/issues?status=new&status=open
line 156: "   * Options for generating the CSS in external style sheets. New :TOcss
line 157: "     command to convert the current color scheme into a (mostly) generic CSS
line 158: "     stylesheet which can be re-used. Alternate stylesheet support? Good start
line 159: "     by Erik Falor
line 160: "     ( https://groups.google.com/d/topic/vim_use/7XTmC4D22dU/discussion ).
line 161: "   * Add optional argument to :TOhtml command to specify mode (gui, cterm,
line 162: "     term) to use for the styling. Suggestion by "nacitar".
line 163: "   * Add way to override or specify which RGB colors map to the color numbers
line 164: "     in cterm. Get better defaults than just guessing? Suggestion by "nacitar".
line 165: "   * Disable filetype detection until after all processing is done.
line 166: "   * Add option for not generating the hyperlink on stuff that looks like a
line 167: "     URL? Or just color the link to fit with the colorscheme (and only special
line 168: "     when hovering)?
line 169: "   * Bug: Opera does not allow printing more than one page if uncopyable
line 170: "     regions is turned on. Possible solution: Add normal text line numbers with
line 171: "     display:none, set to display:inline for print style sheets, and hide
line 172: "     <input> elements for print, to allow Opera printing multiple pages (and
line 173: "     other uncopyable areas?). May need to make the new text invisible to IE
line 174: "     with conditional comments to prevent copying it, IE for some reason likes
line 175: "     to copy hidden text. Other browsers too?
line 176: "   * Bug: still a 1px gap throughout the fold column when html_prevent_copy is
line 177: "     "fn" in some browsers. Specifically, in Chromium on Ubuntu (but not Chrome
line 178: "     on Windows). Perhaps it is font related?
line 179: "   * Bug: still some gaps in the fold column when html_prevent_copy contains
line 180: "     'd' and showing the whole diff (observed in multiple browsers). Only gaps
line 181: "     on diff lines though.
line 182: "   * Undercurl support via CSS3, with fallback to dotted or something:
line 183: "^Ihttps://groups.google.com/d/topic/vim_use/BzXA6He1pHg/discussion
line 184: "   * Redo updates for modified default foldtext (v11) when/if the patch is
line 185: "     accepted to modify it.
line 186: "   * Test case +diff_one_file-dynamic_folds+expand_tabs-hover_unfold
line 187: "^I^I+ignore_conceal-ignore_folding+no_foldcolumn+no_pre+no_progress
line 188: "^I^I+number_lines-pre_wrap-use_css+use_xhtml+whole_filler.xhtml
line 189: "     does not show the whole diff filler as it is supposed to?
line 190: "   * Bug: when 'isprint' is wrong for the current encoding, will generate
line 191: "     invalid content. Can/should anything be done about this? Maybe a separate
line 192: "     plugin to correct 'isprint' based on encoding?
line 193: "   * Check to see if the windows-125\d encodings actually work in Unix without
line 194: "     the 8bit- prefix. Add prefix to autoload dictionaries for Unix if not.
line 195: "   * Font auto-detection similar to
line 196: "     http://www.vim.org/scripts/script.php?script_id=2384 but for a variety of
line 197: "     platforms.
line 198: "   * Pull in code from http://www.vim.org/scripts/script.php?script_id=3113 :
line 199: "^I- listchars support
line 200: "^I- full-line background highlight
line 201: "^I- other?
line 202: "   * Make it so deleted lines in a diff don't create side-scrolling (get it
line 203: "     free with full-line background highlight above).
line 204: "   * Restore open/closed folds and cursor position after processing each file
line 205: "     with option not to restore for speed increase.
line 206: "   * Add extra meta info (generation time, etc.)?
line 207: "   * Tidy up so we can use strict doctype in even more situations
line 208: "   * Implementation detail: add threshold for writing the lines to the html
line 209: "     buffer before we're done (5000 or so lines should do it)
line 210: "   * TODO comments for code cleanup scattered throughout
line 211: "}}}
line 212: 
line 213: " Define the :TOhtml command when:
line 214: " - 'compatible' is not set
line 215: " - this plugin or user override was not already loaded
line 216: " - user commands are available. {{{
line 217: if !&cp && !exists(":TOhtml") && has("user_commands")
line 218:   command -range=% -bar TOhtml :call tohtml#Convert2HTML(<line1>, <line2>)
line 219: endif "}}}
line 220: 
line 221: " Make sure any patches will probably use consistent indent
line 222: "   vim: ts=8 sw=2 sts=2 noet fdm=marker
finished sourcing /usr/local/Cellar/neovim/0.5.0/share/nvim/runtime/plugin/tohtml.vim
chdir(/Users/andrewgu/.config/nvim)
chdir(/usr/local/Cellar/neovim/0.5.0/share/nvim/runtime/plugin)
chdir(/Users/andrewgu/.config/nvim)
sourcing "/usr/local/Cellar/neovim/0.5.0/share/nvim/runtime/plugin/tutor.vim"
line 1: if exists('g:loaded_tutor_mode_plugin') || &compatible
line 2:     finish
line 3: endif
line 4: let g:loaded_tutor_mode_plugin = 1
line 5: 
line 6: command! -nargs=? -complete=custom,tutor#TutorCmdComplete Tutor call tutor#TutorCmd(<q-args>)
finished sourcing /usr/local/Cellar/neovim/0.5.0/share/nvim/runtime/plugin/tutor.vim
chdir(/Users/andrewgu/.config/nvim)
chdir(/usr/local/Cellar/neovim/0.5.0/share/nvim/runtime/plugin)
chdir(/Users/andrewgu/.config/nvim)
sourcing "/usr/local/Cellar/neovim/0.5.0/share/nvim/runtime/plugin/zipPlugin.vim"
line 1: " zipPlugin.vim: Handles browsing zipfiles
line 2: "            PLUGIN PORTION
line 3: " Date:^I^I^IJan 07, 2020
line 4: " Maintainer:^ICharles E Campbell <NcampObell@SdrPchip.AorgM-NOSPAM>
line 5: " License:^I^IVim License  (see vim's :help license)
line 6: " Copyright:    Copyright (C) 2005-2016 Charles E. Campbell {{{1
line 7: "               Permission is hereby granted to use and distribute this code,
line 8: "               with or without modifications, provided that this copyright
line 9: "               notice is copied with it. Like anything else that's free,
line 10: "               zipPlugin.vim is provided *as is* and comes with no warranty
line 11: "               of any kind, either expressed or implied. By using this
line 12: "               plugin, you agree that in no event will the copyright
line 13: "               holder be liable for any damages resulting from the use
line 14: "               of this software.
line 15: "
line 16: " (James 4:8 WEB) Draw near to God, and he will draw near to you.
line 17: " Cleanse your hands, you sinners; and purify your hearts, you double-minded.
line 18: " ---------------------------------------------------------------------
line 19: " Load Once: {{{1
line 20: if &cp || exists("g:loaded_zipPlugin")
line 21:  finish
line 22: endif
line 23: let g:loaded_zipPlugin = "v31"
line 24: let s:keepcpo          = &cpo
line 25: set cpo&vim
line 26: 
line 27: " ---------------------------------------------------------------------
line 28: " Options: {{{1
line 29: if !exists("g:zipPlugin_ext")
line 30:  let g:zipPlugin_ext='*.aar,*.apk,*.celzip,*.crtx,*.docm,*.docx,*.dotm,*.dotx,*.ear,*.epub,*.gcsx,*.glox,*.gqsx,*.ja,*.jar,*.kmz,*.odb,*.odc,*.odf,*.odg,*.odi,*.odm,*.odp,*.ods,*.odt,*.otc,*.otf,*.otg,*.oth,*.oti,*.otp,*.ots,*.ott,*.oxt,*.potm,*.potx,*.ppam,*.ppsm,*.ppsx,*.pptm,*.pptx,*.sldx,*.thmx,*.vdw,*.war,*.wsz,*.xap,*.xlam,*.xlam,*.xlsb,*.xlsm,*.xlsx,*.xltm,*.xltx,*.xpi,*.zip'
line 31: endif
line 32: 
line 33: " ---------------------------------------------------------------------
line 34: " Public Interface: {{{1
line 35: augroup zip
line 36:  au!
line 37:  au BufReadCmd   zipfile:*^Icall zip#Read(expand("<amatch>"), 1)
line 38:  au FileReadCmd  zipfile:*^Icall zip#Read(expand("<amatch>"), 0)
line 39:  au BufWriteCmd  zipfile:*^Icall zip#Write(expand("<amatch>"))
line 40:  au FileWriteCmd zipfile:*^Icall zip#Write(expand("<amatch>"))
line 41: 
line 42:  if has("unix")
line 43:   au BufReadCmd   zipfile:*/*^Icall zip#Read(expand("<amatch>"), 1)
line 44:   au FileReadCmd  zipfile:*/*^Icall zip#Read(expand("<amatch>"), 0)
line 45:   au BufWriteCmd  zipfile:*/*^Icall zip#Write(expand("<amatch>"))
line 46:   au FileWriteCmd zipfile:*/*^Icall zip#Write(expand("<amatch>"))
line 47:  endif
line 48: 
line 49:  exe "au BufReadCmd ".g:zipPlugin_ext.' call zip#Browse(expand("<amatch>"))'
line 49: au BufReadCmd *.aar,*.apk,*.celzip,*.crtx,*.docm,*.docx,*.dotm,*.dotx,*.ear,*.epub,*.gcsx,*.glox,*.gqsx,*.ja,*.jar,*.kmz,*.odb,*.odc,*.odf,*.odg,*.odi,*.odm,*.odp,*.ods,*.odt,*.otc,*.otf,*.otg,*.oth,*.oti,*.otp,*.ots,*.ott,*.oxt,*.potm,*.potx,*.ppam,*.ppsm,*.ppsx,*.pptm,*.pptx,*.sldx,*.thmx,*.vdw,*.war,*.wsz,*.xap,*.xlam,*.xlam,*.xlsb,*.xlsm,*.xlsx,*.xltm,*.xltx,*.xpi,*.zip call zip#Browse(expand("<amatch>"))
line 50: augroup END
line 51: 
line 52: " ---------------------------------------------------------------------
line 53: "  Restoration And Modelines: {{{1
line 54: "  vim: fdm=marker
line 55: let &cpo= s:keepcpo
line 56: unlet s:keepcpo
finished sourcing /usr/local/Cellar/neovim/0.5.0/share/nvim/runtime/plugin/zipPlugin.vim
Searching for "/usr/local/Cellar/neovim/0.5.0/lib/nvim/plugin/**/*.vim"
Searching for "plugin/**/*.lua" in "/Users/andrewgu/.config/nvim,/etc/xdg/nvim,/Users/andrewgu/.local/share/nvim/site,/usr/local/share/nvim/site,/usr/share/nvim/site,/usr/local/Cellar/neovim/0.5.0/share/nvim/runtime,/usr/local/Cellar/neovim/0.5.0/lib/nvim,/usr/share/nvim/site/after,/usr/local/share/nvim/site/after,/Users/andrewgu/.local/share/nvim/site/after,/etc/xdg/nvim/after,/Users/andrewgu/.config/nvim/after"
Searching for "/Users/andrewgu/.config/nvim/plugin/**/*.lua"
chdir(/Users/andrewgu/.config/nvim)
chdir(/Users/andrewgu/.config/nvim/plugin)
chdir(/Users/andrewgu/.config/nvim)
sourcing "/Users/andrewgu/.config/nvim/plugin/packer_compiled.lua"
Executing: packadd packer.nvim
Searching for "pack/*/start/packer.nvim" in "/Users/andrewgu/.config/nvim,/etc/xdg/nvim,/Users/andrewgu/.local/share/nvim/site,/usr/local/share/nvim/site,/usr/share/nvim/site,/usr/local/Cellar/neovim/0.5.0/share/nvim/runtime,/usr/local/Cellar/neovim/0.5.0/lib/nvim,/usr/share/nvim/site/after,/usr/local/share/nvim/site/after,/Users/andrewgu/.local/share/nvim/site/after,/etc/xdg/nvim/after,/Users/andrewgu/.config/nvim/after"
Searching for "/Users/andrewgu/.config/nvim/pack/*/start/packer.nvim"
Searching for "/etc/xdg/nvim/pack/*/start/packer.nvim"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/*/start/packer.nvim"
chdir(/Users/andrewgu/.config/nvim)
chdir(/Users/andrewgu/.local/share/nvim/site/pack/packer/start)
chdir(/Users/andrewgu/.config/nvim)
Executing: augroup filetypedetect
Executing: augroup END
Searching for "/usr/local/share/nvim/site/pack/*/start/packer.nvim"
Searching for "/usr/share/nvim/site/pack/*/start/packer.nvim"
Searching for "/usr/local/Cellar/neovim/0.5.0/share/nvim/runtime/pack/*/start/packer.nvim"
Searching for "/usr/local/Cellar/neovim/0.5.0/lib/nvim/pack/*/start/packer.nvim"
Searching for "/usr/share/nvim/site/after/pack/*/start/packer.nvim"
Searching for "/usr/local/share/nvim/site/after/pack/*/start/packer.nvim"
Searching for "/Users/andrewgu/.local/share/nvim/site/after/pack/*/start/packer.nvim"
Searching for "/etc/xdg/nvim/after/pack/*/start/packer.nvim"
Searching for "/Users/andrewgu/.config/nvim/after/pack/*/start/packer.nvim"
Searching for "pack/*/opt/packer.nvim" in "/Users/andrewgu/.config/nvim,/etc/xdg/nvim,/Users/andrewgu/.local/share/nvim/site,/usr/local/share/nvim/site,/usr/share/nvim/site,/usr/local/Cellar/neovim/0.5.0/share/nvim/runtime,/usr/local/Cellar/neovim/0.5.0/lib/nvim,/usr/share/nvim/site/after,/usr/local/share/nvim/site/after,/Users/andrewgu/.local/share/nvim/site/after,/etc/xdg/nvim/after,/Users/andrewgu/.config/nvim/after"
Searching for "/Users/andrewgu/.config/nvim/pack/*/opt/packer.nvim"
Searching for "/etc/xdg/nvim/pack/*/opt/packer.nvim"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/*/opt/packer.nvim"
Searching for "/usr/local/share/nvim/site/pack/*/opt/packer.nvim"
Searching for "/usr/share/nvim/site/pack/*/opt/packer.nvim"
Searching for "/usr/local/Cellar/neovim/0.5.0/share/nvim/runtime/pack/*/opt/packer.nvim"
Searching for "/usr/local/Cellar/neovim/0.5.0/lib/nvim/pack/*/opt/packer.nvim"
Searching for "/usr/share/nvim/site/after/pack/*/opt/packer.nvim"
Searching for "/usr/local/share/nvim/site/after/pack/*/opt/packer.nvim"
Searching for "/Users/andrewgu/.local/share/nvim/site/after/pack/*/opt/packer.nvim"
Searching for "/etc/xdg/nvim/after/pack/*/opt/packer.nvim"
Searching for "/Users/andrewgu/.config/nvim/after/pack/*/opt/packer.nvim"
not found in 'packpath': "pack/*/opt/packer.nvim"
Searching for "lua/lualine.lua" in "/Users/andrewgu/.config/nvim,/etc/xdg/nvim,/Users/andrewgu/.local/share/nvim/site,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/telescope.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/popup.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/plenary.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/packer.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-web-devicons,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-tree.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-lspconfig,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-compe,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-base16.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-autopairs,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/neoformat,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/lua
Searching for "/Users/andrewgu/.config/nvim/lua/lualine.lua"
Searching for "/etc/xdg/nvim/lua/lualine.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/lua/lualine.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/telescope.nvim/lua/lualine.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/popup.nvim/lua/lualine.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/plenary.nvim/lua/lualine.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/packer.nvim/lua/lualine.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/lua/lualine.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-web-devicons/lua/lualine.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-tree.lua/lua/lualine.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-lspconfig/lua/lualine.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-compe/lua/lualine.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-base16.lua/lua/lualine.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-autopairs/lua/lualine.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/neoformat/lua/lualine.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/lualine.nvim/lua/lualine.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/indent-blankline.nvim/lua/lualine.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/gitsigns.nvim/lua/lualine.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/barbar.nvim/lua/lualine.lua"
Searching for "/usr/local/share/nvim/site/lua/lualine.lua"
Searching for "/usr/share/nvim/site/lua/lualine.lua"
Searching for "/usr/local/Cellar/neovim/0.5.0/share/nvim/runtime/lua/lualine.lua"
Searching for "/usr/local/Cellar/neovim/0.5.0/share/nvim/runtime/pack/dist/opt/matchit/lua/lualine.lua"
Searching for "/usr/local/Cellar/neovim/0.5.0/lib/nvim/lua/lualine.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-compe/after/lua/lualine.lua"
Searching for "/usr/share/nvim/site/after/lua/lualine.lua"
Searching for "/usr/local/share/nvim/site/after/lua/lualine.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/after/lua/lualine.lua"
Searching for "/etc/xdg/nvim/after/lua/lualine.lua"
Searching for "/Users/andrewgu/.config/nvim/after/lua/lualine.lua"
not found in 'runtimepath': "lua/lualine.lua"
Searching for "pack/*/start/*/lua/lualine.lua" in "/Users/andrewgu/.config/nvim,/etc/xdg/nvim,/Users/andrewgu/.local/share/nvim/site,/usr/local/share/nvim/site,/usr/share/nvim/site,/usr/local/Cellar/neovim/0.5.0/share/nvim/runtime,/usr/local/Cellar/neovim/0.5.0/lib/nvim,/usr/share/nvim/site/after,/usr/local/share/nvim/site/after,/Users/andrewgu/.local/share/nvim/site/after,/etc/xdg/nvim/after,/Users/andrewgu/.config/nvim/after"
Searching for "/Users/andrewgu/.config/nvim/pack/*/start/*/lua/lualine.lua"
Searching for "/etc/xdg/nvim/pack/*/start/*/lua/lualine.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/*/start/*/lua/lualine.lua"
Searching for "/usr/local/share/nvim/site/pack/*/start/*/lua/lualine.lua"
Searching for "/usr/share/nvim/site/pack/*/start/*/lua/lualine.lua"
Searching for "/usr/local/Cellar/neovim/0.5.0/share/nvim/runtime/pack/*/start/*/lua/lualine.lua"
Searching for "/usr/local/Cellar/neovim/0.5.0/lib/nvim/pack/*/start/*/lua/lualine.lua"
Searching for "/usr/share/nvim/site/after/pack/*/start/*/lua/lualine.lua"
Searching for "/usr/local/share/nvim/site/after/pack/*/start/*/lua/lualine.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/after/pack/*/start/*/lua/lualine.lua"
Searching for "/etc/xdg/nvim/after/pack/*/start/*/lua/lualine.lua"
Searching for "/Users/andrewgu/.config/nvim/after/pack/*/start/*/lua/lualine.lua"
not found in 'packpath': "pack/*/start/*/lua/lualine.lua"
Searching for "start/*/lua/lualine.lua" in "/Users/andrewgu/.config/nvim,/etc/xdg/nvim,/Users/andrewgu/.local/share/nvim/site,/usr/local/share/nvim/site,/usr/share/nvim/site,/usr/local/Cellar/neovim/0.5.0/share/nvim/runtime,/usr/local/Cellar/neovim/0.5.0/lib/nvim,/usr/share/nvim/site/after,/usr/local/share/nvim/site/after,/Users/andrewgu/.local/share/nvim/site/after,/etc/xdg/nvim/after,/Users/andrewgu/.config/nvim/after"
Searching for "/Users/andrewgu/.config/nvim/start/*/lua/lualine.lua"
Searching for "/etc/xdg/nvim/start/*/lua/lualine.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/start/*/lua/lualine.lua"
Searching for "/usr/local/share/nvim/site/start/*/lua/lualine.lua"
Searching for "/usr/share/nvim/site/start/*/lua/lualine.lua"
Searching for "/usr/local/Cellar/neovim/0.5.0/share/nvim/runtime/start/*/lua/lualine.lua"
Searching for "/usr/local/Cellar/neovim/0.5.0/lib/nvim/start/*/lua/lualine.lua"
Searching for "/usr/share/nvim/site/after/start/*/lua/lualine.lua"
Searching for "/usr/local/share/nvim/site/after/start/*/lua/lualine.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/after/start/*/lua/lualine.lua"
Searching for "/etc/xdg/nvim/after/start/*/lua/lualine.lua"
Searching for "/Users/andrewgu/.config/nvim/after/start/*/lua/lualine.lua"
not found in 'packpath': "start/*/lua/lualine.lua"
Searching for "lua/lualine/init.lua" in "/Users/andrewgu/.config/nvim,/etc/xdg/nvim,/Users/andrewgu/.local/share/nvim/site,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/telescope.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/popup.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/plenary.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/packer.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-web-devicons,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-tree.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-lspconfig,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-compe,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-base16.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-autopairs,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/neoformat,/Users/andrewgu/.local/share/nvim/site/pack/packer/star
Searching for "/Users/andrewgu/.config/nvim/lua/lualine/init.lua"
Searching for "/etc/xdg/nvim/lua/lualine/init.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/lua/lualine/init.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/telescope.nvim/lua/lualine/init.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/popup.nvim/lua/lualine/init.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/plenary.nvim/lua/lualine/init.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/packer.nvim/lua/lualine/init.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/lua/lualine/init.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-web-devicons/lua/lualine/init.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-tree.lua/lua/lualine/init.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-lspconfig/lua/lualine/init.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-compe/lua/lualine/init.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-base16.lua/lua/lualine/init.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-autopairs/lua/lualine/init.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/neoformat/lua/lualine/init.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/lualine.nvim/lua/lualine/init.lua"
Searching for "lua/lualine/highlight.lua" in "/Users/andrewgu/.config/nvim,/etc/xdg/nvim,/Users/andrewgu/.local/share/nvim/site,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/telescope.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/popup.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/plenary.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/packer.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-web-devicons,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-tree.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-lspconfig,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-compe,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-base16.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-autopairs,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/neoformat,/Users/andrewgu/.local/share/nvim/site/pack/packer
Searching for "/Users/andrewgu/.config/nvim/lua/lualine/highlight.lua"
Searching for "/etc/xdg/nvim/lua/lualine/highlight.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/lua/lualine/highlight.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/telescope.nvim/lua/lualine/highlight.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/popup.nvim/lua/lualine/highlight.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/plenary.nvim/lua/lualine/highlight.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/packer.nvim/lua/lualine/highlight.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/lua/lualine/highlight.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-web-devicons/lua/lualine/highlight.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-tree.lua/lua/lualine/highlight.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-lspconfig/lua/lualine/highlight.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-compe/lua/lualine/highlight.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-base16.lua/lua/lualine/highlight.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-autopairs/lua/lualine/highlight.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/neoformat/lua/lualine/highlight.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/lualine.nvim/lua/lualine/highlight.lua"
Searching for "lua/lualine/utils/utils.lua" in "/Users/andrewgu/.config/nvim,/etc/xdg/nvim,/Users/andrewgu/.local/share/nvim/site,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/telescope.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/popup.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/plenary.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/packer.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-web-devicons,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-tree.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-lspconfig,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-compe,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-base16.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-autopairs,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/neoformat,/Users/andrewgu/.local/share/nvim/site/pack/pack
Searching for "/Users/andrewgu/.config/nvim/lua/lualine/utils/utils.lua"
Searching for "/etc/xdg/nvim/lua/lualine/utils/utils.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/lua/lualine/utils/utils.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/telescope.nvim/lua/lualine/utils/utils.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/popup.nvim/lua/lualine/utils/utils.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/plenary.nvim/lua/lualine/utils/utils.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/packer.nvim/lua/lualine/utils/utils.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/lua/lualine/utils/utils.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-web-devicons/lua/lualine/utils/utils.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-tree.lua/lua/lualine/utils/utils.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-lspconfig/lua/lualine/utils/utils.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-compe/lua/lualine/utils/utils.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-base16.lua/lua/lualine/utils/utils.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-autopairs/lua/lualine/utils/utils.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/neoformat/lua/lualine/utils/utils.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/lualine.nvim/lua/lualine/utils/utils.lua"
Searching for "lua/lualine/utils/loader.lua" in "/Users/andrewgu/.config/nvim,/etc/xdg/nvim,/Users/andrewgu/.local/share/nvim/site,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/telescope.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/popup.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/plenary.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/packer.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-web-devicons,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-tree.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-lspconfig,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-compe,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-base16.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-autopairs,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/neoformat,/Users/andrewgu/.local/share/nvim/site/pack/pac
Searching for "/Users/andrewgu/.config/nvim/lua/lualine/utils/loader.lua"
Searching for "/etc/xdg/nvim/lua/lualine/utils/loader.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/lua/lualine/utils/loader.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/telescope.nvim/lua/lualine/utils/loader.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/popup.nvim/lua/lualine/utils/loader.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/plenary.nvim/lua/lualine/utils/loader.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/packer.nvim/lua/lualine/utils/loader.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/lua/lualine/utils/loader.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-web-devicons/lua/lualine/utils/loader.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-tree.lua/lua/lualine/utils/loader.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-lspconfig/lua/lualine/utils/loader.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-compe/lua/lualine/utils/loader.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-base16.lua/lua/lualine/utils/loader.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-autopairs/lua/lualine/utils/loader.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/neoformat/lua/lualine/utils/loader.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/lualine.nvim/lua/lualine/utils/loader.lua"
Searching for "lua/lualine/utils/section.lua" in "/Users/andrewgu/.config/nvim,/etc/xdg/nvim,/Users/andrewgu/.local/share/nvim/site,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/telescope.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/popup.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/plenary.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/packer.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-web-devicons,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-tree.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-lspconfig,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-compe,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-base16.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-autopairs,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/neoformat,/Users/andrewgu/.local/share/nvim/site/pack/pa
Searching for "/Users/andrewgu/.config/nvim/lua/lualine/utils/section.lua"
Searching for "/etc/xdg/nvim/lua/lualine/utils/section.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/lua/lualine/utils/section.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/telescope.nvim/lua/lualine/utils/section.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/popup.nvim/lua/lualine/utils/section.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/plenary.nvim/lua/lualine/utils/section.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/packer.nvim/lua/lualine/utils/section.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/lua/lualine/utils/section.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-web-devicons/lua/lualine/utils/section.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-tree.lua/lua/lualine/utils/section.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-lspconfig/lua/lualine/utils/section.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-compe/lua/lualine/utils/section.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-base16.lua/lua/lualine/utils/section.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-autopairs/lua/lualine/utils/section.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/neoformat/lua/lualine/utils/section.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/lualine.nvim/lua/lualine/utils/section.lua"
Searching for "lua/lualine/config.lua" in "/Users/andrewgu/.config/nvim,/etc/xdg/nvim,/Users/andrewgu/.local/share/nvim/site,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/telescope.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/popup.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/plenary.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/packer.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-web-devicons,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-tree.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-lspconfig,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-compe,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-base16.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-autopairs,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/neoformat,/Users/andrewgu/.local/share/nvim/site/pack/packer/st
Searching for "/Users/andrewgu/.config/nvim/lua/lualine/config.lua"
Searching for "/etc/xdg/nvim/lua/lualine/config.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/lua/lualine/config.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/telescope.nvim/lua/lualine/config.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/popup.nvim/lua/lualine/config.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/plenary.nvim/lua/lualine/config.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/packer.nvim/lua/lualine/config.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/lua/lualine/config.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-web-devicons/lua/lualine/config.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-tree.lua/lua/lualine/config.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-lspconfig/lua/lualine/config.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-compe/lua/lualine/config.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-base16.lua/lua/lualine/config.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-autopairs/lua/lualine/config.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/neoformat/lua/lualine/config.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/lualine.nvim/lua/lualine/config.lua"
Executing:       augroup lualine
Executing:         autocmd!
Executing:         autocmd WinLeave,BufLeave * lua vim.wo.statusline=require'lualine'.statusline()
Executing:         autocmd BufWinEnter,WinEnter,BufEnter * set statusline<
Executing:         autocmd VimResized * redrawstatus
Executing:       augroup END
Executing:     
Searching for "lua/lspconfig.lua" in "/Users/andrewgu/.config/nvim,/etc/xdg/nvim,/Users/andrewgu/.local/share/nvim/site,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/telescope.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/popup.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/plenary.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/packer.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-web-devicons,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-tree.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-lspconfig,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-compe,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-base16.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-autopairs,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/neoformat,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/l
Searching for "/Users/andrewgu/.config/nvim/lua/lspconfig.lua"
Searching for "/etc/xdg/nvim/lua/lspconfig.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/lua/lspconfig.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/telescope.nvim/lua/lspconfig.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/popup.nvim/lua/lspconfig.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/plenary.nvim/lua/lspconfig.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/packer.nvim/lua/lspconfig.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/lua/lspconfig.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-web-devicons/lua/lspconfig.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-tree.lua/lua/lspconfig.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-lspconfig/lua/lspconfig.lua"
Searching for "lua/lspconfig/configs.lua" in "/Users/andrewgu/.config/nvim,/etc/xdg/nvim,/Users/andrewgu/.local/share/nvim/site,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/telescope.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/popup.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/plenary.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/packer.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-web-devicons,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-tree.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-lspconfig,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-compe,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-base16.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-autopairs,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/neoformat,/Users/andrewgu/.local/share/nvim/site/pack/packer
Searching for "/Users/andrewgu/.config/nvim/lua/lspconfig/configs.lua"
Searching for "/etc/xdg/nvim/lua/lspconfig/configs.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/lua/lspconfig/configs.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/telescope.nvim/lua/lspconfig/configs.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/popup.nvim/lua/lspconfig/configs.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/plenary.nvim/lua/lspconfig/configs.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/packer.nvim/lua/lspconfig/configs.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/lua/lspconfig/configs.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-web-devicons/lua/lspconfig/configs.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-tree.lua/lua/lspconfig/configs.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-lspconfig/lua/lspconfig/configs.lua"
Searching for "lua/lspconfig/util.lua" in "/Users/andrewgu/.config/nvim,/etc/xdg/nvim,/Users/andrewgu/.local/share/nvim/site,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/telescope.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/popup.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/plenary.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/packer.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-web-devicons,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-tree.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-lspconfig,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-compe,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-base16.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-autopairs,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/neoformat,/Users/andrewgu/.local/share/nvim/site/pack/packer/st
Searching for "/Users/andrewgu/.config/nvim/lua/lspconfig/util.lua"
Searching for "/etc/xdg/nvim/lua/lspconfig/util.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/lua/lspconfig/util.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/telescope.nvim/lua/lspconfig/util.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/popup.nvim/lua/lspconfig/util.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/plenary.nvim/lua/lspconfig/util.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/packer.nvim/lua/lspconfig/util.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/lua/lspconfig/util.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-web-devicons/lua/lspconfig/util.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-tree.lua/lua/lspconfig/util.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-lspconfig/lua/lspconfig/util.lua"
Searching for "lua/vim/uri.lua" in "/Users/andrewgu/.config/nvim,/etc/xdg/nvim,/Users/andrewgu/.local/share/nvim/site,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/telescope.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/popup.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/plenary.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/packer.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-web-devicons,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-tree.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-lspconfig,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-compe,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-base16.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-autopairs,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/neoformat,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/lua
Searching for "/Users/andrewgu/.config/nvim/lua/vim/uri.lua"
Searching for "/etc/xdg/nvim/lua/vim/uri.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/lua/vim/uri.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/telescope.nvim/lua/vim/uri.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/popup.nvim/lua/vim/uri.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/plenary.nvim/lua/vim/uri.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/packer.nvim/lua/vim/uri.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/lua/vim/uri.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-web-devicons/lua/vim/uri.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-tree.lua/lua/vim/uri.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-lspconfig/lua/vim/uri.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-compe/lua/vim/uri.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-base16.lua/lua/vim/uri.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-autopairs/lua/vim/uri.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/neoformat/lua/vim/uri.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/lualine.nvim/lua/vim/uri.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/indent-blankline.nvim/lua/vim/uri.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/gitsigns.nvim/lua/vim/uri.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/barbar.nvim/lua/vim/uri.lua"
Searching for "/usr/local/share/nvim/site/lua/vim/uri.lua"
Searching for "/usr/share/nvim/site/lua/vim/uri.lua"
Searching for "/usr/local/Cellar/neovim/0.5.0/share/nvim/runtime/lua/vim/uri.lua"
Searching for "lua/vim/lsp.lua" in "/Users/andrewgu/.config/nvim,/etc/xdg/nvim,/Users/andrewgu/.local/share/nvim/site,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/telescope.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/popup.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/plenary.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/packer.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-web-devicons,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-tree.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-lspconfig,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-compe,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-base16.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-autopairs,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/neoformat,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/lua
Searching for "/Users/andrewgu/.config/nvim/lua/vim/lsp.lua"
Searching for "/etc/xdg/nvim/lua/vim/lsp.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/lua/vim/lsp.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/telescope.nvim/lua/vim/lsp.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/popup.nvim/lua/vim/lsp.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/plenary.nvim/lua/vim/lsp.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/packer.nvim/lua/vim/lsp.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/lua/vim/lsp.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-web-devicons/lua/vim/lsp.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-tree.lua/lua/vim/lsp.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-lspconfig/lua/vim/lsp.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-compe/lua/vim/lsp.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-base16.lua/lua/vim/lsp.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-autopairs/lua/vim/lsp.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/neoformat/lua/vim/lsp.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/lualine.nvim/lua/vim/lsp.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/indent-blankline.nvim/lua/vim/lsp.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/gitsigns.nvim/lua/vim/lsp.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/barbar.nvim/lua/vim/lsp.lua"
Searching for "/usr/local/share/nvim/site/lua/vim/lsp.lua"
Searching for "/usr/share/nvim/site/lua/vim/lsp.lua"
Searching for "/usr/local/Cellar/neovim/0.5.0/share/nvim/runtime/lua/vim/lsp.lua"
Searching for "lua/vim/F.lua" in "/Users/andrewgu/.config/nvim,/etc/xdg/nvim,/Users/andrewgu/.local/share/nvim/site,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/telescope.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/popup.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/plenary.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/packer.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-web-devicons,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-tree.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-lspconfig,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-compe,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-base16.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-autopairs,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/neoformat,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/luali
Searching for "/Users/andrewgu/.config/nvim/lua/vim/F.lua"
Searching for "/etc/xdg/nvim/lua/vim/F.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/lua/vim/F.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/telescope.nvim/lua/vim/F.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/popup.nvim/lua/vim/F.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/plenary.nvim/lua/vim/F.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/packer.nvim/lua/vim/F.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/lua/vim/F.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-web-devicons/lua/vim/F.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-tree.lua/lua/vim/F.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-lspconfig/lua/vim/F.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-compe/lua/vim/F.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-base16.lua/lua/vim/F.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-autopairs/lua/vim/F.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/neoformat/lua/vim/F.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/lualine.nvim/lua/vim/F.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/indent-blankline.nvim/lua/vim/F.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/gitsigns.nvim/lua/vim/F.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/barbar.nvim/lua/vim/F.lua"
Searching for "/usr/local/share/nvim/site/lua/vim/F.lua"
Searching for "/usr/share/nvim/site/lua/vim/F.lua"
Searching for "/usr/local/Cellar/neovim/0.5.0/share/nvim/runtime/lua/vim/F.lua"
Searching for "lua/vim/lsp/handlers.lua" in "/Users/andrewgu/.config/nvim,/etc/xdg/nvim,/Users/andrewgu/.local/share/nvim/site,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/telescope.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/popup.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/plenary.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/packer.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-web-devicons,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-tree.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-lspconfig,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-compe,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-base16.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-autopairs,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/neoformat,/Users/andrewgu/.local/share/nvim/site/pack/packer/
Searching for "/Users/andrewgu/.config/nvim/lua/vim/lsp/handlers.lua"
Searching for "/etc/xdg/nvim/lua/vim/lsp/handlers.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/lua/vim/lsp/handlers.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/telescope.nvim/lua/vim/lsp/handlers.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/popup.nvim/lua/vim/lsp/handlers.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/plenary.nvim/lua/vim/lsp/handlers.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/packer.nvim/lua/vim/lsp/handlers.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/lua/vim/lsp/handlers.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-web-devicons/lua/vim/lsp/handlers.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-tree.lua/lua/vim/lsp/handlers.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-lspconfig/lua/vim/lsp/handlers.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-compe/lua/vim/lsp/handlers.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-base16.lua/lua/vim/lsp/handlers.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-autopairs/lua/vim/lsp/handlers.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/neoformat/lua/vim/lsp/handlers.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/lualine.nvim/lua/vim/lsp/handlers.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/indent-blankline.nvim/lua/vim/lsp/handlers.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/gitsigns.nvim/lua/vim/lsp/handlers.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/barbar.nvim/lua/vim/lsp/handlers.lua"
Searching for "/usr/local/share/nvim/site/lua/vim/lsp/handlers.lua"
Searching for "/usr/share/nvim/site/lua/vim/lsp/handlers.lua"
Searching for "/usr/local/Cellar/neovim/0.5.0/share/nvim/runtime/lua/vim/lsp/handlers.lua"
Searching for "lua/vim/lsp/log.lua" in "/Users/andrewgu/.config/nvim,/etc/xdg/nvim,/Users/andrewgu/.local/share/nvim/site,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/telescope.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/popup.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/plenary.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/packer.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-web-devicons,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-tree.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-lspconfig,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-compe,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-base16.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-autopairs,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/neoformat,/Users/andrewgu/.local/share/nvim/site/pack/packer/start
Searching for "/Users/andrewgu/.config/nvim/lua/vim/lsp/log.lua"
Searching for "/etc/xdg/nvim/lua/vim/lsp/log.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/lua/vim/lsp/log.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/telescope.nvim/lua/vim/lsp/log.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/popup.nvim/lua/vim/lsp/log.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/plenary.nvim/lua/vim/lsp/log.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/packer.nvim/lua/vim/lsp/log.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/lua/vim/lsp/log.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-web-devicons/lua/vim/lsp/log.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-tree.lua/lua/vim/lsp/log.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-lspconfig/lua/vim/lsp/log.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-compe/lua/vim/lsp/log.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-base16.lua/lua/vim/lsp/log.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-autopairs/lua/vim/lsp/log.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/neoformat/lua/vim/lsp/log.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/lualine.nvim/lua/vim/lsp/log.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/indent-blankline.nvim/lua/vim/lsp/log.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/gitsigns.nvim/lua/vim/lsp/log.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/barbar.nvim/lua/vim/lsp/log.lua"
Searching for "/usr/local/share/nvim/site/lua/vim/lsp/log.lua"
Searching for "/usr/share/nvim/site/lua/vim/lsp/log.lua"
Searching for "/usr/local/Cellar/neovim/0.5.0/share/nvim/runtime/lua/vim/lsp/log.lua"
Searching for "lua/vim/lsp/protocol.lua" in "/Users/andrewgu/.config/nvim,/etc/xdg/nvim,/Users/andrewgu/.local/share/nvim/site,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/telescope.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/popup.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/plenary.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/packer.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-web-devicons,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-tree.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-lspconfig,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-compe,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-base16.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-autopairs,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/neoformat,/Users/andrewgu/.local/share/nvim/site/pack/packer/
Searching for "/Users/andrewgu/.config/nvim/lua/vim/lsp/protocol.lua"
Searching for "/etc/xdg/nvim/lua/vim/lsp/protocol.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/lua/vim/lsp/protocol.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/telescope.nvim/lua/vim/lsp/protocol.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/popup.nvim/lua/vim/lsp/protocol.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/plenary.nvim/lua/vim/lsp/protocol.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/packer.nvim/lua/vim/lsp/protocol.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/lua/vim/lsp/protocol.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-web-devicons/lua/vim/lsp/protocol.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-tree.lua/lua/vim/lsp/protocol.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-lspconfig/lua/vim/lsp/protocol.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-compe/lua/vim/lsp/protocol.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-base16.lua/lua/vim/lsp/protocol.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-autopairs/lua/vim/lsp/protocol.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/neoformat/lua/vim/lsp/protocol.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/lualine.nvim/lua/vim/lsp/protocol.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/indent-blankline.nvim/lua/vim/lsp/protocol.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/gitsigns.nvim/lua/vim/lsp/protocol.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/barbar.nvim/lua/vim/lsp/protocol.lua"
Searching for "/usr/local/share/nvim/site/lua/vim/lsp/protocol.lua"
Searching for "/usr/share/nvim/site/lua/vim/lsp/protocol.lua"
Searching for "/usr/local/Cellar/neovim/0.5.0/share/nvim/runtime/lua/vim/lsp/protocol.lua"
Searching for "lua/vim/lsp/util.lua" in "/Users/andrewgu/.config/nvim,/etc/xdg/nvim,/Users/andrewgu/.local/share/nvim/site,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/telescope.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/popup.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/plenary.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/packer.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-web-devicons,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-tree.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-lspconfig,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-compe,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-base16.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-autopairs,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/neoformat,/Users/andrewgu/.local/share/nvim/site/pack/packer/star
Searching for "/Users/andrewgu/.config/nvim/lua/vim/lsp/util.lua"
Searching for "/etc/xdg/nvim/lua/vim/lsp/util.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/lua/vim/lsp/util.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/telescope.nvim/lua/vim/lsp/util.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/popup.nvim/lua/vim/lsp/util.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/plenary.nvim/lua/vim/lsp/util.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/packer.nvim/lua/vim/lsp/util.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/lua/vim/lsp/util.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-web-devicons/lua/vim/lsp/util.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-tree.lua/lua/vim/lsp/util.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-lspconfig/lua/vim/lsp/util.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-compe/lua/vim/lsp/util.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-base16.lua/lua/vim/lsp/util.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-autopairs/lua/vim/lsp/util.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/neoformat/lua/vim/lsp/util.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/lualine.nvim/lua/vim/lsp/util.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/indent-blankline.nvim/lua/vim/lsp/util.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/gitsigns.nvim/lua/vim/lsp/util.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/barbar.nvim/lua/vim/lsp/util.lua"
Searching for "/usr/local/share/nvim/site/lua/vim/lsp/util.lua"
Searching for "/usr/share/nvim/site/lua/vim/lsp/util.lua"
Searching for "/usr/local/Cellar/neovim/0.5.0/share/nvim/runtime/lua/vim/lsp/util.lua"
Searching for "lua/vim/highlight.lua" in "/Users/andrewgu/.config/nvim,/etc/xdg/nvim,/Users/andrewgu/.local/share/nvim/site,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/telescope.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/popup.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/plenary.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/packer.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-web-devicons,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-tree.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-lspconfig,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-compe,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-base16.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-autopairs,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/neoformat,/Users/andrewgu/.local/share/nvim/site/pack/packer/sta
Searching for "/Users/andrewgu/.config/nvim/lua/vim/highlight.lua"
Searching for "/etc/xdg/nvim/lua/vim/highlight.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/lua/vim/highlight.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/telescope.nvim/lua/vim/highlight.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/popup.nvim/lua/vim/highlight.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/plenary.nvim/lua/vim/highlight.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/packer.nvim/lua/vim/highlight.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/lua/vim/highlight.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-web-devicons/lua/vim/highlight.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-tree.lua/lua/vim/highlight.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-lspconfig/lua/vim/highlight.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-compe/lua/vim/highlight.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-base16.lua/lua/vim/highlight.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-autopairs/lua/vim/highlight.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/neoformat/lua/vim/highlight.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/lualine.nvim/lua/vim/highlight.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/indent-blankline.nvim/lua/vim/highlight.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/gitsigns.nvim/lua/vim/highlight.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/barbar.nvim/lua/vim/highlight.lua"
Searching for "/usr/local/share/nvim/site/lua/vim/highlight.lua"
Searching for "/usr/share/nvim/site/lua/vim/highlight.lua"
Searching for "/usr/local/Cellar/neovim/0.5.0/share/nvim/runtime/lua/vim/highlight.lua"
Searching for "lua/vim/lsp/buf.lua" in "/Users/andrewgu/.config/nvim,/etc/xdg/nvim,/Users/andrewgu/.local/share/nvim/site,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/telescope.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/popup.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/plenary.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/packer.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-web-devicons,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-tree.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-lspconfig,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-compe,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-base16.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-autopairs,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/neoformat,/Users/andrewgu/.local/share/nvim/site/pack/packer/start
Searching for "/Users/andrewgu/.config/nvim/lua/vim/lsp/buf.lua"
Searching for "/etc/xdg/nvim/lua/vim/lsp/buf.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/lua/vim/lsp/buf.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/telescope.nvim/lua/vim/lsp/buf.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/popup.nvim/lua/vim/lsp/buf.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/plenary.nvim/lua/vim/lsp/buf.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/packer.nvim/lua/vim/lsp/buf.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/lua/vim/lsp/buf.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-web-devicons/lua/vim/lsp/buf.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-tree.lua/lua/vim/lsp/buf.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-lspconfig/lua/vim/lsp/buf.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-compe/lua/vim/lsp/buf.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-base16.lua/lua/vim/lsp/buf.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-autopairs/lua/vim/lsp/buf.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/neoformat/lua/vim/lsp/buf.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/lualine.nvim/lua/vim/lsp/buf.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/indent-blankline.nvim/lua/vim/lsp/buf.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/gitsigns.nvim/lua/vim/lsp/buf.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/barbar.nvim/lua/vim/lsp/buf.lua"
Searching for "/usr/local/share/nvim/site/lua/vim/lsp/buf.lua"
Searching for "/usr/share/nvim/site/lua/vim/lsp/buf.lua"
Searching for "/usr/local/Cellar/neovim/0.5.0/share/nvim/runtime/lua/vim/lsp/buf.lua"
Searching for "lua/vim/lsp/rpc.lua" in "/Users/andrewgu/.config/nvim,/etc/xdg/nvim,/Users/andrewgu/.local/share/nvim/site,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/telescope.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/popup.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/plenary.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/packer.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-web-devicons,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-tree.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-lspconfig,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-compe,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-base16.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-autopairs,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/neoformat,/Users/andrewgu/.local/share/nvim/site/pack/packer/start
Searching for "/Users/andrewgu/.config/nvim/lua/vim/lsp/rpc.lua"
Searching for "/etc/xdg/nvim/lua/vim/lsp/rpc.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/lua/vim/lsp/rpc.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/telescope.nvim/lua/vim/lsp/rpc.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/popup.nvim/lua/vim/lsp/rpc.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/plenary.nvim/lua/vim/lsp/rpc.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/packer.nvim/lua/vim/lsp/rpc.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/lua/vim/lsp/rpc.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-web-devicons/lua/vim/lsp/rpc.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-tree.lua/lua/vim/lsp/rpc.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-lspconfig/lua/vim/lsp/rpc.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-compe/lua/vim/lsp/rpc.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-base16.lua/lua/vim/lsp/rpc.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-autopairs/lua/vim/lsp/rpc.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/neoformat/lua/vim/lsp/rpc.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/lualine.nvim/lua/vim/lsp/rpc.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/indent-blankline.nvim/lua/vim/lsp/rpc.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/gitsigns.nvim/lua/vim/lsp/rpc.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/barbar.nvim/lua/vim/lsp/rpc.lua"
Searching for "/usr/local/share/nvim/site/lua/vim/lsp/rpc.lua"
Searching for "/usr/share/nvim/site/lua/vim/lsp/rpc.lua"
Searching for "/usr/local/Cellar/neovim/0.5.0/share/nvim/runtime/lua/vim/lsp/rpc.lua"
Searching for "lua/vim/lsp/diagnostic.lua" in "/Users/andrewgu/.config/nvim,/etc/xdg/nvim,/Users/andrewgu/.local/share/nvim/site,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/telescope.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/popup.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/plenary.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/packer.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-web-devicons,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-tree.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-lspconfig,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-compe,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-base16.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-autopairs,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/neoformat,/Users/andrewgu/.local/share/nvim/site/pack/packe
Searching for "/Users/andrewgu/.config/nvim/lua/vim/lsp/diagnostic.lua"
Searching for "/etc/xdg/nvim/lua/vim/lsp/diagnostic.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/lua/vim/lsp/diagnostic.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/telescope.nvim/lua/vim/lsp/diagnostic.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/popup.nvim/lua/vim/lsp/diagnostic.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/plenary.nvim/lua/vim/lsp/diagnostic.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/packer.nvim/lua/vim/lsp/diagnostic.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/lua/vim/lsp/diagnostic.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-web-devicons/lua/vim/lsp/diagnostic.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-tree.lua/lua/vim/lsp/diagnostic.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-lspconfig/lua/vim/lsp/diagnostic.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-compe/lua/vim/lsp/diagnostic.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-base16.lua/lua/vim/lsp/diagnostic.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-autopairs/lua/vim/lsp/diagnostic.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/neoformat/lua/vim/lsp/diagnostic.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/lualine.nvim/lua/vim/lsp/diagnostic.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/indent-blankline.nvim/lua/vim/lsp/diagnostic.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/gitsigns.nvim/lua/vim/lsp/diagnostic.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/barbar.nvim/lua/vim/lsp/diagnostic.lua"
Searching for "/usr/local/share/nvim/site/lua/vim/lsp/diagnostic.lua"
Searching for "/usr/share/nvim/site/lua/vim/lsp/diagnostic.lua"
Searching for "/usr/local/Cellar/neovim/0.5.0/share/nvim/runtime/lua/vim/lsp/diagnostic.lua"
Searching for "lua/vim/lsp/codelens.lua" in "/Users/andrewgu/.config/nvim,/etc/xdg/nvim,/Users/andrewgu/.local/share/nvim/site,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/telescope.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/popup.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/plenary.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/packer.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-web-devicons,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-tree.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-lspconfig,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-compe,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-base16.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-autopairs,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/neoformat,/Users/andrewgu/.local/share/nvim/site/pack/packer/
Searching for "/Users/andrewgu/.config/nvim/lua/vim/lsp/codelens.lua"
Searching for "/etc/xdg/nvim/lua/vim/lsp/codelens.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/lua/vim/lsp/codelens.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/telescope.nvim/lua/vim/lsp/codelens.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/popup.nvim/lua/vim/lsp/codelens.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/plenary.nvim/lua/vim/lsp/codelens.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/packer.nvim/lua/vim/lsp/codelens.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/lua/vim/lsp/codelens.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-web-devicons/lua/vim/lsp/codelens.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-tree.lua/lua/vim/lsp/codelens.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-lspconfig/lua/vim/lsp/codelens.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-compe/lua/vim/lsp/codelens.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-base16.lua/lua/vim/lsp/codelens.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-autopairs/lua/vim/lsp/codelens.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/neoformat/lua/vim/lsp/codelens.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/lualine.nvim/lua/vim/lsp/codelens.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/indent-blankline.nvim/lua/vim/lsp/codelens.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/gitsigns.nvim/lua/vim/lsp/codelens.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/barbar.nvim/lua/vim/lsp/codelens.lua"
Searching for "/usr/local/share/nvim/site/lua/vim/lsp/codelens.lua"
Searching for "/usr/share/nvim/site/lua/vim/lsp/codelens.lua"
Searching for "/usr/local/Cellar/neovim/0.5.0/share/nvim/runtime/lua/vim/lsp/codelens.lua"
Executing: autocmd VimLeavePre * lua vim.lsp._vim_exit_handler()
Executing: highlight default LspDiagnosticsDefaultHint guifg=LightGrey
Executing: highlight default link LspDiagnosticsVirtualTextHint LspDiagnosticsDefaultHint
Executing: highlight default link LspDiagnosticsFloatingHint LspDiagnosticsDefaultHint
Executing: highlight default link LspDiagnosticsSignHint LspDiagnosticsDefaultHint
Executing: highlight default LspDiagnosticsDefaultError guifg=Red
Executing: highlight default link LspDiagnosticsVirtualTextError LspDiagnosticsDefaultError
Executing: highlight default link LspDiagnosticsFloatingError LspDiagnosticsDefaultError
Executing: highlight default link LspDiagnosticsSignError LspDiagnosticsDefaultError
Executing: highlight default LspDiagnosticsDefaultWarning guifg=Orange
Executing: highlight default link LspDiagnosticsVirtualTextWarning LspDiagnosticsDefaultWarning
Executing: highlight default link LspDiagnosticsFloatingWarning LspDiagnosticsDefaultWarning
Executing: highlight default link LspDiagnosticsSignWarning LspDiagnosticsDefaultWarning
Executing: highlight default LspDiagnosticsDefaultInformation guifg=LightBlue
Executing: highlight default link LspDiagnosticsVirtualTextInformation LspDiagnosticsDefaultInformation
Executing: highlight default link LspDiagnosticsFloatingInformation LspDiagnosticsDefaultInformation
Executing: highlight default link LspDiagnosticsSignInformation LspDiagnosticsDefaultInformation
Executing: highlight default LspDiagnosticsUnderlineError guisp=Red cterm=underline gui=underline
Executing: highlight default LspDiagnosticsUnderlineWarning guisp=Orange cterm=underline gui=underline
Executing: highlight default LspDiagnosticsUnderlineInformation guisp=LightBlue cterm=underline gui=underline
Executing: highlight default LspDiagnosticsUnderlineHint guisp=LightGrey cterm=underline gui=underline
Searching for "lua/gitsigns.lua" in "/Users/andrewgu/.config/nvim,/etc/xdg/nvim,/Users/andrewgu/.local/share/nvim/site,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/telescope.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/popup.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/plenary.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/packer.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-web-devicons,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-tree.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-lspconfig,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-compe,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-base16.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-autopairs,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/neoformat,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/lu
Searching for "/Users/andrewgu/.config/nvim/lua/gitsigns.lua"
Searching for "/etc/xdg/nvim/lua/gitsigns.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/lua/gitsigns.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/telescope.nvim/lua/gitsigns.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/popup.nvim/lua/gitsigns.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/plenary.nvim/lua/gitsigns.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/packer.nvim/lua/gitsigns.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/lua/gitsigns.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-web-devicons/lua/gitsigns.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-tree.lua/lua/gitsigns.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-lspconfig/lua/gitsigns.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-compe/lua/gitsigns.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-base16.lua/lua/gitsigns.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-autopairs/lua/gitsigns.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/neoformat/lua/gitsigns.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/lualine.nvim/lua/gitsigns.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/indent-blankline.nvim/lua/gitsigns.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/gitsigns.nvim/lua/gitsigns.lua"
Searching for "lua/plenary/async.lua" in "/Users/andrewgu/.config/nvim,/etc/xdg/nvim,/Users/andrewgu/.local/share/nvim/site,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/telescope.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/popup.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/plenary.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/packer.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-web-devicons,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-tree.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-lspconfig,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-compe,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-base16.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-autopairs,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/neoformat,/Users/andrewgu/.local/share/nvim/site/pack/packer/sta
Searching for "/Users/andrewgu/.config/nvim/lua/plenary/async.lua"
Searching for "/etc/xdg/nvim/lua/plenary/async.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/lua/plenary/async.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/telescope.nvim/lua/plenary/async.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/popup.nvim/lua/plenary/async.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/plenary.nvim/lua/plenary/async.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/packer.nvim/lua/plenary/async.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/lua/plenary/async.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-web-devicons/lua/plenary/async.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-tree.lua/lua/plenary/async.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-lspconfig/lua/plenary/async.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-compe/lua/plenary/async.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-base16.lua/lua/plenary/async.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-autopairs/lua/plenary/async.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/neoformat/lua/plenary/async.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/lualine.nvim/lua/plenary/async.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/indent-blankline.nvim/lua/plenary/async.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/gitsigns.nvim/lua/plenary/async.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/barbar.nvim/lua/plenary/async.lua"
Searching for "/usr/local/share/nvim/site/lua/plenary/async.lua"
Searching for "/usr/share/nvim/site/lua/plenary/async.lua"
Searching for "/usr/local/Cellar/neovim/0.5.0/share/nvim/runtime/lua/plenary/async.lua"
Searching for "/usr/local/Cellar/neovim/0.5.0/share/nvim/runtime/pack/dist/opt/matchit/lua/plenary/async.lua"
Searching for "/usr/local/Cellar/neovim/0.5.0/lib/nvim/lua/plenary/async.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-compe/after/lua/plenary/async.lua"
Searching for "/usr/share/nvim/site/after/lua/plenary/async.lua"
Searching for "/usr/local/share/nvim/site/after/lua/plenary/async.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/after/lua/plenary/async.lua"
Searching for "/etc/xdg/nvim/after/lua/plenary/async.lua"
Searching for "/Users/andrewgu/.config/nvim/after/lua/plenary/async.lua"
not found in 'runtimepath': "lua/plenary/async.lua"
Searching for "pack/*/start/*/lua/plenary/async.lua" in "/Users/andrewgu/.config/nvim,/etc/xdg/nvim,/Users/andrewgu/.local/share/nvim/site,/usr/local/share/nvim/site,/usr/share/nvim/site,/usr/local/Cellar/neovim/0.5.0/share/nvim/runtime,/usr/local/Cellar/neovim/0.5.0/lib/nvim,/usr/share/nvim/site/after,/usr/local/share/nvim/site/after,/Users/andrewgu/.local/share/nvim/site/after,/etc/xdg/nvim/after,/Users/andrewgu/.config/nvim/after"
Searching for "/Users/andrewgu/.config/nvim/pack/*/start/*/lua/plenary/async.lua"
Searching for "/etc/xdg/nvim/pack/*/start/*/lua/plenary/async.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/*/start/*/lua/plenary/async.lua"
Searching for "/usr/local/share/nvim/site/pack/*/start/*/lua/plenary/async.lua"
Searching for "/usr/share/nvim/site/pack/*/start/*/lua/plenary/async.lua"
Searching for "/usr/local/Cellar/neovim/0.5.0/share/nvim/runtime/pack/*/start/*/lua/plenary/async.lua"
Searching for "/usr/local/Cellar/neovim/0.5.0/lib/nvim/pack/*/start/*/lua/plenary/async.lua"
Searching for "/usr/share/nvim/site/after/pack/*/start/*/lua/plenary/async.lua"
Searching for "/usr/local/share/nvim/site/after/pack/*/start/*/lua/plenary/async.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/after/pack/*/start/*/lua/plenary/async.lua"
Searching for "/etc/xdg/nvim/after/pack/*/start/*/lua/plenary/async.lua"
Searching for "/Users/andrewgu/.config/nvim/after/pack/*/start/*/lua/plenary/async.lua"
not found in 'packpath': "pack/*/start/*/lua/plenary/async.lua"
Searching for "start/*/lua/plenary/async.lua" in "/Users/andrewgu/.config/nvim,/etc/xdg/nvim,/Users/andrewgu/.local/share/nvim/site,/usr/local/share/nvim/site,/usr/share/nvim/site,/usr/local/Cellar/neovim/0.5.0/share/nvim/runtime,/usr/local/Cellar/neovim/0.5.0/lib/nvim,/usr/share/nvim/site/after,/usr/local/share/nvim/site/after,/Users/andrewgu/.local/share/nvim/site/after,/etc/xdg/nvim/after,/Users/andrewgu/.config/nvim/after"
Searching for "/Users/andrewgu/.config/nvim/start/*/lua/plenary/async.lua"
Searching for "/etc/xdg/nvim/start/*/lua/plenary/async.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/start/*/lua/plenary/async.lua"
Searching for "/usr/local/share/nvim/site/start/*/lua/plenary/async.lua"
Searching for "/usr/share/nvim/site/start/*/lua/plenary/async.lua"
Searching for "/usr/local/Cellar/neovim/0.5.0/share/nvim/runtime/start/*/lua/plenary/async.lua"
Searching for "/usr/local/Cellar/neovim/0.5.0/lib/nvim/start/*/lua/plenary/async.lua"
Searching for "/usr/share/nvim/site/after/start/*/lua/plenary/async.lua"
Searching for "/usr/local/share/nvim/site/after/start/*/lua/plenary/async.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/after/start/*/lua/plenary/async.lua"
Searching for "/etc/xdg/nvim/after/start/*/lua/plenary/async.lua"
Searching for "/Users/andrewgu/.config/nvim/after/start/*/lua/plenary/async.lua"
not found in 'packpath': "start/*/lua/plenary/async.lua"
Searching for "lua/plenary/async/init.lua" in "/Users/andrewgu/.config/nvim,/etc/xdg/nvim,/Users/andrewgu/.local/share/nvim/site,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/telescope.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/popup.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/plenary.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/packer.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-web-devicons,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-tree.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-lspconfig,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-compe,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-base16.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-autopairs,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/neoformat,/Users/andrewgu/.local/share/nvim/site/pack/packe
Searching for "/Users/andrewgu/.config/nvim/lua/plenary/async/init.lua"
Searching for "/etc/xdg/nvim/lua/plenary/async/init.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/lua/plenary/async/init.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/telescope.nvim/lua/plenary/async/init.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/popup.nvim/lua/plenary/async/init.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/plenary.nvim/lua/plenary/async/init.lua"
Searching for "lua/plenary/async/async.lua" in "/Users/andrewgu/.config/nvim,/etc/xdg/nvim,/Users/andrewgu/.local/share/nvim/site,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/telescope.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/popup.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/plenary.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/packer.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-web-devicons,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-tree.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-lspconfig,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-compe,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-base16.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-autopairs,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/neoformat,/Users/andrewgu/.local/share/nvim/site/pack/pack
Searching for "/Users/andrewgu/.config/nvim/lua/plenary/async/async.lua"
Searching for "/etc/xdg/nvim/lua/plenary/async/async.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/lua/plenary/async/async.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/telescope.nvim/lua/plenary/async/async.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/popup.nvim/lua/plenary/async/async.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/plenary.nvim/lua/plenary/async/async.lua"
Searching for "lua/plenary/vararg.lua" in "/Users/andrewgu/.config/nvim,/etc/xdg/nvim,/Users/andrewgu/.local/share/nvim/site,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/telescope.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/popup.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/plenary.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/packer.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-web-devicons,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-tree.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-lspconfig,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-compe,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-base16.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-autopairs,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/neoformat,/Users/andrewgu/.local/share/nvim/site/pack/packer/st
Searching for "/Users/andrewgu/.config/nvim/lua/plenary/vararg.lua"
Searching for "/etc/xdg/nvim/lua/plenary/vararg.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/lua/plenary/vararg.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/telescope.nvim/lua/plenary/vararg.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/popup.nvim/lua/plenary/vararg.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/plenary.nvim/lua/plenary/vararg.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/packer.nvim/lua/plenary/vararg.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/lua/plenary/vararg.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-web-devicons/lua/plenary/vararg.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-tree.lua/lua/plenary/vararg.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-lspconfig/lua/plenary/vararg.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-compe/lua/plenary/vararg.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-base16.lua/lua/plenary/vararg.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-autopairs/lua/plenary/vararg.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/neoformat/lua/plenary/vararg.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/lualine.nvim/lua/plenary/vararg.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/indent-blankline.nvim/lua/plenary/vararg.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/gitsigns.nvim/lua/plenary/vararg.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/barbar.nvim/lua/plenary/vararg.lua"
Searching for "/usr/local/share/nvim/site/lua/plenary/vararg.lua"
Searching for "/usr/share/nvim/site/lua/plenary/vararg.lua"
Searching for "/usr/local/Cellar/neovim/0.5.0/share/nvim/runtime/lua/plenary/vararg.lua"
Searching for "/usr/local/Cellar/neovim/0.5.0/share/nvim/runtime/pack/dist/opt/matchit/lua/plenary/vararg.lua"
Searching for "/usr/local/Cellar/neovim/0.5.0/lib/nvim/lua/plenary/vararg.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-compe/after/lua/plenary/vararg.lua"
Searching for "/usr/share/nvim/site/after/lua/plenary/vararg.lua"
Searching for "/usr/local/share/nvim/site/after/lua/plenary/vararg.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/after/lua/plenary/vararg.lua"
Searching for "/etc/xdg/nvim/after/lua/plenary/vararg.lua"
Searching for "/Users/andrewgu/.config/nvim/after/lua/plenary/vararg.lua"
not found in 'runtimepath': "lua/plenary/vararg.lua"
Searching for "pack/*/start/*/lua/plenary/vararg.lua" in "/Users/andrewgu/.config/nvim,/etc/xdg/nvim,/Users/andrewgu/.local/share/nvim/site,/usr/local/share/nvim/site,/usr/share/nvim/site,/usr/local/Cellar/neovim/0.5.0/share/nvim/runtime,/usr/local/Cellar/neovim/0.5.0/lib/nvim,/usr/share/nvim/site/after,/usr/local/share/nvim/site/after,/Users/andrewgu/.local/share/nvim/site/after,/etc/xdg/nvim/after,/Users/andrewgu/.config/nvim/after"
Searching for "/Users/andrewgu/.config/nvim/pack/*/start/*/lua/plenary/vararg.lua"
Searching for "/etc/xdg/nvim/pack/*/start/*/lua/plenary/vararg.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/*/start/*/lua/plenary/vararg.lua"
Searching for "/usr/local/share/nvim/site/pack/*/start/*/lua/plenary/vararg.lua"
Searching for "/usr/share/nvim/site/pack/*/start/*/lua/plenary/vararg.lua"
Searching for "/usr/local/Cellar/neovim/0.5.0/share/nvim/runtime/pack/*/start/*/lua/plenary/vararg.lua"
Searching for "/usr/local/Cellar/neovim/0.5.0/lib/nvim/pack/*/start/*/lua/plenary/vararg.lua"
Searching for "/usr/share/nvim/site/after/pack/*/start/*/lua/plenary/vararg.lua"
Searching for "/usr/local/share/nvim/site/after/pack/*/start/*/lua/plenary/vararg.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/after/pack/*/start/*/lua/plenary/vararg.lua"
Searching for "/etc/xdg/nvim/after/pack/*/start/*/lua/plenary/vararg.lua"
Searching for "/Users/andrewgu/.config/nvim/after/pack/*/start/*/lua/plenary/vararg.lua"
not found in 'packpath': "pack/*/start/*/lua/plenary/vararg.lua"
Searching for "start/*/lua/plenary/vararg.lua" in "/Users/andrewgu/.config/nvim,/etc/xdg/nvim,/Users/andrewgu/.local/share/nvim/site,/usr/local/share/nvim/site,/usr/share/nvim/site,/usr/local/Cellar/neovim/0.5.0/share/nvim/runtime,/usr/local/Cellar/neovim/0.5.0/lib/nvim,/usr/share/nvim/site/after,/usr/local/share/nvim/site/after,/Users/andrewgu/.local/share/nvim/site/after,/etc/xdg/nvim/after,/Users/andrewgu/.config/nvim/after"
Searching for "/Users/andrewgu/.config/nvim/start/*/lua/plenary/vararg.lua"
Searching for "/etc/xdg/nvim/start/*/lua/plenary/vararg.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/start/*/lua/plenary/vararg.lua"
Searching for "/usr/local/share/nvim/site/start/*/lua/plenary/vararg.lua"
Searching for "/usr/share/nvim/site/start/*/lua/plenary/vararg.lua"
Searching for "/usr/local/Cellar/neovim/0.5.0/share/nvim/runtime/start/*/lua/plenary/vararg.lua"
Searching for "/usr/local/Cellar/neovim/0.5.0/lib/nvim/start/*/lua/plenary/vararg.lua"
Searching for "/usr/share/nvim/site/after/start/*/lua/plenary/vararg.lua"
Searching for "/usr/local/share/nvim/site/after/start/*/lua/plenary/vararg.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/after/start/*/lua/plenary/vararg.lua"
Searching for "/etc/xdg/nvim/after/start/*/lua/plenary/vararg.lua"
Searching for "/Users/andrewgu/.config/nvim/after/start/*/lua/plenary/vararg.lua"
not found in 'packpath': "start/*/lua/plenary/vararg.lua"
Searching for "lua/plenary/vararg/init.lua" in "/Users/andrewgu/.config/nvim,/etc/xdg/nvim,/Users/andrewgu/.local/share/nvim/site,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/telescope.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/popup.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/plenary.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/packer.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-web-devicons,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-tree.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-lspconfig,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-compe,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-base16.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-autopairs,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/neoformat,/Users/andrewgu/.local/share/nvim/site/pack/pack
Searching for "/Users/andrewgu/.config/nvim/lua/plenary/vararg/init.lua"
Searching for "/etc/xdg/nvim/lua/plenary/vararg/init.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/lua/plenary/vararg/init.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/telescope.nvim/lua/plenary/vararg/init.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/popup.nvim/lua/plenary/vararg/init.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/plenary.nvim/lua/plenary/vararg/init.lua"
Searching for "lua/plenary/vararg/rotate.lua" in "/Users/andrewgu/.config/nvim,/etc/xdg/nvim,/Users/andrewgu/.local/share/nvim/site,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/telescope.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/popup.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/plenary.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/packer.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-web-devicons,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-tree.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-lspconfig,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-compe,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-base16.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-autopairs,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/neoformat,/Users/andrewgu/.local/share/nvim/site/pack/pa
Searching for "/Users/andrewgu/.config/nvim/lua/plenary/vararg/rotate.lua"
Searching for "/etc/xdg/nvim/lua/plenary/vararg/rotate.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/lua/plenary/vararg/rotate.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/telescope.nvim/lua/plenary/vararg/rotate.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/popup.nvim/lua/plenary/vararg/rotate.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/plenary.nvim/lua/plenary/vararg/rotate.lua"
Searching for "lua/plenary/tbl.lua" in "/Users/andrewgu/.config/nvim,/etc/xdg/nvim,/Users/andrewgu/.local/share/nvim/site,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/telescope.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/popup.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/plenary.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/packer.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-web-devicons,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-tree.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-lspconfig,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-compe,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-base16.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-autopairs,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/neoformat,/Users/andrewgu/.local/share/nvim/site/pack/packer/start
Searching for "/Users/andrewgu/.config/nvim/lua/plenary/tbl.lua"
Searching for "/etc/xdg/nvim/lua/plenary/tbl.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/lua/plenary/tbl.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/telescope.nvim/lua/plenary/tbl.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/popup.nvim/lua/plenary/tbl.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/plenary.nvim/lua/plenary/tbl.lua"
Searching for "lua/plenary/errors.lua" in "/Users/andrewgu/.config/nvim,/etc/xdg/nvim,/Users/andrewgu/.local/share/nvim/site,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/telescope.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/popup.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/plenary.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/packer.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-web-devicons,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-tree.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-lspconfig,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-compe,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-base16.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-autopairs,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/neoformat,/Users/andrewgu/.local/share/nvim/site/pack/packer/st
Searching for "/Users/andrewgu/.config/nvim/lua/plenary/errors.lua"
Searching for "/etc/xdg/nvim/lua/plenary/errors.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/lua/plenary/errors.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/telescope.nvim/lua/plenary/errors.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/popup.nvim/lua/plenary/errors.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/plenary.nvim/lua/plenary/errors.lua"
Searching for "lua/plenary/functional.lua" in "/Users/andrewgu/.config/nvim,/etc/xdg/nvim,/Users/andrewgu/.local/share/nvim/site,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/telescope.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/popup.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/plenary.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/packer.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-web-devicons,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-tree.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-lspconfig,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-compe,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-base16.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-autopairs,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/neoformat,/Users/andrewgu/.local/share/nvim/site/pack/packe
Searching for "/Users/andrewgu/.config/nvim/lua/plenary/functional.lua"
Searching for "/etc/xdg/nvim/lua/plenary/functional.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/lua/plenary/functional.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/telescope.nvim/lua/plenary/functional.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/popup.nvim/lua/plenary/functional.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/plenary.nvim/lua/plenary/functional.lua"
Searching for "lua/plenary/async/uv_async.lua" in "/Users/andrewgu/.config/nvim,/etc/xdg/nvim,/Users/andrewgu/.local/share/nvim/site,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/telescope.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/popup.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/plenary.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/packer.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-web-devicons,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-tree.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-lspconfig,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-compe,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-base16.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-autopairs,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/neoformat,/Users/andrewgu/.local/share/nvim/site/pack/p
Searching for "/Users/andrewgu/.config/nvim/lua/plenary/async/uv_async.lua"
Searching for "/etc/xdg/nvim/lua/plenary/async/uv_async.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/lua/plenary/async/uv_async.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/telescope.nvim/lua/plenary/async/uv_async.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/popup.nvim/lua/plenary/async/uv_async.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/plenary.nvim/lua/plenary/async/uv_async.lua"
Searching for "lua/plenary/async/util.lua" in "/Users/andrewgu/.config/nvim,/etc/xdg/nvim,/Users/andrewgu/.local/share/nvim/site,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/telescope.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/popup.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/plenary.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/packer.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-web-devicons,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-tree.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-lspconfig,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-compe,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-base16.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-autopairs,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/neoformat,/Users/andrewgu/.local/share/nvim/site/pack/packe
Searching for "/Users/andrewgu/.config/nvim/lua/plenary/async/util.lua"
Searching for "/etc/xdg/nvim/lua/plenary/async/util.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/lua/plenary/async/util.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/telescope.nvim/lua/plenary/async/util.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/popup.nvim/lua/plenary/async/util.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/plenary.nvim/lua/plenary/async/util.lua"
Searching for "lua/plenary/async/control.lua" in "/Users/andrewgu/.config/nvim,/etc/xdg/nvim,/Users/andrewgu/.local/share/nvim/site,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/telescope.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/popup.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/plenary.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/packer.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-web-devicons,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-tree.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-lspconfig,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-compe,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-base16.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-autopairs,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/neoformat,/Users/andrewgu/.local/share/nvim/site/pack/pa
Searching for "/Users/andrewgu/.config/nvim/lua/plenary/async/control.lua"
Searching for "/etc/xdg/nvim/lua/plenary/async/control.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/lua/plenary/async/control.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/telescope.nvim/lua/plenary/async/control.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/popup.nvim/lua/plenary/async/control.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/plenary.nvim/lua/plenary/async/control.lua"
Searching for "lua/plenary/async/structs.lua" in "/Users/andrewgu/.config/nvim,/etc/xdg/nvim,/Users/andrewgu/.local/share/nvim/site,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/telescope.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/popup.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/plenary.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/packer.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-web-devicons,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-tree.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-lspconfig,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-compe,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-base16.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-autopairs,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/neoformat,/Users/andrewgu/.local/share/nvim/site/pack/pa
Searching for "/Users/andrewgu/.config/nvim/lua/plenary/async/structs.lua"
Searching for "/etc/xdg/nvim/lua/plenary/async/structs.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/lua/plenary/async/structs.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/telescope.nvim/lua/plenary/async/structs.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/popup.nvim/lua/plenary/async/structs.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/plenary.nvim/lua/plenary/async/structs.lua"
Searching for "lua/plenary/async/lsp.lua" in "/Users/andrewgu/.config/nvim,/etc/xdg/nvim,/Users/andrewgu/.local/share/nvim/site,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/telescope.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/popup.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/plenary.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/packer.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-web-devicons,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-tree.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-lspconfig,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-compe,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-base16.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-autopairs,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/neoformat,/Users/andrewgu/.local/share/nvim/site/pack/packer
Searching for "/Users/andrewgu/.config/nvim/lua/plenary/async/lsp.lua"
Searching for "/etc/xdg/nvim/lua/plenary/async/lsp.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/lua/plenary/async/lsp.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/telescope.nvim/lua/plenary/async/lsp.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/popup.nvim/lua/plenary/async/lsp.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/plenary.nvim/lua/plenary/async/lsp.lua"
Searching for "lua/plenary/async/api.lua" in "/Users/andrewgu/.config/nvim,/etc/xdg/nvim,/Users/andrewgu/.local/share/nvim/site,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/telescope.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/popup.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/plenary.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/packer.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-web-devicons,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-tree.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-lspconfig,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-compe,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-base16.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-autopairs,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/neoformat,/Users/andrewgu/.local/share/nvim/site/pack/packer
Searching for "/Users/andrewgu/.config/nvim/lua/plenary/async/api.lua"
Searching for "/etc/xdg/nvim/lua/plenary/async/api.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/lua/plenary/async/api.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/telescope.nvim/lua/plenary/async/api.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/popup.nvim/lua/plenary/async/api.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/plenary.nvim/lua/plenary/async/api.lua"
Searching for "lua/plenary/async/tests.lua" in "/Users/andrewgu/.config/nvim,/etc/xdg/nvim,/Users/andrewgu/.local/share/nvim/site,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/telescope.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/popup.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/plenary.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/packer.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-web-devicons,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-tree.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-lspconfig,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-compe,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-base16.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-autopairs,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/neoformat,/Users/andrewgu/.local/share/nvim/site/pack/pack
Searching for "/Users/andrewgu/.config/nvim/lua/plenary/async/tests.lua"
Searching for "/etc/xdg/nvim/lua/plenary/async/tests.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/lua/plenary/async/tests.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/telescope.nvim/lua/plenary/async/tests.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/popup.nvim/lua/plenary/async/tests.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/plenary.nvim/lua/plenary/async/tests.lua"
Searching for "lua/gitsigns/status.lua" in "/Users/andrewgu/.config/nvim,/etc/xdg/nvim,/Users/andrewgu/.local/share/nvim/site,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/telescope.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/popup.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/plenary.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/packer.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-web-devicons,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-tree.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-lspconfig,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-compe,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-base16.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-autopairs,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/neoformat,/Users/andrewgu/.local/share/nvim/site/pack/packer/s
Searching for "/Users/andrewgu/.config/nvim/lua/gitsigns/status.lua"
Searching for "/etc/xdg/nvim/lua/gitsigns/status.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/lua/gitsigns/status.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/telescope.nvim/lua/gitsigns/status.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/popup.nvim/lua/gitsigns/status.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/plenary.nvim/lua/gitsigns/status.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/packer.nvim/lua/gitsigns/status.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/lua/gitsigns/status.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-web-devicons/lua/gitsigns/status.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-tree.lua/lua/gitsigns/status.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-lspconfig/lua/gitsigns/status.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-compe/lua/gitsigns/status.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-base16.lua/lua/gitsigns/status.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-autopairs/lua/gitsigns/status.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/neoformat/lua/gitsigns/status.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/lualine.nvim/lua/gitsigns/status.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/indent-blankline.nvim/lua/gitsigns/status.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/gitsigns.nvim/lua/gitsigns/status.lua"
Searching for "lua/gitsigns/git.lua" in "/Users/andrewgu/.config/nvim,/etc/xdg/nvim,/Users/andrewgu/.local/share/nvim/site,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/telescope.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/popup.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/plenary.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/packer.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-web-devicons,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-tree.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-lspconfig,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-compe,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-base16.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-autopairs,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/neoformat,/Users/andrewgu/.local/share/nvim/site/pack/packer/star
Searching for "/Users/andrewgu/.config/nvim/lua/gitsigns/git.lua"
Searching for "/etc/xdg/nvim/lua/gitsigns/git.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/lua/gitsigns/git.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/telescope.nvim/lua/gitsigns/git.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/popup.nvim/lua/gitsigns/git.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/plenary.nvim/lua/gitsigns/git.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/packer.nvim/lua/gitsigns/git.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/lua/gitsigns/git.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-web-devicons/lua/gitsigns/git.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-tree.lua/lua/gitsigns/git.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-lspconfig/lua/gitsigns/git.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-compe/lua/gitsigns/git.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-base16.lua/lua/gitsigns/git.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-autopairs/lua/gitsigns/git.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/neoformat/lua/gitsigns/git.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/lualine.nvim/lua/gitsigns/git.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/indent-blankline.nvim/lua/gitsigns/git.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/gitsigns.nvim/lua/gitsigns/git.lua"
Searching for "lua/plenary/job.lua" in "/Users/andrewgu/.config/nvim,/etc/xdg/nvim,/Users/andrewgu/.local/share/nvim/site,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/telescope.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/popup.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/plenary.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/packer.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-web-devicons,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-tree.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-lspconfig,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-compe,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-base16.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-autopairs,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/neoformat,/Users/andrewgu/.local/share/nvim/site/pack/packer/start
Searching for "/Users/andrewgu/.config/nvim/lua/plenary/job.lua"
Searching for "/etc/xdg/nvim/lua/plenary/job.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/lua/plenary/job.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/telescope.nvim/lua/plenary/job.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/popup.nvim/lua/plenary/job.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/plenary.nvim/lua/plenary/job.lua"
Searching for "lua/gitsigns/debug.lua" in "/Users/andrewgu/.config/nvim,/etc/xdg/nvim,/Users/andrewgu/.local/share/nvim/site,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/telescope.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/popup.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/plenary.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/packer.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-web-devicons,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-tree.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-lspconfig,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-compe,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-base16.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-autopairs,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/neoformat,/Users/andrewgu/.local/share/nvim/site/pack/packer/st
Searching for "/Users/andrewgu/.config/nvim/lua/gitsigns/debug.lua"
Searching for "/etc/xdg/nvim/lua/gitsigns/debug.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/lua/gitsigns/debug.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/telescope.nvim/lua/gitsigns/debug.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/popup.nvim/lua/gitsigns/debug.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/plenary.nvim/lua/gitsigns/debug.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/packer.nvim/lua/gitsigns/debug.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/lua/gitsigns/debug.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-web-devicons/lua/gitsigns/debug.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-tree.lua/lua/gitsigns/debug.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-lspconfig/lua/gitsigns/debug.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-compe/lua/gitsigns/debug.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-base16.lua/lua/gitsigns/debug.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-autopairs/lua/gitsigns/debug.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/neoformat/lua/gitsigns/debug.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/lualine.nvim/lua/gitsigns/debug.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/indent-blankline.nvim/lua/gitsigns/debug.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/gitsigns.nvim/lua/gitsigns/debug.lua"
Searching for "lua/gitsigns/util.lua" in "/Users/andrewgu/.config/nvim,/etc/xdg/nvim,/Users/andrewgu/.local/share/nvim/site,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/telescope.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/popup.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/plenary.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/packer.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-web-devicons,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-tree.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-lspconfig,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-compe,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-base16.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-autopairs,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/neoformat,/Users/andrewgu/.local/share/nvim/site/pack/packer/sta
Searching for "/Users/andrewgu/.config/nvim/lua/gitsigns/util.lua"
Searching for "/etc/xdg/nvim/lua/gitsigns/util.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/lua/gitsigns/util.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/telescope.nvim/lua/gitsigns/util.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/popup.nvim/lua/gitsigns/util.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/plenary.nvim/lua/gitsigns/util.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/packer.nvim/lua/gitsigns/util.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/lua/gitsigns/util.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-web-devicons/lua/gitsigns/util.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-tree.lua/lua/gitsigns/util.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-lspconfig/lua/gitsigns/util.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-compe/lua/gitsigns/util.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-base16.lua/lua/gitsigns/util.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-autopairs/lua/gitsigns/util.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/neoformat/lua/gitsigns/util.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/lualine.nvim/lua/gitsigns/util.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/indent-blankline.nvim/lua/gitsigns/util.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/gitsigns.nvim/lua/gitsigns/util.lua"
Searching for "lua/gitsigns/hunks.lua" in "/Users/andrewgu/.config/nvim,/etc/xdg/nvim,/Users/andrewgu/.local/share/nvim/site,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/telescope.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/popup.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/plenary.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/packer.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-web-devicons,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-tree.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-lspconfig,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-compe,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-base16.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-autopairs,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/neoformat,/Users/andrewgu/.local/share/nvim/site/pack/packer/st
Searching for "/Users/andrewgu/.config/nvim/lua/gitsigns/hunks.lua"
Searching for "/etc/xdg/nvim/lua/gitsigns/hunks.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/lua/gitsigns/hunks.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/telescope.nvim/lua/gitsigns/hunks.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/popup.nvim/lua/gitsigns/hunks.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/plenary.nvim/lua/gitsigns/hunks.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/packer.nvim/lua/gitsigns/hunks.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/lua/gitsigns/hunks.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-web-devicons/lua/gitsigns/hunks.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-tree.lua/lua/gitsigns/hunks.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-lspconfig/lua/gitsigns/hunks.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-compe/lua/gitsigns/hunks.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-base16.lua/lua/gitsigns/hunks.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-autopairs/lua/gitsigns/hunks.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/neoformat/lua/gitsigns/hunks.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/lualine.nvim/lua/gitsigns/hunks.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/indent-blankline.nvim/lua/gitsigns/hunks.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/gitsigns.nvim/lua/gitsigns/hunks.lua"
Searching for "lua/gitsigns/signs.lua" in "/Users/andrewgu/.config/nvim,/etc/xdg/nvim,/Users/andrewgu/.local/share/nvim/site,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/telescope.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/popup.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/plenary.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/packer.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-web-devicons,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-tree.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-lspconfig,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-compe,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-base16.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-autopairs,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/neoformat,/Users/andrewgu/.local/share/nvim/site/pack/packer/st
Searching for "/Users/andrewgu/.config/nvim/lua/gitsigns/signs.lua"
Searching for "/etc/xdg/nvim/lua/gitsigns/signs.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/lua/gitsigns/signs.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/telescope.nvim/lua/gitsigns/signs.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/popup.nvim/lua/gitsigns/signs.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/plenary.nvim/lua/gitsigns/signs.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/packer.nvim/lua/gitsigns/signs.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/lua/gitsigns/signs.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-web-devicons/lua/gitsigns/signs.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-tree.lua/lua/gitsigns/signs.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-lspconfig/lua/gitsigns/signs.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-compe/lua/gitsigns/signs.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-base16.lua/lua/gitsigns/signs.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-autopairs/lua/gitsigns/signs.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/neoformat/lua/gitsigns/signs.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/lualine.nvim/lua/gitsigns/signs.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/indent-blankline.nvim/lua/gitsigns/signs.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/gitsigns.nvim/lua/gitsigns/signs.lua"
Searching for "lua/gitsigns/config.lua" in "/Users/andrewgu/.config/nvim,/etc/xdg/nvim,/Users/andrewgu/.local/share/nvim/site,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/telescope.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/popup.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/plenary.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/packer.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-web-devicons,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-tree.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-lspconfig,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-compe,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-base16.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-autopairs,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/neoformat,/Users/andrewgu/.local/share/nvim/site/pack/packer/s
Searching for "/Users/andrewgu/.config/nvim/lua/gitsigns/config.lua"
Searching for "/etc/xdg/nvim/lua/gitsigns/config.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/lua/gitsigns/config.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/telescope.nvim/lua/gitsigns/config.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/popup.nvim/lua/gitsigns/config.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/plenary.nvim/lua/gitsigns/config.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/packer.nvim/lua/gitsigns/config.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/lua/gitsigns/config.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-web-devicons/lua/gitsigns/config.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-tree.lua/lua/gitsigns/config.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-lspconfig/lua/gitsigns/config.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-compe/lua/gitsigns/config.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-base16.lua/lua/gitsigns/config.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-autopairs/lua/gitsigns/config.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/neoformat/lua/gitsigns/config.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/lualine.nvim/lua/gitsigns/config.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/indent-blankline.nvim/lua/gitsigns/config.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/gitsigns.nvim/lua/gitsigns/config.lua"
Searching for "lua/gitsigns/manager.lua" in "/Users/andrewgu/.config/nvim,/etc/xdg/nvim,/Users/andrewgu/.local/share/nvim/site,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/telescope.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/popup.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/plenary.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/packer.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-web-devicons,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-tree.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-lspconfig,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-compe,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-base16.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-autopairs,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/neoformat,/Users/andrewgu/.local/share/nvim/site/pack/packer/
Searching for "/Users/andrewgu/.config/nvim/lua/gitsigns/manager.lua"
Searching for "/etc/xdg/nvim/lua/gitsigns/manager.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/lua/gitsigns/manager.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/telescope.nvim/lua/gitsigns/manager.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/popup.nvim/lua/gitsigns/manager.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/plenary.nvim/lua/gitsigns/manager.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/packer.nvim/lua/gitsigns/manager.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/lua/gitsigns/manager.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-web-devicons/lua/gitsigns/manager.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-tree.lua/lua/gitsigns/manager.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-lspconfig/lua/gitsigns/manager.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-compe/lua/gitsigns/manager.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-base16.lua/lua/gitsigns/manager.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-autopairs/lua/gitsigns/manager.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/neoformat/lua/gitsigns/manager.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/lualine.nvim/lua/gitsigns/manager.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/indent-blankline.nvim/lua/gitsigns/manager.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/gitsigns.nvim/lua/gitsigns/manager.lua"
Searching for "lua/gitsigns/cache.lua" in "/Users/andrewgu/.config/nvim,/etc/xdg/nvim,/Users/andrewgu/.local/share/nvim/site,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/telescope.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/popup.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/plenary.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/packer.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-web-devicons,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-tree.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-lspconfig,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-compe,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-base16.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-autopairs,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/neoformat,/Users/andrewgu/.local/share/nvim/site/pack/packer/st
Searching for "/Users/andrewgu/.config/nvim/lua/gitsigns/cache.lua"
Searching for "/etc/xdg/nvim/lua/gitsigns/cache.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/lua/gitsigns/cache.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/telescope.nvim/lua/gitsigns/cache.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/popup.nvim/lua/gitsigns/cache.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/plenary.nvim/lua/gitsigns/cache.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/packer.nvim/lua/gitsigns/cache.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/lua/gitsigns/cache.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-web-devicons/lua/gitsigns/cache.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-tree.lua/lua/gitsigns/cache.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-lspconfig/lua/gitsigns/cache.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-compe/lua/gitsigns/cache.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-base16.lua/lua/gitsigns/cache.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-autopairs/lua/gitsigns/cache.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/neoformat/lua/gitsigns/cache.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/lualine.nvim/lua/gitsigns/cache.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/indent-blankline.nvim/lua/gitsigns/cache.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/gitsigns.nvim/lua/gitsigns/cache.lua"
Searching for "lua/gitsigns/debounce.lua" in "/Users/andrewgu/.config/nvim,/etc/xdg/nvim,/Users/andrewgu/.local/share/nvim/site,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/telescope.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/popup.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/plenary.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/packer.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-web-devicons,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-tree.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-lspconfig,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-compe,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-base16.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-autopairs,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/neoformat,/Users/andrewgu/.local/share/nvim/site/pack/packer
Searching for "/Users/andrewgu/.config/nvim/lua/gitsigns/debounce.lua"
Searching for "/etc/xdg/nvim/lua/gitsigns/debounce.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/lua/gitsigns/debounce.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/telescope.nvim/lua/gitsigns/debounce.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/popup.nvim/lua/gitsigns/debounce.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/plenary.nvim/lua/gitsigns/debounce.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/packer.nvim/lua/gitsigns/debounce.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/lua/gitsigns/debounce.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-web-devicons/lua/gitsigns/debounce.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-tree.lua/lua/gitsigns/debounce.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-lspconfig/lua/gitsigns/debounce.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-compe/lua/gitsigns/debounce.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-base16.lua/lua/gitsigns/debounce.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-autopairs/lua/gitsigns/debounce.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/neoformat/lua/gitsigns/debounce.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/lualine.nvim/lua/gitsigns/debounce.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/indent-blankline.nvim/lua/gitsigns/debounce.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/gitsigns.nvim/lua/gitsigns/debounce.lua"
Searching for "lua/gitsigns/highlight.lua" in "/Users/andrewgu/.config/nvim,/etc/xdg/nvim,/Users/andrewgu/.local/share/nvim/site,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/telescope.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/popup.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/plenary.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/packer.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-web-devicons,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-tree.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-lspconfig,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-compe,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-base16.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-autopairs,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/neoformat,/Users/andrewgu/.local/share/nvim/site/pack/packe
Searching for "/Users/andrewgu/.config/nvim/lua/gitsigns/highlight.lua"
Searching for "/etc/xdg/nvim/lua/gitsigns/highlight.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/lua/gitsigns/highlight.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/telescope.nvim/lua/gitsigns/highlight.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/popup.nvim/lua/gitsigns/highlight.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/plenary.nvim/lua/gitsigns/highlight.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/packer.nvim/lua/gitsigns/highlight.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/lua/gitsigns/highlight.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-web-devicons/lua/gitsigns/highlight.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-tree.lua/lua/gitsigns/highlight.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-lspconfig/lua/gitsigns/highlight.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-compe/lua/gitsigns/highlight.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-base16.lua/lua/gitsigns/highlight.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-autopairs/lua/gitsigns/highlight.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/neoformat/lua/gitsigns/highlight.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/lualine.nvim/lua/gitsigns/highlight.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/indent-blankline.nvim/lua/gitsigns/highlight.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/gitsigns.nvim/lua/gitsigns/highlight.lua"
Executing: autocmd VimEnter * ++once lua require('gitsigns.manager').setup_signs_and_highlights()
Executing: command! -range -nargs=+ -complete=customlist,v:lua.package.loaded.gitsigns._complete Gitsigns lua require("gitsigns")._run_func({<line1>, <line2>}, <f-args>)
Searching for "lua/nvim-autopairs.lua" in "/Users/andrewgu/.config/nvim,/etc/xdg/nvim,/Users/andrewgu/.local/share/nvim/site,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/telescope.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/popup.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/plenary.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/packer.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-web-devicons,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-tree.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-lspconfig,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-compe,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-base16.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-autopairs,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/neoformat,/Users/andrewgu/.local/share/nvim/site/pack/packer/st
Searching for "/Users/andrewgu/.config/nvim/lua/nvim-autopairs.lua"
Searching for "/etc/xdg/nvim/lua/nvim-autopairs.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/lua/nvim-autopairs.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/telescope.nvim/lua/nvim-autopairs.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/popup.nvim/lua/nvim-autopairs.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/plenary.nvim/lua/nvim-autopairs.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/packer.nvim/lua/nvim-autopairs.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/lua/nvim-autopairs.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-web-devicons/lua/nvim-autopairs.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-tree.lua/lua/nvim-autopairs.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-lspconfig/lua/nvim-autopairs.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-compe/lua/nvim-autopairs.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-base16.lua/lua/nvim-autopairs.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-autopairs/lua/nvim-autopairs.lua"
Searching for "lua/nvim-autopairs/_log.lua" in "/Users/andrewgu/.config/nvim,/etc/xdg/nvim,/Users/andrewgu/.local/share/nvim/site,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/telescope.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/popup.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/plenary.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/packer.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-web-devicons,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-tree.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-lspconfig,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-compe,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-base16.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-autopairs,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/neoformat,/Users/andrewgu/.local/share/nvim/site/pack/pack
Searching for "/Users/andrewgu/.config/nvim/lua/nvim-autopairs/_log.lua"
Searching for "/etc/xdg/nvim/lua/nvim-autopairs/_log.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/lua/nvim-autopairs/_log.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/telescope.nvim/lua/nvim-autopairs/_log.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/popup.nvim/lua/nvim-autopairs/_log.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/plenary.nvim/lua/nvim-autopairs/_log.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/packer.nvim/lua/nvim-autopairs/_log.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/lua/nvim-autopairs/_log.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-web-devicons/lua/nvim-autopairs/_log.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-tree.lua/lua/nvim-autopairs/_log.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-lspconfig/lua/nvim-autopairs/_log.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-compe/lua/nvim-autopairs/_log.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-base16.lua/lua/nvim-autopairs/_log.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-autopairs/lua/nvim-autopairs/_log.lua"
Searching for "lua/nvim-autopairs/utils.lua" in "/Users/andrewgu/.config/nvim,/etc/xdg/nvim,/Users/andrewgu/.local/share/nvim/site,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/telescope.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/popup.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/plenary.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/packer.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-web-devicons,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-tree.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-lspconfig,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-compe,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-base16.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-autopairs,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/neoformat,/Users/andrewgu/.local/share/nvim/site/pack/pac
Searching for "/Users/andrewgu/.config/nvim/lua/nvim-autopairs/utils.lua"
Searching for "/etc/xdg/nvim/lua/nvim-autopairs/utils.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/lua/nvim-autopairs/utils.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/telescope.nvim/lua/nvim-autopairs/utils.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/popup.nvim/lua/nvim-autopairs/utils.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/plenary.nvim/lua/nvim-autopairs/utils.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/packer.nvim/lua/nvim-autopairs/utils.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/lua/nvim-autopairs/utils.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-web-devicons/lua/nvim-autopairs/utils.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-tree.lua/lua/nvim-autopairs/utils.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-lspconfig/lua/nvim-autopairs/utils.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-compe/lua/nvim-autopairs/utils.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-base16.lua/lua/nvim-autopairs/utils.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-autopairs/lua/nvim-autopairs/utils.lua"
Searching for "lua/nvim-autopairs/rules/basic.lua" in "/Users/andrewgu/.config/nvim,/etc/xdg/nvim,/Users/andrewgu/.local/share/nvim/site,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/telescope.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/popup.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/plenary.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/packer.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-web-devicons,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-tree.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-lspconfig,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-compe,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-base16.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-autopairs,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/neoformat,/Users/andrewgu/.local/share/nvim/site/pa
Searching for "/Users/andrewgu/.config/nvim/lua/nvim-autopairs/rules/basic.lua"
Searching for "/etc/xdg/nvim/lua/nvim-autopairs/rules/basic.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/lua/nvim-autopairs/rules/basic.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/telescope.nvim/lua/nvim-autopairs/rules/basic.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/popup.nvim/lua/nvim-autopairs/rules/basic.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/plenary.nvim/lua/nvim-autopairs/rules/basic.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/packer.nvim/lua/nvim-autopairs/rules/basic.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/lua/nvim-autopairs/rules/basic.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-web-devicons/lua/nvim-autopairs/rules/basic.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-tree.lua/lua/nvim-autopairs/rules/basic.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-lspconfig/lua/nvim-autopairs/rules/basic.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-compe/lua/nvim-autopairs/rules/basic.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-base16.lua/lua/nvim-autopairs/rules/basic.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-autopairs/lua/nvim-autopairs/rules/basic.lua"
Searching for "lua/nvim-autopairs/rule.lua" in "/Users/andrewgu/.config/nvim,/etc/xdg/nvim,/Users/andrewgu/.local/share/nvim/site,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/telescope.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/popup.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/plenary.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/packer.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-web-devicons,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-tree.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-lspconfig,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-compe,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-base16.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-autopairs,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/neoformat,/Users/andrewgu/.local/share/nvim/site/pack/pack
Searching for "/Users/andrewgu/.config/nvim/lua/nvim-autopairs/rule.lua"
Searching for "/etc/xdg/nvim/lua/nvim-autopairs/rule.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/lua/nvim-autopairs/rule.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/telescope.nvim/lua/nvim-autopairs/rule.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/popup.nvim/lua/nvim-autopairs/rule.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/plenary.nvim/lua/nvim-autopairs/rule.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/packer.nvim/lua/nvim-autopairs/rule.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/lua/nvim-autopairs/rule.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-web-devicons/lua/nvim-autopairs/rule.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-tree.lua/lua/nvim-autopairs/rule.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-lspconfig/lua/nvim-autopairs/rule.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-compe/lua/nvim-autopairs/rule.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-base16.lua/lua/nvim-autopairs/rule.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-autopairs/lua/nvim-autopairs/rule.lua"
Searching for "lua/nvim-autopairs/conds.lua" in "/Users/andrewgu/.config/nvim,/etc/xdg/nvim,/Users/andrewgu/.local/share/nvim/site,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/telescope.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/popup.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/plenary.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/packer.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-web-devicons,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-tree.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-lspconfig,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-compe,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-base16.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-autopairs,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/neoformat,/Users/andrewgu/.local/share/nvim/site/pack/pac
Searching for "/Users/andrewgu/.config/nvim/lua/nvim-autopairs/conds.lua"
Searching for "/etc/xdg/nvim/lua/nvim-autopairs/conds.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/lua/nvim-autopairs/conds.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/telescope.nvim/lua/nvim-autopairs/conds.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/popup.nvim/lua/nvim-autopairs/conds.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/plenary.nvim/lua/nvim-autopairs/conds.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/packer.nvim/lua/nvim-autopairs/conds.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/lua/nvim-autopairs/conds.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-web-devicons/lua/nvim-autopairs/conds.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-tree.lua/lua/nvim-autopairs/conds.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-lspconfig/lua/nvim-autopairs/conds.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-compe/lua/nvim-autopairs/conds.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-base16.lua/lua/nvim-autopairs/conds.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-autopairs/lua/nvim-autopairs/conds.lua"
Executing:     augroup autopairs_buf
Executing:     autocmd!
Executing:     autocmd BufEnter * :lua require("nvim-autopairs").on_attach()
Executing:     autocmd FileType * :lua require("nvim-autopairs").force_attach()
Executing:     augroup end
Executing:         
Searching for "lua/compe.lua" in "/Users/andrewgu/.config/nvim,/etc/xdg/nvim,/Users/andrewgu/.local/share/nvim/site,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/telescope.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/popup.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/plenary.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/packer.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-web-devicons,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-tree.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-lspconfig,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-compe,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-base16.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-autopairs,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/neoformat,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/luali
Searching for "/Users/andrewgu/.config/nvim/lua/compe.lua"
Searching for "/etc/xdg/nvim/lua/compe.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/lua/compe.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/telescope.nvim/lua/compe.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/popup.nvim/lua/compe.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/plenary.nvim/lua/compe.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/packer.nvim/lua/compe.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/lua/compe.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-web-devicons/lua/compe.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-tree.lua/lua/compe.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-lspconfig/lua/compe.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-compe/lua/compe.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-base16.lua/lua/compe.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-autopairs/lua/compe.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/neoformat/lua/compe.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/lualine.nvim/lua/compe.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/indent-blankline.nvim/lua/compe.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/gitsigns.nvim/lua/compe.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/barbar.nvim/lua/compe.lua"
Searching for "/usr/local/share/nvim/site/lua/compe.lua"
Searching for "/usr/share/nvim/site/lua/compe.lua"
Searching for "/usr/local/Cellar/neovim/0.5.0/share/nvim/runtime/lua/compe.lua"
Searching for "/usr/local/Cellar/neovim/0.5.0/share/nvim/runtime/pack/dist/opt/matchit/lua/compe.lua"
Searching for "/usr/local/Cellar/neovim/0.5.0/lib/nvim/lua/compe.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-compe/after/lua/compe.lua"
Searching for "/usr/share/nvim/site/after/lua/compe.lua"
Searching for "/usr/local/share/nvim/site/after/lua/compe.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/after/lua/compe.lua"
Searching for "/etc/xdg/nvim/after/lua/compe.lua"
Searching for "/Users/andrewgu/.config/nvim/after/lua/compe.lua"
not found in 'runtimepath': "lua/compe.lua"
Searching for "pack/*/start/*/lua/compe.lua" in "/Users/andrewgu/.config/nvim,/etc/xdg/nvim,/Users/andrewgu/.local/share/nvim/site,/usr/local/share/nvim/site,/usr/share/nvim/site,/usr/local/Cellar/neovim/0.5.0/share/nvim/runtime,/usr/local/Cellar/neovim/0.5.0/lib/nvim,/usr/share/nvim/site/after,/usr/local/share/nvim/site/after,/Users/andrewgu/.local/share/nvim/site/after,/etc/xdg/nvim/after,/Users/andrewgu/.config/nvim/after"
Searching for "/Users/andrewgu/.config/nvim/pack/*/start/*/lua/compe.lua"
Searching for "/etc/xdg/nvim/pack/*/start/*/lua/compe.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/*/start/*/lua/compe.lua"
Searching for "/usr/local/share/nvim/site/pack/*/start/*/lua/compe.lua"
Searching for "/usr/share/nvim/site/pack/*/start/*/lua/compe.lua"
Searching for "/usr/local/Cellar/neovim/0.5.0/share/nvim/runtime/pack/*/start/*/lua/compe.lua"
Searching for "/usr/local/Cellar/neovim/0.5.0/lib/nvim/pack/*/start/*/lua/compe.lua"
Searching for "/usr/share/nvim/site/after/pack/*/start/*/lua/compe.lua"
Searching for "/usr/local/share/nvim/site/after/pack/*/start/*/lua/compe.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/after/pack/*/start/*/lua/compe.lua"
Searching for "/etc/xdg/nvim/after/pack/*/start/*/lua/compe.lua"
Searching for "/Users/andrewgu/.config/nvim/after/pack/*/start/*/lua/compe.lua"
not found in 'packpath': "pack/*/start/*/lua/compe.lua"
Searching for "start/*/lua/compe.lua" in "/Users/andrewgu/.config/nvim,/etc/xdg/nvim,/Users/andrewgu/.local/share/nvim/site,/usr/local/share/nvim/site,/usr/share/nvim/site,/usr/local/Cellar/neovim/0.5.0/share/nvim/runtime,/usr/local/Cellar/neovim/0.5.0/lib/nvim,/usr/share/nvim/site/after,/usr/local/share/nvim/site/after,/Users/andrewgu/.local/share/nvim/site/after,/etc/xdg/nvim/after,/Users/andrewgu/.config/nvim/after"
Searching for "/Users/andrewgu/.config/nvim/start/*/lua/compe.lua"
Searching for "/etc/xdg/nvim/start/*/lua/compe.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/start/*/lua/compe.lua"
Searching for "/usr/local/share/nvim/site/start/*/lua/compe.lua"
Searching for "/usr/share/nvim/site/start/*/lua/compe.lua"
Searching for "/usr/local/Cellar/neovim/0.5.0/share/nvim/runtime/start/*/lua/compe.lua"
Searching for "/usr/local/Cellar/neovim/0.5.0/lib/nvim/start/*/lua/compe.lua"
Searching for "/usr/share/nvim/site/after/start/*/lua/compe.lua"
Searching for "/usr/local/share/nvim/site/after/start/*/lua/compe.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/after/start/*/lua/compe.lua"
Searching for "/etc/xdg/nvim/after/start/*/lua/compe.lua"
Searching for "/Users/andrewgu/.config/nvim/after/start/*/lua/compe.lua"
not found in 'packpath': "start/*/lua/compe.lua"
Searching for "lua/compe/init.lua" in "/Users/andrewgu/.config/nvim,/etc/xdg/nvim,/Users/andrewgu/.local/share/nvim/site,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/telescope.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/popup.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/plenary.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/packer.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-web-devicons,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-tree.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-lspconfig,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-compe,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-base16.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-autopairs,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/neoformat,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/
Searching for "/Users/andrewgu/.config/nvim/lua/compe/init.lua"
Searching for "/etc/xdg/nvim/lua/compe/init.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/lua/compe/init.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/telescope.nvim/lua/compe/init.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/popup.nvim/lua/compe/init.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/plenary.nvim/lua/compe/init.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/packer.nvim/lua/compe/init.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/lua/compe/init.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-web-devicons/lua/compe/init.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-tree.lua/lua/compe/init.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-lspconfig/lua/compe/init.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-compe/lua/compe/init.lua"
Searching for "lua/compe/utils/debug.lua" in "/Users/andrewgu/.config/nvim,/etc/xdg/nvim,/Users/andrewgu/.local/share/nvim/site,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/telescope.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/popup.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/plenary.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/packer.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-web-devicons,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-tree.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-lspconfig,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-compe,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-base16.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-autopairs,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/neoformat,/Users/andrewgu/.local/share/nvim/site/pack/packer
Searching for "/Users/andrewgu/.config/nvim/lua/compe/utils/debug.lua"
Searching for "/etc/xdg/nvim/lua/compe/utils/debug.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/lua/compe/utils/debug.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/telescope.nvim/lua/compe/utils/debug.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/popup.nvim/lua/compe/utils/debug.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/plenary.nvim/lua/compe/utils/debug.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/packer.nvim/lua/compe/utils/debug.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/lua/compe/utils/debug.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-web-devicons/lua/compe/utils/debug.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-tree.lua/lua/compe/utils/debug.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-lspconfig/lua/compe/utils/debug.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-compe/lua/compe/utils/debug.lua"
Searching for "lua/compe/config.lua" in "/Users/andrewgu/.config/nvim,/etc/xdg/nvim,/Users/andrewgu/.local/share/nvim/site,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/telescope.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/popup.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/plenary.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/packer.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-web-devicons,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-tree.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-lspconfig,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-compe,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-base16.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-autopairs,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/neoformat,/Users/andrewgu/.local/share/nvim/site/pack/packer/star
Searching for "/Users/andrewgu/.config/nvim/lua/compe/config.lua"
Searching for "/etc/xdg/nvim/lua/compe/config.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/lua/compe/config.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/telescope.nvim/lua/compe/config.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/popup.nvim/lua/compe/config.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/plenary.nvim/lua/compe/config.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/packer.nvim/lua/compe/config.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/lua/compe/config.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-web-devicons/lua/compe/config.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-tree.lua/lua/compe/config.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-lspconfig/lua/compe/config.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-compe/lua/compe/config.lua"
Searching for "lua/compe/utils/boolean.lua" in "/Users/andrewgu/.config/nvim,/etc/xdg/nvim,/Users/andrewgu/.local/share/nvim/site,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/telescope.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/popup.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/plenary.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/packer.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-web-devicons,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-tree.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-lspconfig,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-compe,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-base16.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-autopairs,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/neoformat,/Users/andrewgu/.local/share/nvim/site/pack/pack
Searching for "/Users/andrewgu/.config/nvim/lua/compe/utils/boolean.lua"
Searching for "/etc/xdg/nvim/lua/compe/utils/boolean.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/lua/compe/utils/boolean.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/telescope.nvim/lua/compe/utils/boolean.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/popup.nvim/lua/compe/utils/boolean.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/plenary.nvim/lua/compe/utils/boolean.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/packer.nvim/lua/compe/utils/boolean.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/lua/compe/utils/boolean.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-web-devicons/lua/compe/utils/boolean.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-tree.lua/lua/compe/utils/boolean.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-lspconfig/lua/compe/utils/boolean.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-compe/lua/compe/utils/boolean.lua"
Searching for "lua/compe/lazy.lua" in "/Users/andrewgu/.config/nvim,/etc/xdg/nvim,/Users/andrewgu/.local/share/nvim/site,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/telescope.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/popup.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/plenary.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/packer.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-web-devicons,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-tree.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-lspconfig,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-compe,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-base16.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-autopairs,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/neoformat,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/
Searching for "/Users/andrewgu/.config/nvim/lua/compe/lazy.lua"
Searching for "/etc/xdg/nvim/lua/compe/lazy.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/lua/compe/lazy.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/telescope.nvim/lua/compe/lazy.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/popup.nvim/lua/compe/lazy.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/plenary.nvim/lua/compe/lazy.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/packer.nvim/lua/compe/lazy.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/lua/compe/lazy.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-web-devicons/lua/compe/lazy.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-tree.lua/lua/compe/lazy.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-lspconfig/lua/compe/lazy.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-compe/lua/compe/lazy.lua"
Searching for "lua/compe/utils/callback.lua" in "/Users/andrewgu/.config/nvim,/etc/xdg/nvim,/Users/andrewgu/.local/share/nvim/site,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/telescope.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/popup.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/plenary.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/packer.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-web-devicons,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-tree.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-lspconfig,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-compe,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-base16.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-autopairs,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/neoformat,/Users/andrewgu/.local/share/nvim/site/pack/pac
Searching for "/Users/andrewgu/.config/nvim/lua/compe/utils/callback.lua"
Searching for "/etc/xdg/nvim/lua/compe/utils/callback.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/lua/compe/utils/callback.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/telescope.nvim/lua/compe/utils/callback.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/popup.nvim/lua/compe/utils/callback.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/plenary.nvim/lua/compe/utils/callback.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/packer.nvim/lua/compe/utils/callback.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/lua/compe/utils/callback.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-web-devicons/lua/compe/utils/callback.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-tree.lua/lua/compe/utils/callback.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-lspconfig/lua/compe/utils/callback.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-compe/lua/compe/utils/callback.lua"
Searching for "lua/compe/completion.lua" in "/Users/andrewgu/.config/nvim,/etc/xdg/nvim,/Users/andrewgu/.local/share/nvim/site,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/telescope.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/popup.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/plenary.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/packer.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-web-devicons,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-tree.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-lspconfig,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-compe,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-base16.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-autopairs,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/neoformat,/Users/andrewgu/.local/share/nvim/site/pack/packer/
Searching for "/Users/andrewgu/.config/nvim/lua/compe/completion.lua"
Searching for "/etc/xdg/nvim/lua/compe/completion.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/lua/compe/completion.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/telescope.nvim/lua/compe/completion.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/popup.nvim/lua/compe/completion.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/plenary.nvim/lua/compe/completion.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/packer.nvim/lua/compe/completion.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/lua/compe/completion.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-web-devicons/lua/compe/completion.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-tree.lua/lua/compe/completion.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-lspconfig/lua/compe/completion.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-compe/lua/compe/completion.lua"
Searching for "lua/compe/utils/async.lua" in "/Users/andrewgu/.config/nvim,/etc/xdg/nvim,/Users/andrewgu/.local/share/nvim/site,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/telescope.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/popup.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/plenary.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/packer.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-web-devicons,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-tree.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-lspconfig,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-compe,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-base16.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-autopairs,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/neoformat,/Users/andrewgu/.local/share/nvim/site/pack/packer
Searching for "/Users/andrewgu/.config/nvim/lua/compe/utils/async.lua"
Searching for "/etc/xdg/nvim/lua/compe/utils/async.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/lua/compe/utils/async.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/telescope.nvim/lua/compe/utils/async.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/popup.nvim/lua/compe/utils/async.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/plenary.nvim/lua/compe/utils/async.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/packer.nvim/lua/compe/utils/async.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/lua/compe/utils/async.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-web-devicons/lua/compe/utils/async.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-tree.lua/lua/compe/utils/async.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-lspconfig/lua/compe/utils/async.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-compe/lua/compe/utils/async.lua"
Searching for "lua/compe/utils/cache.lua" in "/Users/andrewgu/.config/nvim,/etc/xdg/nvim,/Users/andrewgu/.local/share/nvim/site,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/telescope.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/popup.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/plenary.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/packer.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-web-devicons,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-tree.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-lspconfig,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-compe,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-base16.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-autopairs,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/neoformat,/Users/andrewgu/.local/share/nvim/site/pack/packer
Searching for "/Users/andrewgu/.config/nvim/lua/compe/utils/cache.lua"
Searching for "/etc/xdg/nvim/lua/compe/utils/cache.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/lua/compe/utils/cache.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/telescope.nvim/lua/compe/utils/cache.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/popup.nvim/lua/compe/utils/cache.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/plenary.nvim/lua/compe/utils/cache.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/packer.nvim/lua/compe/utils/cache.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/lua/compe/utils/cache.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-web-devicons/lua/compe/utils/cache.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-tree.lua/lua/compe/utils/cache.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-lspconfig/lua/compe/utils/cache.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-compe/lua/compe/utils/cache.lua"
Searching for "lua/compe/context.lua" in "/Users/andrewgu/.config/nvim,/etc/xdg/nvim,/Users/andrewgu/.local/share/nvim/site,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/telescope.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/popup.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/plenary.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/packer.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-web-devicons,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-tree.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-lspconfig,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-compe,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-base16.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-autopairs,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/neoformat,/Users/andrewgu/.local/share/nvim/site/pack/packer/sta
Searching for "/Users/andrewgu/.config/nvim/lua/compe/context.lua"
Searching for "/etc/xdg/nvim/lua/compe/context.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/lua/compe/context.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/telescope.nvim/lua/compe/context.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/popup.nvim/lua/compe/context.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/plenary.nvim/lua/compe/context.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/packer.nvim/lua/compe/context.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/lua/compe/context.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-web-devicons/lua/compe/context.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-tree.lua/lua/compe/context.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-lspconfig/lua/compe/context.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-compe/lua/compe/context.lua"
Searching for "lua/compe/utils/character.lua" in "/Users/andrewgu/.config/nvim,/etc/xdg/nvim,/Users/andrewgu/.local/share/nvim/site,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/telescope.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/popup.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/plenary.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/packer.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-web-devicons,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-tree.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-lspconfig,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-compe,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-base16.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-autopairs,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/neoformat,/Users/andrewgu/.local/share/nvim/site/pack/pa
Searching for "/Users/andrewgu/.config/nvim/lua/compe/utils/character.lua"
Searching for "/etc/xdg/nvim/lua/compe/utils/character.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/lua/compe/utils/character.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/telescope.nvim/lua/compe/utils/character.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/popup.nvim/lua/compe/utils/character.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/plenary.nvim/lua/compe/utils/character.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/packer.nvim/lua/compe/utils/character.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/lua/compe/utils/character.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-web-devicons/lua/compe/utils/character.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-tree.lua/lua/compe/utils/character.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-lspconfig/lua/compe/utils/character.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-compe/lua/compe/utils/character.lua"
Searching for "lua/compe/matcher.lua" in "/Users/andrewgu/.config/nvim,/etc/xdg/nvim,/Users/andrewgu/.local/share/nvim/site,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/telescope.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/popup.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/plenary.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/packer.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-web-devicons,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-tree.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-lspconfig,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-compe,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-base16.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-autopairs,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/neoformat,/Users/andrewgu/.local/share/nvim/site/pack/packer/sta
Searching for "/Users/andrewgu/.config/nvim/lua/compe/matcher.lua"
Searching for "/etc/xdg/nvim/lua/compe/matcher.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/lua/compe/matcher.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/telescope.nvim/lua/compe/matcher.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/popup.nvim/lua/compe/matcher.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/plenary.nvim/lua/compe/matcher.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/packer.nvim/lua/compe/matcher.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/lua/compe/matcher.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-web-devicons/lua/compe/matcher.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-tree.lua/lua/compe/matcher.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-lspconfig/lua/compe/matcher.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-compe/lua/compe/matcher.lua"
Searching for "lua/compe/utils/string.lua" in "/Users/andrewgu/.config/nvim,/etc/xdg/nvim,/Users/andrewgu/.local/share/nvim/site,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/telescope.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/popup.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/plenary.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/packer.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-web-devicons,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-tree.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-lspconfig,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-compe,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-base16.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-autopairs,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/neoformat,/Users/andrewgu/.local/share/nvim/site/pack/packe
Searching for "/Users/andrewgu/.config/nvim/lua/compe/utils/string.lua"
Searching for "/etc/xdg/nvim/lua/compe/utils/string.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/lua/compe/utils/string.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/telescope.nvim/lua/compe/utils/string.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/popup.nvim/lua/compe/utils/string.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/plenary.nvim/lua/compe/utils/string.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/packer.nvim/lua/compe/utils/string.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/lua/compe/utils/string.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-web-devicons/lua/compe/utils/string.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-tree.lua/lua/compe/utils/string.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-lspconfig/lua/compe/utils/string.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-compe/lua/compe/utils/string.lua"
Searching for "lua/compe/float.lua" in "/Users/andrewgu/.config/nvim,/etc/xdg/nvim,/Users/andrewgu/.local/share/nvim/site,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/telescope.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/popup.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/plenary.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/packer.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-web-devicons,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-tree.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-lspconfig,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-compe,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-base16.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-autopairs,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/neoformat,/Users/andrewgu/.local/share/nvim/site/pack/packer/start
Searching for "/Users/andrewgu/.config/nvim/lua/compe/float.lua"
Searching for "/etc/xdg/nvim/lua/compe/float.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/lua/compe/float.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/telescope.nvim/lua/compe/float.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/popup.nvim/lua/compe/float.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/plenary.nvim/lua/compe/float.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/packer.nvim/lua/compe/float.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/lua/compe/float.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-web-devicons/lua/compe/float.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-tree.lua/lua/compe/float.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-lspconfig/lua/compe/float.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-compe/lua/compe/float.lua"
Searching for "lua/compe/source.lua" in "/Users/andrewgu/.config/nvim,/etc/xdg/nvim,/Users/andrewgu/.local/share/nvim/site,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/telescope.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/popup.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/plenary.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/packer.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-web-devicons,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-tree.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-lspconfig,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-compe,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-base16.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-autopairs,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/neoformat,/Users/andrewgu/.local/share/nvim/site/pack/packer/star
Searching for "/Users/andrewgu/.config/nvim/lua/compe/source.lua"
Searching for "/etc/xdg/nvim/lua/compe/source.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/lua/compe/source.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/telescope.nvim/lua/compe/source.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/popup.nvim/lua/compe/source.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/plenary.nvim/lua/compe/source.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/packer.nvim/lua/compe/source.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/lua/compe/source.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-web-devicons/lua/compe/source.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-tree.lua/lua/compe/source.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-lspconfig/lua/compe/source.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-compe/lua/compe/source.lua"
Searching for "lua/compe/helper.lua" in "/Users/andrewgu/.config/nvim,/etc/xdg/nvim,/Users/andrewgu/.local/share/nvim/site,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/telescope.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/popup.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/plenary.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/packer.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-web-devicons,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-tree.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-lspconfig,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-compe,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-base16.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-autopairs,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/neoformat,/Users/andrewgu/.local/share/nvim/site/pack/packer/star
Searching for "/Users/andrewgu/.config/nvim/lua/compe/helper.lua"
Searching for "/etc/xdg/nvim/lua/compe/helper.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/lua/compe/helper.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/telescope.nvim/lua/compe/helper.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/popup.nvim/lua/compe/helper.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/plenary.nvim/lua/compe/helper.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/packer.nvim/lua/compe/helper.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/lua/compe/helper.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-web-devicons/lua/compe/helper.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-tree.lua/lua/compe/helper.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-lspconfig/lua/compe/helper.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-compe/lua/compe/helper.lua"
Searching for "lua/compe/pattern.lua" in "/Users/andrewgu/.config/nvim,/etc/xdg/nvim,/Users/andrewgu/.local/share/nvim/site,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/telescope.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/popup.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/plenary.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/packer.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-web-devicons,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-tree.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-lspconfig,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-compe,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-base16.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-autopairs,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/neoformat,/Users/andrewgu/.local/share/nvim/site/pack/packer/sta
Searching for "/Users/andrewgu/.config/nvim/lua/compe/pattern.lua"
Searching for "/etc/xdg/nvim/lua/compe/pattern.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/lua/compe/pattern.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/telescope.nvim/lua/compe/pattern.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/popup.nvim/lua/compe/pattern.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/plenary.nvim/lua/compe/pattern.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/packer.nvim/lua/compe/pattern.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/lua/compe/pattern.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-web-devicons/lua/compe/pattern.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-tree.lua/lua/compe/pattern.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-lspconfig/lua/compe/pattern.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-compe/lua/compe/pattern.lua"
Searching for "lua/compe/vim_bridge.lua" in "/Users/andrewgu/.config/nvim,/etc/xdg/nvim,/Users/andrewgu/.local/share/nvim/site,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/telescope.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/popup.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/plenary.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/packer.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-web-devicons,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-tree.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-lspconfig,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-compe,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-base16.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-autopairs,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/neoformat,/Users/andrewgu/.local/share/nvim/site/pack/packer/
Searching for "/Users/andrewgu/.config/nvim/lua/compe/vim_bridge.lua"
Searching for "/etc/xdg/nvim/lua/compe/vim_bridge.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/lua/compe/vim_bridge.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/telescope.nvim/lua/compe/vim_bridge.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/popup.nvim/lua/compe/vim_bridge.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/plenary.nvim/lua/compe/vim_bridge.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/packer.nvim/lua/compe/vim_bridge.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/lua/compe/vim_bridge.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-web-devicons/lua/compe/vim_bridge.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-tree.lua/lua/compe/vim_bridge.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-lspconfig/lua/compe/vim_bridge.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-compe/lua/compe/vim_bridge.lua"
Searching for "lua/compe/utils/compat.lua" in "/Users/andrewgu/.config/nvim,/etc/xdg/nvim,/Users/andrewgu/.local/share/nvim/site,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/telescope.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/popup.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/plenary.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/packer.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-web-devicons,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-tree.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-lspconfig,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-compe,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-base16.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-autopairs,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/neoformat,/Users/andrewgu/.local/share/nvim/site/pack/packe
Searching for "/Users/andrewgu/.config/nvim/lua/compe/utils/compat.lua"
Searching for "/etc/xdg/nvim/lua/compe/utils/compat.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/lua/compe/utils/compat.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/telescope.nvim/lua/compe/utils/compat.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/popup.nvim/lua/compe/utils/compat.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/plenary.nvim/lua/compe/utils/compat.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/packer.nvim/lua/compe/utils/compat.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/lua/compe/utils/compat.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-web-devicons/lua/compe/utils/compat.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-tree.lua/lua/compe/utils/compat.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-lspconfig/lua/compe/utils/compat.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-compe/lua/compe/utils/compat.lua"
Executing: augroup packer_load_aucmds
Executing: au!
Executing: au BufRead * ++once lua require("packer.load")({'nvim-colorizer.lua', 'nvim-treesitter'}, { event = "BufRead *" }, _G.packer_plugins)
Executing: augroup END
finished sourcing /Users/andrewgu/.config/nvim/plugin/packer_compiled.lua
Searching for "/etc/xdg/nvim/plugin/**/*.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/plugin/**/*.lua"
Searching for "/usr/local/share/nvim/site/plugin/**/*.lua"
Searching for "/usr/share/nvim/site/plugin/**/*.lua"
Searching for "/usr/local/Cellar/neovim/0.5.0/share/nvim/runtime/plugin/**/*.lua"
Searching for "/usr/local/Cellar/neovim/0.5.0/lib/nvim/plugin/**/*.lua"
Searching for "pack/*/start/*" in "/Users/andrewgu/.config/nvim,/etc/xdg/nvim,/Users/andrewgu/.local/share/nvim/site,/usr/local/share/nvim/site,/usr/share/nvim/site,/usr/local/Cellar/neovim/0.5.0/share/nvim/runtime,/usr/local/Cellar/neovim/0.5.0/lib/nvim,/usr/share/nvim/site/after,/usr/local/share/nvim/site/after,/Users/andrewgu/.local/share/nvim/site/after,/etc/xdg/nvim/after,/Users/andrewgu/.config/nvim/after"
Searching for "/Users/andrewgu/.config/nvim/pack/*/start/*"
Searching for "/etc/xdg/nvim/pack/*/start/*"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/*/start/*"
chdir(/Users/andrewgu/.config/nvim)
chdir(/Users/andrewgu/.local/share/nvim/site/pack/packer/start)
chdir(/Users/andrewgu/.config/nvim)
chdir(/Users/andrewgu/.config/nvim)
chdir(/Users/andrewgu/.local/share/nvim/site/pack/packer/start/barbar.nvim/plugin)
chdir(/Users/andrewgu/.config/nvim)
sourcing "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/barbar.nvim/plugin/bufferline.vim"
line 1: " File: bufferline.vim
line 2: " Author: romgrk
line 3: " Description: Buffer line
line 4: " Date: Fri 22 May 2020 02:22:36 AM EDT
line 5: " !::exe [So]
line 6: 
line 7: set showtabline=2
line 8: 
line 9: function! bufferline#enable()
line 44: 
line 45: function! bufferline#disable()
line 50: 
line 51: "=================
line 52: " Section: Commands
line 53: "=================
line 54: 
line 55: command!                BarbarEnable           call bufferline#enable()
line 56: command!                BarbarDisable          call bufferline#disable()
line 57: 
line 58: command! -count   -bang BufferNext             call s:goto_buffer_relative(v:count1)
line 59: command! -count   -bang BufferPrevious         call s:goto_buffer_relative(-v:count1)
line 60: 
line 61: command! -nargs=1 -bang BufferGoto             call s:goto_buffer(<f-args>)
line 62: command!          -bang BufferLast             call s:goto_buffer(-1)
line 63: 
line 64: command! -count   -bang BufferMoveNext         call s:move_current_buffer(v:count1)
line 65: command! -count   -bang BufferMovePrevious     call s:move_current_buffer(-v:count1)
line 66: 
line 67: command!          -bang BufferPick             call bufferline#pick_buffer()
line 68: 
line 69: command!          -bang BufferOrderByDirectory call bufferline#order_by_directory()
line 70: command!          -bang BufferOrderByLanguage  call bufferline#order_by_language()
line 71: 
line 72: command! -bang -complete=buffer -nargs=? BufferClose            call bufferline#bbye#delete('bdelete', <q-bang>, <q-args>)
line 74: command! -bang -complete=buffer -nargs=? BufferDelete           call bufferline#bbye#delete('bdelete', <q-bang>, <q-args>)
line 76: command! -bang -complete=buffer -nargs=? BufferWipeout          call bufferline#bbye#delete('bwipeout', <q-bang>, <q-args>)
line 78: 
line 79: command!                BufferCloseAllButCurrent   lua require'bufferline.state'.close_all_but_current()
line 80: command!                BufferCloseBuffersLeft     lua require'bufferline.state'.close_buffers_left()
line 81: command!                BufferCloseBuffersRight    lua require'bufferline.state'.close_buffers_right()
line 82: 
line 83: "=================
line 84: " Section: Options
line 85: "=================
line 86: 
line 87: let s:DEFAULT_OPTIONS = { 'animation': v:true, 'auto_hide': v:false, 'clickable': v:true, 'closable': v:true, 'icon_close_tab': '', 'icon_close_tab_modified': '●', 'icon_separator_active':   '▎', 'icon_separator_inactive': '▎', 'icons': v:true, 'icon_custom_colors': v:false, 'letters': 'asdfjkl;ghnmxcvbziowerutyqpASDFJKLGHNMXCVBZIOWERUTYQP', 'maximum_padding': 4, 'maximum_length': 30, 'no_name_title': v:null, 'semantic_letters': v:true, 'tabpages': v:true,}
line 105: 
line 106: let bufferline = extend(s:DEFAULT_OPTIONS, get(g:, 'bufferline', {}))
line 107: 
line 108: call dictwatcheradd(g:bufferline, '*', 'BufferlineOnOptionChanged')
line 109: 
line 110: "==========================
line 111: " Section: Bufferline state
line 112: "==========================
line 113: 
line 114: " Last value for tabline
line 115: let s:last_tabline = ''
line 116: 
line 117: " Debugging
line 118: " let g:events = []
line 119: 
line 120: "========================
line 121: " Section: Main functions
line 122: "========================
line 123: 
line 124: function! bufferline#update(...)
line 132: 
line 133: function! bufferline#update_async(...)
line 136: 
line 137: function! bufferline#render(update_names) abort
line 152: 
line 153: function! bufferline#pick_buffer()
line 156: 
line 157: function! bufferline#order_by_directory()
line 160: 
line 161: function! bufferline#order_by_language()
line 164: 
line 165: function! bufferline#close(abuf)
line 168: 
line 169: function! bufferline#close_direct(abuf)
line 172: 
line 173: "========================
line 174: " Section: Event handlers
line 175: "========================
line 176: 
line 177: function! s:on_buffer_open(abuf)
line 180: 
line 181: function! s:on_buffer_close(bufnr)
line 184: 
line 185: function! s:check_modified()
line 191: 
line 192: " Needs to be global -_-
line 193: function! BufferlineOnOptionChanged(d, k, z)
line 199: 
line 200: " Needs to be global -_-
line 201: function! BufferlineMainClickHandler(minwid, clicks, btn, modifiers) abort
line 211: 
line 212: " Needs to be global -_-
line 213: function! BufferlineCloseClickHandler(minwid, clicks, btn, modifiers) abort
line 216: 
line 217: 
line 218: " Buffer movement
line 219: 
line 220: function! s:move_current_buffer(steps)
line 223: 
line 224: function! s:goto_buffer(number)
line 227: 
line 228: function! s:goto_buffer_relative(steps)
line 231: 
line 232: " Final setup
line 233: 
line 234: call bufferline#enable()
Searching for "autoload/bufferline.vim" in "/Users/andrewgu/.config/nvim,/etc/xdg/nvim,/Users/andrewgu/.local/share/nvim/site,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/telescope.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/popup.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/plenary.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/packer.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-web-devicons,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-tree.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-lspconfig,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-compe,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-base16.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-autopairs,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/neoformat,/Users/andrewgu/.local/share/nvim/site/pack/packer/s
Searching for "/Users/andrewgu/.config/nvim/autoload/bufferline.vim"
Searching for "/etc/xdg/nvim/autoload/bufferline.vim"
Searching for "/Users/andrewgu/.local/share/nvim/site/autoload/bufferline.vim"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/telescope.nvim/autoload/bufferline.vim"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/popup.nvim/autoload/bufferline.vim"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/plenary.nvim/autoload/bufferline.vim"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/packer.nvim/autoload/bufferline.vim"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/autoload/bufferline.vim"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-web-devicons/autoload/bufferline.vim"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-tree.lua/autoload/bufferline.vim"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-lspconfig/autoload/bufferline.vim"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-compe/autoload/bufferline.vim"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-base16.lua/autoload/bufferline.vim"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-autopairs/autoload/bufferline.vim"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/neoformat/autoload/bufferline.vim"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/lualine.nvim/autoload/bufferline.vim"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/indent-blankline.nvim/autoload/bufferline.vim"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/gitsigns.nvim/autoload/bufferline.vim"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/barbar.nvim/autoload/bufferline.vim"
chdir(/Users/andrewgu/.config/nvim)
chdir(/Users/andrewgu/.local/share/nvim/site/pack/packer/start/barbar.nvim/autoload)
chdir(/Users/andrewgu/.config/nvim)
line 234: sourcing "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/barbar.nvim/autoload/bufferline.vim"
line 1: function! bufferline#filter(...)
finished sourcing /Users/andrewgu/.local/share/nvim/site/pack/packer/start/barbar.nvim/autoload/bufferline.vim
continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/barbar.nvim/plugin/bufferline.vim
calling function bufferline#enable()

line 1:    augroup bufferline
line 2:       au!
line 3:       au BufReadPost    * call <SID>on_buffer_open(expand('<abuf>'))
line 4:       au BufNewFile     * call <SID>on_buffer_open(expand('<abuf>'))
line 5:       au BufDelete      * call <SID>on_buffer_close(expand('<abuf>'))
line 6:       au VimEnter       * call bufferline#highlight#setup()
line 7:       au ColorScheme    * call bufferline#highlight#setup()
line 8:       if exists('##BufModifiedSet')
line 9:       au BufModifiedSet * call <SID>check_modified()
line 10:       else
line 11:       au BufWritePost   * call <SID>check_modified()
line 12:       au TextChanged    * call <SID>check_modified()
line 13:       end
line 14:    augroup END
line 15: 
line 16:    augroup bufferline_update
line 17:       au!
line 18:       au BufNew                 * call bufferline#update(v:true)
line 19:       au BufEnter               * call bufferline#update()
line 20:       au BufWipeout             * call bufferline#update()
line 21:       au BufWinEnter            * call bufferline#update()
line 22:       au BufWinLeave            * call bufferline#update()
line 23:       au BufWritePost           * call bufferline#update()
line 24:       au SessionLoadPost        * call bufferline#update()
line 25:       au OptionSet      buflisted call bufferline#update()
line 26:       au VimResized             * call bufferline#update()
line 27:       au WinEnter               * call bufferline#update()
line 28:       au WinLeave               * call bufferline#update()
line 29:       au WinClosed              * call bufferline#update_async()
line 30:    augroup END
line 31: 
line 32:    call bufferline#highlight#setup()
Searching for "autoload/bufferline/highlight.vim" in "/Users/andrewgu/.config/nvim,/etc/xdg/nvim,/Users/andrewgu/.local/share/nvim/site,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/telescope.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/popup.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/plenary.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/packer.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-web-devicons,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-tree.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-lspconfig,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-compe,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-base16.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-autopairs,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/neoformat,/Users/andrewgu/.local/share/nvim/site/pac
Searching for "/Users/andrewgu/.config/nvim/autoload/bufferline/highlight.vim"
Searching for "/etc/xdg/nvim/autoload/bufferline/highlight.vim"
Searching for "/Users/andrewgu/.local/share/nvim/site/autoload/bufferline/highlight.vim"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/telescope.nvim/autoload/bufferline/highlight.vim"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/popup.nvim/autoload/bufferline/highlight.vim"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/plenary.nvim/autoload/bufferline/highlight.vim"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/packer.nvim/autoload/bufferline/highlight.vim"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/autoload/bufferline/highlight.vim"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-web-devicons/autoload/bufferline/highlight.vim"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-tree.lua/autoload/bufferline/highlight.vim"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-lspconfig/autoload/bufferline/highlight.vim"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-compe/autoload/bufferline/highlight.vim"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-base16.lua/autoload/bufferline/highlight.vim"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-autopairs/autoload/bufferline/highlight.vim"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/neoformat/autoload/bufferline/highlight.vim"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/lualine.nvim/autoload/bufferline/highlight.vim"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/indent-blankline.nvim/autoload/bufferline/highlight.vim"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/gitsigns.nvim/autoload/bufferline/highlight.vim"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/barbar.nvim/autoload/bufferline/highlight.vim"
chdir(/Users/andrewgu/.config/nvim)
chdir(/Users/andrewgu/.local/share/nvim/site/pack/packer/start/barbar.nvim/autoload/bufferline)
chdir(/Users/andrewgu/.config/nvim)
line 32: sourcing "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/barbar.nvim/autoload/bufferline/highlight.vim"
line 1: " !::exe [So]
line 2: 
line 3: " Initialize highlights
line 4: function bufferline#highlight#setup()
line 56: 
line 57: function! s:fg(groups, default)
line 66: 
line 67: function! s:bg(groups, default)
line 76: 
line 77: function! s:hi_all(groups)
line 82: 
line 83: function! s:hi_link(pairs)
line 88: 
line 89: function! s:hi(name, ...)
line 124: 
line 125: " call bufferline#highlight#setup()
finished sourcing /Users/andrewgu/.local/share/nvim/site/pack/packer/start/barbar.nvim/autoload/bufferline/highlight.vim
continuing in function bufferline#enable
calling function bufferline#enable[32]..bufferline#highlight#setup()

line 1:    let fg_target = 'red'
line 2: 
line 3:    let fg_current  = s:fg(['Normal'], '#efefef')
calling function bufferline#enable[32]..bufferline#highlight#setup[3]..<SNR>28_fg(['Normal'], '#efefef')

line 1:    for group in a:groups
line 2:       let hl = nvim_get_hl_by_name(group,   1)
line 3:       if has_key(hl, 'foreground')
line 4:          return printf("#%06x", hl.foreground)
function bufferline#enable[32]..bufferline#highlight#setup[3]..<SNR>28_fg returning '#abb2bf'

continuing in function bufferline#enable[32]..bufferline#highlight#setup

line 4:    let fg_visible  = s:fg(['TabLineSel'], '#efefef')
calling function bufferline#enable[32]..bufferline#highlight#setup[4]..<SNR>28_fg(['TabLineSel'], '#efefef')

line 1:    for group in a:groups
line 2:       let hl = nvim_get_hl_by_name(group,   1)
line 3:       if has_key(hl, 'foreground')
line 4:          return printf("#%06x", hl.foreground)
function bufferline#enable[32]..bufferline#highlight#setup[4]..<SNR>28_fg returning '#abb2bf'

continuing in function bufferline#enable[32]..bufferline#highlight#setup

line 5:    let fg_inactive = s:fg(['TabLineFill'], '#888888')
calling function bufferline#enable[32]..bufferline#highlight#setup[5]..<SNR>28_fg(['TabLineFill'], '#888888')

line 1:    for group in a:groups
line 2:       let hl = nvim_get_hl_by_name(group,   1)
line 3:       if has_key(hl, 'foreground')
line 4:          return printf("#%06x", hl.foreground)
line 5:       end
line 6:    endfor
line 1:    for group in a:groups
line 2:       let hl = nvim_get_hl_by_name(group,   1)
line 3:       if has_key(hl, 'foreground')
line 4:          return printf("#%06x", hl.foreground)
line 5:       end
line 6:    endfor
line 7:    return a:default
function bufferline#enable[32]..bufferline#highlight#setup[5]..<SNR>28_fg returning '#888888'

continuing in function bufferline#enable[32]..bufferline#highlight#setup

line 6: 
line 7:    let fg_modified = s:fg(['WarningMsg'], '#E5AB0E')
calling function bufferline#enable[32]..bufferline#highlight#setup[7]..<SNR>28_fg(['WarningMsg'], '#E5AB0E')

line 1:    for group in a:groups
line 2:       let hl = nvim_get_hl_by_name(group,   1)
line 3:       if has_key(hl, 'foreground')
line 4:          return printf("#%06x", hl.foreground)
function bufferline#enable[32]..bufferline#highlight#setup[7]..<SNR>28_fg returning '#e5c07b'

continuing in function bufferline#enable[32]..bufferline#highlight#setup

line 8:    let fg_special  = s:fg(['Special'], '#599eff')
calling function bufferline#enable[32]..bufferline#highlight#setup[8]..<SNR>28_fg(['Special'], '#599eff')

line 1:    for group in a:groups
line 2:       let hl = nvim_get_hl_by_name(group,   1)
line 3:       if has_key(hl, 'foreground')
line 4:          return printf("#%06x", hl.foreground)
function bufferline#enable[32]..bufferline#highlight#setup[8]..<SNR>28_fg returning '#61afef'

continuing in function bufferline#enable[32]..bufferline#highlight#setup

line 9:    let fg_subtle   = s:fg(['NonText', 'Comment'], '#555555')
calling function bufferline#enable[32]..bufferline#highlight#setup[9]..<SNR>28_fg(['NonText', 'Comment'], '#555555')

line 1:    for group in a:groups
line 2:       let hl = nvim_get_hl_by_name(group,   1)
line 3:       if has_key(hl, 'foreground')
line 4:          return printf("#%06x", hl.foreground)
function bufferline#enable[32]..bufferline#highlight#setup[9]..<SNR>28_fg returning '#3b4048'

continuing in function bufferline#enable[32]..bufferline#highlight#setup

line 10: 
line 11:    let bg_current  = s:bg(['Normal'], 'none')
calling function bufferline#enable[32]..bufferline#highlight#setup[11]..<SNR>28_bg(['Normal'], 'none')

line 1:    for group in a:groups
line 2:       let hl = nvim_get_hl_by_name(group,   1)
line 3:       if has_key(hl, 'background')
line 4:          return printf("#%06x", hl.background)
function bufferline#enable[32]..bufferline#highlight#setup[11]..<SNR>28_bg returning '#282c34'

continuing in function bufferline#enable[32]..bufferline#highlight#setup

line 12:    let bg_visible  = s:bg(['TabLineSel', 'Normal'], 'none')
calling function bufferline#enable[32]..bufferline#highlight#setup[12]..<SNR>28_bg(['TabLineSel', 'Normal'], 'none')

line 1:    for group in a:groups
line 2:       let hl = nvim_get_hl_by_name(group,   1)
line 3:       if has_key(hl, 'background')
line 4:          return printf("#%06x", hl.background)
line 5:       end
line 6:    endfor
line 1:    for group in a:groups
line 2:       let hl = nvim_get_hl_by_name(group,   1)
line 3:       if has_key(hl, 'background')
line 4:          return printf("#%06x", hl.background)
function bufferline#enable[32]..bufferline#highlight#setup[12]..<SNR>28_bg returning '#282c34'

continuing in function bufferline#enable[32]..bufferline#highlight#setup

line 13:    let bg_inactive = s:bg(['TabLineFill', 'StatusLine'], 'none')
calling function bufferline#enable[32]..bufferline#highlight#setup[13]..<SNR>28_bg(['TabLineFill', 'StatusLine'], 'none')

line 1:    for group in a:groups
line 2:       let hl = nvim_get_hl_by_name(group,   1)
line 3:       if has_key(hl, 'background')
line 4:          return printf("#%06x", hl.background)
line 5:       end
line 6:    endfor
line 1:    for group in a:groups
line 2:       let hl = nvim_get_hl_by_name(group,   1)
line 3:       if has_key(hl, 'background')
line 4:          return printf("#%06x", hl.background)
function bufferline#enable[32]..bufferline#highlight#setup[13]..<SNR>28_bg returning '#2c323c'

continuing in function bufferline#enable[32]..bufferline#highlight#setup

line 14: 
line 15:    "      Current: current buffer
line 16:    "      Visible: visible but not current buffer
line 17:    "     Inactive: invisible but not current buffer
line 18:    "        -Icon: filetype icon
line 19:    "       -Index: buffer index
line 20:    "         -Mod: when modified
line 21:    "        -Sign: the separator between buffers
line 22:    "      -Target: letter in buffer-picking mode
line 23:    call s:hi_all([ ['BufferCurrent',        fg_current,  bg_current], ['BufferCurrentIndex',   fg_special,  bg_current], ['BufferCurrentMod',     fg_modified, bg_current], ['BufferCurrentSign',    fg_special,  bg_current], ['BufferCurrentTarget',  fg_target,   bg_current,   'bold'], ['BufferVisible',        fg_visible,  bg_visible], ['BufferVisibleIndex',   fg_visible,  bg_visible], ['BufferVisibleMod',     fg_modified, bg_visible], ['BufferVisibleSign',    fg_visible,  bg_visible], ['BufferVisibleTarget',  fg_target,   bg_visible,   'bold'], ['BufferInactive',       fg_inactive, bg_inactive], ['BufferInactiveIndex',  fg_subtle,   bg_inactive], ['BufferInactiveMod',    fg_modified, bg_inactive], ['BufferInactiveSign',   fg_subtle,   bg_inactive], ['BufferInactiveTarget', fg_target,   bg_inactive,  'bold'], ['BufferTabpages',       fg_special,  bg_inactive, 'bold'], ['BufferTabpageFill',    fg_inactive, bg_inactive], ])
calling function bufferline#enable[32]..bufferline#highlight#setup[23]..<SNR>28_hi_all([['BufferCurrent', '#abb2bf', '#282c34...ferTabpageFill', '#888888', '#2c323c']])

line 1:    for group in a:groups
line 2:       call call(function('s:hi'), group)
calling function bufferline#enable[32]..bufferline#highlight#setup[23]..<SNR>28_hi_all[2]..<SNR>28_hi('BufferCurrent', '#abb2bf', '#282c34')

line 1:    let fg = ''
line 2:    let bg = ''
line 3:    let attr = ''
line 4: 
line 5:    if type(a:1) == 3
line 6:       let fg   = get(a:1, 0, '')
line 7:       let bg   = get(a:1, 1, '')
line 8:       let attr = get(a:1, 2, '')
line 9:    else
line 10:       let fg   = get(a:000, 0, '')
line 11:       let bg   = get(a:000, 1, '')
line 12:       let attr = get(a:000, 2, '')
line 13:    end
line 14: 
line 15:    let has_props = v:false
line 16: 
line 17:    let cmd = 'hi default ' . a:name
line 18:    if !empty(fg) && fg != 'none'
line 19:       let cmd .= ' guifg=' . fg
line 20:       let has_props = v:true
line 21:    end
line 22:    if !empty(bg) && bg != 'none'
line 23:       let cmd .= ' guibg=' . bg
line 24:       let has_props = v:true
line 25:    end
line 26:    if !empty(attr) && attr != 'none'
line 27:       let cmd .= ' gui=' . attr
line 28:       let has_props = v:true
line 29:    end
line 30:    execute 'hi default clear ' a:name
line 30: hi default clear  BufferCurrent
line 31:    if has_props
line 32:       execute cmd
line 32: hi default BufferCurrent guifg=#abb2bf guibg=#282c34
line 33:    end
function bufferline#enable[32]..bufferline#highlight#setup[23]..<SNR>28_hi_all[2]..<SNR>28_hi returning #0

continuing in function bufferline#enable[32]..bufferline#highlight#setup[23]..<SNR>28_hi_all

line 3:    endfor
line 1:    for group in a:groups
line 2:       call call(function('s:hi'), group)
calling function bufferline#enable[32]..bufferline#highlight#setup[23]..<SNR>28_hi_all[2]..<SNR>28_hi('BufferCurrentIndex', '#61afef', '#282c34')

line 1:    let fg = ''
line 2:    let bg = ''
line 3:    let attr = ''
line 4: 
line 5:    if type(a:1) == 3
line 6:       let fg   = get(a:1, 0, '')
line 7:       let bg   = get(a:1, 1, '')
line 8:       let attr = get(a:1, 2, '')
line 9:    else
line 10:       let fg   = get(a:000, 0, '')
line 11:       let bg   = get(a:000, 1, '')
line 12:       let attr = get(a:000, 2, '')
line 13:    end
line 14: 
line 15:    let has_props = v:false
line 16: 
line 17:    let cmd = 'hi default ' . a:name
line 18:    if !empty(fg) && fg != 'none'
line 19:       let cmd .= ' guifg=' . fg
line 20:       let has_props = v:true
line 21:    end
line 22:    if !empty(bg) && bg != 'none'
line 23:       let cmd .= ' guibg=' . bg
line 24:       let has_props = v:true
line 25:    end
line 26:    if !empty(attr) && attr != 'none'
line 27:       let cmd .= ' gui=' . attr
line 28:       let has_props = v:true
line 29:    end
line 30:    execute 'hi default clear ' a:name
line 30: hi default clear  BufferCurrentIndex
line 31:    if has_props
line 32:       execute cmd
line 32: hi default BufferCurrentIndex guifg=#61afef guibg=#282c34
line 33:    end
function bufferline#enable[32]..bufferline#highlight#setup[23]..<SNR>28_hi_all[2]..<SNR>28_hi returning #0

continuing in function bufferline#enable[32]..bufferline#highlight#setup[23]..<SNR>28_hi_all

line 3:    endfor
line 1:    for group in a:groups
line 2:       call call(function('s:hi'), group)
calling function bufferline#enable[32]..bufferline#highlight#setup[23]..<SNR>28_hi_all[2]..<SNR>28_hi('BufferCurrentMod', '#e5c07b', '#282c34')

line 1:    let fg = ''
line 2:    let bg = ''
line 3:    let attr = ''
line 4: 
line 5:    if type(a:1) == 3
line 6:       let fg   = get(a:1, 0, '')
line 7:       let bg   = get(a:1, 1, '')
line 8:       let attr = get(a:1, 2, '')
line 9:    else
line 10:       let fg   = get(a:000, 0, '')
line 11:       let bg   = get(a:000, 1, '')
line 12:       let attr = get(a:000, 2, '')
line 13:    end
line 14: 
line 15:    let has_props = v:false
line 16: 
line 17:    let cmd = 'hi default ' . a:name
line 18:    if !empty(fg) && fg != 'none'
line 19:       let cmd .= ' guifg=' . fg
line 20:       let has_props = v:true
line 21:    end
line 22:    if !empty(bg) && bg != 'none'
line 23:       let cmd .= ' guibg=' . bg
line 24:       let has_props = v:true
line 25:    end
line 26:    if !empty(attr) && attr != 'none'
line 27:       let cmd .= ' gui=' . attr
line 28:       let has_props = v:true
line 29:    end
line 30:    execute 'hi default clear ' a:name
line 30: hi default clear  BufferCurrentMod
line 31:    if has_props
line 32:       execute cmd
line 32: hi default BufferCurrentMod guifg=#e5c07b guibg=#282c34
line 33:    end
function bufferline#enable[32]..bufferline#highlight#setup[23]..<SNR>28_hi_all[2]..<SNR>28_hi returning #0

continuing in function bufferline#enable[32]..bufferline#highlight#setup[23]..<SNR>28_hi_all

line 3:    endfor
line 1:    for group in a:groups
line 2:       call call(function('s:hi'), group)
calling function bufferline#enable[32]..bufferline#highlight#setup[23]..<SNR>28_hi_all[2]..<SNR>28_hi('BufferCurrentSign', '#61afef', '#282c34')

line 1:    let fg = ''
line 2:    let bg = ''
line 3:    let attr = ''
line 4: 
line 5:    if type(a:1) == 3
line 6:       let fg   = get(a:1, 0, '')
line 7:       let bg   = get(a:1, 1, '')
line 8:       let attr = get(a:1, 2, '')
line 9:    else
line 10:       let fg   = get(a:000, 0, '')
line 11:       let bg   = get(a:000, 1, '')
line 12:       let attr = get(a:000, 2, '')
line 13:    end
line 14: 
line 15:    let has_props = v:false
line 16: 
line 17:    let cmd = 'hi default ' . a:name
line 18:    if !empty(fg) && fg != 'none'
line 19:       let cmd .= ' guifg=' . fg
line 20:       let has_props = v:true
line 21:    end
line 22:    if !empty(bg) && bg != 'none'
line 23:       let cmd .= ' guibg=' . bg
line 24:       let has_props = v:true
line 25:    end
line 26:    if !empty(attr) && attr != 'none'
line 27:       let cmd .= ' gui=' . attr
line 28:       let has_props = v:true
line 29:    end
line 30:    execute 'hi default clear ' a:name
line 30: hi default clear  BufferCurrentSign
line 31:    if has_props
line 32:       execute cmd
line 32: hi default BufferCurrentSign guifg=#61afef guibg=#282c34
line 33:    end
function bufferline#enable[32]..bufferline#highlight#setup[23]..<SNR>28_hi_all[2]..<SNR>28_hi returning #0

continuing in function bufferline#enable[32]..bufferline#highlight#setup[23]..<SNR>28_hi_all

line 3:    endfor
line 1:    for group in a:groups
line 2:       call call(function('s:hi'), group)
calling function bufferline#enable[32]..bufferline#highlight#setup[23]..<SNR>28_hi_all[2]..<SNR>28_hi('BufferCurrentTarget', 'red', '#282c34', 'bold')

line 1:    let fg = ''
line 2:    let bg = ''
line 3:    let attr = ''
line 4: 
line 5:    if type(a:1) == 3
line 6:       let fg   = get(a:1, 0, '')
line 7:       let bg   = get(a:1, 1, '')
line 8:       let attr = get(a:1, 2, '')
line 9:    else
line 10:       let fg   = get(a:000, 0, '')
line 11:       let bg   = get(a:000, 1, '')
line 12:       let attr = get(a:000, 2, '')
line 13:    end
line 14: 
line 15:    let has_props = v:false
line 16: 
line 17:    let cmd = 'hi default ' . a:name
line 18:    if !empty(fg) && fg != 'none'
line 19:       let cmd .= ' guifg=' . fg
line 20:       let has_props = v:true
line 21:    end
line 22:    if !empty(bg) && bg != 'none'
line 23:       let cmd .= ' guibg=' . bg
line 24:       let has_props = v:true
line 25:    end
line 26:    if !empty(attr) && attr != 'none'
line 27:       let cmd .= ' gui=' . attr
line 28:       let has_props = v:true
line 29:    end
line 30:    execute 'hi default clear ' a:name
line 30: hi default clear  BufferCurrentTarget
line 31:    if has_props
line 32:       execute cmd
line 32: hi default BufferCurrentTarget guifg=red guibg=#282c34 gui=bold
line 33:    end
function bufferline#enable[32]..bufferline#highlight#setup[23]..<SNR>28_hi_all[2]..<SNR>28_hi returning #0

continuing in function bufferline#enable[32]..bufferline#highlight#setup[23]..<SNR>28_hi_all

line 3:    endfor
line 1:    for group in a:groups
line 2:       call call(function('s:hi'), group)
calling function bufferline#enable[32]..bufferline#highlight#setup[23]..<SNR>28_hi_all[2]..<SNR>28_hi('BufferVisible', '#abb2bf', '#282c34')

line 1:    let fg = ''
line 2:    let bg = ''
line 3:    let attr = ''
line 4: 
line 5:    if type(a:1) == 3
line 6:       let fg   = get(a:1, 0, '')
line 7:       let bg   = get(a:1, 1, '')
line 8:       let attr = get(a:1, 2, '')
line 9:    else
line 10:       let fg   = get(a:000, 0, '')
line 11:       let bg   = get(a:000, 1, '')
line 12:       let attr = get(a:000, 2, '')
line 13:    end
line 14: 
line 15:    let has_props = v:false
line 16: 
line 17:    let cmd = 'hi default ' . a:name
line 18:    if !empty(fg) && fg != 'none'
line 19:       let cmd .= ' guifg=' . fg
line 20:       let has_props = v:true
line 21:    end
line 22:    if !empty(bg) && bg != 'none'
line 23:       let cmd .= ' guibg=' . bg
line 24:       let has_props = v:true
line 25:    end
line 26:    if !empty(attr) && attr != 'none'
line 27:       let cmd .= ' gui=' . attr
line 28:       let has_props = v:true
line 29:    end
line 30:    execute 'hi default clear ' a:name
line 30: hi default clear  BufferVisible
line 31:    if has_props
line 32:       execute cmd
line 32: hi default BufferVisible guifg=#abb2bf guibg=#282c34
line 33:    end
function bufferline#enable[32]..bufferline#highlight#setup[23]..<SNR>28_hi_all[2]..<SNR>28_hi returning #0

continuing in function bufferline#enable[32]..bufferline#highlight#setup[23]..<SNR>28_hi_all

line 3:    endfor
line 1:    for group in a:groups
line 2:       call call(function('s:hi'), group)
calling function bufferline#enable[32]..bufferline#highlight#setup[23]..<SNR>28_hi_all[2]..<SNR>28_hi('BufferVisibleIndex', '#abb2bf', '#282c34')

line 1:    let fg = ''
line 2:    let bg = ''
line 3:    let attr = ''
line 4: 
line 5:    if type(a:1) == 3
line 6:       let fg   = get(a:1, 0, '')
line 7:       let bg   = get(a:1, 1, '')
line 8:       let attr = get(a:1, 2, '')
line 9:    else
line 10:       let fg   = get(a:000, 0, '')
line 11:       let bg   = get(a:000, 1, '')
line 12:       let attr = get(a:000, 2, '')
line 13:    end
line 14: 
line 15:    let has_props = v:false
line 16: 
line 17:    let cmd = 'hi default ' . a:name
line 18:    if !empty(fg) && fg != 'none'
line 19:       let cmd .= ' guifg=' . fg
line 20:       let has_props = v:true
line 21:    end
line 22:    if !empty(bg) && bg != 'none'
line 23:       let cmd .= ' guibg=' . bg
line 24:       let has_props = v:true
line 25:    end
line 26:    if !empty(attr) && attr != 'none'
line 27:       let cmd .= ' gui=' . attr
line 28:       let has_props = v:true
line 29:    end
line 30:    execute 'hi default clear ' a:name
line 30: hi default clear  BufferVisibleIndex
line 31:    if has_props
line 32:       execute cmd
line 32: hi default BufferVisibleIndex guifg=#abb2bf guibg=#282c34
line 33:    end
function bufferline#enable[32]..bufferline#highlight#setup[23]..<SNR>28_hi_all[2]..<SNR>28_hi returning #0

continuing in function bufferline#enable[32]..bufferline#highlight#setup[23]..<SNR>28_hi_all

line 3:    endfor
line 1:    for group in a:groups
line 2:       call call(function('s:hi'), group)
calling function bufferline#enable[32]..bufferline#highlight#setup[23]..<SNR>28_hi_all[2]..<SNR>28_hi('BufferVisibleMod', '#e5c07b', '#282c34')

line 1:    let fg = ''
line 2:    let bg = ''
line 3:    let attr = ''
line 4: 
line 5:    if type(a:1) == 3
line 6:       let fg   = get(a:1, 0, '')
line 7:       let bg   = get(a:1, 1, '')
line 8:       let attr = get(a:1, 2, '')
line 9:    else
line 10:       let fg   = get(a:000, 0, '')
line 11:       let bg   = get(a:000, 1, '')
line 12:       let attr = get(a:000, 2, '')
line 13:    end
line 14: 
line 15:    let has_props = v:false
line 16: 
line 17:    let cmd = 'hi default ' . a:name
line 18:    if !empty(fg) && fg != 'none'
line 19:       let cmd .= ' guifg=' . fg
line 20:       let has_props = v:true
line 21:    end
line 22:    if !empty(bg) && bg != 'none'
line 23:       let cmd .= ' guibg=' . bg
line 24:       let has_props = v:true
line 25:    end
line 26:    if !empty(attr) && attr != 'none'
line 27:       let cmd .= ' gui=' . attr
line 28:       let has_props = v:true
line 29:    end
line 30:    execute 'hi default clear ' a:name
line 30: hi default clear  BufferVisibleMod
line 31:    if has_props
line 32:       execute cmd
line 32: hi default BufferVisibleMod guifg=#e5c07b guibg=#282c34
line 33:    end
function bufferline#enable[32]..bufferline#highlight#setup[23]..<SNR>28_hi_all[2]..<SNR>28_hi returning #0

continuing in function bufferline#enable[32]..bufferline#highlight#setup[23]..<SNR>28_hi_all

line 3:    endfor
line 1:    for group in a:groups
line 2:       call call(function('s:hi'), group)
calling function bufferline#enable[32]..bufferline#highlight#setup[23]..<SNR>28_hi_all[2]..<SNR>28_hi('BufferVisibleSign', '#abb2bf', '#282c34')

line 1:    let fg = ''
line 2:    let bg = ''
line 3:    let attr = ''
line 4: 
line 5:    if type(a:1) == 3
line 6:       let fg   = get(a:1, 0, '')
line 7:       let bg   = get(a:1, 1, '')
line 8:       let attr = get(a:1, 2, '')
line 9:    else
line 10:       let fg   = get(a:000, 0, '')
line 11:       let bg   = get(a:000, 1, '')
line 12:       let attr = get(a:000, 2, '')
line 13:    end
line 14: 
line 15:    let has_props = v:false
line 16: 
line 17:    let cmd = 'hi default ' . a:name
line 18:    if !empty(fg) && fg != 'none'
line 19:       let cmd .= ' guifg=' . fg
line 20:       let has_props = v:true
line 21:    end
line 22:    if !empty(bg) && bg != 'none'
line 23:       let cmd .= ' guibg=' . bg
line 24:       let has_props = v:true
line 25:    end
line 26:    if !empty(attr) && attr != 'none'
line 27:       let cmd .= ' gui=' . attr
line 28:       let has_props = v:true
line 29:    end
line 30:    execute 'hi default clear ' a:name
line 30: hi default clear  BufferVisibleSign
line 31:    if has_props
line 32:       execute cmd
line 32: hi default BufferVisibleSign guifg=#abb2bf guibg=#282c34
line 33:    end
function bufferline#enable[32]..bufferline#highlight#setup[23]..<SNR>28_hi_all[2]..<SNR>28_hi returning #0

continuing in function bufferline#enable[32]..bufferline#highlight#setup[23]..<SNR>28_hi_all

line 3:    endfor
line 1:    for group in a:groups
line 2:       call call(function('s:hi'), group)
calling function bufferline#enable[32]..bufferline#highlight#setup[23]..<SNR>28_hi_all[2]..<SNR>28_hi('BufferVisibleTarget', 'red', '#282c34', 'bold')

line 1:    let fg = ''
line 2:    let bg = ''
line 3:    let attr = ''
line 4: 
line 5:    if type(a:1) == 3
line 6:       let fg   = get(a:1, 0, '')
line 7:       let bg   = get(a:1, 1, '')
line 8:       let attr = get(a:1, 2, '')
line 9:    else
line 10:       let fg   = get(a:000, 0, '')
line 11:       let bg   = get(a:000, 1, '')
line 12:       let attr = get(a:000, 2, '')
line 13:    end
line 14: 
line 15:    let has_props = v:false
line 16: 
line 17:    let cmd = 'hi default ' . a:name
line 18:    if !empty(fg) && fg != 'none'
line 19:       let cmd .= ' guifg=' . fg
line 20:       let has_props = v:true
line 21:    end
line 22:    if !empty(bg) && bg != 'none'
line 23:       let cmd .= ' guibg=' . bg
line 24:       let has_props = v:true
line 25:    end
line 26:    if !empty(attr) && attr != 'none'
line 27:       let cmd .= ' gui=' . attr
line 28:       let has_props = v:true
line 29:    end
line 30:    execute 'hi default clear ' a:name
line 30: hi default clear  BufferVisibleTarget
line 31:    if has_props
line 32:       execute cmd
line 32: hi default BufferVisibleTarget guifg=red guibg=#282c34 gui=bold
line 33:    end
function bufferline#enable[32]..bufferline#highlight#setup[23]..<SNR>28_hi_all[2]..<SNR>28_hi returning #0

continuing in function bufferline#enable[32]..bufferline#highlight#setup[23]..<SNR>28_hi_all

line 3:    endfor
line 1:    for group in a:groups
line 2:       call call(function('s:hi'), group)
calling function bufferline#enable[32]..bufferline#highlight#setup[23]..<SNR>28_hi_all[2]..<SNR>28_hi('BufferInactive', '#888888', '#2c323c')

line 1:    let fg = ''
line 2:    let bg = ''
line 3:    let attr = ''
line 4: 
line 5:    if type(a:1) == 3
line 6:       let fg   = get(a:1, 0, '')
line 7:       let bg   = get(a:1, 1, '')
line 8:       let attr = get(a:1, 2, '')
line 9:    else
line 10:       let fg   = get(a:000, 0, '')
line 11:       let bg   = get(a:000, 1, '')
line 12:       let attr = get(a:000, 2, '')
line 13:    end
line 14: 
line 15:    let has_props = v:false
line 16: 
line 17:    let cmd = 'hi default ' . a:name
line 18:    if !empty(fg) && fg != 'none'
line 19:       let cmd .= ' guifg=' . fg
line 20:       let has_props = v:true
line 21:    end
line 22:    if !empty(bg) && bg != 'none'
line 23:       let cmd .= ' guibg=' . bg
line 24:       let has_props = v:true
line 25:    end
line 26:    if !empty(attr) && attr != 'none'
line 27:       let cmd .= ' gui=' . attr
line 28:       let has_props = v:true
line 29:    end
line 30:    execute 'hi default clear ' a:name
line 30: hi default clear  BufferInactive
line 31:    if has_props
line 32:       execute cmd
line 32: hi default BufferInactive guifg=#888888 guibg=#2c323c
line 33:    end
function bufferline#enable[32]..bufferline#highlight#setup[23]..<SNR>28_hi_all[2]..<SNR>28_hi returning #0

continuing in function bufferline#enable[32]..bufferline#highlight#setup[23]..<SNR>28_hi_all

line 3:    endfor
line 1:    for group in a:groups
line 2:       call call(function('s:hi'), group)
calling function bufferline#enable[32]..bufferline#highlight#setup[23]..<SNR>28_hi_all[2]..<SNR>28_hi('BufferInactiveIndex', '#3b4048', '#2c323c')

line 1:    let fg = ''
line 2:    let bg = ''
line 3:    let attr = ''
line 4: 
line 5:    if type(a:1) == 3
line 6:       let fg   = get(a:1, 0, '')
line 7:       let bg   = get(a:1, 1, '')
line 8:       let attr = get(a:1, 2, '')
line 9:    else
line 10:       let fg   = get(a:000, 0, '')
line 11:       let bg   = get(a:000, 1, '')
line 12:       let attr = get(a:000, 2, '')
line 13:    end
line 14: 
line 15:    let has_props = v:false
line 16: 
line 17:    let cmd = 'hi default ' . a:name
line 18:    if !empty(fg) && fg != 'none'
line 19:       let cmd .= ' guifg=' . fg
line 20:       let has_props = v:true
line 21:    end
line 22:    if !empty(bg) && bg != 'none'
line 23:       let cmd .= ' guibg=' . bg
line 24:       let has_props = v:true
line 25:    end
line 26:    if !empty(attr) && attr != 'none'
line 27:       let cmd .= ' gui=' . attr
line 28:       let has_props = v:true
line 29:    end
line 30:    execute 'hi default clear ' a:name
line 30: hi default clear  BufferInactiveIndex
line 31:    if has_props
line 32:       execute cmd
line 32: hi default BufferInactiveIndex guifg=#3b4048 guibg=#2c323c
line 33:    end
function bufferline#enable[32]..bufferline#highlight#setup[23]..<SNR>28_hi_all[2]..<SNR>28_hi returning #0

continuing in function bufferline#enable[32]..bufferline#highlight#setup[23]..<SNR>28_hi_all

line 3:    endfor
line 1:    for group in a:groups
line 2:       call call(function('s:hi'), group)
calling function bufferline#enable[32]..bufferline#highlight#setup[23]..<SNR>28_hi_all[2]..<SNR>28_hi('BufferInactiveMod', '#e5c07b', '#2c323c')

line 1:    let fg = ''
line 2:    let bg = ''
line 3:    let attr = ''
line 4: 
line 5:    if type(a:1) == 3
line 6:       let fg   = get(a:1, 0, '')
line 7:       let bg   = get(a:1, 1, '')
line 8:       let attr = get(a:1, 2, '')
line 9:    else
line 10:       let fg   = get(a:000, 0, '')
line 11:       let bg   = get(a:000, 1, '')
line 12:       let attr = get(a:000, 2, '')
line 13:    end
line 14: 
line 15:    let has_props = v:false
line 16: 
line 17:    let cmd = 'hi default ' . a:name
line 18:    if !empty(fg) && fg != 'none'
line 19:       let cmd .= ' guifg=' . fg
line 20:       let has_props = v:true
line 21:    end
line 22:    if !empty(bg) && bg != 'none'
line 23:       let cmd .= ' guibg=' . bg
line 24:       let has_props = v:true
line 25:    end
line 26:    if !empty(attr) && attr != 'none'
line 27:       let cmd .= ' gui=' . attr
line 28:       let has_props = v:true
line 29:    end
line 30:    execute 'hi default clear ' a:name
line 30: hi default clear  BufferInactiveMod
line 31:    if has_props
line 32:       execute cmd
line 32: hi default BufferInactiveMod guifg=#e5c07b guibg=#2c323c
line 33:    end
function bufferline#enable[32]..bufferline#highlight#setup[23]..<SNR>28_hi_all[2]..<SNR>28_hi returning #0

continuing in function bufferline#enable[32]..bufferline#highlight#setup[23]..<SNR>28_hi_all

line 3:    endfor
line 1:    for group in a:groups
line 2:       call call(function('s:hi'), group)
calling function bufferline#enable[32]..bufferline#highlight#setup[23]..<SNR>28_hi_all[2]..<SNR>28_hi('BufferInactiveSign', '#3b4048', '#2c323c')

line 1:    let fg = ''
line 2:    let bg = ''
line 3:    let attr = ''
line 4: 
line 5:    if type(a:1) == 3
line 6:       let fg   = get(a:1, 0, '')
line 7:       let bg   = get(a:1, 1, '')
line 8:       let attr = get(a:1, 2, '')
line 9:    else
line 10:       let fg   = get(a:000, 0, '')
line 11:       let bg   = get(a:000, 1, '')
line 12:       let attr = get(a:000, 2, '')
line 13:    end
line 14: 
line 15:    let has_props = v:false
line 16: 
line 17:    let cmd = 'hi default ' . a:name
line 18:    if !empty(fg) && fg != 'none'
line 19:       let cmd .= ' guifg=' . fg
line 20:       let has_props = v:true
line 21:    end
line 22:    if !empty(bg) && bg != 'none'
line 23:       let cmd .= ' guibg=' . bg
line 24:       let has_props = v:true
line 25:    end
line 26:    if !empty(attr) && attr != 'none'
line 27:       let cmd .= ' gui=' . attr
line 28:       let has_props = v:true
line 29:    end
line 30:    execute 'hi default clear ' a:name
line 30: hi default clear  BufferInactiveSign
line 31:    if has_props
line 32:       execute cmd
line 32: hi default BufferInactiveSign guifg=#3b4048 guibg=#2c323c
line 33:    end
function bufferline#enable[32]..bufferline#highlight#setup[23]..<SNR>28_hi_all[2]..<SNR>28_hi returning #0

continuing in function bufferline#enable[32]..bufferline#highlight#setup[23]..<SNR>28_hi_all

line 3:    endfor
line 1:    for group in a:groups
line 2:       call call(function('s:hi'), group)
calling function bufferline#enable[32]..bufferline#highlight#setup[23]..<SNR>28_hi_all[2]..<SNR>28_hi('BufferInactiveTarget', 'red', '#2c323c', 'bold')

line 1:    let fg = ''
line 2:    let bg = ''
line 3:    let attr = ''
line 4: 
line 5:    if type(a:1) == 3
line 6:       let fg   = get(a:1, 0, '')
line 7:       let bg   = get(a:1, 1, '')
line 8:       let attr = get(a:1, 2, '')
line 9:    else
line 10:       let fg   = get(a:000, 0, '')
line 11:       let bg   = get(a:000, 1, '')
line 12:       let attr = get(a:000, 2, '')
line 13:    end
line 14: 
line 15:    let has_props = v:false
line 16: 
line 17:    let cmd = 'hi default ' . a:name
line 18:    if !empty(fg) && fg != 'none'
line 19:       let cmd .= ' guifg=' . fg
line 20:       let has_props = v:true
line 21:    end
line 22:    if !empty(bg) && bg != 'none'
line 23:       let cmd .= ' guibg=' . bg
line 24:       let has_props = v:true
line 25:    end
line 26:    if !empty(attr) && attr != 'none'
line 27:       let cmd .= ' gui=' . attr
line 28:       let has_props = v:true
line 29:    end
line 30:    execute 'hi default clear ' a:name
line 30: hi default clear  BufferInactiveTarget
line 31:    if has_props
line 32:       execute cmd
line 32: hi default BufferInactiveTarget guifg=red guibg=#2c323c gui=bold
line 33:    end
function bufferline#enable[32]..bufferline#highlight#setup[23]..<SNR>28_hi_all[2]..<SNR>28_hi returning #0

continuing in function bufferline#enable[32]..bufferline#highlight#setup[23]..<SNR>28_hi_all

line 3:    endfor
line 1:    for group in a:groups
line 2:       call call(function('s:hi'), group)
calling function bufferline#enable[32]..bufferline#highlight#setup[23]..<SNR>28_hi_all[2]..<SNR>28_hi('BufferTabpages', '#61afef', '#2c323c', 'bold')

line 1:    let fg = ''
line 2:    let bg = ''
line 3:    let attr = ''
line 4: 
line 5:    if type(a:1) == 3
line 6:       let fg   = get(a:1, 0, '')
line 7:       let bg   = get(a:1, 1, '')
line 8:       let attr = get(a:1, 2, '')
line 9:    else
line 10:       let fg   = get(a:000, 0, '')
line 11:       let bg   = get(a:000, 1, '')
line 12:       let attr = get(a:000, 2, '')
line 13:    end
line 14: 
line 15:    let has_props = v:false
line 16: 
line 17:    let cmd = 'hi default ' . a:name
line 18:    if !empty(fg) && fg != 'none'
line 19:       let cmd .= ' guifg=' . fg
line 20:       let has_props = v:true
line 21:    end
line 22:    if !empty(bg) && bg != 'none'
line 23:       let cmd .= ' guibg=' . bg
line 24:       let has_props = v:true
line 25:    end
line 26:    if !empty(attr) && attr != 'none'
line 27:       let cmd .= ' gui=' . attr
line 28:       let has_props = v:true
line 29:    end
line 30:    execute 'hi default clear ' a:name
line 30: hi default clear  BufferTabpages
line 31:    if has_props
line 32:       execute cmd
line 32: hi default BufferTabpages guifg=#61afef guibg=#2c323c gui=bold
line 33:    end
function bufferline#enable[32]..bufferline#highlight#setup[23]..<SNR>28_hi_all[2]..<SNR>28_hi returning #0

continuing in function bufferline#enable[32]..bufferline#highlight#setup[23]..<SNR>28_hi_all

line 3:    endfor
line 1:    for group in a:groups
line 2:       call call(function('s:hi'), group)
calling function bufferline#enable[32]..bufferline#highlight#setup[23]..<SNR>28_hi_all[2]..<SNR>28_hi('BufferTabpageFill', '#888888', '#2c323c')

line 1:    let fg = ''
line 2:    let bg = ''
line 3:    let attr = ''
line 4: 
line 5:    if type(a:1) == 3
line 6:       let fg   = get(a:1, 0, '')
line 7:       let bg   = get(a:1, 1, '')
line 8:       let attr = get(a:1, 2, '')
line 9:    else
line 10:       let fg   = get(a:000, 0, '')
line 11:       let bg   = get(a:000, 1, '')
line 12:       let attr = get(a:000, 2, '')
line 13:    end
line 14: 
line 15:    let has_props = v:false
line 16: 
line 17:    let cmd = 'hi default ' . a:name
line 18:    if !empty(fg) && fg != 'none'
line 19:       let cmd .= ' guifg=' . fg
line 20:       let has_props = v:true
line 21:    end
line 22:    if !empty(bg) && bg != 'none'
line 23:       let cmd .= ' guibg=' . bg
line 24:       let has_props = v:true
line 25:    end
line 26:    if !empty(attr) && attr != 'none'
line 27:       let cmd .= ' gui=' . attr
line 28:       let has_props = v:true
line 29:    end
line 30:    execute 'hi default clear ' a:name
line 30: hi default clear  BufferTabpageFill
line 31:    if has_props
line 32:       execute cmd
line 32: hi default BufferTabpageFill guifg=#888888 guibg=#2c323c
line 33:    end
function bufferline#enable[32]..bufferline#highlight#setup[23]..<SNR>28_hi_all[2]..<SNR>28_hi returning #0

continuing in function bufferline#enable[32]..bufferline#highlight#setup[23]..<SNR>28_hi_all

line 3:    endfor
line 1:    for group in a:groups
line 2:       call call(function('s:hi'), group)
line 3:    endfor
function bufferline#enable[32]..bufferline#highlight#setup[23]..<SNR>28_hi_all returning #0

continuing in function bufferline#enable[32]..bufferline#highlight#setup

line 42: 
line 43:    call s:hi_link([ ['BufferCurrentIcon',  'BufferCurrent'], ['BufferVisibleIcon',  'BufferVisible'], ['BufferInactiveIcon', 'BufferInactive'], ['BufferOffset',       'BufferTabpageFill'], ])
calling function bufferline#enable[32]..bufferline#highlight#setup[43]..<SNR>28_hi_link([['BufferCurrentIcon', 'BufferCurrent'... ['BufferOffset', 'BufferTabpageFill']])

line 1:    for pair in a:pairs
line 2:       execute 'hi default link ' . join(pair)
line 2: hi default link BufferCurrentIcon BufferCurrent
line 3:    endfor
line 1:    for pair in a:pairs
line 2:       execute 'hi default link ' . join(pair)
line 2: hi default link BufferVisibleIcon BufferVisible
line 3:    endfor
line 1:    for pair in a:pairs
line 2:       execute 'hi default link ' . join(pair)
line 2: hi default link BufferInactiveIcon BufferInactive
line 3:    endfor
line 1:    for pair in a:pairs
line 2:       execute 'hi default link ' . join(pair)
line 2: hi default link BufferOffset BufferTabpageFill
line 3:    endfor
line 1:    for pair in a:pairs
line 2:       execute 'hi default link ' . join(pair)
line 3:    endfor
function bufferline#enable[32]..bufferline#highlight#setup[43]..<SNR>28_hi_link returning #0

continuing in function bufferline#enable[32]..bufferline#highlight#setup

line 49: 
line 50:    lua require'bufferline.icons'.set_highlights()
Searching for "lua/bufferline/icons.lua" in "/Users/andrewgu/.config/nvim,/etc/xdg/nvim,/Users/andrewgu/.local/share/nvim/site,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/telescope.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/popup.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/plenary.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/packer.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-web-devicons,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-tree.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-lspconfig,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-compe,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-base16.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-autopairs,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/neoformat,/Users/andrewgu/.local/share/nvim/site/pack/packer/
Searching for "/Users/andrewgu/.config/nvim/lua/bufferline/icons.lua"
Searching for "/etc/xdg/nvim/lua/bufferline/icons.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/lua/bufferline/icons.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/telescope.nvim/lua/bufferline/icons.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/popup.nvim/lua/bufferline/icons.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/plenary.nvim/lua/bufferline/icons.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/packer.nvim/lua/bufferline/icons.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/lua/bufferline/icons.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-web-devicons/lua/bufferline/icons.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-tree.lua/lua/bufferline/icons.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-lspconfig/lua/bufferline/icons.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-compe/lua/bufferline/icons.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-base16.lua/lua/bufferline/icons.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-autopairs/lua/bufferline/icons.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/neoformat/lua/bufferline/icons.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/lualine.nvim/lua/bufferline/icons.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/indent-blankline.nvim/lua/bufferline/icons.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/gitsigns.nvim/lua/bufferline/icons.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/barbar.nvim/lua/bufferline/icons.lua"
Searching for "lua/bufferline/nvim.lua" in "/Users/andrewgu/.config/nvim,/etc/xdg/nvim,/Users/andrewgu/.local/share/nvim/site,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/telescope.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/popup.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/plenary.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/packer.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-web-devicons,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-tree.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-lspconfig,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-compe,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-base16.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-autopairs,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/neoformat,/Users/andrewgu/.local/share/nvim/site/pack/packer/s
Searching for "/Users/andrewgu/.config/nvim/lua/bufferline/nvim.lua"
Searching for "/etc/xdg/nvim/lua/bufferline/nvim.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/lua/bufferline/nvim.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/telescope.nvim/lua/bufferline/nvim.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/popup.nvim/lua/bufferline/nvim.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/plenary.nvim/lua/bufferline/nvim.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/packer.nvim/lua/bufferline/nvim.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/lua/bufferline/nvim.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-web-devicons/lua/bufferline/nvim.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-tree.lua/lua/bufferline/nvim.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-lspconfig/lua/bufferline/nvim.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-compe/lua/bufferline/nvim.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-base16.lua/lua/bufferline/nvim.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-autopairs/lua/bufferline/nvim.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/neoformat/lua/bufferline/nvim.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/lualine.nvim/lua/bufferline/nvim.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/indent-blankline.nvim/lua/bufferline/nvim.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/gitsigns.nvim/lua/bufferline/nvim.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/barbar.nvim/lua/bufferline/nvim.lua"
Searching for "lua/nvim-web-devicons.lua" in "/Users/andrewgu/.config/nvim,/etc/xdg/nvim,/Users/andrewgu/.local/share/nvim/site,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/telescope.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/popup.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/plenary.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/packer.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-web-devicons,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-tree.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-lspconfig,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-compe,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-base16.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-autopairs,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/neoformat,/Users/andrewgu/.local/share/nvim/site/pack/packer
Searching for "/Users/andrewgu/.config/nvim/lua/nvim-web-devicons.lua"
Searching for "/etc/xdg/nvim/lua/nvim-web-devicons.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/lua/nvim-web-devicons.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/telescope.nvim/lua/nvim-web-devicons.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/popup.nvim/lua/nvim-web-devicons.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/plenary.nvim/lua/nvim-web-devicons.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/packer.nvim/lua/nvim-web-devicons.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/lua/nvim-web-devicons.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-web-devicons/lua/nvim-web-devicons.lua"
function bufferline#enable[32]..bufferline#highlight#setup returning #0

continuing in function bufferline#enable

line 33:    call bufferline#update()
calling function bufferline#enable[33]..bufferline#update()

line 1:    let new_value = bufferline#render(a:0 > 0 ? a:1 : v:false)
calling function bufferline#enable[33]..bufferline#update[1]..bufferline#render(v:false)

line 1:    let result = luaeval("require'bufferline.render'.render_safe(_A)", a:update_names)
Searching for "lua/bufferline/render.lua" in "/Users/andrewgu/.config/nvim,/etc/xdg/nvim,/Users/andrewgu/.local/share/nvim/site,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/telescope.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/popup.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/plenary.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/packer.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-web-devicons,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-tree.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-lspconfig,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-compe,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-base16.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-autopairs,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/neoformat,/Users/andrewgu/.local/share/nvim/site/pack/packer
Searching for "/Users/andrewgu/.config/nvim/lua/bufferline/render.lua"
Searching for "/etc/xdg/nvim/lua/bufferline/render.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/lua/bufferline/render.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/telescope.nvim/lua/bufferline/render.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/popup.nvim/lua/bufferline/render.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/plenary.nvim/lua/bufferline/render.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/packer.nvim/lua/bufferline/render.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/lua/bufferline/render.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-web-devicons/lua/bufferline/render.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-tree.lua/lua/bufferline/render.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-lspconfig/lua/bufferline/render.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-compe/lua/bufferline/render.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-base16.lua/lua/bufferline/render.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-autopairs/lua/bufferline/render.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/neoformat/lua/bufferline/render.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/lualine.nvim/lua/bufferline/render.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/indent-blankline.nvim/lua/bufferline/render.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/gitsigns.nvim/lua/bufferline/render.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/barbar.nvim/lua/bufferline/render.lua"
Searching for "lua/bufferline/utils.lua" in "/Users/andrewgu/.config/nvim,/etc/xdg/nvim,/Users/andrewgu/.local/share/nvim/site,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/telescope.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/popup.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/plenary.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/packer.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-web-devicons,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-tree.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-lspconfig,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-compe,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-base16.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-autopairs,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/neoformat,/Users/andrewgu/.local/share/nvim/site/pack/packer/
Searching for "/Users/andrewgu/.config/nvim/lua/bufferline/utils.lua"
Searching for "/etc/xdg/nvim/lua/bufferline/utils.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/lua/bufferline/utils.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/telescope.nvim/lua/bufferline/utils.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/popup.nvim/lua/bufferline/utils.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/plenary.nvim/lua/bufferline/utils.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/packer.nvim/lua/bufferline/utils.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/lua/bufferline/utils.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-web-devicons/lua/bufferline/utils.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-tree.lua/lua/bufferline/utils.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-lspconfig/lua/bufferline/utils.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-compe/lua/bufferline/utils.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-base16.lua/lua/bufferline/utils.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-autopairs/lua/bufferline/utils.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/neoformat/lua/bufferline/utils.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/lualine.nvim/lua/bufferline/utils.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/indent-blankline.nvim/lua/bufferline/utils.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/gitsigns.nvim/lua/bufferline/utils.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/barbar.nvim/lua/bufferline/utils.lua"
Searching for "lua/bufferline/state.lua" in "/Users/andrewgu/.config/nvim,/etc/xdg/nvim,/Users/andrewgu/.local/share/nvim/site,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/telescope.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/popup.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/plenary.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/packer.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-web-devicons,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-tree.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-lspconfig,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-compe,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-base16.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-autopairs,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/neoformat,/Users/andrewgu/.local/share/nvim/site/pack/packer/
Searching for "/Users/andrewgu/.config/nvim/lua/bufferline/state.lua"
Searching for "/etc/xdg/nvim/lua/bufferline/state.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/lua/bufferline/state.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/telescope.nvim/lua/bufferline/state.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/popup.nvim/lua/bufferline/state.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/plenary.nvim/lua/bufferline/state.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/packer.nvim/lua/bufferline/state.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/lua/bufferline/state.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-web-devicons/lua/bufferline/state.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-tree.lua/lua/bufferline/state.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-lspconfig/lua/bufferline/state.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-compe/lua/bufferline/state.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-base16.lua/lua/bufferline/state.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-autopairs/lua/bufferline/state.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/neoformat/lua/bufferline/state.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/lualine.nvim/lua/bufferline/state.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/indent-blankline.nvim/lua/bufferline/state.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/gitsigns.nvim/lua/bufferline/state.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/barbar.nvim/lua/bufferline/state.lua"
Searching for "lua/bufferline/layout.lua" in "/Users/andrewgu/.config/nvim,/etc/xdg/nvim,/Users/andrewgu/.local/share/nvim/site,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/telescope.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/popup.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/plenary.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/packer.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-web-devicons,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-tree.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-lspconfig,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-compe,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-base16.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-autopairs,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/neoformat,/Users/andrewgu/.local/share/nvim/site/pack/packer
Searching for "/Users/andrewgu/.config/nvim/lua/bufferline/layout.lua"
Searching for "/etc/xdg/nvim/lua/bufferline/layout.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/lua/bufferline/layout.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/telescope.nvim/lua/bufferline/layout.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/popup.nvim/lua/bufferline/layout.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/plenary.nvim/lua/bufferline/layout.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/packer.nvim/lua/bufferline/layout.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/lua/bufferline/layout.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-web-devicons/lua/bufferline/layout.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-tree.lua/lua/bufferline/layout.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-lspconfig/lua/bufferline/layout.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-compe/lua/bufferline/layout.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-base16.lua/lua/bufferline/layout.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-autopairs/lua/bufferline/layout.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/neoformat/lua/bufferline/layout.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/lualine.nvim/lua/bufferline/layout.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/indent-blankline.nvim/lua/bufferline/layout.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/gitsigns.nvim/lua/bufferline/layout.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/barbar.nvim/lua/bufferline/layout.lua"
Searching for "lua/bufferline/buffer.lua" in "/Users/andrewgu/.config/nvim,/etc/xdg/nvim,/Users/andrewgu/.local/share/nvim/site,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/telescope.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/popup.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/plenary.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/packer.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-web-devicons,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-tree.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-lspconfig,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-compe,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-base16.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-autopairs,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/neoformat,/Users/andrewgu/.local/share/nvim/site/pack/packer
Searching for "/Users/andrewgu/.config/nvim/lua/bufferline/buffer.lua"
Searching for "/etc/xdg/nvim/lua/bufferline/buffer.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/lua/bufferline/buffer.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/telescope.nvim/lua/bufferline/buffer.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/popup.nvim/lua/bufferline/buffer.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/plenary.nvim/lua/bufferline/buffer.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/packer.nvim/lua/bufferline/buffer.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/lua/bufferline/buffer.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-web-devicons/lua/bufferline/buffer.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-tree.lua/lua/bufferline/buffer.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-lspconfig/lua/bufferline/buffer.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-compe/lua/bufferline/buffer.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-base16.lua/lua/bufferline/buffer.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-autopairs/lua/bufferline/buffer.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/neoformat/lua/bufferline/buffer.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/lualine.nvim/lua/bufferline/buffer.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/indent-blankline.nvim/lua/bufferline/buffer.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/gitsigns.nvim/lua/bufferline/buffer.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/barbar.nvim/lua/bufferline/buffer.lua"
Searching for "lua/bufferline/jump_mode.lua" in "/Users/andrewgu/.config/nvim,/etc/xdg/nvim,/Users/andrewgu/.local/share/nvim/site,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/telescope.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/popup.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/plenary.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/packer.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-web-devicons,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-tree.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-lspconfig,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-compe,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-base16.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-autopairs,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/neoformat,/Users/andrewgu/.local/share/nvim/site/pack/pac
Searching for "/Users/andrewgu/.config/nvim/lua/bufferline/jump_mode.lua"
Searching for "/etc/xdg/nvim/lua/bufferline/jump_mode.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/lua/bufferline/jump_mode.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/telescope.nvim/lua/bufferline/jump_mode.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/popup.nvim/lua/bufferline/jump_mode.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/plenary.nvim/lua/bufferline/jump_mode.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/packer.nvim/lua/bufferline/jump_mode.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/lua/bufferline/jump_mode.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-web-devicons/lua/bufferline/jump_mode.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-tree.lua/lua/bufferline/jump_mode.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-lspconfig/lua/bufferline/jump_mode.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-compe/lua/bufferline/jump_mode.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-base16.lua/lua/bufferline/jump_mode.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-autopairs/lua/bufferline/jump_mode.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/neoformat/lua/bufferline/jump_mode.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/lualine.nvim/lua/bufferline/jump_mode.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/indent-blankline.nvim/lua/bufferline/jump_mode.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/gitsigns.nvim/lua/bufferline/jump_mode.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/barbar.nvim/lua/bufferline/jump_mode.lua"
calling function bufferline#enable[33]..bufferline#update[1]..bufferline#render[1]..bufferline#filter('&buflisted')

line 1:     let list = []
line 2:     for line in split(execute('ls!'), "\n")
line 2: ls!
  1 %    "."                            line 1
line 3:         call add(list, 0+matchstr(line, '\v\d+'))
line 4:     endfor
line 2:     for line in split(execute('ls!'), "\n")
line 3:         call add(list, 0+matchstr(line, '\v\d+'))
line 4:     endfor
line 2:     for line in split(execute('ls!'), "\n")
line 3:         call add(list, 0+matchstr(line, '\v\d+'))
line 4:     endfor
line 5:     for a_expr in a:000
line 6:         let expr = a_expr
line 7:         let expr = substitute(expr, '&\w\+', 'getbufvar(v:val, "\0")', 'g')
line 8:         call filter(list, expr)
line 9:     endfor
line 5:     for a_expr in a:000
line 6:         let expr = a_expr
line 7:         let expr = substitute(expr, '&\w\+', 'getbufvar(v:val, "\0")', 'g')
line 8:         call filter(list, expr)
line 9:     endfor
line 10:     return list
function bufferline#enable[33]..bufferline#update[1]..bufferline#render[1]..bufferline#filter returning [1]

continuing in function bufferline#enable[33]..bufferline#update[1]..bufferline#render

line 1: highlight! DevIconD guifg=#427819
line 1: highlight! DevIconR guifg=#358a5b
line 1: highlight! DevIconTerminal guifg=#31B53E
line 1: highlight! DevIconSvg guifg=#FFB13B
line 1: highlight! DevIconBashProfile guifg=#89e051
line 1: highlight! DevIconBashrc guifg=#89e051
line 1: highlight! DevIconBabelrc guifg=#cbcb41
line 1: highlight! DevIconDsStore guifg=#41535b
line 1: highlight! DevIconEx guifg=#a074c4
line 1: highlight! DevIconGitAttributes guifg=#41535b
line 1: highlight! DevIconDiff guifg=#41535b
line 1: highlight! DevIconGitConfig guifg=#41535b
line 1: highlight! DevIconGitIgnore guifg=#41535b
line 1: highlight! DevIconGitModules guifg=#41535b
line 1: highlight! DevIconGitCommit guifg=#41535b
line 1: highlight! DevIconLicense guifg=#cbcb41
line 1: highlight! DevIconLicense guifg=#cbcb41
line 1: highlight! DevIconGitlabCI guifg=#e24329
line 1: highlight! DevIconGvimrc guifg=#019833
line 1: highlight! DevIconNPMIgnore guifg=#E8274B
line 1: highlight! DevIconVimrc guifg=#019833
line 1: highlight! DevIconZshrc guifg=#89e051
line 1: highlight! DevIconZshenv guifg=#89e051
line 1: highlight! DevIconZshprofile guifg=#89e051
line 1: highlight! DevIconDockerfile guifg=#384d54
line 1: highlight! DevIconGemfile guifg=#701516
line 1: highlight! DevIconLicense guifg=#d0bf41
line 1: highlight! DevIconVagrantfile guifg=#1563FF
line 1: highlight! DevIconGvimrc guifg=#019833
line 1: highlight! DevIconVimrc guifg=#019833
line 1: highlight! DevIconAwk guifg=#4d5a5e
line 1: highlight! DevIconBash guifg=#89e051
line 1: highlight! DevIconBat guifg=#C1F12E
line 1: highlight! DevIconBmp guifg=#a074c4
line 1: highlight! DevIconCPlusPlus guifg=#f34b7d
line 1: highlight! DevIconDefault guifg=#6d8086
line 1: highlight! DevIconMl guifg=#e37933
line 1: highlight! DevIconMdx guifg=#519aba
line 1: highlight! DevIconFavicon guifg=#cbcb41
line 1: highlight! DevIconRb guifg=#701516
line 1: highlight! DevIconClojureC guifg=#8dc149
line 1: highlight! DevIconRlib guifg=#dea584
line 1: highlight! DevIconClojureJS guifg=#519aba
line 1: highlight! DevIconLua guifg=#51a0cf
line 1: highlight! DevIconJson guifg=#cbcb41
line 1: highlight! DevIconRmd guifg=#519aba
line 1: highlight! DevIconRmd guifg=#519aba
line 1: highlight! DevIconRproj guifg=#358a5b
line 1: highlight! DevIconCMake guifg=#6d8086
line 1: highlight! DevIconJs guifg=#cbcb41
line 1: highlight! DevIconCoffee guifg=#cbcb41
line 1: highlight! DevIconGo guifg=#519aba
line 1: highlight! DevIconRss guifg=#FB9D3B
line 1: highlight! DevIconConf guifg=#6d8086
line 1: highlight! DevIconGemspec guifg=#701516
line 1: highlight! DevIconConfigRu guifg=#701516
line 1: highlight! DevIconSass guifg=#f55385
line 1: highlight! DevIconGif guifg=#a074c4
line 1: highlight! DevIconCpp guifg=#519aba
line 1: highlight! DevIconJpeg guifg=#a074c4
line 1: highlight! DevIconScala guifg=#cc3e44
line 1: highlight! DevIconJpg guifg=#a074c4
line 1: highlight! DevIconCson guifg=#cbcb41
line 1: highlight! DevIconScss guifg=#f55385
line 1: highlight! DevIconHpp guifg=#a074c4
line 1: highlight! DevIconCss guifg=#563d7c
line 1: highlight! DevIconSlim guifg=#e34c26
line 1: highlight! DevIconJsx guifg=#519aba
line 1: highlight! DevIconSln guifg=#854CC7
line 1: highlight! DevIconCxx guifg=#519aba
line 1: highlight! DevIconSql guifg=#dad8d8
line 1: highlight! DevIconPp guifg=#302B6D
line 1: highlight! DevIconLeex guifg=#a074c4
line 1: highlight! DevIconDart guifg=#03589C
line 1: highlight! DevIconLess guifg=#563d7c
line 1: highlight! DevIconSuo guifg=#854CC7
line 1: highlight! DevIconLhs guifg=#a074c4
line 1: highlight! DevIconSwift guifg=#e37933
line 1: highlight! DevIconLicense guifg=#cbcb41
line 1: highlight! DevIconHh guifg=#a074c4
line 1: highlight! DevIconMd guifg=#519aba
line 1: highlight! DevIconPm guifg=#519aba
line 1: highlight! DevIconMakefile guifg=#6d8086
line 1: highlight! DevIconDockerfile guifg=#384d54
line 1: highlight! DevIconHtm guifg=#e34c26
line 1: highlight! DevIconToml guifg=#6d8086
line 1: highlight! DevIconCsh guifg=#4d5a5e
line 1: highlight! DevIconEex guifg=#a074c4
line 1: highlight! DevIconDropbox guifg=#0061FE
line 1: highlight! DevIconMixLock guifg=#a074c4
line 1: highlight! DevIconEjs guifg=#cbcb41
line 1: highlight! DevIconMjs guifg=#f1e05a
line 1: highlight! DevIconHbs guifg=#f0772b
line 1: highlight! DevIconElm guifg=#519aba
line 1: highlight! DevIconHaml guifg=#eaeae1
line 1: highlight! DevIconDoc guifg=#185abd
line 1: highlight! DevIconMli guifg=#e37933
line 1: highlight! DevIconFs guifg=#519aba
line 1: highlight! DevIconMustache guifg=#e37933
line 1: highlight! DevIconTsx guifg=#519aba
line 1: highlight! DevIconNix guifg=#7ebae4
line 1: highlight! DevIconExs guifg=#a074c4
line 1: highlight! DevIconTwig guifg=#8dc149
line 1: highlight! DevIconFsharp guifg=#519aba
line 1: highlight! DevIconFish guifg=#4d5a5e
line 1: highlight! DevIconErl guifg=#B83998
line 1: highlight! DevIconPhp guifg=#a074c4
line 1: highlight! DevIconRs guifg=#dea584
line 1: highlight! DevIconWebmanifest guifg=#f1e05a
line 1: highlight! DevIconPl guifg=#519aba
line 1: highlight! DevIconWebp guifg=#a074c4
line 1: highlight! DevIconHxx guifg=#a074c4
line 1: highlight! DevIconXcPlayground guifg=#e37933
line 1: highlight! DevIconPng guifg=#a074c4
line 1: highlight! DevIconFsscript guifg=#519aba
line 1: highlight! DevIconPpt guifg=#cb4a32
line 1: highlight! DevIconFsx guifg=#519aba
line 1: highlight! DevIconYaml guifg=#6d8086
line 1: highlight! DevIconPromptPs1 guifg=#4d5a5e
line 1: highlight! DevIconYml guifg=#6d8086
line 1: highlight! DevIconPsb guifg=#519aba
line 1: highlight! DevIconZsh guifg=#89e051
line 1: highlight! DevIconC guifg=#599eff
line 1: highlight! DevIconPsd guifg=#519aba
line 1: highlight! DevIconHtml guifg=#e34c26
line 1: highlight! DevIconPy guifg=#3572A5
line 1: highlight! DevIconPdf guifg=#b30b00
line 1: highlight! DevIconR guifg=#358a5b
line 1: highlight! DevIconGruntfile guifg=#e37933
line 1: highlight! DevIconPyc guifg=#519aba
line 1: highlight! DevIconKotlin guifg=#F88A02
line 1: highlight! DevIconGitLogo guifg=#F14C28
line 1: highlight! DevIconGulpfile guifg=#cc3e44
line 1: highlight! DevIconSh guifg=#4d5a5e
line 1: highlight! DevIconSvelte guifg=#ff3e00
line 1: highlight! DevIconVue guifg=#8dc149
line 1: highlight! DevIconNodeModules guifg=#E8274B
line 1: highlight! DevIconHs guifg=#a074c4
line 1: highlight! DevIconGodotProject guifg=#6d8086
line 1: highlight! DevIconRakefile guifg=#701516
line 1: highlight! DevIconXls guifg=#207245
line 1: highlight! DevIconTextResource guifg=#cbcb41
line 1: highlight! DevIconClojure guifg=#8dc149
line 1: highlight! DevIconBinaryGLTF guifg=#FFB13B
line 1: highlight! DevIconErb guifg=#701516
line 1: highlight! DevIconAi guifg=#cbcb41
line 1: highlight! DevIconImportConfiguration guifg=#ECECEC
line 1: highlight! DevIconTor guifg=#519aba
line 1: highlight! DevIconIco guifg=#cbcb41
line 1: highlight! DevIconXml guifg=#e37933
line 1: highlight! DevIconMaterial guifg=#B83998
line 1: highlight! DevIconSettingsJson guifg=#854CC7
line 1: highlight! DevIconGDScript guifg=#6d8086
line 1: highlight! DevIconOpenTypeFont guifg=#ECECEC
line 1: highlight! DevIconPyd guifg=#519aba
line 1: highlight! DevIconJl guifg=#a270ba
line 1: highlight! DevIconPyo guifg=#519aba
line 1: highlight! DevIconPackedResource guifg=#6d8086
line 1: highlight! DevIconWebpack guifg=#519aba
line 1: highlight! DevIconJava guifg=#cc3e44
line 1: highlight! DevIconDesktopEntry guifg=#563d7c
line 1: highlight! DevIconIni guifg=#6d8086
line 1: highlight! DevIconRake guifg=#701516
line 1: highlight! DevIconOPUS guifg=#F88A02
line 1: highlight! DevIconProcfile guifg=#a074c4
line 1: highlight! DevIconCPlusPlus guifg=#f34b7d
line 1: highlight! DevIconHrl guifg=#B83998
line 1: highlight! DevIconH guifg=#a074c4
line 1: highlight! DevIconConfiguration guifg=#ECECEC
line 1: highlight! DevIconCMakeLists guifg=#6d8086
line 1: highlight! DevIconStyl guifg=#8dc149
line 1: highlight! DevIconEdn guifg=#519aba
line 1: highlight! DevIconDump guifg=#dad8d8
line 1: highlight! DevIconKsh guifg=#4d5a5e
line 1: highlight! DevIconMarkdown guifg=#519aba
line 1: highlight! DevIconCp guifg=#519aba
line 1: highlight! DevIconTs guifg=#519aba
line 1: highlight! DevIconTextScene guifg=#a074c4
line 1: highlight! DevIconVim guifg=#019833
line 1: highlight! DevIconFsi guifg=#519aba
line 1: highlight! DevIconCs guifg=#596706
line 1: highlight! DevIconXul guifg=#e37933
line 1: highlight! DevIconTex guifg=#3D6117
line 1: highlight! DevIconDb guifg=#dad8d8
Executing: augroup NvimWebDevicons
Executing: autocmd!
Executing: autocmd ColorScheme * lua require('nvim-web-devicons').set_up_highlights()
Executing: augroup END
line 1: hi! DevIconDefaultCurrent guifg=#6d8086 guibg=#282c34
line 2: 
line 3:    if result[0]
line 4:       return result[1]
function bufferline#enable[33]..bufferline#update[1]..bufferline#render returning '%1@BufferlineMainClickHandler@%#Buffe...ufferTabpageFill#▎%#BufferTabpageFill#'

continuing in function bufferline#enable[33]..bufferline#update

line 2:    if new_value == s:last_tabline
line 3:       return
line 4:    end
line 5:    let &tabline = new_value
line 6:    let s:last_tabline = new_value
function bufferline#enable[33]..bufferline#update returning #0

continuing in function bufferline#enable

function bufferline#enable returning #0

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/barbar.nvim/plugin/bufferline.vim

line 235: 
line 236: let g:bufferline# = s:
finished sourcing /Users/andrewgu/.local/share/nvim/site/pack/packer/start/barbar.nvim/plugin/bufferline.vim
Executing: augroup filetypedetect
Executing: augroup END
chdir(/Users/andrewgu/.config/nvim)
chdir(/Users/andrewgu/.local/share/nvim/site/pack/packer/start)
chdir(/Users/andrewgu/.config/nvim)
Executing: augroup filetypedetect
Executing: augroup END
chdir(/Users/andrewgu/.config/nvim)
chdir(/Users/andrewgu/.local/share/nvim/site/pack/packer/start)
chdir(/Users/andrewgu/.config/nvim)
chdir(/Users/andrewgu/.config/nvim)
chdir(/Users/andrewgu/.local/share/nvim/site/pack/packer/start/indent-blankline.nvim/plugin)
chdir(/Users/andrewgu/.config/nvim)
sourcing "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/indent-blankline.nvim/plugin/indent_blankline.vim"
line 1: 
line 2: if exists('g:loaded_indent_blankline') || !has('nvim-0.5.0')
line 3:     finish
line 4: endif
line 5: let g:loaded_indent_blankline = 1
line 6: 
line 7: let g:indent_blankline_char = get(g:, 'indent_blankline_char', get(g:, 'indentLine_char', '|'))
line 8: let g:indent_blankline_char_list = get(g:, 'indent_blankline_char_list', get(g:, 'indentLine_char_list', []))
line 9: let g:indent_blankline_char_highlight_list = get(g:, 'indent_blankline_char_highlight_list', [])
line 10: 
line 11: let g:indent_blankline_space_char = get(g:, 'indent_blankline_space_char', indent_blankline#helper#GetListChar('space', ' '))
Searching for "autoload/indent_blankline/helper.vim" in "/Users/andrewgu/.config/nvim,/etc/xdg/nvim,/Users/andrewgu/.local/share/nvim/site,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/telescope.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/popup.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/plenary.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/packer.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-web-devicons,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-tree.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-lspconfig,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-compe,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-base16.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-autopairs,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/neoformat,/Users/andrewgu/.local/share/nvim/site/
Searching for "/Users/andrewgu/.config/nvim/autoload/indent_blankline/helper.vim"
Searching for "/etc/xdg/nvim/autoload/indent_blankline/helper.vim"
Searching for "/Users/andrewgu/.local/share/nvim/site/autoload/indent_blankline/helper.vim"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/telescope.nvim/autoload/indent_blankline/helper.vim"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/popup.nvim/autoload/indent_blankline/helper.vim"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/plenary.nvim/autoload/indent_blankline/helper.vim"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/packer.nvim/autoload/indent_blankline/helper.vim"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/autoload/indent_blankline/helper.vim"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-web-devicons/autoload/indent_blankline/helper.vim"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-tree.lua/autoload/indent_blankline/helper.vim"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-lspconfig/autoload/indent_blankline/helper.vim"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-compe/autoload/indent_blankline/helper.vim"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-base16.lua/autoload/indent_blankline/helper.vim"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-autopairs/autoload/indent_blankline/helper.vim"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/neoformat/autoload/indent_blankline/helper.vim"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/lualine.nvim/autoload/indent_blankline/helper.vim"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/indent-blankline.nvim/autoload/indent_blankline/helper.vim"
chdir(/Users/andrewgu/.config/nvim)
chdir(/Users/andrewgu/.local/share/nvim/site/pack/packer/start/indent-blankline.nvim/autoload/indent_blankline)
chdir(/Users/andrewgu/.config/nvim)
line 11: sourcing "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/indent-blankline.nvim/autoload/indent_blankline/helper.vim"
line 1: 
line 2: function! indent_blankline#helper#GetListChar(key, fallback)
finished sourcing /Users/andrewgu/.local/share/nvim/site/pack/packer/start/indent-blankline.nvim/autoload/indent_blankline/helper.vim
continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/indent-blankline.nvim/plugin/indent_blankline.vim
calling function indent_blankline#helper#GetListChar('space', ' ')

line 1:     let l:list_chars = {}
line 2: 
line 3:     for l:char in split(&listchars, ',')
line 4:         let l:split = split(l:char, ':')
line 5:         let l:list_chars[l:split[0]] = l:split[1]
line 6:     endfor
line 3:     for l:char in split(&listchars, ',')
line 4:         let l:split = split(l:char, ':')
line 5:         let l:list_chars[l:split[0]] = l:split[1]
line 6:     endfor
line 3:     for l:char in split(&listchars, ',')
line 4:         let l:split = split(l:char, ':')
line 5:         let l:list_chars[l:split[0]] = l:split[1]
line 6:     endfor
line 3:     for l:char in split(&listchars, ',')
line 4:         let l:split = split(l:char, ':')
line 5:         let l:list_chars[l:split[0]] = l:split[1]
line 6:     endfor
line 7: 
line 8:     return get(l:list_chars, a:key, a:fallback)
function indent_blankline#helper#GetListChar returning ' '

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/start/indent-blankline.nvim/plugin/indent_blankline.vim

line 12: let g:indent_blankline_space_char_highlight_list = get(g:, 'indent_blankline_space_char_highlight_list', [])
line 13: 
line 14: let g:indent_blankline_space_char_blankline = get(g:, 'indent_blankline_space_char_blankline', g:indent_blankline_space_char)
line 15: let g:indent_blankline_space_char_blankline_highlight_list = get(g:, 'indent_blankline_space_char_blankline_highlight_list', g:indent_blankline_space_char_highlight_list)
line 16: 
line 17: let g:indent_blankline_indent_level = get(g:, 'indent_blankline_indent_level', get(g:, 'indentLine_indentLevel', 20))
line 18: let g:indent_blankline_enabled = get(g:, 'indent_blankline_enabled', get(g:, 'indentLine_enabled', v:true))
line 19: let g:indent_blankline_filetype = get(g:, 'indent_blankline_filetype', get(g:, 'indentLine_fileType', []))
line 20: let g:indent_blankline_filetype_exclude = get(g:, 'indent_blankline_filetype_exclude', get(g:, 'indentLine_fileTypeExclude', []))
line 21: let g:indent_blankline_bufname_exclude = get(g:, 'indent_blankline_bufname_exclude', get(g:, 'indentLine_bufNameExclude', []))
line 22: let g:indent_blankline_buftype_exclude = get(g:, 'indent_blankline_buftype_exclude', get(g:, 'indentLine_bufTypeExclude', []))
line 23: let g:indent_blankline_viewport_buffer = get(g:, 'indent_blankline_viewport_buffer', 10)
line 24: let g:indent_blankline_use_treesitter = get(g:, 'indent_blankline_use_treesitter', v:false)
line 25: let g:indent_blankline_debug = get(g:, 'indent_blankline_debug', v:false)
line 26: let g:indent_blankline_disable_warning_message = get(g:, 'indent_blankline_disable_warning_message', v:false)
line 27: let g:indent_blankline_show_first_indent_level = get(g:, 'indent_blankline_show_first_indent_level', v:true)
line 28: let g:indent_blankline_show_trailing_blankline_indent = get(g:, 'indent_blankline_show_trailing_blankline_indent', v:true)
line 29: let g:indent_blankline_show_end_of_line = get(g:, 'indent_blankline_show_end_of_line', v:false)
line 30: let g:indent_blankline_show_foldtext = get(g:, 'indent_blankline_show_foldtext', v:true)
line 31: let g:indent_blankline_show_current_context = get(g:, 'indent_blankline_show_current_context', v:false)
line 32: let g:indent_blankline_context_highlight_list = get(g:, 'indent_blankline_context_highlight_list', [])
line 33: let g:indent_blankline_context_patterns = get(g:, 'indent_blankline_context_patterns', ['class', 'function', 'method'])
line 34: let g:indent_blankline_strict_tabs = get(g:, 'indent_blankline_strict_tabs', v:false)
line 35: 
line 36: lua require("indent_blankline").setup()
Searching for "lua/indent_blankline.lua" in "/Users/andrewgu/.config/nvim,/etc/xdg/nvim,/Users/andrewgu/.local/share/nvim/site,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/telescope.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/popup.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/plenary.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/packer.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-web-devicons,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-tree.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-lspconfig,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-compe,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-base16.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-autopairs,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/neoformat,/Users/andrewgu/.local/share/nvim/site/pack/packer/
Searching for "/Users/andrewgu/.config/nvim/lua/indent_blankline.lua"
Searching for "/etc/xdg/nvim/lua/indent_blankline.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/lua/indent_blankline.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/telescope.nvim/lua/indent_blankline.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/popup.nvim/lua/indent_blankline.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/plenary.nvim/lua/indent_blankline.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/packer.nvim/lua/indent_blankline.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/lua/indent_blankline.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-web-devicons/lua/indent_blankline.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-tree.lua/lua/indent_blankline.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-lspconfig/lua/indent_blankline.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-compe/lua/indent_blankline.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-base16.lua/lua/indent_blankline.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-autopairs/lua/indent_blankline.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/neoformat/lua/indent_blankline.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/lualine.nvim/lua/indent_blankline.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/indent-blankline.nvim/lua/indent_blankline.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/gitsigns.nvim/lua/indent_blankline.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/barbar.nvim/lua/indent_blankline.lua"
Searching for "/usr/local/share/nvim/site/lua/indent_blankline.lua"
Searching for "/usr/share/nvim/site/lua/indent_blankline.lua"
Searching for "/usr/local/Cellar/neovim/0.5.0/share/nvim/runtime/lua/indent_blankline.lua"
Searching for "/usr/local/Cellar/neovim/0.5.0/share/nvim/runtime/pack/dist/opt/matchit/lua/indent_blankline.lua"
Searching for "/usr/local/Cellar/neovim/0.5.0/lib/nvim/lua/indent_blankline.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-compe/after/lua/indent_blankline.lua"
Searching for "/usr/share/nvim/site/after/lua/indent_blankline.lua"
Searching for "/usr/local/share/nvim/site/after/lua/indent_blankline.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/after/lua/indent_blankline.lua"
Searching for "/etc/xdg/nvim/after/lua/indent_blankline.lua"
Searching for "/Users/andrewgu/.config/nvim/after/lua/indent_blankline.lua"
not found in 'runtimepath': "lua/indent_blankline.lua"
Searching for "pack/*/start/*/lua/indent_blankline.lua" in "/Users/andrewgu/.config/nvim,/etc/xdg/nvim,/Users/andrewgu/.local/share/nvim/site,/usr/local/share/nvim/site,/usr/share/nvim/site,/usr/local/Cellar/neovim/0.5.0/share/nvim/runtime,/usr/local/Cellar/neovim/0.5.0/lib/nvim,/usr/share/nvim/site/after,/usr/local/share/nvim/site/after,/Users/andrewgu/.local/share/nvim/site/after,/etc/xdg/nvim/after,/Users/andrewgu/.config/nvim/after"
Searching for "/Users/andrewgu/.config/nvim/pack/*/start/*/lua/indent_blankline.lua"
Searching for "/etc/xdg/nvim/pack/*/start/*/lua/indent_blankline.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/*/start/*/lua/indent_blankline.lua"
Searching for "/usr/local/share/nvim/site/pack/*/start/*/lua/indent_blankline.lua"
Searching for "/usr/share/nvim/site/pack/*/start/*/lua/indent_blankline.lua"
Searching for "/usr/local/Cellar/neovim/0.5.0/share/nvim/runtime/pack/*/start/*/lua/indent_blankline.lua"
Searching for "/usr/local/Cellar/neovim/0.5.0/lib/nvim/pack/*/start/*/lua/indent_blankline.lua"
Searching for "/usr/share/nvim/site/after/pack/*/start/*/lua/indent_blankline.lua"
Searching for "/usr/local/share/nvim/site/after/pack/*/start/*/lua/indent_blankline.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/after/pack/*/start/*/lua/indent_blankline.lua"
Searching for "/etc/xdg/nvim/after/pack/*/start/*/lua/indent_blankline.lua"
Searching for "/Users/andrewgu/.config/nvim/after/pack/*/start/*/lua/indent_blankline.lua"
not found in 'packpath': "pack/*/start/*/lua/indent_blankline.lua"
Searching for "start/*/lua/indent_blankline.lua" in "/Users/andrewgu/.config/nvim,/etc/xdg/nvim,/Users/andrewgu/.local/share/nvim/site,/usr/local/share/nvim/site,/usr/share/nvim/site,/usr/local/Cellar/neovim/0.5.0/share/nvim/runtime,/usr/local/Cellar/neovim/0.5.0/lib/nvim,/usr/share/nvim/site/after,/usr/local/share/nvim/site/after,/Users/andrewgu/.local/share/nvim/site/after,/etc/xdg/nvim/after,/Users/andrewgu/.config/nvim/after"
Searching for "/Users/andrewgu/.config/nvim/start/*/lua/indent_blankline.lua"
Searching for "/etc/xdg/nvim/start/*/lua/indent_blankline.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/start/*/lua/indent_blankline.lua"
Searching for "/usr/local/share/nvim/site/start/*/lua/indent_blankline.lua"
Searching for "/usr/share/nvim/site/start/*/lua/indent_blankline.lua"
Searching for "/usr/local/Cellar/neovim/0.5.0/share/nvim/runtime/start/*/lua/indent_blankline.lua"
Searching for "/usr/local/Cellar/neovim/0.5.0/lib/nvim/start/*/lua/indent_blankline.lua"
Searching for "/usr/share/nvim/site/after/start/*/lua/indent_blankline.lua"
Searching for "/usr/local/share/nvim/site/after/start/*/lua/indent_blankline.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/after/start/*/lua/indent_blankline.lua"
Searching for "/etc/xdg/nvim/after/start/*/lua/indent_blankline.lua"
Searching for "/Users/andrewgu/.config/nvim/after/start/*/lua/indent_blankline.lua"
not found in 'packpath': "start/*/lua/indent_blankline.lua"
Searching for "lua/indent_blankline/init.lua" in "/Users/andrewgu/.config/nvim,/etc/xdg/nvim,/Users/andrewgu/.local/share/nvim/site,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/telescope.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/popup.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/plenary.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/packer.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-web-devicons,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-tree.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-lspconfig,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-compe,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-base16.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-autopairs,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/neoformat,/Users/andrewgu/.local/share/nvim/site/pack/pa
Searching for "/Users/andrewgu/.config/nvim/lua/indent_blankline/init.lua"
Searching for "/etc/xdg/nvim/lua/indent_blankline/init.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/lua/indent_blankline/init.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/telescope.nvim/lua/indent_blankline/init.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/popup.nvim/lua/indent_blankline/init.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/plenary.nvim/lua/indent_blankline/init.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/packer.nvim/lua/indent_blankline/init.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/lua/indent_blankline/init.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-web-devicons/lua/indent_blankline/init.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-tree.lua/lua/indent_blankline/init.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-lspconfig/lua/indent_blankline/init.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-compe/lua/indent_blankline/init.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-base16.lua/lua/indent_blankline/init.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-autopairs/lua/indent_blankline/init.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/neoformat/lua/indent_blankline/init.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/lualine.nvim/lua/indent_blankline/init.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/indent-blankline.nvim/lua/indent_blankline/init.lua"
Searching for "lua/nvim-treesitter/query.lua" in "/Users/andrewgu/.config/nvim,/etc/xdg/nvim,/Users/andrewgu/.local/share/nvim/site,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/telescope.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/popup.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/plenary.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/packer.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-web-devicons,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-tree.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-lspconfig,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-compe,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-base16.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-autopairs,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/neoformat,/Users/andrewgu/.local/share/nvim/site/pack/pa
Searching for "/Users/andrewgu/.config/nvim/lua/nvim-treesitter/query.lua"
Searching for "/etc/xdg/nvim/lua/nvim-treesitter/query.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/lua/nvim-treesitter/query.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/telescope.nvim/lua/nvim-treesitter/query.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/popup.nvim/lua/nvim-treesitter/query.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/plenary.nvim/lua/nvim-treesitter/query.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/packer.nvim/lua/nvim-treesitter/query.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/lua/nvim-treesitter/query.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-web-devicons/lua/nvim-treesitter/query.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-tree.lua/lua/nvim-treesitter/query.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-lspconfig/lua/nvim-treesitter/query.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-compe/lua/nvim-treesitter/query.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-base16.lua/lua/nvim-treesitter/query.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-autopairs/lua/nvim-treesitter/query.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/neoformat/lua/nvim-treesitter/query.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/lualine.nvim/lua/nvim-treesitter/query.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/indent-blankline.nvim/lua/nvim-treesitter/query.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/gitsigns.nvim/lua/nvim-treesitter/query.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/barbar.nvim/lua/nvim-treesitter/query.lua"
Searching for "/usr/local/share/nvim/site/lua/nvim-treesitter/query.lua"
Searching for "/usr/share/nvim/site/lua/nvim-treesitter/query.lua"
Searching for "/usr/local/Cellar/neovim/0.5.0/share/nvim/runtime/lua/nvim-treesitter/query.lua"
Searching for "/usr/local/Cellar/neovim/0.5.0/share/nvim/runtime/pack/dist/opt/matchit/lua/nvim-treesitter/query.lua"
Searching for "/usr/local/Cellar/neovim/0.5.0/lib/nvim/lua/nvim-treesitter/query.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-compe/after/lua/nvim-treesitter/query.lua"
Searching for "/usr/share/nvim/site/after/lua/nvim-treesitter/query.lua"
Searching for "/usr/local/share/nvim/site/after/lua/nvim-treesitter/query.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/after/lua/nvim-treesitter/query.lua"
Searching for "/etc/xdg/nvim/after/lua/nvim-treesitter/query.lua"
Searching for "/Users/andrewgu/.config/nvim/after/lua/nvim-treesitter/query.lua"
not found in 'runtimepath': "lua/nvim-treesitter/query.lua"
Searching for "pack/*/start/*/lua/nvim-treesitter/query.lua" in "/Users/andrewgu/.config/nvim,/etc/xdg/nvim,/Users/andrewgu/.local/share/nvim/site,/usr/local/share/nvim/site,/usr/share/nvim/site,/usr/local/Cellar/neovim/0.5.0/share/nvim/runtime,/usr/local/Cellar/neovim/0.5.0/lib/nvim,/usr/share/nvim/site/after,/usr/local/share/nvim/site/after,/Users/andrewgu/.local/share/nvim/site/after,/etc/xdg/nvim/after,/Users/andrewgu/.config/nvim/after"
Searching for "/Users/andrewgu/.config/nvim/pack/*/start/*/lua/nvim-treesitter/query.lua"
Searching for "/etc/xdg/nvim/pack/*/start/*/lua/nvim-treesitter/query.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/*/start/*/lua/nvim-treesitter/query.lua"
Searching for "/usr/local/share/nvim/site/pack/*/start/*/lua/nvim-treesitter/query.lua"
Searching for "/usr/share/nvim/site/pack/*/start/*/lua/nvim-treesitter/query.lua"
Searching for "/usr/local/Cellar/neovim/0.5.0/share/nvim/runtime/pack/*/start/*/lua/nvim-treesitter/query.lua"
Searching for "/usr/local/Cellar/neovim/0.5.0/lib/nvim/pack/*/start/*/lua/nvim-treesitter/query.lua"
Searching for "/usr/share/nvim/site/after/pack/*/start/*/lua/nvim-treesitter/query.lua"
Searching for "/usr/local/share/nvim/site/after/pack/*/start/*/lua/nvim-treesitter/query.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/after/pack/*/start/*/lua/nvim-treesitter/query.lua"
Searching for "/etc/xdg/nvim/after/pack/*/start/*/lua/nvim-treesitter/query.lua"
Searching for "/Users/andrewgu/.config/nvim/after/pack/*/start/*/lua/nvim-treesitter/query.lua"
not found in 'packpath': "pack/*/start/*/lua/nvim-treesitter/query.lua"
Searching for "start/*/lua/nvim-treesitter/query.lua" in "/Users/andrewgu/.config/nvim,/etc/xdg/nvim,/Users/andrewgu/.local/share/nvim/site,/usr/local/share/nvim/site,/usr/share/nvim/site,/usr/local/Cellar/neovim/0.5.0/share/nvim/runtime,/usr/local/Cellar/neovim/0.5.0/lib/nvim,/usr/share/nvim/site/after,/usr/local/share/nvim/site/after,/Users/andrewgu/.local/share/nvim/site/after,/etc/xdg/nvim/after,/Users/andrewgu/.config/nvim/after"
Searching for "/Users/andrewgu/.config/nvim/start/*/lua/nvim-treesitter/query.lua"
Searching for "/etc/xdg/nvim/start/*/lua/nvim-treesitter/query.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/start/*/lua/nvim-treesitter/query.lua"
Searching for "/usr/local/share/nvim/site/start/*/lua/nvim-treesitter/query.lua"
Searching for "/usr/share/nvim/site/start/*/lua/nvim-treesitter/query.lua"
Searching for "/usr/local/Cellar/neovim/0.5.0/share/nvim/runtime/start/*/lua/nvim-treesitter/query.lua"
Searching for "/usr/local/Cellar/neovim/0.5.0/lib/nvim/start/*/lua/nvim-treesitter/query.lua"
Searching for "/usr/share/nvim/site/after/start/*/lua/nvim-treesitter/query.lua"
Searching for "/usr/local/share/nvim/site/after/start/*/lua/nvim-treesitter/query.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/after/start/*/lua/nvim-treesitter/query.lua"
Searching for "/etc/xdg/nvim/after/start/*/lua/nvim-treesitter/query.lua"
Searching for "/Users/andrewgu/.config/nvim/after/start/*/lua/nvim-treesitter/query.lua"
not found in 'packpath': "start/*/lua/nvim-treesitter/query.lua"
Searching for "lua/nvim-treesitter/query/init.lua" in "/Users/andrewgu/.config/nvim,/etc/xdg/nvim,/Users/andrewgu/.local/share/nvim/site,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/telescope.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/popup.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/plenary.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/packer.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-web-devicons,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-tree.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-lspconfig,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-compe,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-base16.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-autopairs,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/neoformat,/Users/andrewgu/.local/share/nvim/site/pa
Searching for "/Users/andrewgu/.config/nvim/lua/nvim-treesitter/query/init.lua"
Searching for "/etc/xdg/nvim/lua/nvim-treesitter/query/init.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/lua/nvim-treesitter/query/init.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/telescope.nvim/lua/nvim-treesitter/query/init.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/popup.nvim/lua/nvim-treesitter/query/init.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/plenary.nvim/lua/nvim-treesitter/query/init.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/packer.nvim/lua/nvim-treesitter/query/init.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/lua/nvim-treesitter/query/init.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-web-devicons/lua/nvim-treesitter/query/init.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-tree.lua/lua/nvim-treesitter/query/init.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-lspconfig/lua/nvim-treesitter/query/init.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-compe/lua/nvim-treesitter/query/init.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-base16.lua/lua/nvim-treesitter/query/init.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-autopairs/lua/nvim-treesitter/query/init.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/neoformat/lua/nvim-treesitter/query/init.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/lualine.nvim/lua/nvim-treesitter/query/init.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/indent-blankline.nvim/lua/nvim-treesitter/query/init.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/gitsigns.nvim/lua/nvim-treesitter/query/init.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/barbar.nvim/lua/nvim-treesitter/query/init.lua"
Searching for "/usr/local/share/nvim/site/lua/nvim-treesitter/query/init.lua"
Searching for "/usr/share/nvim/site/lua/nvim-treesitter/query/init.lua"
Searching for "/usr/local/Cellar/neovim/0.5.0/share/nvim/runtime/lua/nvim-treesitter/query/init.lua"
Searching for "/usr/local/Cellar/neovim/0.5.0/share/nvim/runtime/pack/dist/opt/matchit/lua/nvim-treesitter/query/init.lua"
Searching for "/usr/local/Cellar/neovim/0.5.0/lib/nvim/lua/nvim-treesitter/query/init.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-compe/after/lua/nvim-treesitter/query/init.lua"
Searching for "/usr/share/nvim/site/after/lua/nvim-treesitter/query/init.lua"
Searching for "/usr/local/share/nvim/site/after/lua/nvim-treesitter/query/init.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/after/lua/nvim-treesitter/query/init.lua"
Searching for "/etc/xdg/nvim/after/lua/nvim-treesitter/query/init.lua"
Searching for "/Users/andrewgu/.config/nvim/after/lua/nvim-treesitter/query/init.lua"
not found in 'runtimepath': "lua/nvim-treesitter/query/init.lua"
Searching for "pack/*/start/*/lua/nvim-treesitter/query/init.lua" in "/Users/andrewgu/.config/nvim,/etc/xdg/nvim,/Users/andrewgu/.local/share/nvim/site,/usr/local/share/nvim/site,/usr/share/nvim/site,/usr/local/Cellar/neovim/0.5.0/share/nvim/runtime,/usr/local/Cellar/neovim/0.5.0/lib/nvim,/usr/share/nvim/site/after,/usr/local/share/nvim/site/after,/Users/andrewgu/.local/share/nvim/site/after,/etc/xdg/nvim/after,/Users/andrewgu/.config/nvim/after"
Searching for "/Users/andrewgu/.config/nvim/pack/*/start/*/lua/nvim-treesitter/query/init.lua"
Searching for "/etc/xdg/nvim/pack/*/start/*/lua/nvim-treesitter/query/init.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/*/start/*/lua/nvim-treesitter/query/init.lua"
Searching for "/usr/local/share/nvim/site/pack/*/start/*/lua/nvim-treesitter/query/init.lua"
Searching for "/usr/share/nvim/site/pack/*/start/*/lua/nvim-treesitter/query/init.lua"
Searching for "/usr/local/Cellar/neovim/0.5.0/share/nvim/runtime/pack/*/start/*/lua/nvim-treesitter/query/init.lua"
Searching for "/usr/local/Cellar/neovim/0.5.0/lib/nvim/pack/*/start/*/lua/nvim-treesitter/query/init.lua"
Searching for "/usr/share/nvim/site/after/pack/*/start/*/lua/nvim-treesitter/query/init.lua"
Searching for "/usr/local/share/nvim/site/after/pack/*/start/*/lua/nvim-treesitter/query/init.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/after/pack/*/start/*/lua/nvim-treesitter/query/init.lua"
Searching for "/etc/xdg/nvim/after/pack/*/start/*/lua/nvim-treesitter/query/init.lua"
Searching for "/Users/andrewgu/.config/nvim/after/pack/*/start/*/lua/nvim-treesitter/query/init.lua"
not found in 'packpath': "pack/*/start/*/lua/nvim-treesitter/query/init.lua"
Searching for "start/*/lua/nvim-treesitter/query/init.lua" in "/Users/andrewgu/.config/nvim,/etc/xdg/nvim,/Users/andrewgu/.local/share/nvim/site,/usr/local/share/nvim/site,/usr/share/nvim/site,/usr/local/Cellar/neovim/0.5.0/share/nvim/runtime,/usr/local/Cellar/neovim/0.5.0/lib/nvim,/usr/share/nvim/site/after,/usr/local/share/nvim/site/after,/Users/andrewgu/.local/share/nvim/site/after,/etc/xdg/nvim/after,/Users/andrewgu/.config/nvim/after"
Searching for "/Users/andrewgu/.config/nvim/start/*/lua/nvim-treesitter/query/init.lua"
Searching for "/etc/xdg/nvim/start/*/lua/nvim-treesitter/query/init.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/start/*/lua/nvim-treesitter/query/init.lua"
Searching for "/usr/local/share/nvim/site/start/*/lua/nvim-treesitter/query/init.lua"
Searching for "/usr/share/nvim/site/start/*/lua/nvim-treesitter/query/init.lua"
Searching for "/usr/local/Cellar/neovim/0.5.0/share/nvim/runtime/start/*/lua/nvim-treesitter/query/init.lua"
Searching for "/usr/local/Cellar/neovim/0.5.0/lib/nvim/start/*/lua/nvim-treesitter/query/init.lua"
Searching for "/usr/share/nvim/site/after/start/*/lua/nvim-treesitter/query/init.lua"
Searching for "/usr/local/share/nvim/site/after/start/*/lua/nvim-treesitter/query/init.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/after/start/*/lua/nvim-treesitter/query/init.lua"
Searching for "/etc/xdg/nvim/after/start/*/lua/nvim-treesitter/query/init.lua"
Searching for "/Users/andrewgu/.config/nvim/after/start/*/lua/nvim-treesitter/query/init.lua"
not found in 'packpath': "start/*/lua/nvim-treesitter/query/init.lua"
Searching for "lua/nvim-treesitter/query.so" in "/Users/andrewgu/.config/nvim,/etc/xdg/nvim,/Users/andrewgu/.local/share/nvim/site,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/telescope.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/popup.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/plenary.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/packer.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-web-devicons,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-tree.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-lspconfig,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-compe,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-base16.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-autopairs,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/neoformat,/Users/andrewgu/.local/share/nvim/site/pack/pac
Searching for "/Users/andrewgu/.config/nvim/lua/nvim-treesitter/query.so"
Searching for "/etc/xdg/nvim/lua/nvim-treesitter/query.so"
Searching for "/Users/andrewgu/.local/share/nvim/site/lua/nvim-treesitter/query.so"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/telescope.nvim/lua/nvim-treesitter/query.so"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/popup.nvim/lua/nvim-treesitter/query.so"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/plenary.nvim/lua/nvim-treesitter/query.so"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/packer.nvim/lua/nvim-treesitter/query.so"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/lua/nvim-treesitter/query.so"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-web-devicons/lua/nvim-treesitter/query.so"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-tree.lua/lua/nvim-treesitter/query.so"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-lspconfig/lua/nvim-treesitter/query.so"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-compe/lua/nvim-treesitter/query.so"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-base16.lua/lua/nvim-treesitter/query.so"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-autopairs/lua/nvim-treesitter/query.so"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/neoformat/lua/nvim-treesitter/query.so"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/lualine.nvim/lua/nvim-treesitter/query.so"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/indent-blankline.nvim/lua/nvim-treesitter/query.so"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/gitsigns.nvim/lua/nvim-treesitter/query.so"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/barbar.nvim/lua/nvim-treesitter/query.so"
Searching for "/usr/local/share/nvim/site/lua/nvim-treesitter/query.so"
Searching for "/usr/share/nvim/site/lua/nvim-treesitter/query.so"
Searching for "/usr/local/Cellar/neovim/0.5.0/share/nvim/runtime/lua/nvim-treesitter/query.so"
Searching for "/usr/local/Cellar/neovim/0.5.0/share/nvim/runtime/pack/dist/opt/matchit/lua/nvim-treesitter/query.so"
Searching for "/usr/local/Cellar/neovim/0.5.0/lib/nvim/lua/nvim-treesitter/query.so"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-compe/after/lua/nvim-treesitter/query.so"
Searching for "/usr/share/nvim/site/after/lua/nvim-treesitter/query.so"
Searching for "/usr/local/share/nvim/site/after/lua/nvim-treesitter/query.so"
Searching for "/Users/andrewgu/.local/share/nvim/site/after/lua/nvim-treesitter/query.so"
Searching for "/etc/xdg/nvim/after/lua/nvim-treesitter/query.so"
Searching for "/Users/andrewgu/.config/nvim/after/lua/nvim-treesitter/query.so"
not found in 'runtimepath': "lua/nvim-treesitter/query.so"
Searching for "pack/*/start/*/lua/nvim-treesitter/query.so" in "/Users/andrewgu/.config/nvim,/etc/xdg/nvim,/Users/andrewgu/.local/share/nvim/site,/usr/local/share/nvim/site,/usr/share/nvim/site,/usr/local/Cellar/neovim/0.5.0/share/nvim/runtime,/usr/local/Cellar/neovim/0.5.0/lib/nvim,/usr/share/nvim/site/after,/usr/local/share/nvim/site/after,/Users/andrewgu/.local/share/nvim/site/after,/etc/xdg/nvim/after,/Users/andrewgu/.config/nvim/after"
Searching for "/Users/andrewgu/.config/nvim/pack/*/start/*/lua/nvim-treesitter/query.so"
Searching for "/etc/xdg/nvim/pack/*/start/*/lua/nvim-treesitter/query.so"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/*/start/*/lua/nvim-treesitter/query.so"
Searching for "/usr/local/share/nvim/site/pack/*/start/*/lua/nvim-treesitter/query.so"
Searching for "/usr/share/nvim/site/pack/*/start/*/lua/nvim-treesitter/query.so"
Searching for "/usr/local/Cellar/neovim/0.5.0/share/nvim/runtime/pack/*/start/*/lua/nvim-treesitter/query.so"
Searching for "/usr/local/Cellar/neovim/0.5.0/lib/nvim/pack/*/start/*/lua/nvim-treesitter/query.so"
Searching for "/usr/share/nvim/site/after/pack/*/start/*/lua/nvim-treesitter/query.so"
Searching for "/usr/local/share/nvim/site/after/pack/*/start/*/lua/nvim-treesitter/query.so"
Searching for "/Users/andrewgu/.local/share/nvim/site/after/pack/*/start/*/lua/nvim-treesitter/query.so"
Searching for "/etc/xdg/nvim/after/pack/*/start/*/lua/nvim-treesitter/query.so"
Searching for "/Users/andrewgu/.config/nvim/after/pack/*/start/*/lua/nvim-treesitter/query.so"
not found in 'packpath': "pack/*/start/*/lua/nvim-treesitter/query.so"
Searching for "start/*/lua/nvim-treesitter/query.so" in "/Users/andrewgu/.config/nvim,/etc/xdg/nvim,/Users/andrewgu/.local/share/nvim/site,/usr/local/share/nvim/site,/usr/share/nvim/site,/usr/local/Cellar/neovim/0.5.0/share/nvim/runtime,/usr/local/Cellar/neovim/0.5.0/lib/nvim,/usr/share/nvim/site/after,/usr/local/share/nvim/site/after,/Users/andrewgu/.local/share/nvim/site/after,/etc/xdg/nvim/after,/Users/andrewgu/.config/nvim/after"
Searching for "/Users/andrewgu/.config/nvim/start/*/lua/nvim-treesitter/query.so"
Searching for "/etc/xdg/nvim/start/*/lua/nvim-treesitter/query.so"
Searching for "/Users/andrewgu/.local/share/nvim/site/start/*/lua/nvim-treesitter/query.so"
Searching for "/usr/local/share/nvim/site/start/*/lua/nvim-treesitter/query.so"
Searching for "/usr/share/nvim/site/start/*/lua/nvim-treesitter/query.so"
Searching for "/usr/local/Cellar/neovim/0.5.0/share/nvim/runtime/start/*/lua/nvim-treesitter/query.so"
Searching for "/usr/local/Cellar/neovim/0.5.0/lib/nvim/start/*/lua/nvim-treesitter/query.so"
Searching for "/usr/share/nvim/site/after/start/*/lua/nvim-treesitter/query.so"
Searching for "/usr/local/share/nvim/site/after/start/*/lua/nvim-treesitter/query.so"
Searching for "/Users/andrewgu/.local/share/nvim/site/after/start/*/lua/nvim-treesitter/query.so"
Searching for "/etc/xdg/nvim/after/start/*/lua/nvim-treesitter/query.so"
Searching for "/Users/andrewgu/.config/nvim/after/start/*/lua/nvim-treesitter/query.so"
not found in 'packpath': "start/*/lua/nvim-treesitter/query.so"
Searching for "lua/nvim-treesitter/indent.lua" in "/Users/andrewgu/.config/nvim,/etc/xdg/nvim,/Users/andrewgu/.local/share/nvim/site,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/telescope.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/popup.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/plenary.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/packer.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-web-devicons,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-tree.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-lspconfig,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-compe,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-base16.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-autopairs,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/neoformat,/Users/andrewgu/.local/share/nvim/site/pack/p
Searching for "/Users/andrewgu/.config/nvim/lua/nvim-treesitter/indent.lua"
Searching for "/etc/xdg/nvim/lua/nvim-treesitter/indent.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/lua/nvim-treesitter/indent.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/telescope.nvim/lua/nvim-treesitter/indent.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/popup.nvim/lua/nvim-treesitter/indent.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/plenary.nvim/lua/nvim-treesitter/indent.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/packer.nvim/lua/nvim-treesitter/indent.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/lua/nvim-treesitter/indent.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-web-devicons/lua/nvim-treesitter/indent.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-tree.lua/lua/nvim-treesitter/indent.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-lspconfig/lua/nvim-treesitter/indent.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-compe/lua/nvim-treesitter/indent.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-base16.lua/lua/nvim-treesitter/indent.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-autopairs/lua/nvim-treesitter/indent.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/neoformat/lua/nvim-treesitter/indent.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/lualine.nvim/lua/nvim-treesitter/indent.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/indent-blankline.nvim/lua/nvim-treesitter/indent.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/gitsigns.nvim/lua/nvim-treesitter/indent.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/barbar.nvim/lua/nvim-treesitter/indent.lua"
Searching for "/usr/local/share/nvim/site/lua/nvim-treesitter/indent.lua"
Searching for "/usr/share/nvim/site/lua/nvim-treesitter/indent.lua"
Searching for "/usr/local/Cellar/neovim/0.5.0/share/nvim/runtime/lua/nvim-treesitter/indent.lua"
Searching for "/usr/local/Cellar/neovim/0.5.0/share/nvim/runtime/pack/dist/opt/matchit/lua/nvim-treesitter/indent.lua"
Searching for "/usr/local/Cellar/neovim/0.5.0/lib/nvim/lua/nvim-treesitter/indent.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-compe/after/lua/nvim-treesitter/indent.lua"
Searching for "/usr/share/nvim/site/after/lua/nvim-treesitter/indent.lua"
Searching for "/usr/local/share/nvim/site/after/lua/nvim-treesitter/indent.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/after/lua/nvim-treesitter/indent.lua"
Searching for "/etc/xdg/nvim/after/lua/nvim-treesitter/indent.lua"
Searching for "/Users/andrewgu/.config/nvim/after/lua/nvim-treesitter/indent.lua"
not found in 'runtimepath': "lua/nvim-treesitter/indent.lua"
Searching for "pack/*/start/*/lua/nvim-treesitter/indent.lua" in "/Users/andrewgu/.config/nvim,/etc/xdg/nvim,/Users/andrewgu/.local/share/nvim/site,/usr/local/share/nvim/site,/usr/share/nvim/site,/usr/local/Cellar/neovim/0.5.0/share/nvim/runtime,/usr/local/Cellar/neovim/0.5.0/lib/nvim,/usr/share/nvim/site/after,/usr/local/share/nvim/site/after,/Users/andrewgu/.local/share/nvim/site/after,/etc/xdg/nvim/after,/Users/andrewgu/.config/nvim/after"
Searching for "/Users/andrewgu/.config/nvim/pack/*/start/*/lua/nvim-treesitter/indent.lua"
Searching for "/etc/xdg/nvim/pack/*/start/*/lua/nvim-treesitter/indent.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/*/start/*/lua/nvim-treesitter/indent.lua"
Searching for "/usr/local/share/nvim/site/pack/*/start/*/lua/nvim-treesitter/indent.lua"
Searching for "/usr/share/nvim/site/pack/*/start/*/lua/nvim-treesitter/indent.lua"
Searching for "/usr/local/Cellar/neovim/0.5.0/share/nvim/runtime/pack/*/start/*/lua/nvim-treesitter/indent.lua"
Searching for "/usr/local/Cellar/neovim/0.5.0/lib/nvim/pack/*/start/*/lua/nvim-treesitter/indent.lua"
Searching for "/usr/share/nvim/site/after/pack/*/start/*/lua/nvim-treesitter/indent.lua"
Searching for "/usr/local/share/nvim/site/after/pack/*/start/*/lua/nvim-treesitter/indent.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/after/pack/*/start/*/lua/nvim-treesitter/indent.lua"
Searching for "/etc/xdg/nvim/after/pack/*/start/*/lua/nvim-treesitter/indent.lua"
Searching for "/Users/andrewgu/.config/nvim/after/pack/*/start/*/lua/nvim-treesitter/indent.lua"
not found in 'packpath': "pack/*/start/*/lua/nvim-treesitter/indent.lua"
Searching for "start/*/lua/nvim-treesitter/indent.lua" in "/Users/andrewgu/.config/nvim,/etc/xdg/nvim,/Users/andrewgu/.local/share/nvim/site,/usr/local/share/nvim/site,/usr/share/nvim/site,/usr/local/Cellar/neovim/0.5.0/share/nvim/runtime,/usr/local/Cellar/neovim/0.5.0/lib/nvim,/usr/share/nvim/site/after,/usr/local/share/nvim/site/after,/Users/andrewgu/.local/share/nvim/site/after,/etc/xdg/nvim/after,/Users/andrewgu/.config/nvim/after"
Searching for "/Users/andrewgu/.config/nvim/start/*/lua/nvim-treesitter/indent.lua"
Searching for "/etc/xdg/nvim/start/*/lua/nvim-treesitter/indent.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/start/*/lua/nvim-treesitter/indent.lua"
Searching for "/usr/local/share/nvim/site/start/*/lua/nvim-treesitter/indent.lua"
Searching for "/usr/share/nvim/site/start/*/lua/nvim-treesitter/indent.lua"
Searching for "/usr/local/Cellar/neovim/0.5.0/share/nvim/runtime/start/*/lua/nvim-treesitter/indent.lua"
Searching for "/usr/local/Cellar/neovim/0.5.0/lib/nvim/start/*/lua/nvim-treesitter/indent.lua"
Searching for "/usr/share/nvim/site/after/start/*/lua/nvim-treesitter/indent.lua"
Searching for "/usr/local/share/nvim/site/after/start/*/lua/nvim-treesitter/indent.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/after/start/*/lua/nvim-treesitter/indent.lua"
Searching for "/etc/xdg/nvim/after/start/*/lua/nvim-treesitter/indent.lua"
Searching for "/Users/andrewgu/.config/nvim/after/start/*/lua/nvim-treesitter/indent.lua"
not found in 'packpath': "start/*/lua/nvim-treesitter/indent.lua"
Searching for "lua/nvim-treesitter/indent/init.lua" in "/Users/andrewgu/.config/nvim,/etc/xdg/nvim,/Users/andrewgu/.local/share/nvim/site,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/telescope.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/popup.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/plenary.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/packer.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-web-devicons,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-tree.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-lspconfig,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-compe,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-base16.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-autopairs,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/neoformat,/Users/andrewgu/.local/share/nvim/site/p
Searching for "/Users/andrewgu/.config/nvim/lua/nvim-treesitter/indent/init.lua"
Searching for "/etc/xdg/nvim/lua/nvim-treesitter/indent/init.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/lua/nvim-treesitter/indent/init.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/telescope.nvim/lua/nvim-treesitter/indent/init.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/popup.nvim/lua/nvim-treesitter/indent/init.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/plenary.nvim/lua/nvim-treesitter/indent/init.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/packer.nvim/lua/nvim-treesitter/indent/init.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/lua/nvim-treesitter/indent/init.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-web-devicons/lua/nvim-treesitter/indent/init.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-tree.lua/lua/nvim-treesitter/indent/init.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-lspconfig/lua/nvim-treesitter/indent/init.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-compe/lua/nvim-treesitter/indent/init.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-base16.lua/lua/nvim-treesitter/indent/init.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-autopairs/lua/nvim-treesitter/indent/init.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/neoformat/lua/nvim-treesitter/indent/init.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/lualine.nvim/lua/nvim-treesitter/indent/init.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/indent-blankline.nvim/lua/nvim-treesitter/indent/init.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/gitsigns.nvim/lua/nvim-treesitter/indent/init.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/barbar.nvim/lua/nvim-treesitter/indent/init.lua"
Searching for "/usr/local/share/nvim/site/lua/nvim-treesitter/indent/init.lua"
Searching for "/usr/share/nvim/site/lua/nvim-treesitter/indent/init.lua"
Searching for "/usr/local/Cellar/neovim/0.5.0/share/nvim/runtime/lua/nvim-treesitter/indent/init.lua"
Searching for "/usr/local/Cellar/neovim/0.5.0/share/nvim/runtime/pack/dist/opt/matchit/lua/nvim-treesitter/indent/init.lua"
Searching for "/usr/local/Cellar/neovim/0.5.0/lib/nvim/lua/nvim-treesitter/indent/init.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-compe/after/lua/nvim-treesitter/indent/init.lua"
Searching for "/usr/share/nvim/site/after/lua/nvim-treesitter/indent/init.lua"
Searching for "/usr/local/share/nvim/site/after/lua/nvim-treesitter/indent/init.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/after/lua/nvim-treesitter/indent/init.lua"
Searching for "/etc/xdg/nvim/after/lua/nvim-treesitter/indent/init.lua"
Searching for "/Users/andrewgu/.config/nvim/after/lua/nvim-treesitter/indent/init.lua"
not found in 'runtimepath': "lua/nvim-treesitter/indent/init.lua"
Searching for "pack/*/start/*/lua/nvim-treesitter/indent/init.lua" in "/Users/andrewgu/.config/nvim,/etc/xdg/nvim,/Users/andrewgu/.local/share/nvim/site,/usr/local/share/nvim/site,/usr/share/nvim/site,/usr/local/Cellar/neovim/0.5.0/share/nvim/runtime,/usr/local/Cellar/neovim/0.5.0/lib/nvim,/usr/share/nvim/site/after,/usr/local/share/nvim/site/after,/Users/andrewgu/.local/share/nvim/site/after,/etc/xdg/nvim/after,/Users/andrewgu/.config/nvim/after"
Searching for "/Users/andrewgu/.config/nvim/pack/*/start/*/lua/nvim-treesitter/indent/init.lua"
Searching for "/etc/xdg/nvim/pack/*/start/*/lua/nvim-treesitter/indent/init.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/*/start/*/lua/nvim-treesitter/indent/init.lua"
Searching for "/usr/local/share/nvim/site/pack/*/start/*/lua/nvim-treesitter/indent/init.lua"
Searching for "/usr/share/nvim/site/pack/*/start/*/lua/nvim-treesitter/indent/init.lua"
Searching for "/usr/local/Cellar/neovim/0.5.0/share/nvim/runtime/pack/*/start/*/lua/nvim-treesitter/indent/init.lua"
Searching for "/usr/local/Cellar/neovim/0.5.0/lib/nvim/pack/*/start/*/lua/nvim-treesitter/indent/init.lua"
Searching for "/usr/share/nvim/site/after/pack/*/start/*/lua/nvim-treesitter/indent/init.lua"
Searching for "/usr/local/share/nvim/site/after/pack/*/start/*/lua/nvim-treesitter/indent/init.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/after/pack/*/start/*/lua/nvim-treesitter/indent/init.lua"
Searching for "/etc/xdg/nvim/after/pack/*/start/*/lua/nvim-treesitter/indent/init.lua"
Searching for "/Users/andrewgu/.config/nvim/after/pack/*/start/*/lua/nvim-treesitter/indent/init.lua"
not found in 'packpath': "pack/*/start/*/lua/nvim-treesitter/indent/init.lua"
Searching for "start/*/lua/nvim-treesitter/indent/init.lua" in "/Users/andrewgu/.config/nvim,/etc/xdg/nvim,/Users/andrewgu/.local/share/nvim/site,/usr/local/share/nvim/site,/usr/share/nvim/site,/usr/local/Cellar/neovim/0.5.0/share/nvim/runtime,/usr/local/Cellar/neovim/0.5.0/lib/nvim,/usr/share/nvim/site/after,/usr/local/share/nvim/site/after,/Users/andrewgu/.local/share/nvim/site/after,/etc/xdg/nvim/after,/Users/andrewgu/.config/nvim/after"
Searching for "/Users/andrewgu/.config/nvim/start/*/lua/nvim-treesitter/indent/init.lua"
Searching for "/etc/xdg/nvim/start/*/lua/nvim-treesitter/indent/init.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/start/*/lua/nvim-treesitter/indent/init.lua"
Searching for "/usr/local/share/nvim/site/start/*/lua/nvim-treesitter/indent/init.lua"
Searching for "/usr/share/nvim/site/start/*/lua/nvim-treesitter/indent/init.lua"
Searching for "/usr/local/Cellar/neovim/0.5.0/share/nvim/runtime/start/*/lua/nvim-treesitter/indent/init.lua"
Searching for "/usr/local/Cellar/neovim/0.5.0/lib/nvim/start/*/lua/nvim-treesitter/indent/init.lua"
Searching for "/usr/share/nvim/site/after/start/*/lua/nvim-treesitter/indent/init.lua"
Searching for "/usr/local/share/nvim/site/after/start/*/lua/nvim-treesitter/indent/init.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/after/start/*/lua/nvim-treesitter/indent/init.lua"
Searching for "/etc/xdg/nvim/after/start/*/lua/nvim-treesitter/indent/init.lua"
Searching for "/Users/andrewgu/.config/nvim/after/start/*/lua/nvim-treesitter/indent/init.lua"
not found in 'packpath': "start/*/lua/nvim-treesitter/indent/init.lua"
Searching for "lua/nvim-treesitter/indent.so" in "/Users/andrewgu/.config/nvim,/etc/xdg/nvim,/Users/andrewgu/.local/share/nvim/site,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/telescope.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/popup.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/plenary.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/packer.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-web-devicons,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-tree.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-lspconfig,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-compe,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-base16.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-autopairs,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/neoformat,/Users/andrewgu/.local/share/nvim/site/pack/pa
Searching for "/Users/andrewgu/.config/nvim/lua/nvim-treesitter/indent.so"
Searching for "/etc/xdg/nvim/lua/nvim-treesitter/indent.so"
Searching for "/Users/andrewgu/.local/share/nvim/site/lua/nvim-treesitter/indent.so"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/telescope.nvim/lua/nvim-treesitter/indent.so"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/popup.nvim/lua/nvim-treesitter/indent.so"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/plenary.nvim/lua/nvim-treesitter/indent.so"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/packer.nvim/lua/nvim-treesitter/indent.so"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/lua/nvim-treesitter/indent.so"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-web-devicons/lua/nvim-treesitter/indent.so"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-tree.lua/lua/nvim-treesitter/indent.so"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-lspconfig/lua/nvim-treesitter/indent.so"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-compe/lua/nvim-treesitter/indent.so"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-base16.lua/lua/nvim-treesitter/indent.so"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-autopairs/lua/nvim-treesitter/indent.so"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/neoformat/lua/nvim-treesitter/indent.so"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/lualine.nvim/lua/nvim-treesitter/indent.so"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/indent-blankline.nvim/lua/nvim-treesitter/indent.so"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/gitsigns.nvim/lua/nvim-treesitter/indent.so"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/barbar.nvim/lua/nvim-treesitter/indent.so"
Searching for "/usr/local/share/nvim/site/lua/nvim-treesitter/indent.so"
Searching for "/usr/share/nvim/site/lua/nvim-treesitter/indent.so"
Searching for "/usr/local/Cellar/neovim/0.5.0/share/nvim/runtime/lua/nvim-treesitter/indent.so"
Searching for "/usr/local/Cellar/neovim/0.5.0/share/nvim/runtime/pack/dist/opt/matchit/lua/nvim-treesitter/indent.so"
Searching for "/usr/local/Cellar/neovim/0.5.0/lib/nvim/lua/nvim-treesitter/indent.so"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-compe/after/lua/nvim-treesitter/indent.so"
Searching for "/usr/share/nvim/site/after/lua/nvim-treesitter/indent.so"
Searching for "/usr/local/share/nvim/site/after/lua/nvim-treesitter/indent.so"
Searching for "/Users/andrewgu/.local/share/nvim/site/after/lua/nvim-treesitter/indent.so"
Searching for "/etc/xdg/nvim/after/lua/nvim-treesitter/indent.so"
Searching for "/Users/andrewgu/.config/nvim/after/lua/nvim-treesitter/indent.so"
not found in 'runtimepath': "lua/nvim-treesitter/indent.so"
Searching for "pack/*/start/*/lua/nvim-treesitter/indent.so" in "/Users/andrewgu/.config/nvim,/etc/xdg/nvim,/Users/andrewgu/.local/share/nvim/site,/usr/local/share/nvim/site,/usr/share/nvim/site,/usr/local/Cellar/neovim/0.5.0/share/nvim/runtime,/usr/local/Cellar/neovim/0.5.0/lib/nvim,/usr/share/nvim/site/after,/usr/local/share/nvim/site/after,/Users/andrewgu/.local/share/nvim/site/after,/etc/xdg/nvim/after,/Users/andrewgu/.config/nvim/after"
Searching for "/Users/andrewgu/.config/nvim/pack/*/start/*/lua/nvim-treesitter/indent.so"
Searching for "/etc/xdg/nvim/pack/*/start/*/lua/nvim-treesitter/indent.so"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/*/start/*/lua/nvim-treesitter/indent.so"
Searching for "/usr/local/share/nvim/site/pack/*/start/*/lua/nvim-treesitter/indent.so"
Searching for "/usr/share/nvim/site/pack/*/start/*/lua/nvim-treesitter/indent.so"
Searching for "/usr/local/Cellar/neovim/0.5.0/share/nvim/runtime/pack/*/start/*/lua/nvim-treesitter/indent.so"
Searching for "/usr/local/Cellar/neovim/0.5.0/lib/nvim/pack/*/start/*/lua/nvim-treesitter/indent.so"
Searching for "/usr/share/nvim/site/after/pack/*/start/*/lua/nvim-treesitter/indent.so"
Searching for "/usr/local/share/nvim/site/after/pack/*/start/*/lua/nvim-treesitter/indent.so"
Searching for "/Users/andrewgu/.local/share/nvim/site/after/pack/*/start/*/lua/nvim-treesitter/indent.so"
Searching for "/etc/xdg/nvim/after/pack/*/start/*/lua/nvim-treesitter/indent.so"
Searching for "/Users/andrewgu/.config/nvim/after/pack/*/start/*/lua/nvim-treesitter/indent.so"
not found in 'packpath': "pack/*/start/*/lua/nvim-treesitter/indent.so"
Searching for "start/*/lua/nvim-treesitter/indent.so" in "/Users/andrewgu/.config/nvim,/etc/xdg/nvim,/Users/andrewgu/.local/share/nvim/site,/usr/local/share/nvim/site,/usr/share/nvim/site,/usr/local/Cellar/neovim/0.5.0/share/nvim/runtime,/usr/local/Cellar/neovim/0.5.0/lib/nvim,/usr/share/nvim/site/after,/usr/local/share/nvim/site/after,/Users/andrewgu/.local/share/nvim/site/after,/etc/xdg/nvim/after,/Users/andrewgu/.config/nvim/after"
Searching for "/Users/andrewgu/.config/nvim/start/*/lua/nvim-treesitter/indent.so"
Searching for "/etc/xdg/nvim/start/*/lua/nvim-treesitter/indent.so"
Searching for "/Users/andrewgu/.local/share/nvim/site/start/*/lua/nvim-treesitter/indent.so"
Searching for "/usr/local/share/nvim/site/start/*/lua/nvim-treesitter/indent.so"
Searching for "/usr/share/nvim/site/start/*/lua/nvim-treesitter/indent.so"
Searching for "/usr/local/Cellar/neovim/0.5.0/share/nvim/runtime/start/*/lua/nvim-treesitter/indent.so"
Searching for "/usr/local/Cellar/neovim/0.5.0/lib/nvim/start/*/lua/nvim-treesitter/indent.so"
Searching for "/usr/share/nvim/site/after/start/*/lua/nvim-treesitter/indent.so"
Searching for "/usr/local/share/nvim/site/after/start/*/lua/nvim-treesitter/indent.so"
Searching for "/Users/andrewgu/.local/share/nvim/site/after/start/*/lua/nvim-treesitter/indent.so"
Searching for "/etc/xdg/nvim/after/start/*/lua/nvim-treesitter/indent.so"
Searching for "/Users/andrewgu/.config/nvim/after/start/*/lua/nvim-treesitter/indent.so"
not found in 'packpath': "start/*/lua/nvim-treesitter/indent.so"
Searching for "lua/indent_blankline/utils.lua" in "/Users/andrewgu/.config/nvim,/etc/xdg/nvim,/Users/andrewgu/.local/share/nvim/site,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/telescope.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/popup.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/plenary.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/packer.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-web-devicons,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-tree.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-lspconfig,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-compe,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-base16.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-autopairs,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/neoformat,/Users/andrewgu/.local/share/nvim/site/pack/p
Searching for "/Users/andrewgu/.config/nvim/lua/indent_blankline/utils.lua"
Searching for "/etc/xdg/nvim/lua/indent_blankline/utils.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/lua/indent_blankline/utils.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/telescope.nvim/lua/indent_blankline/utils.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/popup.nvim/lua/indent_blankline/utils.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/plenary.nvim/lua/indent_blankline/utils.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/packer.nvim/lua/indent_blankline/utils.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/lua/indent_blankline/utils.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-web-devicons/lua/indent_blankline/utils.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-tree.lua/lua/indent_blankline/utils.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-lspconfig/lua/indent_blankline/utils.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-compe/lua/indent_blankline/utils.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-base16.lua/lua/indent_blankline/utils.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-autopairs/lua/indent_blankline/utils.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/neoformat/lua/indent_blankline/utils.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/lualine.nvim/lua/indent_blankline/utils.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/indent-blankline.nvim/lua/indent_blankline/utils.lua"
Executing: highlight IndentBlanklineContextChar guifg=#C678DD ctermfg=170 gui=nocombine cterm=nocombine
Executing: highlight IndentBlanklineChar guifg=#3B4048 ctermfg=238 gui=nocombine cterm=nocombine
Executing: highlight IndentBlanklineSpaceCharBlankline guifg=#3B4048 ctermfg=238 gui=nocombine cterm=nocombine
Executing: highlight IndentBlanklineSpaceChar guifg=#3B4048 ctermfg=238 gui=nocombine cterm=nocombine
line 37: 
line 38: function s:try(cmd)
line 45: 
line 46: command! -bang IndentBlanklineRefresh call s:try('lua require("indent_blankline.commands").refresh("<bang>" == "!")')
line 47: command! -bang IndentBlanklineEnable call s:try('lua require("indent_blankline.commands").enable("<bang>" == "!")')
line 48: command! -bang IndentBlanklineDisable call s:try('lua require("indent_blankline.commands").disable("<bang>" == "!")')
line 49: command! -bang IndentBlanklineToggle call s:try('lua require("indent_blankline.commands").toggle("<bang>" == "!")')
line 50: 
line 51: function s:IndentBlanklineInit()
line 59: 
line 60: augroup IndentBlanklineAutogroup
line 61:     autocmd!
line 62:     autocmd OptionSet shiftwidth,tabstop,expandtab IndentBlanklineRefresh
line 63:     autocmd FileChangedShellPost,TextChanged,TextChangedI,WinScrolled,BufWinEnter,Filetype * IndentBlanklineRefresh
line 64:     autocmd VimEnter * call s:IndentBlanklineInit()
line 65:     autocmd ColorScheme * lua require("indent_blankline.utils").reset_highlights()
line 66: augroup END
line 67: 
line 68: if g:indent_blankline_show_current_context
line 69:     augroup IndentBlanklineContextAutogroup
line 70:         autocmd!
line 71:         autocmd CursorMoved * IndentBlanklineRefresh
line 72:     augroup END
line 73: endif
finished sourcing /Users/andrewgu/.local/share/nvim/site/pack/packer/start/indent-blankline.nvim/plugin/indent_blankline.vim
Executing: augroup filetypedetect
Executing: augroup END
chdir(/Users/andrewgu/.config/nvim)
chdir(/Users/andrewgu/.local/share/nvim/site/pack/packer/start)
chdir(/Users/andrewgu/.config/nvim)
Executing: augroup filetypedetect
Executing: augroup END
chdir(/Users/andrewgu/.config/nvim)
chdir(/Users/andrewgu/.local/share/nvim/site/pack/packer/start)
chdir(/Users/andrewgu/.config/nvim)
chdir(/Users/andrewgu/.config/nvim)
chdir(/Users/andrewgu/.local/share/nvim/site/pack/packer/start/neoformat/plugin)
chdir(/Users/andrewgu/.config/nvim)
sourcing "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/neoformat/plugin/neoformat.vim"
line 1: command! -nargs=? -bar -range=% -bang -complete=customlist,neoformat#CompleteFormatters Neoformat call neoformat#Neoformat(<bang>0, <q-args>, <line1>, <line2>)
finished sourcing /Users/andrewgu/.local/share/nvim/site/pack/packer/start/neoformat/plugin/neoformat.vim
Executing: augroup filetypedetect
Executing: augroup END
chdir(/Users/andrewgu/.config/nvim)
chdir(/Users/andrewgu/.local/share/nvim/site/pack/packer/start)
chdir(/Users/andrewgu/.config/nvim)
chdir(/Users/andrewgu/.config/nvim)
chdir(/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-autopairs/plugin)
chdir(/Users/andrewgu/.config/nvim)
sourcing "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-autopairs/plugin/nvim-autopairs.vim"
line 1: lua require "nvim-autopairs".init()
Searching for "lua/nvim-treesitter.lua" in "/Users/andrewgu/.config/nvim,/etc/xdg/nvim,/Users/andrewgu/.local/share/nvim/site,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/telescope.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/popup.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/plenary.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/packer.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-web-devicons,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-tree.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-lspconfig,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-compe,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-base16.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-autopairs,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/neoformat,/Users/andrewgu/.local/share/nvim/site/pack/packer/s
Searching for "/Users/andrewgu/.config/nvim/lua/nvim-treesitter.lua"
Searching for "/etc/xdg/nvim/lua/nvim-treesitter.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/lua/nvim-treesitter.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/telescope.nvim/lua/nvim-treesitter.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/popup.nvim/lua/nvim-treesitter.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/plenary.nvim/lua/nvim-treesitter.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/packer.nvim/lua/nvim-treesitter.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/lua/nvim-treesitter.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-web-devicons/lua/nvim-treesitter.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-tree.lua/lua/nvim-treesitter.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-lspconfig/lua/nvim-treesitter.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-compe/lua/nvim-treesitter.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-base16.lua/lua/nvim-treesitter.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-autopairs/lua/nvim-treesitter.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/neoformat/lua/nvim-treesitter.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/lualine.nvim/lua/nvim-treesitter.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/indent-blankline.nvim/lua/nvim-treesitter.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/gitsigns.nvim/lua/nvim-treesitter.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/barbar.nvim/lua/nvim-treesitter.lua"
Searching for "/usr/local/share/nvim/site/lua/nvim-treesitter.lua"
Searching for "/usr/share/nvim/site/lua/nvim-treesitter.lua"
Searching for "/usr/local/Cellar/neovim/0.5.0/share/nvim/runtime/lua/nvim-treesitter.lua"
Searching for "/usr/local/Cellar/neovim/0.5.0/share/nvim/runtime/pack/dist/opt/matchit/lua/nvim-treesitter.lua"
Searching for "/usr/local/Cellar/neovim/0.5.0/lib/nvim/lua/nvim-treesitter.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-compe/after/lua/nvim-treesitter.lua"
Searching for "/usr/share/nvim/site/after/lua/nvim-treesitter.lua"
Searching for "/usr/local/share/nvim/site/after/lua/nvim-treesitter.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/after/lua/nvim-treesitter.lua"
Searching for "/etc/xdg/nvim/after/lua/nvim-treesitter.lua"
Searching for "/Users/andrewgu/.config/nvim/after/lua/nvim-treesitter.lua"
not found in 'runtimepath': "lua/nvim-treesitter.lua"
Searching for "pack/*/start/*/lua/nvim-treesitter.lua" in "/Users/andrewgu/.config/nvim,/etc/xdg/nvim,/Users/andrewgu/.local/share/nvim/site,/usr/local/share/nvim/site,/usr/share/nvim/site,/usr/local/Cellar/neovim/0.5.0/share/nvim/runtime,/usr/local/Cellar/neovim/0.5.0/lib/nvim,/usr/share/nvim/site/after,/usr/local/share/nvim/site/after,/Users/andrewgu/.local/share/nvim/site/after,/etc/xdg/nvim/after,/Users/andrewgu/.config/nvim/after"
Searching for "/Users/andrewgu/.config/nvim/pack/*/start/*/lua/nvim-treesitter.lua"
Searching for "/etc/xdg/nvim/pack/*/start/*/lua/nvim-treesitter.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/*/start/*/lua/nvim-treesitter.lua"
Searching for "/usr/local/share/nvim/site/pack/*/start/*/lua/nvim-treesitter.lua"
Searching for "/usr/share/nvim/site/pack/*/start/*/lua/nvim-treesitter.lua"
Searching for "/usr/local/Cellar/neovim/0.5.0/share/nvim/runtime/pack/*/start/*/lua/nvim-treesitter.lua"
Searching for "/usr/local/Cellar/neovim/0.5.0/lib/nvim/pack/*/start/*/lua/nvim-treesitter.lua"
Searching for "/usr/share/nvim/site/after/pack/*/start/*/lua/nvim-treesitter.lua"
Searching for "/usr/local/share/nvim/site/after/pack/*/start/*/lua/nvim-treesitter.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/after/pack/*/start/*/lua/nvim-treesitter.lua"
Searching for "/etc/xdg/nvim/after/pack/*/start/*/lua/nvim-treesitter.lua"
Searching for "/Users/andrewgu/.config/nvim/after/pack/*/start/*/lua/nvim-treesitter.lua"
not found in 'packpath': "pack/*/start/*/lua/nvim-treesitter.lua"
Searching for "start/*/lua/nvim-treesitter.lua" in "/Users/andrewgu/.config/nvim,/etc/xdg/nvim,/Users/andrewgu/.local/share/nvim/site,/usr/local/share/nvim/site,/usr/share/nvim/site,/usr/local/Cellar/neovim/0.5.0/share/nvim/runtime,/usr/local/Cellar/neovim/0.5.0/lib/nvim,/usr/share/nvim/site/after,/usr/local/share/nvim/site/after,/Users/andrewgu/.local/share/nvim/site/after,/etc/xdg/nvim/after,/Users/andrewgu/.config/nvim/after"
Searching for "/Users/andrewgu/.config/nvim/start/*/lua/nvim-treesitter.lua"
Searching for "/etc/xdg/nvim/start/*/lua/nvim-treesitter.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/start/*/lua/nvim-treesitter.lua"
Searching for "/usr/local/share/nvim/site/start/*/lua/nvim-treesitter.lua"
Searching for "/usr/share/nvim/site/start/*/lua/nvim-treesitter.lua"
Searching for "/usr/local/Cellar/neovim/0.5.0/share/nvim/runtime/start/*/lua/nvim-treesitter.lua"
Searching for "/usr/local/Cellar/neovim/0.5.0/lib/nvim/start/*/lua/nvim-treesitter.lua"
Searching for "/usr/share/nvim/site/after/start/*/lua/nvim-treesitter.lua"
Searching for "/usr/local/share/nvim/site/after/start/*/lua/nvim-treesitter.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/after/start/*/lua/nvim-treesitter.lua"
Searching for "/etc/xdg/nvim/after/start/*/lua/nvim-treesitter.lua"
Searching for "/Users/andrewgu/.config/nvim/after/start/*/lua/nvim-treesitter.lua"
not found in 'packpath': "start/*/lua/nvim-treesitter.lua"
Searching for "lua/nvim-treesitter/init.lua" in "/Users/andrewgu/.config/nvim,/etc/xdg/nvim,/Users/andrewgu/.local/share/nvim/site,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/telescope.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/popup.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/plenary.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/packer.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-web-devicons,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-tree.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-lspconfig,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-compe,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-base16.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-autopairs,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/neoformat,/Users/andrewgu/.local/share/nvim/site/pack/pac
Searching for "/Users/andrewgu/.config/nvim/lua/nvim-treesitter/init.lua"
Searching for "/etc/xdg/nvim/lua/nvim-treesitter/init.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/lua/nvim-treesitter/init.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/telescope.nvim/lua/nvim-treesitter/init.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/popup.nvim/lua/nvim-treesitter/init.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/plenary.nvim/lua/nvim-treesitter/init.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/packer.nvim/lua/nvim-treesitter/init.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/lua/nvim-treesitter/init.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-web-devicons/lua/nvim-treesitter/init.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-tree.lua/lua/nvim-treesitter/init.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-lspconfig/lua/nvim-treesitter/init.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-compe/lua/nvim-treesitter/init.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-base16.lua/lua/nvim-treesitter/init.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-autopairs/lua/nvim-treesitter/init.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/neoformat/lua/nvim-treesitter/init.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/lualine.nvim/lua/nvim-treesitter/init.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/indent-blankline.nvim/lua/nvim-treesitter/init.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/gitsigns.nvim/lua/nvim-treesitter/init.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/barbar.nvim/lua/nvim-treesitter/init.lua"
Searching for "/usr/local/share/nvim/site/lua/nvim-treesitter/init.lua"
Searching for "/usr/share/nvim/site/lua/nvim-treesitter/init.lua"
Searching for "/usr/local/Cellar/neovim/0.5.0/share/nvim/runtime/lua/nvim-treesitter/init.lua"
Searching for "/usr/local/Cellar/neovim/0.5.0/share/nvim/runtime/pack/dist/opt/matchit/lua/nvim-treesitter/init.lua"
Searching for "/usr/local/Cellar/neovim/0.5.0/lib/nvim/lua/nvim-treesitter/init.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-compe/after/lua/nvim-treesitter/init.lua"
Searching for "/usr/share/nvim/site/after/lua/nvim-treesitter/init.lua"
Searching for "/usr/local/share/nvim/site/after/lua/nvim-treesitter/init.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/after/lua/nvim-treesitter/init.lua"
Searching for "/etc/xdg/nvim/after/lua/nvim-treesitter/init.lua"
Searching for "/Users/andrewgu/.config/nvim/after/lua/nvim-treesitter/init.lua"
not found in 'runtimepath': "lua/nvim-treesitter/init.lua"
Searching for "pack/*/start/*/lua/nvim-treesitter/init.lua" in "/Users/andrewgu/.config/nvim,/etc/xdg/nvim,/Users/andrewgu/.local/share/nvim/site,/usr/local/share/nvim/site,/usr/share/nvim/site,/usr/local/Cellar/neovim/0.5.0/share/nvim/runtime,/usr/local/Cellar/neovim/0.5.0/lib/nvim,/usr/share/nvim/site/after,/usr/local/share/nvim/site/after,/Users/andrewgu/.local/share/nvim/site/after,/etc/xdg/nvim/after,/Users/andrewgu/.config/nvim/after"
Searching for "/Users/andrewgu/.config/nvim/pack/*/start/*/lua/nvim-treesitter/init.lua"
Searching for "/etc/xdg/nvim/pack/*/start/*/lua/nvim-treesitter/init.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/*/start/*/lua/nvim-treesitter/init.lua"
Searching for "/usr/local/share/nvim/site/pack/*/start/*/lua/nvim-treesitter/init.lua"
Searching for "/usr/share/nvim/site/pack/*/start/*/lua/nvim-treesitter/init.lua"
Searching for "/usr/local/Cellar/neovim/0.5.0/share/nvim/runtime/pack/*/start/*/lua/nvim-treesitter/init.lua"
Searching for "/usr/local/Cellar/neovim/0.5.0/lib/nvim/pack/*/start/*/lua/nvim-treesitter/init.lua"
Searching for "/usr/share/nvim/site/after/pack/*/start/*/lua/nvim-treesitter/init.lua"
Searching for "/usr/local/share/nvim/site/after/pack/*/start/*/lua/nvim-treesitter/init.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/after/pack/*/start/*/lua/nvim-treesitter/init.lua"
Searching for "/etc/xdg/nvim/after/pack/*/start/*/lua/nvim-treesitter/init.lua"
Searching for "/Users/andrewgu/.config/nvim/after/pack/*/start/*/lua/nvim-treesitter/init.lua"
not found in 'packpath': "pack/*/start/*/lua/nvim-treesitter/init.lua"
Searching for "start/*/lua/nvim-treesitter/init.lua" in "/Users/andrewgu/.config/nvim,/etc/xdg/nvim,/Users/andrewgu/.local/share/nvim/site,/usr/local/share/nvim/site,/usr/share/nvim/site,/usr/local/Cellar/neovim/0.5.0/share/nvim/runtime,/usr/local/Cellar/neovim/0.5.0/lib/nvim,/usr/share/nvim/site/after,/usr/local/share/nvim/site/after,/Users/andrewgu/.local/share/nvim/site/after,/etc/xdg/nvim/after,/Users/andrewgu/.config/nvim/after"
Searching for "/Users/andrewgu/.config/nvim/start/*/lua/nvim-treesitter/init.lua"
Searching for "/etc/xdg/nvim/start/*/lua/nvim-treesitter/init.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/start/*/lua/nvim-treesitter/init.lua"
Searching for "/usr/local/share/nvim/site/start/*/lua/nvim-treesitter/init.lua"
Searching for "/usr/share/nvim/site/start/*/lua/nvim-treesitter/init.lua"
Searching for "/usr/local/Cellar/neovim/0.5.0/share/nvim/runtime/start/*/lua/nvim-treesitter/init.lua"
Searching for "/usr/local/Cellar/neovim/0.5.0/lib/nvim/start/*/lua/nvim-treesitter/init.lua"
Searching for "/usr/share/nvim/site/after/start/*/lua/nvim-treesitter/init.lua"
Searching for "/usr/local/share/nvim/site/after/start/*/lua/nvim-treesitter/init.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/after/start/*/lua/nvim-treesitter/init.lua"
Searching for "/etc/xdg/nvim/after/start/*/lua/nvim-treesitter/init.lua"
Searching for "/Users/andrewgu/.config/nvim/after/start/*/lua/nvim-treesitter/init.lua"
not found in 'packpath': "start/*/lua/nvim-treesitter/init.lua"
Searching for "lua/nvim-treesitter.so" in "/Users/andrewgu/.config/nvim,/etc/xdg/nvim,/Users/andrewgu/.local/share/nvim/site,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/telescope.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/popup.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/plenary.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/packer.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-web-devicons,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-tree.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-lspconfig,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-compe,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-base16.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-autopairs,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/neoformat,/Users/andrewgu/.local/share/nvim/site/pack/packer/st
Searching for "/Users/andrewgu/.config/nvim/lua/nvim-treesitter.so"
Searching for "/etc/xdg/nvim/lua/nvim-treesitter.so"
Searching for "/Users/andrewgu/.local/share/nvim/site/lua/nvim-treesitter.so"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/telescope.nvim/lua/nvim-treesitter.so"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/popup.nvim/lua/nvim-treesitter.so"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/plenary.nvim/lua/nvim-treesitter.so"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/packer.nvim/lua/nvim-treesitter.so"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/lua/nvim-treesitter.so"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-web-devicons/lua/nvim-treesitter.so"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-tree.lua/lua/nvim-treesitter.so"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-lspconfig/lua/nvim-treesitter.so"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-compe/lua/nvim-treesitter.so"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-base16.lua/lua/nvim-treesitter.so"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-autopairs/lua/nvim-treesitter.so"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/neoformat/lua/nvim-treesitter.so"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/lualine.nvim/lua/nvim-treesitter.so"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/indent-blankline.nvim/lua/nvim-treesitter.so"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/gitsigns.nvim/lua/nvim-treesitter.so"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/barbar.nvim/lua/nvim-treesitter.so"
Searching for "/usr/local/share/nvim/site/lua/nvim-treesitter.so"
Searching for "/usr/share/nvim/site/lua/nvim-treesitter.so"
Searching for "/usr/local/Cellar/neovim/0.5.0/share/nvim/runtime/lua/nvim-treesitter.so"
Searching for "/usr/local/Cellar/neovim/0.5.0/share/nvim/runtime/pack/dist/opt/matchit/lua/nvim-treesitter.so"
Searching for "/usr/local/Cellar/neovim/0.5.0/lib/nvim/lua/nvim-treesitter.so"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-compe/after/lua/nvim-treesitter.so"
Searching for "/usr/share/nvim/site/after/lua/nvim-treesitter.so"
Searching for "/usr/local/share/nvim/site/after/lua/nvim-treesitter.so"
Searching for "/Users/andrewgu/.local/share/nvim/site/after/lua/nvim-treesitter.so"
Searching for "/etc/xdg/nvim/after/lua/nvim-treesitter.so"
Searching for "/Users/andrewgu/.config/nvim/after/lua/nvim-treesitter.so"
not found in 'runtimepath': "lua/nvim-treesitter.so"
Searching for "pack/*/start/*/lua/nvim-treesitter.so" in "/Users/andrewgu/.config/nvim,/etc/xdg/nvim,/Users/andrewgu/.local/share/nvim/site,/usr/local/share/nvim/site,/usr/share/nvim/site,/usr/local/Cellar/neovim/0.5.0/share/nvim/runtime,/usr/local/Cellar/neovim/0.5.0/lib/nvim,/usr/share/nvim/site/after,/usr/local/share/nvim/site/after,/Users/andrewgu/.local/share/nvim/site/after,/etc/xdg/nvim/after,/Users/andrewgu/.config/nvim/after"
Searching for "/Users/andrewgu/.config/nvim/pack/*/start/*/lua/nvim-treesitter.so"
Searching for "/etc/xdg/nvim/pack/*/start/*/lua/nvim-treesitter.so"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/*/start/*/lua/nvim-treesitter.so"
Searching for "/usr/local/share/nvim/site/pack/*/start/*/lua/nvim-treesitter.so"
Searching for "/usr/share/nvim/site/pack/*/start/*/lua/nvim-treesitter.so"
Searching for "/usr/local/Cellar/neovim/0.5.0/share/nvim/runtime/pack/*/start/*/lua/nvim-treesitter.so"
Searching for "/usr/local/Cellar/neovim/0.5.0/lib/nvim/pack/*/start/*/lua/nvim-treesitter.so"
Searching for "/usr/share/nvim/site/after/pack/*/start/*/lua/nvim-treesitter.so"
Searching for "/usr/local/share/nvim/site/after/pack/*/start/*/lua/nvim-treesitter.so"
Searching for "/Users/andrewgu/.local/share/nvim/site/after/pack/*/start/*/lua/nvim-treesitter.so"
Searching for "/etc/xdg/nvim/after/pack/*/start/*/lua/nvim-treesitter.so"
Searching for "/Users/andrewgu/.config/nvim/after/pack/*/start/*/lua/nvim-treesitter.so"
not found in 'packpath': "pack/*/start/*/lua/nvim-treesitter.so"
Searching for "start/*/lua/nvim-treesitter.so" in "/Users/andrewgu/.config/nvim,/etc/xdg/nvim,/Users/andrewgu/.local/share/nvim/site,/usr/local/share/nvim/site,/usr/share/nvim/site,/usr/local/Cellar/neovim/0.5.0/share/nvim/runtime,/usr/local/Cellar/neovim/0.5.0/lib/nvim,/usr/share/nvim/site/after,/usr/local/share/nvim/site/after,/Users/andrewgu/.local/share/nvim/site/after,/etc/xdg/nvim/after,/Users/andrewgu/.config/nvim/after"
Searching for "/Users/andrewgu/.config/nvim/start/*/lua/nvim-treesitter.so"
Searching for "/etc/xdg/nvim/start/*/lua/nvim-treesitter.so"
Searching for "/Users/andrewgu/.local/share/nvim/site/start/*/lua/nvim-treesitter.so"
Searching for "/usr/local/share/nvim/site/start/*/lua/nvim-treesitter.so"
Searching for "/usr/share/nvim/site/start/*/lua/nvim-treesitter.so"
Searching for "/usr/local/Cellar/neovim/0.5.0/share/nvim/runtime/start/*/lua/nvim-treesitter.so"
Searching for "/usr/local/Cellar/neovim/0.5.0/lib/nvim/start/*/lua/nvim-treesitter.so"
Searching for "/usr/share/nvim/site/after/start/*/lua/nvim-treesitter.so"
Searching for "/usr/local/share/nvim/site/after/start/*/lua/nvim-treesitter.so"
Searching for "/Users/andrewgu/.local/share/nvim/site/after/start/*/lua/nvim-treesitter.so"
Searching for "/etc/xdg/nvim/after/start/*/lua/nvim-treesitter.so"
Searching for "/Users/andrewgu/.config/nvim/after/start/*/lua/nvim-treesitter.so"
not found in 'packpath': "start/*/lua/nvim-treesitter.so"
finished sourcing /Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-autopairs/plugin/nvim-autopairs.vim
Executing: augroup filetypedetect
Executing: augroup END
chdir(/Users/andrewgu/.config/nvim)
chdir(/Users/andrewgu/.local/share/nvim/site/pack/packer/start)
chdir(/Users/andrewgu/.config/nvim)
Executing: augroup filetypedetect
Executing: augroup END
chdir(/Users/andrewgu/.config/nvim)
chdir(/Users/andrewgu/.local/share/nvim/site/pack/packer/start)
chdir(/Users/andrewgu/.config/nvim)
chdir(/Users/andrewgu/.config/nvim)
chdir(/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-compe/plugin)
chdir(/Users/andrewgu/.config/nvim)
sourcing "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-compe/plugin/compe.vim"
line 1: if exists('g:loaded_compe') || !has('nvim')
line 2:   finish
line 3: endif
line 4: let g:loaded_compe = v:true
line 5: 
line 6: augroup compe
line 7:   autocmd!
line 8:   autocmd CompleteChanged * call s:on_complete_changed()
line 9:   autocmd InsertEnter * call s:on_insert_enter()
line 10:   autocmd InsertLeave * call s:on_insert_leave()
line 11:   autocmd TextChangedI,TextChangedP * call s:on_text_changed()
line 12:   autocmd User CompeConfirmDone silent
line 13: augroup END
line 14: 
line 15: "
line 16: " on_complete_changed
line 17: "
line 18: function! s:on_complete_changed() abort
line 21: 
line 22: "
line 23: " on_insert_enter
line 24: "
line 25: function! s:on_insert_enter() abort
line 28: 
line 29: "
line 30: " on_insert_enter
line 31: "
line 32: function! s:on_insert_leave() abort
line 35: 
line 36: "
line 37: " s:on_text_changed
line 38: "
line 39: function! s:on_text_changed() abort
line 42: 
line 43: if !hlexists('CompeDocumentation')
line 44:   highlight link CompeDocumentation NormalFloat
line 45: endif
line 46: 
line 47: if !hlexists('CompeDocumentationBorder')
line 48:   highlight link CompeDocumentationBorder CompeDocumentation
line 49: endif
line 50: 
line 51: "
line 52: " setup
line 53: "
line 54: if has_key(g:, 'compe')
line 55:   call compe#setup(g:compe)
line 56: endif
finished sourcing /Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-compe/plugin/compe.vim
Executing: augroup filetypedetect
Executing: augroup END
chdir(/Users/andrewgu/.config/nvim)
chdir(/Users/andrewgu/.local/share/nvim/site/pack/packer/start)
chdir(/Users/andrewgu/.config/nvim)
chdir(/Users/andrewgu/.config/nvim)
chdir(/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-lspconfig/plugin)
chdir(/Users/andrewgu/.config/nvim)
sourcing "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-lspconfig/plugin/lspconfig.vim"
line 1: if exists('g:lspconfig')
line 2:   finish
line 3: endif
line 4: let g:lspconfig = 1
line 5: 
line 6: lua << EOF
line 18: command! -nargs=? -complete=custom,v:lua.lsp_complete_configured_servers LspStart lua require'lspconfig'["_root"].commands["LspStart"][1](<f-args>)
line 18: command! -nargs=? -complete=customlist,v:lua.lsp_get_active_client_ids LspRestart lua require'lspconfig'["_root"].commands["LspRestart"][1](<f-args>)
line 18: command! -nargs=? -complete=customlist,v:lua.lsp_get_active_client_ids LspStop lua require'lspconfig'["_root"].commands["LspStop"][1](<f-args>)
line 18: command! -nargs=0 LspInfo lua require'lspconfig'["_root"].commands["LspInfo"][1](<f-args>)
finished sourcing /Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-lspconfig/plugin/lspconfig.vim
Executing: augroup filetypedetect
Executing: augroup END
chdir(/Users/andrewgu/.config/nvim)
chdir(/Users/andrewgu/.local/share/nvim/site/pack/packer/start)
chdir(/Users/andrewgu/.config/nvim)
chdir(/Users/andrewgu/.config/nvim)
chdir(/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-tree.lua/plugin)
chdir(/Users/andrewgu/.config/nvim)
sourcing "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-tree.lua/plugin/tree.vim"
line 1: if !has('nvim-0.5') || exists('g:loaded_tree') | finish | endif
line 1:  finish | endif
line 1:  endif
line 2: 
line 3: let s:save_cpo = &cpo
line 4: set cpo&vim
line 5: 
line 6: if get(g:, 'nvim_tree_disable_netrw', 1) == 1
line 7:     let g:loaded_netrw = 1
line 8:     let g:loaded_netrwPlugin = 1
line 9: endif
line 10: 
line 11: augroup NvimTree
line 12:   if get(g:, 'nvim_tree_hijack_netrw', 1) == 1 && get(g:, 'nvim_tree_disable_netrw', 1) == 0
line 13:     silent! autocmd! FileExplorer *
line 14:   endif
line 15:   au BufWritePost * lua require'nvim-tree'.refresh()
line 16:   if get(g:, 'nvim_tree_lsp_diagnostics', 0) == 1
line 17:     au User LspDiagnosticsChanged lua require'nvim-tree.diagnostics'.update()
line 18:   endif
line 19:   au BufEnter * lua require'nvim-tree'.buf_enter()
line 20:   if get(g:, 'nvim_tree_auto_close') == 1
line 21:     au WinClosed * lua require'nvim-tree'.on_leave()
line 22:   endif
line 23:   au ColorScheme * lua require'nvim-tree'.reset_highlight()
line 24:   au User FugitiveChanged,NeogitStatusRefreshed lua require'nvim-tree'.refresh()
line 25:   if get(g:, 'nvim_tree_tab_open') == 1
line 26:     au TabEnter * lua require'nvim-tree'.tab_change()
line 27:   endif
line 28:   au SessionLoadPost * lua require'nvim-tree.view'._wipe_rogue_buffer()
line 29:   if get(g:, 'nvim_tree_hijack_cursor', 1) == 1
line 30:     au CursorMoved NvimTree lua require'nvim-tree'.place_cursor_on_node()
line 31:   endif
line 32:   if get(g:, 'nvim_tree_update_cwd') == 1
line 33:     au DirChanged * lua require'nvim-tree.lib'.change_dir(vim.loop.cwd())
line 34:   endif
line 35: augroup end
line 36: 
line 37: command! NvimTreeOpen lua require'nvim-tree'.open()
line 38: command! NvimTreeClose lua require'nvim-tree'.close()
line 39: command! NvimTreeToggle lua require'nvim-tree'.toggle()
line 40: command! NvimTreeRefresh lua require'nvim-tree'.refresh()
line 41: command! NvimTreeClipboard lua require'nvim-tree'.print_clipboard()
line 42: command! NvimTreeFindFile lua require'nvim-tree'.find_file(true)
line 43: command! -nargs=1 NvimTreeResize lua require'nvim-tree'.resize(<args>)
line 44: 
line 45: let &cpo = s:save_cpo
line 46: unlet s:save_cpo
line 47: 
line 48: let g:loaded_tree = 1
finished sourcing /Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-tree.lua/plugin/tree.vim
Executing: augroup filetypedetect
Executing: augroup END
chdir(/Users/andrewgu/.config/nvim)
chdir(/Users/andrewgu/.local/share/nvim/site/pack/packer/start)
chdir(/Users/andrewgu/.config/nvim)
chdir(/Users/andrewgu/.config/nvim)
chdir(/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-web-devicons/plugin)
chdir(/Users/andrewgu/.config/nvim)
sourcing "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-web-devicons/plugin/nvim-web-devicons.vim"
line 1: if exists('g:loaded_devicons') | finish | endif
line 1:  finish | endif
line 1:  endif
line 2: 
line 3: let s:save_cpo = &cpo
line 4: set cpo&vim
line 5: 
line 6: " TODO change so its easier to get
line 7: let g:nvim_web_devicons = 1
line 8: 
line 9: let &cpo = s:save_cpo
line 10: unlet s:save_cpo
line 11: 
line 12: let g:loaded_devicons = 1
finished sourcing /Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-web-devicons/plugin/nvim-web-devicons.vim
Executing: augroup filetypedetect
Executing: augroup END
chdir(/Users/andrewgu/.config/nvim)
chdir(/Users/andrewgu/.local/share/nvim/site/pack/packer/start)
chdir(/Users/andrewgu/.config/nvim)
Executing: augroup filetypedetect
Executing: augroup END
chdir(/Users/andrewgu/.config/nvim)
chdir(/Users/andrewgu/.local/share/nvim/site/pack/packer/start)
chdir(/Users/andrewgu/.config/nvim)
Executing: augroup filetypedetect
Executing: augroup END
chdir(/Users/andrewgu/.config/nvim)
chdir(/Users/andrewgu/.local/share/nvim/site/pack/packer/start)
chdir(/Users/andrewgu/.config/nvim)
chdir(/Users/andrewgu/.config/nvim)
chdir(/Users/andrewgu/.local/share/nvim/site/pack/packer/start/plenary.nvim/plugin)
chdir(/Users/andrewgu/.config/nvim)
sourcing "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/plenary.nvim/plugin/plenary.vim"
line 1: 
line 2: " Create command for running busted
line 3: command! -nargs=1 -complete=file PlenaryBustedFile lua require('plenary.busted').run(vim.fn.expand("<args>"))
line 5: 
line 6: command! -nargs=+ -complete=file PlenaryBustedDirectory lua require('plenary.test_harness').test_directory_command(vim.fn.expand("<args>"))
line 8: 
line 9: nnoremap <Plug>PlenaryTestFile :lua require('plenary.test_harness').test_directory(vim.fn.expand("%:p"))<CR>
finished sourcing /Users/andrewgu/.local/share/nvim/site/pack/packer/start/plenary.nvim/plugin/plenary.vim
Executing: augroup filetypedetect
Executing: augroup END
chdir(/Users/andrewgu/.config/nvim)
chdir(/Users/andrewgu/.local/share/nvim/site/pack/packer/start)
chdir(/Users/andrewgu/.config/nvim)
Executing: augroup filetypedetect
Executing: augroup END
chdir(/Users/andrewgu/.config/nvim)
chdir(/Users/andrewgu/.local/share/nvim/site/pack/packer/start)
chdir(/Users/andrewgu/.config/nvim)
chdir(/Users/andrewgu/.config/nvim)
chdir(/Users/andrewgu/.local/share/nvim/site/pack/packer/start/telescope.nvim/plugin)
chdir(/Users/andrewgu/.config/nvim)
sourcing "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/telescope.nvim/plugin/telescope.vim"
line 1: if !has('nvim-0.5')
line 2:   echoerr "Telescope.nvim requires at least nvim-0.5. Please update or uninstall"
line 3:   finish
line 4: end
line 5: 
line 6: if exists('g:loaded_telescope')
line 7:   finish
line 8: endif
line 9: let g:loaded_telescope = 1
line 10: 
line 11: " Sets the highlight for selected items within the picker.
line 12: highlight default link TelescopeSelection Visual
line 13: highlight default link TelescopeSelectionCaret TelescopeSelection
line 14: highlight default link TelescopeMultiSelection Type
line 15: 
line 16: " "Normal" in the floating windows created by telescope.
line 17: highlight default link TelescopeNormal Normal
line 18: 
line 19: " "Normal" in the preview floating windows created by telescope.
line 20: highlight default link TelescopePreviewNormal Normal
line 21: 
line 22: " Border highlight groups.
line 23: "   Use TelescopeBorder to override the default.
line 24: "   Otherwise set them specifically
line 25: highlight default link TelescopeBorder TelescopeNormal
line 26: highlight default link TelescopePromptBorder TelescopeBorder
line 27: highlight default link TelescopeResultsBorder TelescopeBorder
line 28: highlight default link TelescopePreviewBorder TelescopeBorder
line 29: 
line 30: " Used for highlighting characters that you match.
line 31: highlight default link TelescopeMatching Special
line 32: 
line 33: " Used for the prompt prefix
line 34: highlight default link TelescopePromptPrefix Identifier
line 35: 
line 36: " Used for highlighting the matched line inside Previewer. Works only for (vim_buffer_ previewer)
line 37: highlight default link TelescopePreviewLine Visual
line 38: highlight default link TelescopePreviewMatch Search
line 39: 
line 40: highlight default link TelescopePreviewPipe Constant
line 41: highlight default link TelescopePreviewCharDev Constant
line 42: highlight default link TelescopePreviewDirectory Directory
line 43: highlight default link TelescopePreviewBlock Constant
line 44: highlight default link TelescopePreviewLink Special
line 45: highlight default link TelescopePreviewSocket Statement
line 46: highlight default link TelescopePreviewNormal Normal
line 47: highlight default link TelescopePreviewRead Constant
line 48: highlight default link TelescopePreviewWrite Statement
line 49: highlight default link TelescopePreviewExecute String
line 50: highlight default link TelescopePreviewHyphen NonText
line 51: highlight default link TelescopePreviewSticky Keyword
line 52: highlight default link TelescopePreviewSize String
line 53: highlight default link TelescopePreviewUser Constant
line 54: highlight default link TelescopePreviewGroup Constant
line 55: highlight default link TelescopePreviewDate Directory
line 56: 
line 57: " Used for Picker specific Results highlighting
line 58: highlight default link TelescopeResultsClass Function
line 59: highlight default link TelescopeResultsConstant Constant
line 60: highlight default link TelescopeResultsField Function
line 61: highlight default link TelescopeResultsFunction Function
line 62: highlight default link TelescopeResultsMethod Method
line 63: highlight default link TelescopeResultsOperator Operator
line 64: highlight default link TelescopeResultsStruct Struct
line 65: highlight default link TelescopeResultsVariable SpecialChar
line 66: 
line 67: highlight default link TelescopeResultsLineNr LineNr
line 68: highlight default link TelescopeResultsIdentifier Identifier
line 69: highlight default link TelescopeResultsNumber Number
line 70: highlight default link TelescopeResultsComment Comment
line 71: highlight default link TelescopeResultsSpecialComment SpecialComment
line 72: 
line 73: " Used for git status Results highlighting
line 74: highlight default link TelescopeResultsDiffChange DiffChange
line 75: highlight default link TelescopeResultsDiffAdd DiffAdd
line 76: highlight default link TelescopeResultsDiffDelete DiffDelete
line 77: highlight default link TelescopeResultsDiffUntracked NonText
line 78: 
line 79: " This is like "<C-R>" in your terminal.
line 80: "   To use it, do `cmap <C-R> <Plug>(TelescopeFuzzyCommandSearch)
line 81: cnoremap <silent> <Plug>(TelescopeFuzzyCommandSearch) <C-\>e "lua require('telescope.builtin').command_history { default_text = [=[" . escape(getcmdline(), '"') . "]=] }"<CR><CR>
line 85: 
line 86: " Telescope builtin lists
line 87: function! s:telescope_complete(arg,line,pos)
line 112: 
line 113: " Telescope Commands with complete
line 114: command! -nargs=* -complete=custom,s:telescope_complete Telescope    lua require('telescope.command').load_command(<f-args>)
finished sourcing /Users/andrewgu/.local/share/nvim/site/pack/packer/start/telescope.nvim/plugin/telescope.vim
Executing: augroup filetypedetect
Executing: augroup END
Searching for "/usr/local/share/nvim/site/pack/*/start/*"
Searching for "/usr/share/nvim/site/pack/*/start/*"
Searching for "/usr/local/Cellar/neovim/0.5.0/share/nvim/runtime/pack/*/start/*"
Searching for "/usr/local/Cellar/neovim/0.5.0/lib/nvim/pack/*/start/*"
Searching for "/usr/share/nvim/site/after/pack/*/start/*"
Searching for "/usr/local/share/nvim/site/after/pack/*/start/*"
Searching for "/Users/andrewgu/.local/share/nvim/site/after/pack/*/start/*"
Searching for "/etc/xdg/nvim/after/pack/*/start/*"
Searching for "/Users/andrewgu/.config/nvim/after/pack/*/start/*"
Searching for "start/*" in "/Users/andrewgu/.config/nvim,/etc/xdg/nvim,/Users/andrewgu/.local/share/nvim/site,/usr/local/share/nvim/site,/usr/share/nvim/site,/usr/local/Cellar/neovim/0.5.0/share/nvim/runtime,/usr/local/Cellar/neovim/0.5.0/lib/nvim,/usr/share/nvim/site/after,/usr/local/share/nvim/site/after,/Users/andrewgu/.local/share/nvim/site/after,/etc/xdg/nvim/after,/Users/andrewgu/.config/nvim/after"
Searching for "/Users/andrewgu/.config/nvim/start/*"
Searching for "/etc/xdg/nvim/start/*"
Searching for "/Users/andrewgu/.local/share/nvim/site/start/*"
Searching for "/usr/local/share/nvim/site/start/*"
Searching for "/usr/share/nvim/site/start/*"
Searching for "/usr/local/Cellar/neovim/0.5.0/share/nvim/runtime/start/*"
Searching for "/usr/local/Cellar/neovim/0.5.0/lib/nvim/start/*"
Searching for "/usr/share/nvim/site/after/start/*"
Searching for "/usr/local/share/nvim/site/after/start/*"
Searching for "/Users/andrewgu/.local/share/nvim/site/after/start/*"
Searching for "/etc/xdg/nvim/after/start/*"
Searching for "/Users/andrewgu/.config/nvim/after/start/*"
not found in 'packpath': "start/*"
Searching for "plugin/**/*.vim" in "/Users/andrewgu/.config/nvim,/etc/xdg/nvim,/Users/andrewgu/.local/share/nvim/site,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/telescope.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/popup.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/plenary.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/packer.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-web-devicons,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-tree.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-lspconfig,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-compe,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-base16.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-autopairs,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/neoformat,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/lua
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-compe/after/plugin/**/*.vim"
chdir(/Users/andrewgu/.config/nvim)
chdir(/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-compe/after/plugin)
chdir(/Users/andrewgu/.config/nvim)
sourcing "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-compe/after/plugin/compe.vim"
line 1: lua require'compe.lazy'.load_deferred()
Searching for "lua/compe_path.lua" in "/Users/andrewgu/.config/nvim,/etc/xdg/nvim,/Users/andrewgu/.local/share/nvim/site,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/telescope.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/popup.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/plenary.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/packer.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-web-devicons,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-tree.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-lspconfig,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-compe,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-base16.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-autopairs,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/neoformat,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/
Searching for "/Users/andrewgu/.config/nvim/lua/compe_path.lua"
Searching for "/etc/xdg/nvim/lua/compe_path.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/lua/compe_path.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/telescope.nvim/lua/compe_path.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/popup.nvim/lua/compe_path.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/plenary.nvim/lua/compe_path.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/packer.nvim/lua/compe_path.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/lua/compe_path.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-web-devicons/lua/compe_path.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-tree.lua/lua/compe_path.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-lspconfig/lua/compe_path.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-compe/lua/compe_path.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-base16.lua/lua/compe_path.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-autopairs/lua/compe_path.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/neoformat/lua/compe_path.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/lualine.nvim/lua/compe_path.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/indent-blankline.nvim/lua/compe_path.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/gitsigns.nvim/lua/compe_path.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/barbar.nvim/lua/compe_path.lua"
Searching for "/usr/local/share/nvim/site/lua/compe_path.lua"
Searching for "/usr/share/nvim/site/lua/compe_path.lua"
Searching for "/usr/local/Cellar/neovim/0.5.0/share/nvim/runtime/lua/compe_path.lua"
Searching for "/usr/local/Cellar/neovim/0.5.0/share/nvim/runtime/pack/dist/opt/matchit/lua/compe_path.lua"
Searching for "/usr/local/Cellar/neovim/0.5.0/lib/nvim/lua/compe_path.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-compe/after/lua/compe_path.lua"
Searching for "/usr/share/nvim/site/after/lua/compe_path.lua"
Searching for "/usr/local/share/nvim/site/after/lua/compe_path.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/after/lua/compe_path.lua"
Searching for "/etc/xdg/nvim/after/lua/compe_path.lua"
Searching for "/Users/andrewgu/.config/nvim/after/lua/compe_path.lua"
not found in 'runtimepath': "lua/compe_path.lua"
Searching for "pack/*/start/*/lua/compe_path.lua" in "/Users/andrewgu/.config/nvim,/etc/xdg/nvim,/Users/andrewgu/.local/share/nvim/site,/usr/local/share/nvim/site,/usr/share/nvim/site,/usr/local/Cellar/neovim/0.5.0/share/nvim/runtime,/usr/local/Cellar/neovim/0.5.0/lib/nvim,/usr/share/nvim/site/after,/usr/local/share/nvim/site/after,/Users/andrewgu/.local/share/nvim/site/after,/etc/xdg/nvim/after,/Users/andrewgu/.config/nvim/after"
Searching for "/Users/andrewgu/.config/nvim/pack/*/start/*/lua/compe_path.lua"
Searching for "/etc/xdg/nvim/pack/*/start/*/lua/compe_path.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/*/start/*/lua/compe_path.lua"
Searching for "/usr/local/share/nvim/site/pack/*/start/*/lua/compe_path.lua"
Searching for "/usr/share/nvim/site/pack/*/start/*/lua/compe_path.lua"
Searching for "/usr/local/Cellar/neovim/0.5.0/share/nvim/runtime/pack/*/start/*/lua/compe_path.lua"
Searching for "/usr/local/Cellar/neovim/0.5.0/lib/nvim/pack/*/start/*/lua/compe_path.lua"
Searching for "/usr/share/nvim/site/after/pack/*/start/*/lua/compe_path.lua"
Searching for "/usr/local/share/nvim/site/after/pack/*/start/*/lua/compe_path.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/after/pack/*/start/*/lua/compe_path.lua"
Searching for "/etc/xdg/nvim/after/pack/*/start/*/lua/compe_path.lua"
Searching for "/Users/andrewgu/.config/nvim/after/pack/*/start/*/lua/compe_path.lua"
not found in 'packpath': "pack/*/start/*/lua/compe_path.lua"
Searching for "start/*/lua/compe_path.lua" in "/Users/andrewgu/.config/nvim,/etc/xdg/nvim,/Users/andrewgu/.local/share/nvim/site,/usr/local/share/nvim/site,/usr/share/nvim/site,/usr/local/Cellar/neovim/0.5.0/share/nvim/runtime,/usr/local/Cellar/neovim/0.5.0/lib/nvim,/usr/share/nvim/site/after,/usr/local/share/nvim/site/after,/Users/andrewgu/.local/share/nvim/site/after,/etc/xdg/nvim/after,/Users/andrewgu/.config/nvim/after"
Searching for "/Users/andrewgu/.config/nvim/start/*/lua/compe_path.lua"
Searching for "/etc/xdg/nvim/start/*/lua/compe_path.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/start/*/lua/compe_path.lua"
Searching for "/usr/local/share/nvim/site/start/*/lua/compe_path.lua"
Searching for "/usr/share/nvim/site/start/*/lua/compe_path.lua"
Searching for "/usr/local/Cellar/neovim/0.5.0/share/nvim/runtime/start/*/lua/compe_path.lua"
Searching for "/usr/local/Cellar/neovim/0.5.0/lib/nvim/start/*/lua/compe_path.lua"
Searching for "/usr/share/nvim/site/after/start/*/lua/compe_path.lua"
Searching for "/usr/local/share/nvim/site/after/start/*/lua/compe_path.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/after/start/*/lua/compe_path.lua"
Searching for "/etc/xdg/nvim/after/start/*/lua/compe_path.lua"
Searching for "/Users/andrewgu/.config/nvim/after/start/*/lua/compe_path.lua"
not found in 'packpath': "start/*/lua/compe_path.lua"
Searching for "lua/compe_path/init.lua" in "/Users/andrewgu/.config/nvim,/etc/xdg/nvim,/Users/andrewgu/.local/share/nvim/site,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/telescope.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/popup.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/plenary.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/packer.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-web-devicons,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-tree.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-lspconfig,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-compe,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-base16.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-autopairs,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/neoformat,/Users/andrewgu/.local/share/nvim/site/pack/packer/s
Searching for "/Users/andrewgu/.config/nvim/lua/compe_path/init.lua"
Searching for "/etc/xdg/nvim/lua/compe_path/init.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/lua/compe_path/init.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/telescope.nvim/lua/compe_path/init.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/popup.nvim/lua/compe_path/init.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/plenary.nvim/lua/compe_path/init.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/packer.nvim/lua/compe_path/init.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/lua/compe_path/init.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-web-devicons/lua/compe_path/init.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-tree.lua/lua/compe_path/init.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-lspconfig/lua/compe_path/init.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-compe/lua/compe_path/init.lua"
Searching for "lua/compe_nvim_lsp.lua" in "/Users/andrewgu/.config/nvim,/etc/xdg/nvim,/Users/andrewgu/.local/share/nvim/site,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/telescope.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/popup.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/plenary.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/packer.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-web-devicons,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-tree.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-lspconfig,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-compe,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-base16.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-autopairs,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/neoformat,/Users/andrewgu/.local/share/nvim/site/pack/packer/st
Searching for "/Users/andrewgu/.config/nvim/lua/compe_nvim_lsp.lua"
Searching for "/etc/xdg/nvim/lua/compe_nvim_lsp.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/lua/compe_nvim_lsp.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/telescope.nvim/lua/compe_nvim_lsp.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/popup.nvim/lua/compe_nvim_lsp.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/plenary.nvim/lua/compe_nvim_lsp.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/packer.nvim/lua/compe_nvim_lsp.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/lua/compe_nvim_lsp.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-web-devicons/lua/compe_nvim_lsp.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-tree.lua/lua/compe_nvim_lsp.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-lspconfig/lua/compe_nvim_lsp.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-compe/lua/compe_nvim_lsp.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-base16.lua/lua/compe_nvim_lsp.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-autopairs/lua/compe_nvim_lsp.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/neoformat/lua/compe_nvim_lsp.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/lualine.nvim/lua/compe_nvim_lsp.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/indent-blankline.nvim/lua/compe_nvim_lsp.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/gitsigns.nvim/lua/compe_nvim_lsp.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/barbar.nvim/lua/compe_nvim_lsp.lua"
Searching for "/usr/local/share/nvim/site/lua/compe_nvim_lsp.lua"
Searching for "/usr/share/nvim/site/lua/compe_nvim_lsp.lua"
Searching for "/usr/local/Cellar/neovim/0.5.0/share/nvim/runtime/lua/compe_nvim_lsp.lua"
Searching for "/usr/local/Cellar/neovim/0.5.0/share/nvim/runtime/pack/dist/opt/matchit/lua/compe_nvim_lsp.lua"
Searching for "/usr/local/Cellar/neovim/0.5.0/lib/nvim/lua/compe_nvim_lsp.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-compe/after/lua/compe_nvim_lsp.lua"
Searching for "/usr/share/nvim/site/after/lua/compe_nvim_lsp.lua"
Searching for "/usr/local/share/nvim/site/after/lua/compe_nvim_lsp.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/after/lua/compe_nvim_lsp.lua"
Searching for "/etc/xdg/nvim/after/lua/compe_nvim_lsp.lua"
Searching for "/Users/andrewgu/.config/nvim/after/lua/compe_nvim_lsp.lua"
not found in 'runtimepath': "lua/compe_nvim_lsp.lua"
Searching for "pack/*/start/*/lua/compe_nvim_lsp.lua" in "/Users/andrewgu/.config/nvim,/etc/xdg/nvim,/Users/andrewgu/.local/share/nvim/site,/usr/local/share/nvim/site,/usr/share/nvim/site,/usr/local/Cellar/neovim/0.5.0/share/nvim/runtime,/usr/local/Cellar/neovim/0.5.0/lib/nvim,/usr/share/nvim/site/after,/usr/local/share/nvim/site/after,/Users/andrewgu/.local/share/nvim/site/after,/etc/xdg/nvim/after,/Users/andrewgu/.config/nvim/after"
Searching for "/Users/andrewgu/.config/nvim/pack/*/start/*/lua/compe_nvim_lsp.lua"
Searching for "/etc/xdg/nvim/pack/*/start/*/lua/compe_nvim_lsp.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/*/start/*/lua/compe_nvim_lsp.lua"
Searching for "/usr/local/share/nvim/site/pack/*/start/*/lua/compe_nvim_lsp.lua"
Searching for "/usr/share/nvim/site/pack/*/start/*/lua/compe_nvim_lsp.lua"
Searching for "/usr/local/Cellar/neovim/0.5.0/share/nvim/runtime/pack/*/start/*/lua/compe_nvim_lsp.lua"
Searching for "/usr/local/Cellar/neovim/0.5.0/lib/nvim/pack/*/start/*/lua/compe_nvim_lsp.lua"
Searching for "/usr/share/nvim/site/after/pack/*/start/*/lua/compe_nvim_lsp.lua"
Searching for "/usr/local/share/nvim/site/after/pack/*/start/*/lua/compe_nvim_lsp.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/after/pack/*/start/*/lua/compe_nvim_lsp.lua"
Searching for "/etc/xdg/nvim/after/pack/*/start/*/lua/compe_nvim_lsp.lua"
Searching for "/Users/andrewgu/.config/nvim/after/pack/*/start/*/lua/compe_nvim_lsp.lua"
not found in 'packpath': "pack/*/start/*/lua/compe_nvim_lsp.lua"
Searching for "start/*/lua/compe_nvim_lsp.lua" in "/Users/andrewgu/.config/nvim,/etc/xdg/nvim,/Users/andrewgu/.local/share/nvim/site,/usr/local/share/nvim/site,/usr/share/nvim/site,/usr/local/Cellar/neovim/0.5.0/share/nvim/runtime,/usr/local/Cellar/neovim/0.5.0/lib/nvim,/usr/share/nvim/site/after,/usr/local/share/nvim/site/after,/Users/andrewgu/.local/share/nvim/site/after,/etc/xdg/nvim/after,/Users/andrewgu/.config/nvim/after"
Searching for "/Users/andrewgu/.config/nvim/start/*/lua/compe_nvim_lsp.lua"
Searching for "/etc/xdg/nvim/start/*/lua/compe_nvim_lsp.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/start/*/lua/compe_nvim_lsp.lua"
Searching for "/usr/local/share/nvim/site/start/*/lua/compe_nvim_lsp.lua"
Searching for "/usr/share/nvim/site/start/*/lua/compe_nvim_lsp.lua"
Searching for "/usr/local/Cellar/neovim/0.5.0/share/nvim/runtime/start/*/lua/compe_nvim_lsp.lua"
Searching for "/usr/local/Cellar/neovim/0.5.0/lib/nvim/start/*/lua/compe_nvim_lsp.lua"
Searching for "/usr/share/nvim/site/after/start/*/lua/compe_nvim_lsp.lua"
Searching for "/usr/local/share/nvim/site/after/start/*/lua/compe_nvim_lsp.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/after/start/*/lua/compe_nvim_lsp.lua"
Searching for "/etc/xdg/nvim/after/start/*/lua/compe_nvim_lsp.lua"
Searching for "/Users/andrewgu/.config/nvim/after/start/*/lua/compe_nvim_lsp.lua"
not found in 'packpath': "start/*/lua/compe_nvim_lsp.lua"
Searching for "lua/compe_nvim_lsp/init.lua" in "/Users/andrewgu/.config/nvim,/etc/xdg/nvim,/Users/andrewgu/.local/share/nvim/site,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/telescope.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/popup.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/plenary.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/packer.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-web-devicons,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-tree.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-lspconfig,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-compe,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-base16.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-autopairs,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/neoformat,/Users/andrewgu/.local/share/nvim/site/pack/pack
Searching for "/Users/andrewgu/.config/nvim/lua/compe_nvim_lsp/init.lua"
Searching for "/etc/xdg/nvim/lua/compe_nvim_lsp/init.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/lua/compe_nvim_lsp/init.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/telescope.nvim/lua/compe_nvim_lsp/init.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/popup.nvim/lua/compe_nvim_lsp/init.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/plenary.nvim/lua/compe_nvim_lsp/init.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/packer.nvim/lua/compe_nvim_lsp/init.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/lua/compe_nvim_lsp/init.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-web-devicons/lua/compe_nvim_lsp/init.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-tree.lua/lua/compe_nvim_lsp/init.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-lspconfig/lua/compe_nvim_lsp/init.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-compe/lua/compe_nvim_lsp/init.lua"
Searching for "lua/compe_nvim_lsp/source.lua" in "/Users/andrewgu/.config/nvim,/etc/xdg/nvim,/Users/andrewgu/.local/share/nvim/site,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/telescope.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/popup.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/plenary.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/packer.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-web-devicons,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-tree.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-lspconfig,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-compe,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-base16.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-autopairs,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/neoformat,/Users/andrewgu/.local/share/nvim/site/pack/pa
Searching for "/Users/andrewgu/.config/nvim/lua/compe_nvim_lsp/source.lua"
Searching for "/etc/xdg/nvim/lua/compe_nvim_lsp/source.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/lua/compe_nvim_lsp/source.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/telescope.nvim/lua/compe_nvim_lsp/source.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/popup.nvim/lua/compe_nvim_lsp/source.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/plenary.nvim/lua/compe_nvim_lsp/source.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/packer.nvim/lua/compe_nvim_lsp/source.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/lua/compe_nvim_lsp/source.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-web-devicons/lua/compe_nvim_lsp/source.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-tree.lua/lua/compe_nvim_lsp/source.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-lspconfig/lua/compe_nvim_lsp/source.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-compe/lua/compe_nvim_lsp/source.lua"
Executing:       augroup compe_nvim_lsp
Executing:       autocmd InsertEnter * lua require"compe_nvim_lsp".register()
Executing:       augroup END
Executing:     
Searching for "lua/compe_nvim_lua.lua" in "/Users/andrewgu/.config/nvim,/etc/xdg/nvim,/Users/andrewgu/.local/share/nvim/site,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/telescope.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/popup.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/plenary.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/packer.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-web-devicons,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-tree.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-lspconfig,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-compe,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-base16.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-autopairs,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/neoformat,/Users/andrewgu/.local/share/nvim/site/pack/packer/st
Searching for "/Users/andrewgu/.config/nvim/lua/compe_nvim_lua.lua"
Searching for "/etc/xdg/nvim/lua/compe_nvim_lua.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/lua/compe_nvim_lua.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/telescope.nvim/lua/compe_nvim_lua.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/popup.nvim/lua/compe_nvim_lua.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/plenary.nvim/lua/compe_nvim_lua.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/packer.nvim/lua/compe_nvim_lua.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/lua/compe_nvim_lua.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-web-devicons/lua/compe_nvim_lua.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-tree.lua/lua/compe_nvim_lua.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-lspconfig/lua/compe_nvim_lua.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-compe/lua/compe_nvim_lua.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-base16.lua/lua/compe_nvim_lua.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-autopairs/lua/compe_nvim_lua.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/neoformat/lua/compe_nvim_lua.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/lualine.nvim/lua/compe_nvim_lua.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/indent-blankline.nvim/lua/compe_nvim_lua.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/gitsigns.nvim/lua/compe_nvim_lua.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/barbar.nvim/lua/compe_nvim_lua.lua"
Searching for "/usr/local/share/nvim/site/lua/compe_nvim_lua.lua"
Searching for "/usr/share/nvim/site/lua/compe_nvim_lua.lua"
Searching for "/usr/local/Cellar/neovim/0.5.0/share/nvim/runtime/lua/compe_nvim_lua.lua"
Searching for "/usr/local/Cellar/neovim/0.5.0/share/nvim/runtime/pack/dist/opt/matchit/lua/compe_nvim_lua.lua"
Searching for "/usr/local/Cellar/neovim/0.5.0/lib/nvim/lua/compe_nvim_lua.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-compe/after/lua/compe_nvim_lua.lua"
Searching for "/usr/share/nvim/site/after/lua/compe_nvim_lua.lua"
Searching for "/usr/local/share/nvim/site/after/lua/compe_nvim_lua.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/after/lua/compe_nvim_lua.lua"
Searching for "/etc/xdg/nvim/after/lua/compe_nvim_lua.lua"
Searching for "/Users/andrewgu/.config/nvim/after/lua/compe_nvim_lua.lua"
not found in 'runtimepath': "lua/compe_nvim_lua.lua"
Searching for "pack/*/start/*/lua/compe_nvim_lua.lua" in "/Users/andrewgu/.config/nvim,/etc/xdg/nvim,/Users/andrewgu/.local/share/nvim/site,/usr/local/share/nvim/site,/usr/share/nvim/site,/usr/local/Cellar/neovim/0.5.0/share/nvim/runtime,/usr/local/Cellar/neovim/0.5.0/lib/nvim,/usr/share/nvim/site/after,/usr/local/share/nvim/site/after,/Users/andrewgu/.local/share/nvim/site/after,/etc/xdg/nvim/after,/Users/andrewgu/.config/nvim/after"
Searching for "/Users/andrewgu/.config/nvim/pack/*/start/*/lua/compe_nvim_lua.lua"
Searching for "/etc/xdg/nvim/pack/*/start/*/lua/compe_nvim_lua.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/*/start/*/lua/compe_nvim_lua.lua"
Searching for "/usr/local/share/nvim/site/pack/*/start/*/lua/compe_nvim_lua.lua"
Searching for "/usr/share/nvim/site/pack/*/start/*/lua/compe_nvim_lua.lua"
Searching for "/usr/local/Cellar/neovim/0.5.0/share/nvim/runtime/pack/*/start/*/lua/compe_nvim_lua.lua"
Searching for "/usr/local/Cellar/neovim/0.5.0/lib/nvim/pack/*/start/*/lua/compe_nvim_lua.lua"
Searching for "/usr/share/nvim/site/after/pack/*/start/*/lua/compe_nvim_lua.lua"
Searching for "/usr/local/share/nvim/site/after/pack/*/start/*/lua/compe_nvim_lua.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/after/pack/*/start/*/lua/compe_nvim_lua.lua"
Searching for "/etc/xdg/nvim/after/pack/*/start/*/lua/compe_nvim_lua.lua"
Searching for "/Users/andrewgu/.config/nvim/after/pack/*/start/*/lua/compe_nvim_lua.lua"
not found in 'packpath': "pack/*/start/*/lua/compe_nvim_lua.lua"
Searching for "start/*/lua/compe_nvim_lua.lua" in "/Users/andrewgu/.config/nvim,/etc/xdg/nvim,/Users/andrewgu/.local/share/nvim/site,/usr/local/share/nvim/site,/usr/share/nvim/site,/usr/local/Cellar/neovim/0.5.0/share/nvim/runtime,/usr/local/Cellar/neovim/0.5.0/lib/nvim,/usr/share/nvim/site/after,/usr/local/share/nvim/site/after,/Users/andrewgu/.local/share/nvim/site/after,/etc/xdg/nvim/after,/Users/andrewgu/.config/nvim/after"
Searching for "/Users/andrewgu/.config/nvim/start/*/lua/compe_nvim_lua.lua"
Searching for "/etc/xdg/nvim/start/*/lua/compe_nvim_lua.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/start/*/lua/compe_nvim_lua.lua"
Searching for "/usr/local/share/nvim/site/start/*/lua/compe_nvim_lua.lua"
Searching for "/usr/share/nvim/site/start/*/lua/compe_nvim_lua.lua"
Searching for "/usr/local/Cellar/neovim/0.5.0/share/nvim/runtime/start/*/lua/compe_nvim_lua.lua"
Searching for "/usr/local/Cellar/neovim/0.5.0/lib/nvim/start/*/lua/compe_nvim_lua.lua"
Searching for "/usr/share/nvim/site/after/start/*/lua/compe_nvim_lua.lua"
Searching for "/usr/local/share/nvim/site/after/start/*/lua/compe_nvim_lua.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/after/start/*/lua/compe_nvim_lua.lua"
Searching for "/etc/xdg/nvim/after/start/*/lua/compe_nvim_lua.lua"
Searching for "/Users/andrewgu/.config/nvim/after/start/*/lua/compe_nvim_lua.lua"
not found in 'packpath': "start/*/lua/compe_nvim_lua.lua"
Searching for "lua/compe_nvim_lua/init.lua" in "/Users/andrewgu/.config/nvim,/etc/xdg/nvim,/Users/andrewgu/.local/share/nvim/site,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/telescope.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/popup.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/plenary.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/packer.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-web-devicons,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-tree.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-lspconfig,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-compe,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-base16.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-autopairs,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/neoformat,/Users/andrewgu/.local/share/nvim/site/pack/pack
Searching for "/Users/andrewgu/.config/nvim/lua/compe_nvim_lua/init.lua"
Searching for "/etc/xdg/nvim/lua/compe_nvim_lua/init.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/lua/compe_nvim_lua/init.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/telescope.nvim/lua/compe_nvim_lua/init.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/popup.nvim/lua/compe_nvim_lua/init.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/plenary.nvim/lua/compe_nvim_lua/init.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/packer.nvim/lua/compe_nvim_lua/init.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/lua/compe_nvim_lua/init.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-web-devicons/lua/compe_nvim_lua/init.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-tree.lua/lua/compe_nvim_lua/init.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-lspconfig/lua/compe_nvim_lua/init.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-compe/lua/compe_nvim_lua/init.lua"
Searching for "lua/compe_buffer.lua" in "/Users/andrewgu/.config/nvim,/etc/xdg/nvim,/Users/andrewgu/.local/share/nvim/site,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/telescope.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/popup.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/plenary.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/packer.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-web-devicons,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-tree.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-lspconfig,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-compe,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-base16.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-autopairs,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/neoformat,/Users/andrewgu/.local/share/nvim/site/pack/packer/star
Searching for "/Users/andrewgu/.config/nvim/lua/compe_buffer.lua"
Searching for "/etc/xdg/nvim/lua/compe_buffer.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/lua/compe_buffer.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/telescope.nvim/lua/compe_buffer.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/popup.nvim/lua/compe_buffer.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/plenary.nvim/lua/compe_buffer.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/packer.nvim/lua/compe_buffer.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/lua/compe_buffer.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-web-devicons/lua/compe_buffer.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-tree.lua/lua/compe_buffer.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-lspconfig/lua/compe_buffer.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-compe/lua/compe_buffer.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-base16.lua/lua/compe_buffer.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-autopairs/lua/compe_buffer.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/neoformat/lua/compe_buffer.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/lualine.nvim/lua/compe_buffer.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/indent-blankline.nvim/lua/compe_buffer.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/gitsigns.nvim/lua/compe_buffer.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/barbar.nvim/lua/compe_buffer.lua"
Searching for "/usr/local/share/nvim/site/lua/compe_buffer.lua"
Searching for "/usr/share/nvim/site/lua/compe_buffer.lua"
Searching for "/usr/local/Cellar/neovim/0.5.0/share/nvim/runtime/lua/compe_buffer.lua"
Searching for "/usr/local/Cellar/neovim/0.5.0/share/nvim/runtime/pack/dist/opt/matchit/lua/compe_buffer.lua"
Searching for "/usr/local/Cellar/neovim/0.5.0/lib/nvim/lua/compe_buffer.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-compe/after/lua/compe_buffer.lua"
Searching for "/usr/share/nvim/site/after/lua/compe_buffer.lua"
Searching for "/usr/local/share/nvim/site/after/lua/compe_buffer.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/after/lua/compe_buffer.lua"
Searching for "/etc/xdg/nvim/after/lua/compe_buffer.lua"
Searching for "/Users/andrewgu/.config/nvim/after/lua/compe_buffer.lua"
not found in 'runtimepath': "lua/compe_buffer.lua"
Searching for "pack/*/start/*/lua/compe_buffer.lua" in "/Users/andrewgu/.config/nvim,/etc/xdg/nvim,/Users/andrewgu/.local/share/nvim/site,/usr/local/share/nvim/site,/usr/share/nvim/site,/usr/local/Cellar/neovim/0.5.0/share/nvim/runtime,/usr/local/Cellar/neovim/0.5.0/lib/nvim,/usr/share/nvim/site/after,/usr/local/share/nvim/site/after,/Users/andrewgu/.local/share/nvim/site/after,/etc/xdg/nvim/after,/Users/andrewgu/.config/nvim/after"
Searching for "/Users/andrewgu/.config/nvim/pack/*/start/*/lua/compe_buffer.lua"
Searching for "/etc/xdg/nvim/pack/*/start/*/lua/compe_buffer.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/*/start/*/lua/compe_buffer.lua"
Searching for "/usr/local/share/nvim/site/pack/*/start/*/lua/compe_buffer.lua"
Searching for "/usr/share/nvim/site/pack/*/start/*/lua/compe_buffer.lua"
Searching for "/usr/local/Cellar/neovim/0.5.0/share/nvim/runtime/pack/*/start/*/lua/compe_buffer.lua"
Searching for "/usr/local/Cellar/neovim/0.5.0/lib/nvim/pack/*/start/*/lua/compe_buffer.lua"
Searching for "/usr/share/nvim/site/after/pack/*/start/*/lua/compe_buffer.lua"
Searching for "/usr/local/share/nvim/site/after/pack/*/start/*/lua/compe_buffer.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/after/pack/*/start/*/lua/compe_buffer.lua"
Searching for "/etc/xdg/nvim/after/pack/*/start/*/lua/compe_buffer.lua"
Searching for "/Users/andrewgu/.config/nvim/after/pack/*/start/*/lua/compe_buffer.lua"
not found in 'packpath': "pack/*/start/*/lua/compe_buffer.lua"
Searching for "start/*/lua/compe_buffer.lua" in "/Users/andrewgu/.config/nvim,/etc/xdg/nvim,/Users/andrewgu/.local/share/nvim/site,/usr/local/share/nvim/site,/usr/share/nvim/site,/usr/local/Cellar/neovim/0.5.0/share/nvim/runtime,/usr/local/Cellar/neovim/0.5.0/lib/nvim,/usr/share/nvim/site/after,/usr/local/share/nvim/site/after,/Users/andrewgu/.local/share/nvim/site/after,/etc/xdg/nvim/after,/Users/andrewgu/.config/nvim/after"
Searching for "/Users/andrewgu/.config/nvim/start/*/lua/compe_buffer.lua"
Searching for "/etc/xdg/nvim/start/*/lua/compe_buffer.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/start/*/lua/compe_buffer.lua"
Searching for "/usr/local/share/nvim/site/start/*/lua/compe_buffer.lua"
Searching for "/usr/share/nvim/site/start/*/lua/compe_buffer.lua"
Searching for "/usr/local/Cellar/neovim/0.5.0/share/nvim/runtime/start/*/lua/compe_buffer.lua"
Searching for "/usr/local/Cellar/neovim/0.5.0/lib/nvim/start/*/lua/compe_buffer.lua"
Searching for "/usr/share/nvim/site/after/start/*/lua/compe_buffer.lua"
Searching for "/usr/local/share/nvim/site/after/start/*/lua/compe_buffer.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/after/start/*/lua/compe_buffer.lua"
Searching for "/etc/xdg/nvim/after/start/*/lua/compe_buffer.lua"
Searching for "/Users/andrewgu/.config/nvim/after/start/*/lua/compe_buffer.lua"
not found in 'packpath': "start/*/lua/compe_buffer.lua"
Searching for "lua/compe_buffer/init.lua" in "/Users/andrewgu/.config/nvim,/etc/xdg/nvim,/Users/andrewgu/.local/share/nvim/site,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/telescope.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/popup.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/plenary.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/packer.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-web-devicons,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-tree.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-lspconfig,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-compe,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-base16.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-autopairs,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/neoformat,/Users/andrewgu/.local/share/nvim/site/pack/packer
Searching for "/Users/andrewgu/.config/nvim/lua/compe_buffer/init.lua"
Searching for "/etc/xdg/nvim/lua/compe_buffer/init.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/lua/compe_buffer/init.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/telescope.nvim/lua/compe_buffer/init.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/popup.nvim/lua/compe_buffer/init.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/plenary.nvim/lua/compe_buffer/init.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/packer.nvim/lua/compe_buffer/init.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/lua/compe_buffer/init.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-web-devicons/lua/compe_buffer/init.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-tree.lua/lua/compe_buffer/init.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-lspconfig/lua/compe_buffer/init.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-compe/lua/compe_buffer/init.lua"
Searching for "lua/compe_buffer/buffer.lua" in "/Users/andrewgu/.config/nvim,/etc/xdg/nvim,/Users/andrewgu/.local/share/nvim/site,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/telescope.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/popup.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/plenary.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/packer.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-web-devicons,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-tree.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-lspconfig,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-compe,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-base16.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-autopairs,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/neoformat,/Users/andrewgu/.local/share/nvim/site/pack/pack
Searching for "/Users/andrewgu/.config/nvim/lua/compe_buffer/buffer.lua"
Searching for "/etc/xdg/nvim/lua/compe_buffer/buffer.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/lua/compe_buffer/buffer.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/telescope.nvim/lua/compe_buffer/buffer.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/popup.nvim/lua/compe_buffer/buffer.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/plenary.nvim/lua/compe_buffer/buffer.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/packer.nvim/lua/compe_buffer/buffer.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/lua/compe_buffer/buffer.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-web-devicons/lua/compe_buffer/buffer.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-tree.lua/lua/compe_buffer/buffer.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-lspconfig/lua/compe_buffer/buffer.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-compe/lua/compe_buffer/buffer.lua"
Searching for "lua/nvim-treesitter.lua" in "/Users/andrewgu/.config/nvim,/etc/xdg/nvim,/Users/andrewgu/.local/share/nvim/site,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/telescope.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/popup.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/plenary.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/packer.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-web-devicons,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-tree.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-lspconfig,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-compe,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-base16.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-autopairs,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/neoformat,/Users/andrewgu/.local/share/nvim/site/pack/packer/s
Searching for "/Users/andrewgu/.config/nvim/lua/nvim-treesitter.lua"
Searching for "/etc/xdg/nvim/lua/nvim-treesitter.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/lua/nvim-treesitter.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/telescope.nvim/lua/nvim-treesitter.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/popup.nvim/lua/nvim-treesitter.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/plenary.nvim/lua/nvim-treesitter.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/packer.nvim/lua/nvim-treesitter.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/lua/nvim-treesitter.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-web-devicons/lua/nvim-treesitter.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-tree.lua/lua/nvim-treesitter.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-lspconfig/lua/nvim-treesitter.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-compe/lua/nvim-treesitter.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-base16.lua/lua/nvim-treesitter.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-autopairs/lua/nvim-treesitter.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/neoformat/lua/nvim-treesitter.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/lualine.nvim/lua/nvim-treesitter.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/indent-blankline.nvim/lua/nvim-treesitter.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/gitsigns.nvim/lua/nvim-treesitter.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/barbar.nvim/lua/nvim-treesitter.lua"
Searching for "/usr/local/share/nvim/site/lua/nvim-treesitter.lua"
Searching for "/usr/share/nvim/site/lua/nvim-treesitter.lua"
Searching for "/usr/local/Cellar/neovim/0.5.0/share/nvim/runtime/lua/nvim-treesitter.lua"
Searching for "/usr/local/Cellar/neovim/0.5.0/share/nvim/runtime/pack/dist/opt/matchit/lua/nvim-treesitter.lua"
Searching for "/usr/local/Cellar/neovim/0.5.0/lib/nvim/lua/nvim-treesitter.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-compe/after/lua/nvim-treesitter.lua"
Searching for "/usr/share/nvim/site/after/lua/nvim-treesitter.lua"
Searching for "/usr/local/share/nvim/site/after/lua/nvim-treesitter.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/after/lua/nvim-treesitter.lua"
Searching for "/etc/xdg/nvim/after/lua/nvim-treesitter.lua"
Searching for "/Users/andrewgu/.config/nvim/after/lua/nvim-treesitter.lua"
not found in 'runtimepath': "lua/nvim-treesitter.lua"
Searching for "pack/*/start/*/lua/nvim-treesitter.lua" in "/Users/andrewgu/.config/nvim,/etc/xdg/nvim,/Users/andrewgu/.local/share/nvim/site,/usr/local/share/nvim/site,/usr/share/nvim/site,/usr/local/Cellar/neovim/0.5.0/share/nvim/runtime,/usr/local/Cellar/neovim/0.5.0/lib/nvim,/usr/share/nvim/site/after,/usr/local/share/nvim/site/after,/Users/andrewgu/.local/share/nvim/site/after,/etc/xdg/nvim/after,/Users/andrewgu/.config/nvim/after"
Searching for "/Users/andrewgu/.config/nvim/pack/*/start/*/lua/nvim-treesitter.lua"
Searching for "/etc/xdg/nvim/pack/*/start/*/lua/nvim-treesitter.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/*/start/*/lua/nvim-treesitter.lua"
Searching for "/usr/local/share/nvim/site/pack/*/start/*/lua/nvim-treesitter.lua"
Searching for "/usr/share/nvim/site/pack/*/start/*/lua/nvim-treesitter.lua"
Searching for "/usr/local/Cellar/neovim/0.5.0/share/nvim/runtime/pack/*/start/*/lua/nvim-treesitter.lua"
Searching for "/usr/local/Cellar/neovim/0.5.0/lib/nvim/pack/*/start/*/lua/nvim-treesitter.lua"
Searching for "/usr/share/nvim/site/after/pack/*/start/*/lua/nvim-treesitter.lua"
Searching for "/usr/local/share/nvim/site/after/pack/*/start/*/lua/nvim-treesitter.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/after/pack/*/start/*/lua/nvim-treesitter.lua"
Searching for "/etc/xdg/nvim/after/pack/*/start/*/lua/nvim-treesitter.lua"
Searching for "/Users/andrewgu/.config/nvim/after/pack/*/start/*/lua/nvim-treesitter.lua"
not found in 'packpath': "pack/*/start/*/lua/nvim-treesitter.lua"
Searching for "start/*/lua/nvim-treesitter.lua" in "/Users/andrewgu/.config/nvim,/etc/xdg/nvim,/Users/andrewgu/.local/share/nvim/site,/usr/local/share/nvim/site,/usr/share/nvim/site,/usr/local/Cellar/neovim/0.5.0/share/nvim/runtime,/usr/local/Cellar/neovim/0.5.0/lib/nvim,/usr/share/nvim/site/after,/usr/local/share/nvim/site/after,/Users/andrewgu/.local/share/nvim/site/after,/etc/xdg/nvim/after,/Users/andrewgu/.config/nvim/after"
Searching for "/Users/andrewgu/.config/nvim/start/*/lua/nvim-treesitter.lua"
Searching for "/etc/xdg/nvim/start/*/lua/nvim-treesitter.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/start/*/lua/nvim-treesitter.lua"
Searching for "/usr/local/share/nvim/site/start/*/lua/nvim-treesitter.lua"
Searching for "/usr/share/nvim/site/start/*/lua/nvim-treesitter.lua"
Searching for "/usr/local/Cellar/neovim/0.5.0/share/nvim/runtime/start/*/lua/nvim-treesitter.lua"
Searching for "/usr/local/Cellar/neovim/0.5.0/lib/nvim/start/*/lua/nvim-treesitter.lua"
Searching for "/usr/share/nvim/site/after/start/*/lua/nvim-treesitter.lua"
Searching for "/usr/local/share/nvim/site/after/start/*/lua/nvim-treesitter.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/after/start/*/lua/nvim-treesitter.lua"
Searching for "/etc/xdg/nvim/after/start/*/lua/nvim-treesitter.lua"
Searching for "/Users/andrewgu/.config/nvim/after/start/*/lua/nvim-treesitter.lua"
not found in 'packpath': "start/*/lua/nvim-treesitter.lua"
Searching for "lua/nvim-treesitter/init.lua" in "/Users/andrewgu/.config/nvim,/etc/xdg/nvim,/Users/andrewgu/.local/share/nvim/site,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/telescope.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/popup.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/plenary.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/packer.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-web-devicons,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-tree.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-lspconfig,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-compe,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-base16.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-autopairs,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/neoformat,/Users/andrewgu/.local/share/nvim/site/pack/pac
Searching for "/Users/andrewgu/.config/nvim/lua/nvim-treesitter/init.lua"
Searching for "/etc/xdg/nvim/lua/nvim-treesitter/init.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/lua/nvim-treesitter/init.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/telescope.nvim/lua/nvim-treesitter/init.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/popup.nvim/lua/nvim-treesitter/init.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/plenary.nvim/lua/nvim-treesitter/init.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/packer.nvim/lua/nvim-treesitter/init.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/lua/nvim-treesitter/init.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-web-devicons/lua/nvim-treesitter/init.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-tree.lua/lua/nvim-treesitter/init.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-lspconfig/lua/nvim-treesitter/init.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-compe/lua/nvim-treesitter/init.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-base16.lua/lua/nvim-treesitter/init.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-autopairs/lua/nvim-treesitter/init.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/neoformat/lua/nvim-treesitter/init.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/lualine.nvim/lua/nvim-treesitter/init.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/indent-blankline.nvim/lua/nvim-treesitter/init.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/gitsigns.nvim/lua/nvim-treesitter/init.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/barbar.nvim/lua/nvim-treesitter/init.lua"
Searching for "/usr/local/share/nvim/site/lua/nvim-treesitter/init.lua"
Searching for "/usr/share/nvim/site/lua/nvim-treesitter/init.lua"
Searching for "/usr/local/Cellar/neovim/0.5.0/share/nvim/runtime/lua/nvim-treesitter/init.lua"
Searching for "/usr/local/Cellar/neovim/0.5.0/share/nvim/runtime/pack/dist/opt/matchit/lua/nvim-treesitter/init.lua"
Searching for "/usr/local/Cellar/neovim/0.5.0/lib/nvim/lua/nvim-treesitter/init.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-compe/after/lua/nvim-treesitter/init.lua"
Searching for "/usr/share/nvim/site/after/lua/nvim-treesitter/init.lua"
Searching for "/usr/local/share/nvim/site/after/lua/nvim-treesitter/init.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/after/lua/nvim-treesitter/init.lua"
Searching for "/etc/xdg/nvim/after/lua/nvim-treesitter/init.lua"
Searching for "/Users/andrewgu/.config/nvim/after/lua/nvim-treesitter/init.lua"
not found in 'runtimepath': "lua/nvim-treesitter/init.lua"
Searching for "pack/*/start/*/lua/nvim-treesitter/init.lua" in "/Users/andrewgu/.config/nvim,/etc/xdg/nvim,/Users/andrewgu/.local/share/nvim/site,/usr/local/share/nvim/site,/usr/share/nvim/site,/usr/local/Cellar/neovim/0.5.0/share/nvim/runtime,/usr/local/Cellar/neovim/0.5.0/lib/nvim,/usr/share/nvim/site/after,/usr/local/share/nvim/site/after,/Users/andrewgu/.local/share/nvim/site/after,/etc/xdg/nvim/after,/Users/andrewgu/.config/nvim/after"
Searching for "/Users/andrewgu/.config/nvim/pack/*/start/*/lua/nvim-treesitter/init.lua"
Searching for "/etc/xdg/nvim/pack/*/start/*/lua/nvim-treesitter/init.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/*/start/*/lua/nvim-treesitter/init.lua"
Searching for "/usr/local/share/nvim/site/pack/*/start/*/lua/nvim-treesitter/init.lua"
Searching for "/usr/share/nvim/site/pack/*/start/*/lua/nvim-treesitter/init.lua"
Searching for "/usr/local/Cellar/neovim/0.5.0/share/nvim/runtime/pack/*/start/*/lua/nvim-treesitter/init.lua"
Searching for "/usr/local/Cellar/neovim/0.5.0/lib/nvim/pack/*/start/*/lua/nvim-treesitter/init.lua"
Searching for "/usr/share/nvim/site/after/pack/*/start/*/lua/nvim-treesitter/init.lua"
Searching for "/usr/local/share/nvim/site/after/pack/*/start/*/lua/nvim-treesitter/init.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/after/pack/*/start/*/lua/nvim-treesitter/init.lua"
Searching for "/etc/xdg/nvim/after/pack/*/start/*/lua/nvim-treesitter/init.lua"
Searching for "/Users/andrewgu/.config/nvim/after/pack/*/start/*/lua/nvim-treesitter/init.lua"
not found in 'packpath': "pack/*/start/*/lua/nvim-treesitter/init.lua"
Searching for "start/*/lua/nvim-treesitter/init.lua" in "/Users/andrewgu/.config/nvim,/etc/xdg/nvim,/Users/andrewgu/.local/share/nvim/site,/usr/local/share/nvim/site,/usr/share/nvim/site,/usr/local/Cellar/neovim/0.5.0/share/nvim/runtime,/usr/local/Cellar/neovim/0.5.0/lib/nvim,/usr/share/nvim/site/after,/usr/local/share/nvim/site/after,/Users/andrewgu/.local/share/nvim/site/after,/etc/xdg/nvim/after,/Users/andrewgu/.config/nvim/after"
Searching for "/Users/andrewgu/.config/nvim/start/*/lua/nvim-treesitter/init.lua"
Searching for "/etc/xdg/nvim/start/*/lua/nvim-treesitter/init.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/start/*/lua/nvim-treesitter/init.lua"
Searching for "/usr/local/share/nvim/site/start/*/lua/nvim-treesitter/init.lua"
Searching for "/usr/share/nvim/site/start/*/lua/nvim-treesitter/init.lua"
Searching for "/usr/local/Cellar/neovim/0.5.0/share/nvim/runtime/start/*/lua/nvim-treesitter/init.lua"
Searching for "/usr/local/Cellar/neovim/0.5.0/lib/nvim/start/*/lua/nvim-treesitter/init.lua"
Searching for "/usr/share/nvim/site/after/start/*/lua/nvim-treesitter/init.lua"
Searching for "/usr/local/share/nvim/site/after/start/*/lua/nvim-treesitter/init.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/after/start/*/lua/nvim-treesitter/init.lua"
Searching for "/etc/xdg/nvim/after/start/*/lua/nvim-treesitter/init.lua"
Searching for "/Users/andrewgu/.config/nvim/after/start/*/lua/nvim-treesitter/init.lua"
not found in 'packpath': "start/*/lua/nvim-treesitter/init.lua"
Searching for "lua/nvim-treesitter.so" in "/Users/andrewgu/.config/nvim,/etc/xdg/nvim,/Users/andrewgu/.local/share/nvim/site,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/telescope.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/popup.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/plenary.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/packer.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-web-devicons,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-tree.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-lspconfig,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-compe,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-base16.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-autopairs,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/neoformat,/Users/andrewgu/.local/share/nvim/site/pack/packer/st
Searching for "/Users/andrewgu/.config/nvim/lua/nvim-treesitter.so"
Searching for "/etc/xdg/nvim/lua/nvim-treesitter.so"
Searching for "/Users/andrewgu/.local/share/nvim/site/lua/nvim-treesitter.so"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/telescope.nvim/lua/nvim-treesitter.so"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/popup.nvim/lua/nvim-treesitter.so"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/plenary.nvim/lua/nvim-treesitter.so"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/packer.nvim/lua/nvim-treesitter.so"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/lua/nvim-treesitter.so"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-web-devicons/lua/nvim-treesitter.so"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-tree.lua/lua/nvim-treesitter.so"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-lspconfig/lua/nvim-treesitter.so"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-compe/lua/nvim-treesitter.so"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-base16.lua/lua/nvim-treesitter.so"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-autopairs/lua/nvim-treesitter.so"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/neoformat/lua/nvim-treesitter.so"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/lualine.nvim/lua/nvim-treesitter.so"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/indent-blankline.nvim/lua/nvim-treesitter.so"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/gitsigns.nvim/lua/nvim-treesitter.so"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/barbar.nvim/lua/nvim-treesitter.so"
Searching for "/usr/local/share/nvim/site/lua/nvim-treesitter.so"
Searching for "/usr/share/nvim/site/lua/nvim-treesitter.so"
Searching for "/usr/local/Cellar/neovim/0.5.0/share/nvim/runtime/lua/nvim-treesitter.so"
Searching for "/usr/local/Cellar/neovim/0.5.0/share/nvim/runtime/pack/dist/opt/matchit/lua/nvim-treesitter.so"
Searching for "/usr/local/Cellar/neovim/0.5.0/lib/nvim/lua/nvim-treesitter.so"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-compe/after/lua/nvim-treesitter.so"
Searching for "/usr/share/nvim/site/after/lua/nvim-treesitter.so"
Searching for "/usr/local/share/nvim/site/after/lua/nvim-treesitter.so"
Searching for "/Users/andrewgu/.local/share/nvim/site/after/lua/nvim-treesitter.so"
Searching for "/etc/xdg/nvim/after/lua/nvim-treesitter.so"
Searching for "/Users/andrewgu/.config/nvim/after/lua/nvim-treesitter.so"
not found in 'runtimepath': "lua/nvim-treesitter.so"
Searching for "pack/*/start/*/lua/nvim-treesitter.so" in "/Users/andrewgu/.config/nvim,/etc/xdg/nvim,/Users/andrewgu/.local/share/nvim/site,/usr/local/share/nvim/site,/usr/share/nvim/site,/usr/local/Cellar/neovim/0.5.0/share/nvim/runtime,/usr/local/Cellar/neovim/0.5.0/lib/nvim,/usr/share/nvim/site/after,/usr/local/share/nvim/site/after,/Users/andrewgu/.local/share/nvim/site/after,/etc/xdg/nvim/after,/Users/andrewgu/.config/nvim/after"
Searching for "/Users/andrewgu/.config/nvim/pack/*/start/*/lua/nvim-treesitter.so"
Searching for "/etc/xdg/nvim/pack/*/start/*/lua/nvim-treesitter.so"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/*/start/*/lua/nvim-treesitter.so"
Searching for "/usr/local/share/nvim/site/pack/*/start/*/lua/nvim-treesitter.so"
Searching for "/usr/share/nvim/site/pack/*/start/*/lua/nvim-treesitter.so"
Searching for "/usr/local/Cellar/neovim/0.5.0/share/nvim/runtime/pack/*/start/*/lua/nvim-treesitter.so"
Searching for "/usr/local/Cellar/neovim/0.5.0/lib/nvim/pack/*/start/*/lua/nvim-treesitter.so"
Searching for "/usr/share/nvim/site/after/pack/*/start/*/lua/nvim-treesitter.so"
Searching for "/usr/local/share/nvim/site/after/pack/*/start/*/lua/nvim-treesitter.so"
Searching for "/Users/andrewgu/.local/share/nvim/site/after/pack/*/start/*/lua/nvim-treesitter.so"
Searching for "/etc/xdg/nvim/after/pack/*/start/*/lua/nvim-treesitter.so"
Searching for "/Users/andrewgu/.config/nvim/after/pack/*/start/*/lua/nvim-treesitter.so"
not found in 'packpath': "pack/*/start/*/lua/nvim-treesitter.so"
Searching for "start/*/lua/nvim-treesitter.so" in "/Users/andrewgu/.config/nvim,/etc/xdg/nvim,/Users/andrewgu/.local/share/nvim/site,/usr/local/share/nvim/site,/usr/share/nvim/site,/usr/local/Cellar/neovim/0.5.0/share/nvim/runtime,/usr/local/Cellar/neovim/0.5.0/lib/nvim,/usr/share/nvim/site/after,/usr/local/share/nvim/site/after,/Users/andrewgu/.local/share/nvim/site/after,/etc/xdg/nvim/after,/Users/andrewgu/.config/nvim/after"
Searching for "/Users/andrewgu/.config/nvim/start/*/lua/nvim-treesitter.so"
Searching for "/etc/xdg/nvim/start/*/lua/nvim-treesitter.so"
Searching for "/Users/andrewgu/.local/share/nvim/site/start/*/lua/nvim-treesitter.so"
Searching for "/usr/local/share/nvim/site/start/*/lua/nvim-treesitter.so"
Searching for "/usr/share/nvim/site/start/*/lua/nvim-treesitter.so"
Searching for "/usr/local/Cellar/neovim/0.5.0/share/nvim/runtime/start/*/lua/nvim-treesitter.so"
Searching for "/usr/local/Cellar/neovim/0.5.0/lib/nvim/start/*/lua/nvim-treesitter.so"
Searching for "/usr/share/nvim/site/after/start/*/lua/nvim-treesitter.so"
Searching for "/usr/local/share/nvim/site/after/start/*/lua/nvim-treesitter.so"
Searching for "/Users/andrewgu/.local/share/nvim/site/after/start/*/lua/nvim-treesitter.so"
Searching for "/etc/xdg/nvim/after/start/*/lua/nvim-treesitter.so"
Searching for "/Users/andrewgu/.config/nvim/after/start/*/lua/nvim-treesitter.so"
not found in 'packpath': "start/*/lua/nvim-treesitter.so"
finished sourcing /Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-compe/after/plugin/compe.vim
Searching for "/usr/share/nvim/site/after/plugin/**/*.vim"
Searching for "/usr/local/share/nvim/site/after/plugin/**/*.vim"
Searching for "/Users/andrewgu/.local/share/nvim/site/after/plugin/**/*.vim"
Searching for "/etc/xdg/nvim/after/plugin/**/*.vim"
Searching for "/Users/andrewgu/.config/nvim/after/plugin/**/*.vim"
Searching for "pack/*/start/*/plugin/**/*.vim" in "/Users/andrewgu/.config/nvim,/etc/xdg/nvim,/Users/andrewgu/.local/share/nvim/site,/usr/local/share/nvim/site,/usr/share/nvim/site,/usr/local/Cellar/neovim/0.5.0/share/nvim/runtime,/usr/local/Cellar/neovim/0.5.0/lib/nvim,/usr/share/nvim/site/after,/usr/local/share/nvim/site/after,/Users/andrewgu/.local/share/nvim/site/after,/etc/xdg/nvim/after,/Users/andrewgu/.config/nvim/after"
Searching for "/usr/share/nvim/site/after/pack/*/start/*/plugin/**/*.vim"
Searching for "/usr/local/share/nvim/site/after/pack/*/start/*/plugin/**/*.vim"
Searching for "/Users/andrewgu/.local/share/nvim/site/after/pack/*/start/*/plugin/**/*.vim"
Searching for "/etc/xdg/nvim/after/pack/*/start/*/plugin/**/*.vim"
Searching for "/Users/andrewgu/.config/nvim/after/pack/*/start/*/plugin/**/*.vim"
not found in 'packpath': "pack/*/start/*/plugin/**/*.vim"
Searching for "start/*/plugin/**/*.vim" in "/Users/andrewgu/.config/nvim,/etc/xdg/nvim,/Users/andrewgu/.local/share/nvim/site,/usr/local/share/nvim/site,/usr/share/nvim/site,/usr/local/Cellar/neovim/0.5.0/share/nvim/runtime,/usr/local/Cellar/neovim/0.5.0/lib/nvim,/usr/share/nvim/site/after,/usr/local/share/nvim/site/after,/Users/andrewgu/.local/share/nvim/site/after,/etc/xdg/nvim/after,/Users/andrewgu/.config/nvim/after"
Searching for "/usr/share/nvim/site/after/start/*/plugin/**/*.vim"
Searching for "/usr/local/share/nvim/site/after/start/*/plugin/**/*.vim"
Searching for "/Users/andrewgu/.local/share/nvim/site/after/start/*/plugin/**/*.vim"
Searching for "/etc/xdg/nvim/after/start/*/plugin/**/*.vim"
Searching for "/Users/andrewgu/.config/nvim/after/start/*/plugin/**/*.vim"
not found in 'packpath': "start/*/plugin/**/*.vim"
Searching for "plugin/**/*.lua" in "/Users/andrewgu/.config/nvim,/etc/xdg/nvim,/Users/andrewgu/.local/share/nvim/site,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/telescope.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/popup.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/plenary.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/packer.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-web-devicons,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-tree.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-lspconfig,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-compe,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-base16.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-autopairs,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/neoformat,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/lua
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-compe/after/plugin/**/*.lua"
Searching for "/usr/share/nvim/site/after/plugin/**/*.lua"
Searching for "/usr/local/share/nvim/site/after/plugin/**/*.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/after/plugin/**/*.lua"
Searching for "/etc/xdg/nvim/after/plugin/**/*.lua"
Searching for "/Users/andrewgu/.config/nvim/after/plugin/**/*.lua"
not found in 'runtimepath': "plugin/**/*.lua"
Searching for "pack/*/start/*/plugin/**/*.lua" in "/Users/andrewgu/.config/nvim,/etc/xdg/nvim,/Users/andrewgu/.local/share/nvim/site,/usr/local/share/nvim/site,/usr/share/nvim/site,/usr/local/Cellar/neovim/0.5.0/share/nvim/runtime,/usr/local/Cellar/neovim/0.5.0/lib/nvim,/usr/share/nvim/site/after,/usr/local/share/nvim/site/after,/Users/andrewgu/.local/share/nvim/site/after,/etc/xdg/nvim/after,/Users/andrewgu/.config/nvim/after"
Searching for "/usr/share/nvim/site/after/pack/*/start/*/plugin/**/*.lua"
Searching for "/usr/local/share/nvim/site/after/pack/*/start/*/plugin/**/*.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/after/pack/*/start/*/plugin/**/*.lua"
Searching for "/etc/xdg/nvim/after/pack/*/start/*/plugin/**/*.lua"
Searching for "/Users/andrewgu/.config/nvim/after/pack/*/start/*/plugin/**/*.lua"
not found in 'packpath': "pack/*/start/*/plugin/**/*.lua"
Searching for "start/*/plugin/**/*.lua" in "/Users/andrewgu/.config/nvim,/etc/xdg/nvim,/Users/andrewgu/.local/share/nvim/site,/usr/local/share/nvim/site,/usr/share/nvim/site,/usr/local/Cellar/neovim/0.5.0/share/nvim/runtime,/usr/local/Cellar/neovim/0.5.0/lib/nvim,/usr/share/nvim/site/after,/usr/local/share/nvim/site/after,/Users/andrewgu/.local/share/nvim/site/after,/etc/xdg/nvim/after,/Users/andrewgu/.config/nvim/after"
Searching for "/usr/share/nvim/site/after/start/*/plugin/**/*.lua"
Searching for "/usr/local/share/nvim/site/after/start/*/plugin/**/*.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/after/start/*/plugin/**/*.lua"
Searching for "/etc/xdg/nvim/after/start/*/plugin/**/*.lua"
Searching for "/Users/andrewgu/.config/nvim/after/start/*/plugin/**/*.lua"
not found in 'packpath': "start/*/plugin/**/*.lua"
Reading ShaDa file "/Users/andrewgu/.local/share/nvim/shada/main.shada" info marks oldfiles
Executing BufWinEnter Autocommands for "*"
autocommand set statusline<

Executing: set statusline<
Executing BufWinEnter Autocommands for "*"
autocommand call bufferline#update()

Executing: call bufferline#update()
calling function bufferline#update()

line 1:    let new_value = bufferline#render(a:0 > 0 ? a:1 : v:false)
calling function bufferline#update[1]..bufferline#render(v:false)

line 1:    let result = luaeval("require'bufferline.render'.render_safe(_A)", a:update_names)
calling function bufferline#update[1]..bufferline#render[1]..bufferline#filter('&buflisted')

line 1:     let list = []
line 2:     for line in split(execute('ls!'), "\n")
line 2: ls!
  1 %a   "."                            line 1
line 3:         call add(list, 0+matchstr(line, '\v\d+'))
line 4:     endfor
line 2:     for line in split(execute('ls!'), "\n")
line 3:         call add(list, 0+matchstr(line, '\v\d+'))
line 4:     endfor
line 2:     for line in split(execute('ls!'), "\n")
line 3:         call add(list, 0+matchstr(line, '\v\d+'))
line 4:     endfor
line 5:     for a_expr in a:000
line 6:         let expr = a_expr
line 7:         let expr = substitute(expr, '&\w\+', 'getbufvar(v:val, "\0")', 'g')
line 8:         call filter(list, expr)
line 9:     endfor
line 5:     for a_expr in a:000
line 6:         let expr = a_expr
line 7:         let expr = substitute(expr, '&\w\+', 'getbufvar(v:val, "\0")', 'g')
line 8:         call filter(list, expr)
line 9:     endfor
line 10:     return list
function bufferline#update[1]..bufferline#render[1]..bufferline#filter returning [1]

continuing in function bufferline#update[1]..bufferline#render

line 2: 
line 3:    if result[0]
line 4:       return result[1]
function bufferline#update[1]..bufferline#render returning '%1@BufferlineMainClickHandler@%#Buffe...ufferTabpageFill#▎%#BufferTabpageFill#'

continuing in function bufferline#update

line 2:    if new_value == s:last_tabline
line 3:       return
function bufferline#update returning #0

continuing in BufWinEnter Autocommands for "*"

Executing BufWinEnter Autocommands for "*"
autocommand IndentBlanklineRefresh

Executing: IndentBlanklineRefresh
Executing: call s:try('lua require("indent_blankline.commands").refresh("" == "!")')
calling function <SNR>29_try('lua require("indent_blankline.commands").refresh("" == "!")')

line 1:     try
line 2:         execute a:cmd
line 2: lua require("indent_blankline.commands").refresh("" == "!")
Searching for "lua/indent_blankline/commands.lua" in "/Users/andrewgu/.config/nvim,/etc/xdg/nvim,/Users/andrewgu/.local/share/nvim/site,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/telescope.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/popup.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/plenary.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/packer.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-web-devicons,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-tree.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-lspconfig,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-compe,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-base16.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-autopairs,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/neoformat,/Users/andrewgu/.local/share/nvim/site/pac
Searching for "/Users/andrewgu/.config/nvim/lua/indent_blankline/commands.lua"
Searching for "/etc/xdg/nvim/lua/indent_blankline/commands.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/lua/indent_blankline/commands.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/telescope.nvim/lua/indent_blankline/commands.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/popup.nvim/lua/indent_blankline/commands.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/plenary.nvim/lua/indent_blankline/commands.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/packer.nvim/lua/indent_blankline/commands.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/lua/indent_blankline/commands.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-web-devicons/lua/indent_blankline/commands.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-tree.lua/lua/indent_blankline/commands.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-lspconfig/lua/indent_blankline/commands.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-compe/lua/indent_blankline/commands.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-base16.lua/lua/indent_blankline/commands.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-autopairs/lua/indent_blankline/commands.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/neoformat/lua/indent_blankline/commands.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/lualine.nvim/lua/indent_blankline/commands.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/indent-blankline.nvim/lua/indent_blankline/commands.lua"
Executing: call indent_blankline#Refresh()
Searching for "autoload/indent_blankline.vim" in "/Users/andrewgu/.config/nvim,/etc/xdg/nvim,/Users/andrewgu/.local/share/nvim/site,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/telescope.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/popup.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/plenary.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/packer.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-web-devicons,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-tree.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-lspconfig,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-compe,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-base16.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-autopairs,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/neoformat,/Users/andrewgu/.local/share/nvim/site/pack/pa
Searching for "/Users/andrewgu/.config/nvim/autoload/indent_blankline.vim"
Searching for "/etc/xdg/nvim/autoload/indent_blankline.vim"
Searching for "/Users/andrewgu/.local/share/nvim/site/autoload/indent_blankline.vim"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/telescope.nvim/autoload/indent_blankline.vim"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/popup.nvim/autoload/indent_blankline.vim"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/plenary.nvim/autoload/indent_blankline.vim"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/packer.nvim/autoload/indent_blankline.vim"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/autoload/indent_blankline.vim"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-web-devicons/autoload/indent_blankline.vim"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-tree.lua/autoload/indent_blankline.vim"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-lspconfig/autoload/indent_blankline.vim"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-compe/autoload/indent_blankline.vim"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-base16.lua/autoload/indent_blankline.vim"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-autopairs/autoload/indent_blankline.vim"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/neoformat/autoload/indent_blankline.vim"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/lualine.nvim/autoload/indent_blankline.vim"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/indent-blankline.nvim/autoload/indent_blankline.vim"
chdir(/Users/andrewgu/.config/nvim)
chdir(/Users/andrewgu/.local/share/nvim/site/pack/packer/start/indent-blankline.nvim/autoload)
chdir(/Users/andrewgu/.config/nvim)
line 0: sourcing "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/indent-blankline.nvim/autoload/indent_blankline.vim"
line 1: 
line 2: function! indent_blankline#Refresh()
finished sourcing /Users/andrewgu/.local/share/nvim/site/pack/packer/start/indent-blankline.nvim/autoload/indent_blankline.vim
continuing in nvim_exec() called at function <SNR>29_try:2
calling function indent_blankline#Refresh()

line 1:     try
line 2:         lua require("indent_blankline").refresh()
calling function indent_blankline#Refresh[2]..indent_blankline#helper#GetListChar('eol', '')

line 1:     let l:list_chars = {}
line 2: 
line 3:     for l:char in split(&listchars, ',')
line 4:         let l:split = split(l:char, ':')
line 5:         let l:list_chars[l:split[0]] = l:split[1]
line 6:     endfor
line 3:     for l:char in split(&listchars, ',')
line 4:         let l:split = split(l:char, ':')
line 5:         let l:list_chars[l:split[0]] = l:split[1]
line 6:     endfor
line 3:     for l:char in split(&listchars, ',')
line 4:         let l:split = split(l:char, ':')
line 5:         let l:list_chars[l:split[0]] = l:split[1]
line 6:     endfor
line 3:     for l:char in split(&listchars, ',')
line 4:         let l:split = split(l:char, ':')
line 5:         let l:list_chars[l:split[0]] = l:split[1]
line 6:     endfor
line 7: 
line 8:     return get(l:list_chars, a:key, a:fallback)
function indent_blankline#Refresh[2]..indent_blankline#helper#GetListChar returning ''

continuing in function indent_blankline#Refresh

line 3:     catch /E12/
line 4:         return
line 5:     catch
line 6:         if g:indent_blankline_debug
line 7:             echohl Error
line 8:             echom 'indent-blankline encountered an error on refresh: ' . v:exception
line 9:             echohl None
line 10:         endif
line 11:     endtry
function indent_blankline#Refresh returning #0

continuing in nvim_exec() called at function <SNR>29_try:2

line 3:     catch /E12/
line 4:         return
line 5:     endtry
function <SNR>29_try returning #0

continuing in BufWinEnter Autocommands for "*"

Executing BufEnter Autocommands for "*"
autocommand sil call s:LocalBrowse(expand("<amatch>"))

Executing: sil call s:LocalBrowse(expand("<amatch>"))
calling function <SNR>16_LocalBrowse('/Users/andrewgu/.config/nvim')

line 1:   " Unfortunate interaction -- only DechoMsg debugging calls can be safely used here.
line 2:   " Otherwise, the BufEnter event gets triggered when attempts to write to
line 3:   " the DBG buffer are made.
line 4: 
line 5:   if !exists("s:vimentered")
line 6:    " If s:vimentered doesn't exist, then the VimEnter event hasn't fired.  It will,
line 7:    " and so s:VimEnter() will then be calling this routine, but this time with s:vimentered defined.
line 8: "   call Dfunc("s:LocalBrowse(dirname<".a:dirname.">)  (s:vimentered doesn't exist)")
line 9: "   call Dret("s:LocalBrowse")
line 10:    return
function <SNR>16_LocalBrowse returning #0

continuing in BufEnter Autocommands for "*"

Executing BufEnter Autocommands for "*"
autocommand set statusline<

Executing: set statusline<
Executing BufEnter Autocommands for "*"
autocommand :lua require("nvim-autopairs").on_attach()

Executing: :lua require("nvim-autopairs").on_attach()
Executing BufEnter Autocommands for "*"
autocommand call bufferline#update()

Executing: call bufferline#update()
calling function bufferline#update()

line 1:    let new_value = bufferline#render(a:0 > 0 ? a:1 : v:false)
calling function bufferline#update[1]..bufferline#render(v:false)

line 1:    let result = luaeval("require'bufferline.render'.render_safe(_A)", a:update_names)
calling function bufferline#update[1]..bufferline#render[1]..bufferline#filter('&buflisted')

line 1:     let list = []
line 2:     for line in split(execute('ls!'), "\n")
line 2: ls!
  1 %a   "."                            line 1
line 3:         call add(list, 0+matchstr(line, '\v\d+'))
line 4:     endfor
line 2:     for line in split(execute('ls!'), "\n")
line 3:         call add(list, 0+matchstr(line, '\v\d+'))
line 4:     endfor
line 2:     for line in split(execute('ls!'), "\n")
line 3:         call add(list, 0+matchstr(line, '\v\d+'))
line 4:     endfor
line 5:     for a_expr in a:000
line 6:         let expr = a_expr
line 7:         let expr = substitute(expr, '&\w\+', 'getbufvar(v:val, "\0")', 'g')
line 8:         call filter(list, expr)
line 9:     endfor
line 5:     for a_expr in a:000
line 6:         let expr = a_expr
line 7:         let expr = substitute(expr, '&\w\+', 'getbufvar(v:val, "\0")', 'g')
line 8:         call filter(list, expr)
line 9:     endfor
line 10:     return list
function bufferline#update[1]..bufferline#render[1]..bufferline#filter returning [1]

continuing in function bufferline#update[1]..bufferline#render

line 2: 
line 3:    if result[0]
line 4:       return result[1]
function bufferline#update[1]..bufferline#render returning '%1@BufferlineMainClickHandler@%#Buffe...ufferTabpageFill#▎%#BufferTabpageFill#'

continuing in function bufferline#update

line 2:    if new_value == s:last_tabline
line 3:       return
function bufferline#update returning #0

continuing in BufEnter Autocommands for "*"

Executing BufEnter Autocommands for "*"
autocommand lua require'nvim-tree'.buf_enter()

Executing: lua require'nvim-tree'.buf_enter()
Searching for "lua/nvim-tree.lua" in "/Users/andrewgu/.config/nvim,/etc/xdg/nvim,/Users/andrewgu/.local/share/nvim/site,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/telescope.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/popup.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/plenary.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/packer.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-web-devicons,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-tree.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-lspconfig,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-compe,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-base16.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-autopairs,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/neoformat,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/l
Searching for "/Users/andrewgu/.config/nvim/lua/nvim-tree.lua"
Searching for "/etc/xdg/nvim/lua/nvim-tree.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/lua/nvim-tree.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/telescope.nvim/lua/nvim-tree.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/popup.nvim/lua/nvim-tree.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/plenary.nvim/lua/nvim-tree.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/packer.nvim/lua/nvim-tree.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/lua/nvim-tree.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-web-devicons/lua/nvim-tree.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-tree.lua/lua/nvim-tree.lua"
Searching for "lua/nvim-tree/lib.lua" in "/Users/andrewgu/.config/nvim,/etc/xdg/nvim,/Users/andrewgu/.local/share/nvim/site,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/telescope.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/popup.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/plenary.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/packer.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-web-devicons,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-tree.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-lspconfig,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-compe,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-base16.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-autopairs,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/neoformat,/Users/andrewgu/.local/share/nvim/site/pack/packer/sta
Searching for "/Users/andrewgu/.config/nvim/lua/nvim-tree/lib.lua"
Searching for "/etc/xdg/nvim/lua/nvim-tree/lib.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/lua/nvim-tree/lib.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/telescope.nvim/lua/nvim-tree/lib.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/popup.nvim/lua/nvim-tree/lib.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/plenary.nvim/lua/nvim-tree/lib.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/packer.nvim/lua/nvim-tree/lib.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/lua/nvim-tree/lib.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-web-devicons/lua/nvim-tree/lib.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-tree.lua/lua/nvim-tree/lib.lua"
Searching for "lua/nvim-tree/renderer.lua" in "/Users/andrewgu/.config/nvim,/etc/xdg/nvim,/Users/andrewgu/.local/share/nvim/site,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/telescope.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/popup.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/plenary.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/packer.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-web-devicons,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-tree.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-lspconfig,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-compe,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-base16.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-autopairs,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/neoformat,/Users/andrewgu/.local/share/nvim/site/pack/packe
Searching for "/Users/andrewgu/.config/nvim/lua/nvim-tree/renderer.lua"
Searching for "/etc/xdg/nvim/lua/nvim-tree/renderer.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/lua/nvim-tree/renderer.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/telescope.nvim/lua/nvim-tree/renderer.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/popup.nvim/lua/nvim-tree/renderer.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/plenary.nvim/lua/nvim-tree/renderer.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/packer.nvim/lua/nvim-tree/renderer.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/lua/nvim-tree/renderer.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-web-devicons/lua/nvim-tree/renderer.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-tree.lua/lua/nvim-tree/renderer.lua"
Searching for "lua/nvim-tree/config.lua" in "/Users/andrewgu/.config/nvim,/etc/xdg/nvim,/Users/andrewgu/.local/share/nvim/site,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/telescope.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/popup.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/plenary.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/packer.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-web-devicons,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-tree.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-lspconfig,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-compe,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-base16.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-autopairs,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/neoformat,/Users/andrewgu/.local/share/nvim/site/pack/packer/
Searching for "/Users/andrewgu/.config/nvim/lua/nvim-tree/config.lua"
Searching for "/etc/xdg/nvim/lua/nvim-tree/config.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/lua/nvim-tree/config.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/telescope.nvim/lua/nvim-tree/config.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/popup.nvim/lua/nvim-tree/config.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/plenary.nvim/lua/nvim-tree/config.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/packer.nvim/lua/nvim-tree/config.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/lua/nvim-tree/config.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-web-devicons/lua/nvim-tree/config.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-tree.lua/lua/nvim-tree/config.lua"
Searching for "lua/nvim-tree/utils.lua" in "/Users/andrewgu/.config/nvim,/etc/xdg/nvim,/Users/andrewgu/.local/share/nvim/site,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/telescope.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/popup.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/plenary.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/packer.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-web-devicons,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-tree.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-lspconfig,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-compe,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-base16.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-autopairs,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/neoformat,/Users/andrewgu/.local/share/nvim/site/pack/packer/s
Searching for "/Users/andrewgu/.config/nvim/lua/nvim-tree/utils.lua"
Searching for "/etc/xdg/nvim/lua/nvim-tree/utils.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/lua/nvim-tree/utils.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/telescope.nvim/lua/nvim-tree/utils.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/popup.nvim/lua/nvim-tree/utils.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/plenary.nvim/lua/nvim-tree/utils.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/packer.nvim/lua/nvim-tree/utils.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/lua/nvim-tree/utils.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-web-devicons/lua/nvim-tree/utils.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-tree.lua/lua/nvim-tree/utils.lua"
Searching for "lua/nvim-tree/view.lua" in "/Users/andrewgu/.config/nvim,/etc/xdg/nvim,/Users/andrewgu/.local/share/nvim/site,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/telescope.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/popup.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/plenary.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/packer.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-web-devicons,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-tree.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-lspconfig,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-compe,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-base16.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-autopairs,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/neoformat,/Users/andrewgu/.local/share/nvim/site/pack/packer/st
Searching for "/Users/andrewgu/.config/nvim/lua/nvim-tree/view.lua"
Searching for "/etc/xdg/nvim/lua/nvim-tree/view.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/lua/nvim-tree/view.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/telescope.nvim/lua/nvim-tree/view.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/popup.nvim/lua/nvim-tree/view.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/plenary.nvim/lua/nvim-tree/view.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/packer.nvim/lua/nvim-tree/view.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/lua/nvim-tree/view.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-web-devicons/lua/nvim-tree/view.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-tree.lua/lua/nvim-tree/view.lua"
Searching for "lua/nvim-tree/git.lua" in "/Users/andrewgu/.config/nvim,/etc/xdg/nvim,/Users/andrewgu/.local/share/nvim/site,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/telescope.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/popup.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/plenary.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/packer.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-web-devicons,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-tree.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-lspconfig,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-compe,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-base16.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-autopairs,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/neoformat,/Users/andrewgu/.local/share/nvim/site/pack/packer/sta
Searching for "/Users/andrewgu/.config/nvim/lua/nvim-tree/git.lua"
Searching for "/etc/xdg/nvim/lua/nvim-tree/git.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/lua/nvim-tree/git.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/telescope.nvim/lua/nvim-tree/git.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/popup.nvim/lua/nvim-tree/git.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/plenary.nvim/lua/nvim-tree/git.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/packer.nvim/lua/nvim-tree/git.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/lua/nvim-tree/git.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-web-devicons/lua/nvim-tree/git.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-tree.lua/lua/nvim-tree/git.lua"
Searching for "lua/nvim-tree/diagnostics.lua" in "/Users/andrewgu/.config/nvim,/etc/xdg/nvim,/Users/andrewgu/.local/share/nvim/site,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/telescope.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/popup.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/plenary.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/packer.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-web-devicons,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-tree.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-lspconfig,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-compe,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-base16.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-autopairs,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/neoformat,/Users/andrewgu/.local/share/nvim/site/pack/pa
Searching for "/Users/andrewgu/.config/nvim/lua/nvim-tree/diagnostics.lua"
Searching for "/etc/xdg/nvim/lua/nvim-tree/diagnostics.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/lua/nvim-tree/diagnostics.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/telescope.nvim/lua/nvim-tree/diagnostics.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/popup.nvim/lua/nvim-tree/diagnostics.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/plenary.nvim/lua/nvim-tree/diagnostics.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/packer.nvim/lua/nvim-tree/diagnostics.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/lua/nvim-tree/diagnostics.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-web-devicons/lua/nvim-tree/diagnostics.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-tree.lua/lua/nvim-tree/diagnostics.lua"
Searching for "lua/nvim-tree/populate.lua" in "/Users/andrewgu/.config/nvim,/etc/xdg/nvim,/Users/andrewgu/.local/share/nvim/site,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/telescope.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/popup.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/plenary.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/packer.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-web-devicons,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-tree.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-lspconfig,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-compe,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-base16.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-autopairs,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/neoformat,/Users/andrewgu/.local/share/nvim/site/pack/packe
Searching for "/Users/andrewgu/.config/nvim/lua/nvim-tree/populate.lua"
Searching for "/etc/xdg/nvim/lua/nvim-tree/populate.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/lua/nvim-tree/populate.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/telescope.nvim/lua/nvim-tree/populate.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/popup.nvim/lua/nvim-tree/populate.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/plenary.nvim/lua/nvim-tree/populate.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/packer.nvim/lua/nvim-tree/populate.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/lua/nvim-tree/populate.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-web-devicons/lua/nvim-tree/populate.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-tree.lua/lua/nvim-tree/populate.lua"
Searching for "lua/nvim-tree/events.lua" in "/Users/andrewgu/.config/nvim,/etc/xdg/nvim,/Users/andrewgu/.local/share/nvim/site,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/telescope.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/popup.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/plenary.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/packer.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-web-devicons,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-tree.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-lspconfig,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-compe,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-base16.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-autopairs,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/neoformat,/Users/andrewgu/.local/share/nvim/site/pack/packer/
Searching for "/Users/andrewgu/.config/nvim/lua/nvim-tree/events.lua"
Searching for "/etc/xdg/nvim/lua/nvim-tree/events.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/lua/nvim-tree/events.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/telescope.nvim/lua/nvim-tree/events.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/popup.nvim/lua/nvim-tree/events.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/plenary.nvim/lua/nvim-tree/events.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/packer.nvim/lua/nvim-tree/events.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/lua/nvim-tree/events.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-web-devicons/lua/nvim-tree/events.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-tree.lua/lua/nvim-tree/events.lua"
Searching for "lua/nvim-tree/colors.lua" in "/Users/andrewgu/.config/nvim,/etc/xdg/nvim,/Users/andrewgu/.local/share/nvim/site,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/telescope.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/popup.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/plenary.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/packer.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-web-devicons,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-tree.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-lspconfig,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-compe,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-base16.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-autopairs,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/neoformat,/Users/andrewgu/.local/share/nvim/site/pack/packer/
Searching for "/Users/andrewgu/.config/nvim/lua/nvim-tree/colors.lua"
Searching for "/etc/xdg/nvim/lua/nvim-tree/colors.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/lua/nvim-tree/colors.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/telescope.nvim/lua/nvim-tree/colors.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/popup.nvim/lua/nvim-tree/colors.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/plenary.nvim/lua/nvim-tree/colors.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/packer.nvim/lua/nvim-tree/colors.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/lua/nvim-tree/colors.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-web-devicons/lua/nvim-tree/colors.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-tree.lua/lua/nvim-tree/colors.lua"
Searching for "lua/nvim-tree/fs.lua" in "/Users/andrewgu/.config/nvim,/etc/xdg/nvim,/Users/andrewgu/.local/share/nvim/site,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/telescope.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/popup.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/plenary.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/packer.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-web-devicons,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-tree.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-lspconfig,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-compe,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-base16.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-autopairs,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/neoformat,/Users/andrewgu/.local/share/nvim/site/pack/packer/star
Searching for "/Users/andrewgu/.config/nvim/lua/nvim-tree/fs.lua"
Searching for "/etc/xdg/nvim/lua/nvim-tree/fs.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/lua/nvim-tree/fs.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/telescope.nvim/lua/nvim-tree/fs.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/popup.nvim/lua/nvim-tree/fs.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/plenary.nvim/lua/nvim-tree/fs.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/packer.nvim/lua/nvim-tree/fs.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/lua/nvim-tree/fs.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-web-devicons/lua/nvim-tree/fs.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-tree.lua/lua/nvim-tree/fs.lua"
Executing FileType Autocommands for "*"
autocommand call s:LoadIndent()

Executing: call s:LoadIndent()
calling function <SNR>5_LoadIndent()

line 1:     if exists("b:undo_indent")
line 2:       exe b:undo_indent
line 3:       unlet! b:undo_indent b:did_indent
line 4:     endif
line 5:     let s = expand("<amatch>")
line 6:     if s != ""
line 7:       if exists("b:did_indent")
line 8: ^Iunlet b:did_indent
line 9:       endif
line 10: 
line 11:       " When there is a dot it is used to separate filetype names.  Thus for
line 12:       " "aaa.bbb" load "indent/aaa.vim" and then "indent/bbb.vim".
line 13:       for name in split(s, '\.')
line 14:         exe 'runtime! indent/' . name . '.vim'
line 14: runtime! indent/NvimTree.vim
Searching for "indent/NvimTree.vim" in "/Users/andrewgu/.config/nvim,/etc/xdg/nvim,/Users/andrewgu/.local/share/nvim/site,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/telescope.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/popup.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/plenary.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/packer.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-web-devicons,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-tree.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-lspconfig,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-compe,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-base16.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-autopairs,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/neoformat,/Users/andrewgu/.local/share/nvim/site/pack/packer/start
Searching for "/Users/andrewgu/.config/nvim/indent/NvimTree.vim"
Searching for "/etc/xdg/nvim/indent/NvimTree.vim"
Searching for "/Users/andrewgu/.local/share/nvim/site/indent/NvimTree.vim"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/telescope.nvim/indent/NvimTree.vim"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/popup.nvim/indent/NvimTree.vim"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/plenary.nvim/indent/NvimTree.vim"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/packer.nvim/indent/NvimTree.vim"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/indent/NvimTree.vim"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-web-devicons/indent/NvimTree.vim"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-tree.lua/indent/NvimTree.vim"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-lspconfig/indent/NvimTree.vim"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-compe/indent/NvimTree.vim"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-base16.lua/indent/NvimTree.vim"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-autopairs/indent/NvimTree.vim"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/neoformat/indent/NvimTree.vim"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/lualine.nvim/indent/NvimTree.vim"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/indent-blankline.nvim/indent/NvimTree.vim"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/gitsigns.nvim/indent/NvimTree.vim"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/barbar.nvim/indent/NvimTree.vim"
Searching for "/usr/local/share/nvim/site/indent/NvimTree.vim"
Searching for "/usr/share/nvim/site/indent/NvimTree.vim"
Searching for "/usr/local/Cellar/neovim/0.5.0/share/nvim/runtime/indent/NvimTree.vim"
Searching for "/usr/local/Cellar/neovim/0.5.0/share/nvim/runtime/pack/dist/opt/matchit/indent/NvimTree.vim"
Searching for "/usr/local/Cellar/neovim/0.5.0/lib/nvim/indent/NvimTree.vim"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-compe/after/indent/NvimTree.vim"
Searching for "/usr/share/nvim/site/after/indent/NvimTree.vim"
Searching for "/usr/local/share/nvim/site/after/indent/NvimTree.vim"
Searching for "/Users/andrewgu/.local/share/nvim/site/after/indent/NvimTree.vim"
Searching for "/etc/xdg/nvim/after/indent/NvimTree.vim"
Searching for "/Users/andrewgu/.config/nvim/after/indent/NvimTree.vim"
not found in 'runtimepath': "indent/NvimTree.vim"
Searching for "pack/*/start/*/indent/NvimTree.vim" in "/Users/andrewgu/.config/nvim,/etc/xdg/nvim,/Users/andrewgu/.local/share/nvim/site,/usr/local/share/nvim/site,/usr/share/nvim/site,/usr/local/Cellar/neovim/0.5.0/share/nvim/runtime,/usr/local/Cellar/neovim/0.5.0/lib/nvim,/usr/share/nvim/site/after,/usr/local/share/nvim/site/after,/Users/andrewgu/.local/share/nvim/site/after,/etc/xdg/nvim/after,/Users/andrewgu/.config/nvim/after"
Searching for "/Users/andrewgu/.config/nvim/pack/*/start/*/indent/NvimTree.vim"
Searching for "/etc/xdg/nvim/pack/*/start/*/indent/NvimTree.vim"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/*/start/*/indent/NvimTree.vim"
Searching for "/usr/local/share/nvim/site/pack/*/start/*/indent/NvimTree.vim"
Searching for "/usr/share/nvim/site/pack/*/start/*/indent/NvimTree.vim"
Searching for "/usr/local/Cellar/neovim/0.5.0/share/nvim/runtime/pack/*/start/*/indent/NvimTree.vim"
Searching for "/usr/local/Cellar/neovim/0.5.0/lib/nvim/pack/*/start/*/indent/NvimTree.vim"
Searching for "/usr/share/nvim/site/after/pack/*/start/*/indent/NvimTree.vim"
Searching for "/usr/local/share/nvim/site/after/pack/*/start/*/indent/NvimTree.vim"
Searching for "/Users/andrewgu/.local/share/nvim/site/after/pack/*/start/*/indent/NvimTree.vim"
Searching for "/etc/xdg/nvim/after/pack/*/start/*/indent/NvimTree.vim"
Searching for "/Users/andrewgu/.config/nvim/after/pack/*/start/*/indent/NvimTree.vim"
not found in 'packpath': "pack/*/start/*/indent/NvimTree.vim"
Searching for "start/*/indent/NvimTree.vim" in "/Users/andrewgu/.config/nvim,/etc/xdg/nvim,/Users/andrewgu/.local/share/nvim/site,/usr/local/share/nvim/site,/usr/share/nvim/site,/usr/local/Cellar/neovim/0.5.0/share/nvim/runtime,/usr/local/Cellar/neovim/0.5.0/lib/nvim,/usr/share/nvim/site/after,/usr/local/share/nvim/site/after,/Users/andrewgu/.local/share/nvim/site/after,/etc/xdg/nvim/after,/Users/andrewgu/.config/nvim/after"
Searching for "/Users/andrewgu/.config/nvim/start/*/indent/NvimTree.vim"
Searching for "/etc/xdg/nvim/start/*/indent/NvimTree.vim"
Searching for "/Users/andrewgu/.local/share/nvim/site/start/*/indent/NvimTree.vim"
Searching for "/usr/local/share/nvim/site/start/*/indent/NvimTree.vim"
Searching for "/usr/share/nvim/site/start/*/indent/NvimTree.vim"
Searching for "/usr/local/Cellar/neovim/0.5.0/share/nvim/runtime/start/*/indent/NvimTree.vim"
Searching for "/usr/local/Cellar/neovim/0.5.0/lib/nvim/start/*/indent/NvimTree.vim"
Searching for "/usr/share/nvim/site/after/start/*/indent/NvimTree.vim"
Searching for "/usr/local/share/nvim/site/after/start/*/indent/NvimTree.vim"
Searching for "/Users/andrewgu/.local/share/nvim/site/after/start/*/indent/NvimTree.vim"
Searching for "/etc/xdg/nvim/after/start/*/indent/NvimTree.vim"
Searching for "/Users/andrewgu/.config/nvim/after/start/*/indent/NvimTree.vim"
not found in 'packpath': "start/*/indent/NvimTree.vim"
line 15:         exe 'runtime! indent/' . name . '.lua'
line 15: runtime! indent/NvimTree.lua
Searching for "indent/NvimTree.lua" in "/Users/andrewgu/.config/nvim,/etc/xdg/nvim,/Users/andrewgu/.local/share/nvim/site,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/telescope.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/popup.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/plenary.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/packer.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-web-devicons,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-tree.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-lspconfig,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-compe,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-base16.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-autopairs,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/neoformat,/Users/andrewgu/.local/share/nvim/site/pack/packer/start
Searching for "/Users/andrewgu/.config/nvim/indent/NvimTree.lua"
Searching for "/etc/xdg/nvim/indent/NvimTree.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/indent/NvimTree.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/telescope.nvim/indent/NvimTree.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/popup.nvim/indent/NvimTree.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/plenary.nvim/indent/NvimTree.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/packer.nvim/indent/NvimTree.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/indent/NvimTree.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-web-devicons/indent/NvimTree.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-tree.lua/indent/NvimTree.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-lspconfig/indent/NvimTree.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-compe/indent/NvimTree.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-base16.lua/indent/NvimTree.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-autopairs/indent/NvimTree.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/neoformat/indent/NvimTree.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/lualine.nvim/indent/NvimTree.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/indent-blankline.nvim/indent/NvimTree.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/gitsigns.nvim/indent/NvimTree.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/barbar.nvim/indent/NvimTree.lua"
Searching for "/usr/local/share/nvim/site/indent/NvimTree.lua"
Searching for "/usr/share/nvim/site/indent/NvimTree.lua"
Searching for "/usr/local/Cellar/neovim/0.5.0/share/nvim/runtime/indent/NvimTree.lua"
Searching for "/usr/local/Cellar/neovim/0.5.0/share/nvim/runtime/pack/dist/opt/matchit/indent/NvimTree.lua"
Searching for "/usr/local/Cellar/neovim/0.5.0/lib/nvim/indent/NvimTree.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-compe/after/indent/NvimTree.lua"
Searching for "/usr/share/nvim/site/after/indent/NvimTree.lua"
Searching for "/usr/local/share/nvim/site/after/indent/NvimTree.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/after/indent/NvimTree.lua"
Searching for "/etc/xdg/nvim/after/indent/NvimTree.lua"
Searching for "/Users/andrewgu/.config/nvim/after/indent/NvimTree.lua"
not found in 'runtimepath': "indent/NvimTree.lua"
Searching for "pack/*/start/*/indent/NvimTree.lua" in "/Users/andrewgu/.config/nvim,/etc/xdg/nvim,/Users/andrewgu/.local/share/nvim/site,/usr/local/share/nvim/site,/usr/share/nvim/site,/usr/local/Cellar/neovim/0.5.0/share/nvim/runtime,/usr/local/Cellar/neovim/0.5.0/lib/nvim,/usr/share/nvim/site/after,/usr/local/share/nvim/site/after,/Users/andrewgu/.local/share/nvim/site/after,/etc/xdg/nvim/after,/Users/andrewgu/.config/nvim/after"
Searching for "/Users/andrewgu/.config/nvim/pack/*/start/*/indent/NvimTree.lua"
Searching for "/etc/xdg/nvim/pack/*/start/*/indent/NvimTree.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/*/start/*/indent/NvimTree.lua"
Searching for "/usr/local/share/nvim/site/pack/*/start/*/indent/NvimTree.lua"
Searching for "/usr/share/nvim/site/pack/*/start/*/indent/NvimTree.lua"
Searching for "/usr/local/Cellar/neovim/0.5.0/share/nvim/runtime/pack/*/start/*/indent/NvimTree.lua"
Searching for "/usr/local/Cellar/neovim/0.5.0/lib/nvim/pack/*/start/*/indent/NvimTree.lua"
Searching for "/usr/share/nvim/site/after/pack/*/start/*/indent/NvimTree.lua"
Searching for "/usr/local/share/nvim/site/after/pack/*/start/*/indent/NvimTree.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/after/pack/*/start/*/indent/NvimTree.lua"
Searching for "/etc/xdg/nvim/after/pack/*/start/*/indent/NvimTree.lua"
Searching for "/Users/andrewgu/.config/nvim/after/pack/*/start/*/indent/NvimTree.lua"
not found in 'packpath': "pack/*/start/*/indent/NvimTree.lua"
Searching for "start/*/indent/NvimTree.lua" in "/Users/andrewgu/.config/nvim,/etc/xdg/nvim,/Users/andrewgu/.local/share/nvim/site,/usr/local/share/nvim/site,/usr/share/nvim/site,/usr/local/Cellar/neovim/0.5.0/share/nvim/runtime,/usr/local/Cellar/neovim/0.5.0/lib/nvim,/usr/share/nvim/site/after,/usr/local/share/nvim/site/after,/Users/andrewgu/.local/share/nvim/site/after,/etc/xdg/nvim/after,/Users/andrewgu/.config/nvim/after"
Searching for "/Users/andrewgu/.config/nvim/start/*/indent/NvimTree.lua"
Searching for "/etc/xdg/nvim/start/*/indent/NvimTree.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/start/*/indent/NvimTree.lua"
Searching for "/usr/local/share/nvim/site/start/*/indent/NvimTree.lua"
Searching for "/usr/share/nvim/site/start/*/indent/NvimTree.lua"
Searching for "/usr/local/Cellar/neovim/0.5.0/share/nvim/runtime/start/*/indent/NvimTree.lua"
Searching for "/usr/local/Cellar/neovim/0.5.0/lib/nvim/start/*/indent/NvimTree.lua"
Searching for "/usr/share/nvim/site/after/start/*/indent/NvimTree.lua"
Searching for "/usr/local/share/nvim/site/after/start/*/indent/NvimTree.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/after/start/*/indent/NvimTree.lua"
Searching for "/etc/xdg/nvim/after/start/*/indent/NvimTree.lua"
Searching for "/Users/andrewgu/.config/nvim/after/start/*/indent/NvimTree.lua"
not found in 'packpath': "start/*/indent/NvimTree.lua"
line 16:       endfor
line 13:       for name in split(s, '\.')
line 14:         exe 'runtime! indent/' . name . '.vim'
line 15:         exe 'runtime! indent/' . name . '.lua'
line 16:       endfor
line 17:     endif
function <SNR>5_LoadIndent returning #0

continuing in FileType Autocommands for "*"

Executing FileType Autocommands for "*"
autocommand call s:LoadFTPlugin()

Executing: call s:LoadFTPlugin()
calling function <SNR>6_LoadFTPlugin()

line 1:     if exists("b:undo_ftplugin")
line 2:       exe b:undo_ftplugin
line 3:       unlet! b:undo_ftplugin b:did_ftplugin
line 4:     endif
line 5: 
line 6:     let s = expand("<amatch>")
line 7:     if s != ""
line 8:       if &cpo =~# "S" && exists("b:did_ftplugin")
line 9: ^I" In compatible mode options are reset to the global values, need to
line 10: ^I" set the local values also when a plugin was already used.
line 11: ^Iunlet b:did_ftplugin
line 12:       endif
line 13: 
line 14:       " When there is a dot it is used to separate filetype names.  Thus for
line 15:       " "aaa.bbb" load "aaa" and then "bbb".
line 16:       for name in split(s, '\.')
line 17:         exe 'runtime! ftplugin/' . name . '.vim ftplugin/' . name . '_*.vim ftplugin/' . name . '/*.vim'
line 17: runtime! ftplugin/NvimTree.vim ftplugin/NvimTree_*.vim ftplugin/NvimTree/*.vim
Searching for "ftplugin/NvimTree.vim ftplugin/NvimTree_*.vim ftplugin/NvimTree/*.vim" in "/Users/andrewgu/.config/nvim,/etc/xdg/nvim,/Users/andrewgu/.local/share/nvim/site,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/telescope.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/popup.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/plenary.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/packer.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-web-devicons,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-tree.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-lspconfig,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-compe,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-base16.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-autopairs,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/neoformat,/Users
Searching for "/Users/andrewgu/.config/nvim/ftplugin/NvimTree.vim"
Searching for "/Users/andrewgu/.config/nvim/ftplugin/NvimTree_*.vim"
Searching for "/Users/andrewgu/.config/nvim/ftplugin/NvimTree/*.vim"
Searching for "/etc/xdg/nvim/ftplugin/NvimTree.vim"
Searching for "/etc/xdg/nvim/ftplugin/NvimTree_*.vim"
Searching for "/etc/xdg/nvim/ftplugin/NvimTree/*.vim"
Searching for "/Users/andrewgu/.local/share/nvim/site/ftplugin/NvimTree.vim"
Searching for "/Users/andrewgu/.local/share/nvim/site/ftplugin/NvimTree_*.vim"
Searching for "/Users/andrewgu/.local/share/nvim/site/ftplugin/NvimTree/*.vim"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/telescope.nvim/ftplugin/NvimTree.vim"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/telescope.nvim/ftplugin/NvimTree_*.vim"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/telescope.nvim/ftplugin/NvimTree/*.vim"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/popup.nvim/ftplugin/NvimTree.vim"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/popup.nvim/ftplugin/NvimTree_*.vim"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/popup.nvim/ftplugin/NvimTree/*.vim"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/plenary.nvim/ftplugin/NvimTree.vim"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/plenary.nvim/ftplugin/NvimTree_*.vim"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/plenary.nvim/ftplugin/NvimTree/*.vim"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/packer.nvim/ftplugin/NvimTree.vim"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/packer.nvim/ftplugin/NvimTree_*.vim"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/packer.nvim/ftplugin/NvimTree/*.vim"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/ftplugin/NvimTree.vim"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/ftplugin/NvimTree_*.vim"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/ftplugin/NvimTree/*.vim"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-web-devicons/ftplugin/NvimTree.vim"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-web-devicons/ftplugin/NvimTree_*.vim"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-web-devicons/ftplugin/NvimTree/*.vim"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-tree.lua/ftplugin/NvimTree.vim"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-tree.lua/ftplugin/NvimTree_*.vim"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-tree.lua/ftplugin/NvimTree/*.vim"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-lspconfig/ftplugin/NvimTree.vim"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-lspconfig/ftplugin/NvimTree_*.vim"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-lspconfig/ftplugin/NvimTree/*.vim"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-compe/ftplugin/NvimTree.vim"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-compe/ftplugin/NvimTree_*.vim"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-compe/ftplugin/NvimTree/*.vim"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-base16.lua/ftplugin/NvimTree.vim"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-base16.lua/ftplugin/NvimTree_*.vim"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-base16.lua/ftplugin/NvimTree/*.vim"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-autopairs/ftplugin/NvimTree.vim"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-autopairs/ftplugin/NvimTree_*.vim"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-autopairs/ftplugin/NvimTree/*.vim"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/neoformat/ftplugin/NvimTree.vim"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/neoformat/ftplugin/NvimTree_*.vim"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/neoformat/ftplugin/NvimTree/*.vim"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/lualine.nvim/ftplugin/NvimTree.vim"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/lualine.nvim/ftplugin/NvimTree_*.vim"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/lualine.nvim/ftplugin/NvimTree/*.vim"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/indent-blankline.nvim/ftplugin/NvimTree.vim"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/indent-blankline.nvim/ftplugin/NvimTree_*.vim"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/indent-blankline.nvim/ftplugin/NvimTree/*.vim"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/gitsigns.nvim/ftplugin/NvimTree.vim"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/gitsigns.nvim/ftplugin/NvimTree_*.vim"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/gitsigns.nvim/ftplugin/NvimTree/*.vim"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/barbar.nvim/ftplugin/NvimTree.vim"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/barbar.nvim/ftplugin/NvimTree_*.vim"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/barbar.nvim/ftplugin/NvimTree/*.vim"
Searching for "/usr/local/share/nvim/site/ftplugin/NvimTree.vim"
Searching for "/usr/local/share/nvim/site/ftplugin/NvimTree_*.vim"
Searching for "/usr/local/share/nvim/site/ftplugin/NvimTree/*.vim"
Searching for "/usr/share/nvim/site/ftplugin/NvimTree.vim"
Searching for "/usr/share/nvim/site/ftplugin/NvimTree_*.vim"
Searching for "/usr/share/nvim/site/ftplugin/NvimTree/*.vim"
Searching for "/usr/local/Cellar/neovim/0.5.0/share/nvim/runtime/ftplugin/NvimTree.vim"
Searching for "/usr/local/Cellar/neovim/0.5.0/share/nvim/runtime/ftplugin/NvimTree_*.vim"
Searching for "/usr/local/Cellar/neovim/0.5.0/share/nvim/runtime/ftplugin/NvimTree/*.vim"
Searching for "/usr/local/Cellar/neovim/0.5.0/share/nvim/runtime/pack/dist/opt/matchit/ftplugin/NvimTree.vim"
Searching for "/usr/local/Cellar/neovim/0.5.0/share/nvim/runtime/pack/dist/opt/matchit/ftplugin/NvimTree_*.vim"
Searching for "/usr/local/Cellar/neovim/0.5.0/share/nvim/runtime/pack/dist/opt/matchit/ftplugin/NvimTree/*.vim"
Searching for "/usr/local/Cellar/neovim/0.5.0/lib/nvim/ftplugin/NvimTree.vim"
Searching for "/usr/local/Cellar/neovim/0.5.0/lib/nvim/ftplugin/NvimTree_*.vim"
Searching for "/usr/local/Cellar/neovim/0.5.0/lib/nvim/ftplugin/NvimTree/*.vim"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-compe/after/ftplugin/NvimTree.vim"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-compe/after/ftplugin/NvimTree_*.vim"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-compe/after/ftplugin/NvimTree/*.vim"
Searching for "/usr/share/nvim/site/after/ftplugin/NvimTree.vim"
Searching for "/usr/share/nvim/site/after/ftplugin/NvimTree_*.vim"
Searching for "/usr/share/nvim/site/after/ftplugin/NvimTree/*.vim"
Searching for "/usr/local/share/nvim/site/after/ftplugin/NvimTree.vim"
Searching for "/usr/local/share/nvim/site/after/ftplugin/NvimTree_*.vim"
Searching for "/usr/local/share/nvim/site/after/ftplugin/NvimTree/*.vim"
Searching for "/Users/andrewgu/.local/share/nvim/site/after/ftplugin/NvimTree.vim"
Searching for "/Users/andrewgu/.local/share/nvim/site/after/ftplugin/NvimTree_*.vim"
Searching for "/Users/andrewgu/.local/share/nvim/site/after/ftplugin/NvimTree/*.vim"
Searching for "/etc/xdg/nvim/after/ftplugin/NvimTree.vim"
Searching for "/etc/xdg/nvim/after/ftplugin/NvimTree_*.vim"
Searching for "/etc/xdg/nvim/after/ftplugin/NvimTree/*.vim"
Searching for "/Users/andrewgu/.config/nvim/after/ftplugin/NvimTree.vim"
Searching for "/Users/andrewgu/.config/nvim/after/ftplugin/NvimTree_*.vim"
Searching for "/Users/andrewgu/.config/nvim/after/ftplugin/NvimTree/*.vim"
not found in 'runtimepath': "ftplugin/NvimTree.vim ftplugin/NvimTree_*.vim ftplugin/NvimTree/*.vim"
Searching for "pack/*/start/*/ftplugin/NvimTree.vim ftplugin/NvimTree_*.vim ftplugin/NvimTree/*.vim" in "/Users/andrewgu/.config/nvim,/etc/xdg/nvim,/Users/andrewgu/.local/share/nvim/site,/usr/local/share/nvim/site,/usr/share/nvim/site,/usr/local/Cellar/neovim/0.5.0/share/nvim/runtime,/usr/local/Cellar/neovim/0.5.0/lib/nvim,/usr/share/nvim/site/after,/usr/local/share/nvim/site/after,/Users/andrewgu/.local/share/nvim/site/after,/etc/xdg/nvim/after,/Users/andrewgu/.config/nvim/after"
Searching for "/Users/andrewgu/.config/nvim/pack/*/start/*/ftplugin/NvimTree.vim"
Searching for "/Users/andrewgu/.config/nvim/ftplugin/NvimTree_*.vim"
Searching for "/Users/andrewgu/.config/nvim/ftplugin/NvimTree/*.vim"
Searching for "/etc/xdg/nvim/pack/*/start/*/ftplugin/NvimTree.vim"
Searching for "/etc/xdg/nvim/ftplugin/NvimTree_*.vim"
Searching for "/etc/xdg/nvim/ftplugin/NvimTree/*.vim"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/*/start/*/ftplugin/NvimTree.vim"
Searching for "/Users/andrewgu/.local/share/nvim/site/ftplugin/NvimTree_*.vim"
Searching for "/Users/andrewgu/.local/share/nvim/site/ftplugin/NvimTree/*.vim"
Searching for "/usr/local/share/nvim/site/pack/*/start/*/ftplugin/NvimTree.vim"
Searching for "/usr/local/share/nvim/site/ftplugin/NvimTree_*.vim"
Searching for "/usr/local/share/nvim/site/ftplugin/NvimTree/*.vim"
Searching for "/usr/share/nvim/site/pack/*/start/*/ftplugin/NvimTree.vim"
Searching for "/usr/share/nvim/site/ftplugin/NvimTree_*.vim"
Searching for "/usr/share/nvim/site/ftplugin/NvimTree/*.vim"
Searching for "/usr/local/Cellar/neovim/0.5.0/share/nvim/runtime/pack/*/start/*/ftplugin/NvimTree.vim"
Searching for "/usr/local/Cellar/neovim/0.5.0/share/nvim/runtime/ftplugin/NvimTree_*.vim"
Searching for "/usr/local/Cellar/neovim/0.5.0/share/nvim/runtime/ftplugin/NvimTree/*.vim"
Searching for "/usr/local/Cellar/neovim/0.5.0/lib/nvim/pack/*/start/*/ftplugin/NvimTree.vim"
Searching for "/usr/local/Cellar/neovim/0.5.0/lib/nvim/ftplugin/NvimTree_*.vim"
Searching for "/usr/local/Cellar/neovim/0.5.0/lib/nvim/ftplugin/NvimTree/*.vim"
Searching for "/usr/share/nvim/site/after/pack/*/start/*/ftplugin/NvimTree.vim"
Searching for "/usr/share/nvim/site/after/ftplugin/NvimTree_*.vim"
Searching for "/usr/share/nvim/site/after/ftplugin/NvimTree/*.vim"
Searching for "/usr/local/share/nvim/site/after/pack/*/start/*/ftplugin/NvimTree.vim"
Searching for "/usr/local/share/nvim/site/after/ftplugin/NvimTree_*.vim"
Searching for "/usr/local/share/nvim/site/after/ftplugin/NvimTree/*.vim"
Searching for "/Users/andrewgu/.local/share/nvim/site/after/pack/*/start/*/ftplugin/NvimTree.vim"
Searching for "/Users/andrewgu/.local/share/nvim/site/after/ftplugin/NvimTree_*.vim"
Searching for "/Users/andrewgu/.local/share/nvim/site/after/ftplugin/NvimTree/*.vim"
Searching for "/etc/xdg/nvim/after/pack/*/start/*/ftplugin/NvimTree.vim"
Searching for "/etc/xdg/nvim/after/ftplugin/NvimTree_*.vim"
Searching for "/etc/xdg/nvim/after/ftplugin/NvimTree/*.vim"
Searching for "/Users/andrewgu/.config/nvim/after/pack/*/start/*/ftplugin/NvimTree.vim"
Searching for "/Users/andrewgu/.config/nvim/after/ftplugin/NvimTree_*.vim"
Searching for "/Users/andrewgu/.config/nvim/after/ftplugin/NvimTree/*.vim"
not found in 'packpath': "pack/*/start/*/ftplugin/NvimTree.vim ftplugin/NvimTree_*.vim ftplugin/NvimTree/*.vim"
Searching for "start/*/ftplugin/NvimTree.vim ftplugin/NvimTree_*.vim ftplugin/NvimTree/*.vim" in "/Users/andrewgu/.config/nvim,/etc/xdg/nvim,/Users/andrewgu/.local/share/nvim/site,/usr/local/share/nvim/site,/usr/share/nvim/site,/usr/local/Cellar/neovim/0.5.0/share/nvim/runtime,/usr/local/Cellar/neovim/0.5.0/lib/nvim,/usr/share/nvim/site/after,/usr/local/share/nvim/site/after,/Users/andrewgu/.local/share/nvim/site/after,/etc/xdg/nvim/after,/Users/andrewgu/.config/nvim/after"
Searching for "/Users/andrewgu/.config/nvim/start/*/ftplugin/NvimTree.vim"
Searching for "/Users/andrewgu/.config/nvim/ftplugin/NvimTree_*.vim"
Searching for "/Users/andrewgu/.config/nvim/ftplugin/NvimTree/*.vim"
Searching for "/etc/xdg/nvim/start/*/ftplugin/NvimTree.vim"
Searching for "/etc/xdg/nvim/ftplugin/NvimTree_*.vim"
Searching for "/etc/xdg/nvim/ftplugin/NvimTree/*.vim"
Searching for "/Users/andrewgu/.local/share/nvim/site/start/*/ftplugin/NvimTree.vim"
Searching for "/Users/andrewgu/.local/share/nvim/site/ftplugin/NvimTree_*.vim"
Searching for "/Users/andrewgu/.local/share/nvim/site/ftplugin/NvimTree/*.vim"
Searching for "/usr/local/share/nvim/site/start/*/ftplugin/NvimTree.vim"
Searching for "/usr/local/share/nvim/site/ftplugin/NvimTree_*.vim"
Searching for "/usr/local/share/nvim/site/ftplugin/NvimTree/*.vim"
Searching for "/usr/share/nvim/site/start/*/ftplugin/NvimTree.vim"
Searching for "/usr/share/nvim/site/ftplugin/NvimTree_*.vim"
Searching for "/usr/share/nvim/site/ftplugin/NvimTree/*.vim"
Searching for "/usr/local/Cellar/neovim/0.5.0/share/nvim/runtime/start/*/ftplugin/NvimTree.vim"
Searching for "/usr/local/Cellar/neovim/0.5.0/share/nvim/runtime/ftplugin/NvimTree_*.vim"
Searching for "/usr/local/Cellar/neovim/0.5.0/share/nvim/runtime/ftplugin/NvimTree/*.vim"
Searching for "/usr/local/Cellar/neovim/0.5.0/lib/nvim/start/*/ftplugin/NvimTree.vim"
Searching for "/usr/local/Cellar/neovim/0.5.0/lib/nvim/ftplugin/NvimTree_*.vim"
Searching for "/usr/local/Cellar/neovim/0.5.0/lib/nvim/ftplugin/NvimTree/*.vim"
Searching for "/usr/share/nvim/site/after/start/*/ftplugin/NvimTree.vim"
Searching for "/usr/share/nvim/site/after/ftplugin/NvimTree_*.vim"
Searching for "/usr/share/nvim/site/after/ftplugin/NvimTree/*.vim"
Searching for "/usr/local/share/nvim/site/after/start/*/ftplugin/NvimTree.vim"
Searching for "/usr/local/share/nvim/site/after/ftplugin/NvimTree_*.vim"
Searching for "/usr/local/share/nvim/site/after/ftplugin/NvimTree/*.vim"
Searching for "/Users/andrewgu/.local/share/nvim/site/after/start/*/ftplugin/NvimTree.vim"
Searching for "/Users/andrewgu/.local/share/nvim/site/after/ftplugin/NvimTree_*.vim"
Searching for "/Users/andrewgu/.local/share/nvim/site/after/ftplugin/NvimTree/*.vim"
Searching for "/etc/xdg/nvim/after/start/*/ftplugin/NvimTree.vim"
Searching for "/etc/xdg/nvim/after/ftplugin/NvimTree_*.vim"
Searching for "/etc/xdg/nvim/after/ftplugin/NvimTree/*.vim"
Searching for "/Users/andrewgu/.config/nvim/after/start/*/ftplugin/NvimTree.vim"
Searching for "/Users/andrewgu/.config/nvim/after/ftplugin/NvimTree_*.vim"
Searching for "/Users/andrewgu/.config/nvim/after/ftplugin/NvimTree/*.vim"
not found in 'packpath': "start/*/ftplugin/NvimTree.vim ftplugin/NvimTree_*.vim ftplugin/NvimTree/*.vim"
line 18:         " Load lua ftplugins
line 19:         exe printf('runtime! ftplugin/%s.lua ftplugin/%s_*.lua ftplugin/%s/*.lua', name, name, name)
line 19: runtime! ftplugin/NvimTree.lua ftplugin/NvimTree_*.lua ftplugin/NvimTree/*.lua
Searching for "ftplugin/NvimTree.lua ftplugin/NvimTree_*.lua ftplugin/NvimTree/*.lua" in "/Users/andrewgu/.config/nvim,/etc/xdg/nvim,/Users/andrewgu/.local/share/nvim/site,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/telescope.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/popup.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/plenary.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/packer.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-web-devicons,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-tree.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-lspconfig,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-compe,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-base16.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-autopairs,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/neoformat,/Users
Searching for "/Users/andrewgu/.config/nvim/ftplugin/NvimTree.lua"
Searching for "/Users/andrewgu/.config/nvim/ftplugin/NvimTree_*.lua"
Searching for "/Users/andrewgu/.config/nvim/ftplugin/NvimTree/*.lua"
Searching for "/etc/xdg/nvim/ftplugin/NvimTree.lua"
Searching for "/etc/xdg/nvim/ftplugin/NvimTree_*.lua"
Searching for "/etc/xdg/nvim/ftplugin/NvimTree/*.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/ftplugin/NvimTree.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/ftplugin/NvimTree_*.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/ftplugin/NvimTree/*.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/telescope.nvim/ftplugin/NvimTree.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/telescope.nvim/ftplugin/NvimTree_*.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/telescope.nvim/ftplugin/NvimTree/*.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/popup.nvim/ftplugin/NvimTree.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/popup.nvim/ftplugin/NvimTree_*.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/popup.nvim/ftplugin/NvimTree/*.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/plenary.nvim/ftplugin/NvimTree.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/plenary.nvim/ftplugin/NvimTree_*.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/plenary.nvim/ftplugin/NvimTree/*.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/packer.nvim/ftplugin/NvimTree.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/packer.nvim/ftplugin/NvimTree_*.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/packer.nvim/ftplugin/NvimTree/*.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/ftplugin/NvimTree.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/ftplugin/NvimTree_*.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/ftplugin/NvimTree/*.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-web-devicons/ftplugin/NvimTree.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-web-devicons/ftplugin/NvimTree_*.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-web-devicons/ftplugin/NvimTree/*.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-tree.lua/ftplugin/NvimTree.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-tree.lua/ftplugin/NvimTree_*.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-tree.lua/ftplugin/NvimTree/*.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-lspconfig/ftplugin/NvimTree.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-lspconfig/ftplugin/NvimTree_*.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-lspconfig/ftplugin/NvimTree/*.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-compe/ftplugin/NvimTree.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-compe/ftplugin/NvimTree_*.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-compe/ftplugin/NvimTree/*.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-base16.lua/ftplugin/NvimTree.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-base16.lua/ftplugin/NvimTree_*.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-base16.lua/ftplugin/NvimTree/*.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-autopairs/ftplugin/NvimTree.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-autopairs/ftplugin/NvimTree_*.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-autopairs/ftplugin/NvimTree/*.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/neoformat/ftplugin/NvimTree.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/neoformat/ftplugin/NvimTree_*.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/neoformat/ftplugin/NvimTree/*.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/lualine.nvim/ftplugin/NvimTree.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/lualine.nvim/ftplugin/NvimTree_*.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/lualine.nvim/ftplugin/NvimTree/*.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/indent-blankline.nvim/ftplugin/NvimTree.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/indent-blankline.nvim/ftplugin/NvimTree_*.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/indent-blankline.nvim/ftplugin/NvimTree/*.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/gitsigns.nvim/ftplugin/NvimTree.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/gitsigns.nvim/ftplugin/NvimTree_*.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/gitsigns.nvim/ftplugin/NvimTree/*.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/barbar.nvim/ftplugin/NvimTree.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/barbar.nvim/ftplugin/NvimTree_*.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/barbar.nvim/ftplugin/NvimTree/*.lua"
Searching for "/usr/local/share/nvim/site/ftplugin/NvimTree.lua"
Searching for "/usr/local/share/nvim/site/ftplugin/NvimTree_*.lua"
Searching for "/usr/local/share/nvim/site/ftplugin/NvimTree/*.lua"
Searching for "/usr/share/nvim/site/ftplugin/NvimTree.lua"
Searching for "/usr/share/nvim/site/ftplugin/NvimTree_*.lua"
Searching for "/usr/share/nvim/site/ftplugin/NvimTree/*.lua"
Searching for "/usr/local/Cellar/neovim/0.5.0/share/nvim/runtime/ftplugin/NvimTree.lua"
Searching for "/usr/local/Cellar/neovim/0.5.0/share/nvim/runtime/ftplugin/NvimTree_*.lua"
Searching for "/usr/local/Cellar/neovim/0.5.0/share/nvim/runtime/ftplugin/NvimTree/*.lua"
Searching for "/usr/local/Cellar/neovim/0.5.0/share/nvim/runtime/pack/dist/opt/matchit/ftplugin/NvimTree.lua"
Searching for "/usr/local/Cellar/neovim/0.5.0/share/nvim/runtime/pack/dist/opt/matchit/ftplugin/NvimTree_*.lua"
Searching for "/usr/local/Cellar/neovim/0.5.0/share/nvim/runtime/pack/dist/opt/matchit/ftplugin/NvimTree/*.lua"
Searching for "/usr/local/Cellar/neovim/0.5.0/lib/nvim/ftplugin/NvimTree.lua"
Searching for "/usr/local/Cellar/neovim/0.5.0/lib/nvim/ftplugin/NvimTree_*.lua"
Searching for "/usr/local/Cellar/neovim/0.5.0/lib/nvim/ftplugin/NvimTree/*.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-compe/after/ftplugin/NvimTree.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-compe/after/ftplugin/NvimTree_*.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-compe/after/ftplugin/NvimTree/*.lua"
Searching for "/usr/share/nvim/site/after/ftplugin/NvimTree.lua"
Searching for "/usr/share/nvim/site/after/ftplugin/NvimTree_*.lua"
Searching for "/usr/share/nvim/site/after/ftplugin/NvimTree/*.lua"
Searching for "/usr/local/share/nvim/site/after/ftplugin/NvimTree.lua"
Searching for "/usr/local/share/nvim/site/after/ftplugin/NvimTree_*.lua"
Searching for "/usr/local/share/nvim/site/after/ftplugin/NvimTree/*.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/after/ftplugin/NvimTree.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/after/ftplugin/NvimTree_*.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/after/ftplugin/NvimTree/*.lua"
Searching for "/etc/xdg/nvim/after/ftplugin/NvimTree.lua"
Searching for "/etc/xdg/nvim/after/ftplugin/NvimTree_*.lua"
Searching for "/etc/xdg/nvim/after/ftplugin/NvimTree/*.lua"
Searching for "/Users/andrewgu/.config/nvim/after/ftplugin/NvimTree.lua"
Searching for "/Users/andrewgu/.config/nvim/after/ftplugin/NvimTree_*.lua"
Searching for "/Users/andrewgu/.config/nvim/after/ftplugin/NvimTree/*.lua"
not found in 'runtimepath': "ftplugin/NvimTree.lua ftplugin/NvimTree_*.lua ftplugin/NvimTree/*.lua"
Searching for "pack/*/start/*/ftplugin/NvimTree.lua ftplugin/NvimTree_*.lua ftplugin/NvimTree/*.lua" in "/Users/andrewgu/.config/nvim,/etc/xdg/nvim,/Users/andrewgu/.local/share/nvim/site,/usr/local/share/nvim/site,/usr/share/nvim/site,/usr/local/Cellar/neovim/0.5.0/share/nvim/runtime,/usr/local/Cellar/neovim/0.5.0/lib/nvim,/usr/share/nvim/site/after,/usr/local/share/nvim/site/after,/Users/andrewgu/.local/share/nvim/site/after,/etc/xdg/nvim/after,/Users/andrewgu/.config/nvim/after"
Searching for "/Users/andrewgu/.config/nvim/pack/*/start/*/ftplugin/NvimTree.lua"
Searching for "/Users/andrewgu/.config/nvim/ftplugin/NvimTree_*.lua"
Searching for "/Users/andrewgu/.config/nvim/ftplugin/NvimTree/*.lua"
Searching for "/etc/xdg/nvim/pack/*/start/*/ftplugin/NvimTree.lua"
Searching for "/etc/xdg/nvim/ftplugin/NvimTree_*.lua"
Searching for "/etc/xdg/nvim/ftplugin/NvimTree/*.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/*/start/*/ftplugin/NvimTree.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/ftplugin/NvimTree_*.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/ftplugin/NvimTree/*.lua"
Searching for "/usr/local/share/nvim/site/pack/*/start/*/ftplugin/NvimTree.lua"
Searching for "/usr/local/share/nvim/site/ftplugin/NvimTree_*.lua"
Searching for "/usr/local/share/nvim/site/ftplugin/NvimTree/*.lua"
Searching for "/usr/share/nvim/site/pack/*/start/*/ftplugin/NvimTree.lua"
Searching for "/usr/share/nvim/site/ftplugin/NvimTree_*.lua"
Searching for "/usr/share/nvim/site/ftplugin/NvimTree/*.lua"
Searching for "/usr/local/Cellar/neovim/0.5.0/share/nvim/runtime/pack/*/start/*/ftplugin/NvimTree.lua"
Searching for "/usr/local/Cellar/neovim/0.5.0/share/nvim/runtime/ftplugin/NvimTree_*.lua"
Searching for "/usr/local/Cellar/neovim/0.5.0/share/nvim/runtime/ftplugin/NvimTree/*.lua"
Searching for "/usr/local/Cellar/neovim/0.5.0/lib/nvim/pack/*/start/*/ftplugin/NvimTree.lua"
Searching for "/usr/local/Cellar/neovim/0.5.0/lib/nvim/ftplugin/NvimTree_*.lua"
Searching for "/usr/local/Cellar/neovim/0.5.0/lib/nvim/ftplugin/NvimTree/*.lua"
Searching for "/usr/share/nvim/site/after/pack/*/start/*/ftplugin/NvimTree.lua"
Searching for "/usr/share/nvim/site/after/ftplugin/NvimTree_*.lua"
Searching for "/usr/share/nvim/site/after/ftplugin/NvimTree/*.lua"
Searching for "/usr/local/share/nvim/site/after/pack/*/start/*/ftplugin/NvimTree.lua"
Searching for "/usr/local/share/nvim/site/after/ftplugin/NvimTree_*.lua"
Searching for "/usr/local/share/nvim/site/after/ftplugin/NvimTree/*.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/after/pack/*/start/*/ftplugin/NvimTree.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/after/ftplugin/NvimTree_*.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/after/ftplugin/NvimTree/*.lua"
Searching for "/etc/xdg/nvim/after/pack/*/start/*/ftplugin/NvimTree.lua"
Searching for "/etc/xdg/nvim/after/ftplugin/NvimTree_*.lua"
Searching for "/etc/xdg/nvim/after/ftplugin/NvimTree/*.lua"
Searching for "/Users/andrewgu/.config/nvim/after/pack/*/start/*/ftplugin/NvimTree.lua"
Searching for "/Users/andrewgu/.config/nvim/after/ftplugin/NvimTree_*.lua"
Searching for "/Users/andrewgu/.config/nvim/after/ftplugin/NvimTree/*.lua"
not found in 'packpath': "pack/*/start/*/ftplugin/NvimTree.lua ftplugin/NvimTree_*.lua ftplugin/NvimTree/*.lua"
Searching for "start/*/ftplugin/NvimTree.lua ftplugin/NvimTree_*.lua ftplugin/NvimTree/*.lua" in "/Users/andrewgu/.config/nvim,/etc/xdg/nvim,/Users/andrewgu/.local/share/nvim/site,/usr/local/share/nvim/site,/usr/share/nvim/site,/usr/local/Cellar/neovim/0.5.0/share/nvim/runtime,/usr/local/Cellar/neovim/0.5.0/lib/nvim,/usr/share/nvim/site/after,/usr/local/share/nvim/site/after,/Users/andrewgu/.local/share/nvim/site/after,/etc/xdg/nvim/after,/Users/andrewgu/.config/nvim/after"
Searching for "/Users/andrewgu/.config/nvim/start/*/ftplugin/NvimTree.lua"
Searching for "/Users/andrewgu/.config/nvim/ftplugin/NvimTree_*.lua"
Searching for "/Users/andrewgu/.config/nvim/ftplugin/NvimTree/*.lua"
Searching for "/etc/xdg/nvim/start/*/ftplugin/NvimTree.lua"
Searching for "/etc/xdg/nvim/ftplugin/NvimTree_*.lua"
Searching for "/etc/xdg/nvim/ftplugin/NvimTree/*.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/start/*/ftplugin/NvimTree.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/ftplugin/NvimTree_*.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/ftplugin/NvimTree/*.lua"
Searching for "/usr/local/share/nvim/site/start/*/ftplugin/NvimTree.lua"
Searching for "/usr/local/share/nvim/site/ftplugin/NvimTree_*.lua"
Searching for "/usr/local/share/nvim/site/ftplugin/NvimTree/*.lua"
Searching for "/usr/share/nvim/site/start/*/ftplugin/NvimTree.lua"
Searching for "/usr/share/nvim/site/ftplugin/NvimTree_*.lua"
Searching for "/usr/share/nvim/site/ftplugin/NvimTree/*.lua"
Searching for "/usr/local/Cellar/neovim/0.5.0/share/nvim/runtime/start/*/ftplugin/NvimTree.lua"
Searching for "/usr/local/Cellar/neovim/0.5.0/share/nvim/runtime/ftplugin/NvimTree_*.lua"
Searching for "/usr/local/Cellar/neovim/0.5.0/share/nvim/runtime/ftplugin/NvimTree/*.lua"
Searching for "/usr/local/Cellar/neovim/0.5.0/lib/nvim/start/*/ftplugin/NvimTree.lua"
Searching for "/usr/local/Cellar/neovim/0.5.0/lib/nvim/ftplugin/NvimTree_*.lua"
Searching for "/usr/local/Cellar/neovim/0.5.0/lib/nvim/ftplugin/NvimTree/*.lua"
Searching for "/usr/share/nvim/site/after/start/*/ftplugin/NvimTree.lua"
Searching for "/usr/share/nvim/site/after/ftplugin/NvimTree_*.lua"
Searching for "/usr/share/nvim/site/after/ftplugin/NvimTree/*.lua"
Searching for "/usr/local/share/nvim/site/after/start/*/ftplugin/NvimTree.lua"
Searching for "/usr/local/share/nvim/site/after/ftplugin/NvimTree_*.lua"
Searching for "/usr/local/share/nvim/site/after/ftplugin/NvimTree/*.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/after/start/*/ftplugin/NvimTree.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/after/ftplugin/NvimTree_*.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/after/ftplugin/NvimTree/*.lua"
Searching for "/etc/xdg/nvim/after/start/*/ftplugin/NvimTree.lua"
Searching for "/etc/xdg/nvim/after/ftplugin/NvimTree_*.lua"
Searching for "/etc/xdg/nvim/after/ftplugin/NvimTree/*.lua"
Searching for "/Users/andrewgu/.config/nvim/after/start/*/ftplugin/NvimTree.lua"
Searching for "/Users/andrewgu/.config/nvim/after/ftplugin/NvimTree_*.lua"
Searching for "/Users/andrewgu/.config/nvim/after/ftplugin/NvimTree/*.lua"
not found in 'packpath': "start/*/ftplugin/NvimTree.lua ftplugin/NvimTree_*.lua ftplugin/NvimTree/*.lua"
line 20:       endfor
line 16:       for name in split(s, '\.')
line 17:         exe 'runtime! ftplugin/' . name . '.vim ftplugin/' . name . '_*.vim ftplugin/' . name . '/*.vim'
line 18:         " Load lua ftplugins
line 19:         exe printf('runtime! ftplugin/%s.lua ftplugin/%s_*.lua ftplugin/%s/*.lua', name, name, name)
line 20:       endfor
line 21:     endif
function <SNR>6_LoadFTPlugin returning #0

continuing in FileType Autocommands for "*"

Executing FileType Autocommands for "*"
autocommand exe "set syntax=" . expand("<amatch>")

Executing: exe "set syntax=" . expand("<amatch>")
Executing: set syntax=NvimTree
Executing Syntax Autocommands for "*"
autocommand call s:SynSet()

Executing: call s:SynSet()
calling function <SNR>8_SynSet()

line 1:   " clear syntax for :set syntax=OFF  and any syntax name that doesn't exist
line 2:   syn clear
line 3:   if exists("b:current_syntax")
line 4:     unlet b:current_syntax
line 5:   endif
line 6: 
line 7:   let s = expand("<amatch>")
line 8:   if s == "ON"
line 9:     " :set syntax=ON
line 10:     if &filetype == ""
line 11:       echohl ErrorMsg
line 12:       echo "filetype unknown"
line 13:       echohl None
line 14:     endif
line 15:     let s = &filetype
line 16:   elseif s == "OFF"
line 17:     let s = ""
line 18:   endif
line 19: 
line 20:   if s != ""
line 21:     " Load the syntax file(s).  When there are several, separated by dots,
line 22:     " load each in sequence.  Skip empty entries.
line 23:     for name in split(s, '\.')
line 24:       if !empty(name)
line 25:         exe "runtime! syntax/" . name . ".vim syntax/" . name . "/*.vim"
line 25: runtime! syntax/NvimTree.vim syntax/NvimTree/*.vim
Searching for "syntax/NvimTree.vim syntax/NvimTree/*.vim" in "/Users/andrewgu/.config/nvim,/etc/xdg/nvim,/Users/andrewgu/.local/share/nvim/site,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/telescope.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/popup.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/plenary.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/packer.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-web-devicons,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-tree.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-lspconfig,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-compe,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-base16.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-autopairs,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/neoformat,/Users/andrewgu/.local/share/nvim/
Searching for "/Users/andrewgu/.config/nvim/syntax/NvimTree.vim"
Searching for "/Users/andrewgu/.config/nvim/syntax/NvimTree/*.vim"
Searching for "/etc/xdg/nvim/syntax/NvimTree.vim"
Searching for "/etc/xdg/nvim/syntax/NvimTree/*.vim"
Searching for "/Users/andrewgu/.local/share/nvim/site/syntax/NvimTree.vim"
Searching for "/Users/andrewgu/.local/share/nvim/site/syntax/NvimTree/*.vim"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/telescope.nvim/syntax/NvimTree.vim"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/telescope.nvim/syntax/NvimTree/*.vim"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/popup.nvim/syntax/NvimTree.vim"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/popup.nvim/syntax/NvimTree/*.vim"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/plenary.nvim/syntax/NvimTree.vim"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/plenary.nvim/syntax/NvimTree/*.vim"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/packer.nvim/syntax/NvimTree.vim"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/packer.nvim/syntax/NvimTree/*.vim"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/syntax/NvimTree.vim"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/syntax/NvimTree/*.vim"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-web-devicons/syntax/NvimTree.vim"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-web-devicons/syntax/NvimTree/*.vim"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-tree.lua/syntax/NvimTree.vim"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-tree.lua/syntax/NvimTree/*.vim"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-lspconfig/syntax/NvimTree.vim"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-lspconfig/syntax/NvimTree/*.vim"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-compe/syntax/NvimTree.vim"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-compe/syntax/NvimTree/*.vim"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-base16.lua/syntax/NvimTree.vim"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-base16.lua/syntax/NvimTree/*.vim"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-autopairs/syntax/NvimTree.vim"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-autopairs/syntax/NvimTree/*.vim"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/neoformat/syntax/NvimTree.vim"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/neoformat/syntax/NvimTree/*.vim"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/lualine.nvim/syntax/NvimTree.vim"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/lualine.nvim/syntax/NvimTree/*.vim"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/indent-blankline.nvim/syntax/NvimTree.vim"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/indent-blankline.nvim/syntax/NvimTree/*.vim"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/gitsigns.nvim/syntax/NvimTree.vim"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/gitsigns.nvim/syntax/NvimTree/*.vim"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/barbar.nvim/syntax/NvimTree.vim"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/barbar.nvim/syntax/NvimTree/*.vim"
Searching for "/usr/local/share/nvim/site/syntax/NvimTree.vim"
Searching for "/usr/local/share/nvim/site/syntax/NvimTree/*.vim"
Searching for "/usr/share/nvim/site/syntax/NvimTree.vim"
Searching for "/usr/share/nvim/site/syntax/NvimTree/*.vim"
Searching for "/usr/local/Cellar/neovim/0.5.0/share/nvim/runtime/syntax/NvimTree.vim"
Searching for "/usr/local/Cellar/neovim/0.5.0/share/nvim/runtime/syntax/NvimTree/*.vim"
Searching for "/usr/local/Cellar/neovim/0.5.0/share/nvim/runtime/pack/dist/opt/matchit/syntax/NvimTree.vim"
Searching for "/usr/local/Cellar/neovim/0.5.0/share/nvim/runtime/pack/dist/opt/matchit/syntax/NvimTree/*.vim"
Searching for "/usr/local/Cellar/neovim/0.5.0/lib/nvim/syntax/NvimTree.vim"
Searching for "/usr/local/Cellar/neovim/0.5.0/lib/nvim/syntax/NvimTree/*.vim"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-compe/after/syntax/NvimTree.vim"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-compe/after/syntax/NvimTree/*.vim"
Searching for "/usr/share/nvim/site/after/syntax/NvimTree.vim"
Searching for "/usr/share/nvim/site/after/syntax/NvimTree/*.vim"
Searching for "/usr/local/share/nvim/site/after/syntax/NvimTree.vim"
Searching for "/usr/local/share/nvim/site/after/syntax/NvimTree/*.vim"
Searching for "/Users/andrewgu/.local/share/nvim/site/after/syntax/NvimTree.vim"
Searching for "/Users/andrewgu/.local/share/nvim/site/after/syntax/NvimTree/*.vim"
Searching for "/etc/xdg/nvim/after/syntax/NvimTree.vim"
Searching for "/etc/xdg/nvim/after/syntax/NvimTree/*.vim"
Searching for "/Users/andrewgu/.config/nvim/after/syntax/NvimTree.vim"
Searching for "/Users/andrewgu/.config/nvim/after/syntax/NvimTree/*.vim"
not found in 'runtimepath': "syntax/NvimTree.vim syntax/NvimTree/*.vim"
Searching for "pack/*/start/*/syntax/NvimTree.vim syntax/NvimTree/*.vim" in "/Users/andrewgu/.config/nvim,/etc/xdg/nvim,/Users/andrewgu/.local/share/nvim/site,/usr/local/share/nvim/site,/usr/share/nvim/site,/usr/local/Cellar/neovim/0.5.0/share/nvim/runtime,/usr/local/Cellar/neovim/0.5.0/lib/nvim,/usr/share/nvim/site/after,/usr/local/share/nvim/site/after,/Users/andrewgu/.local/share/nvim/site/after,/etc/xdg/nvim/after,/Users/andrewgu/.config/nvim/after"
Searching for "/Users/andrewgu/.config/nvim/pack/*/start/*/syntax/NvimTree.vim"
Searching for "/Users/andrewgu/.config/nvim/syntax/NvimTree/*.vim"
Searching for "/etc/xdg/nvim/pack/*/start/*/syntax/NvimTree.vim"
Searching for "/etc/xdg/nvim/syntax/NvimTree/*.vim"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/*/start/*/syntax/NvimTree.vim"
Searching for "/Users/andrewgu/.local/share/nvim/site/syntax/NvimTree/*.vim"
Searching for "/usr/local/share/nvim/site/pack/*/start/*/syntax/NvimTree.vim"
Searching for "/usr/local/share/nvim/site/syntax/NvimTree/*.vim"
Searching for "/usr/share/nvim/site/pack/*/start/*/syntax/NvimTree.vim"
Searching for "/usr/share/nvim/site/syntax/NvimTree/*.vim"
Searching for "/usr/local/Cellar/neovim/0.5.0/share/nvim/runtime/pack/*/start/*/syntax/NvimTree.vim"
Searching for "/usr/local/Cellar/neovim/0.5.0/share/nvim/runtime/syntax/NvimTree/*.vim"
Searching for "/usr/local/Cellar/neovim/0.5.0/lib/nvim/pack/*/start/*/syntax/NvimTree.vim"
Searching for "/usr/local/Cellar/neovim/0.5.0/lib/nvim/syntax/NvimTree/*.vim"
Searching for "/usr/share/nvim/site/after/pack/*/start/*/syntax/NvimTree.vim"
Searching for "/usr/share/nvim/site/after/syntax/NvimTree/*.vim"
Searching for "/usr/local/share/nvim/site/after/pack/*/start/*/syntax/NvimTree.vim"
Searching for "/usr/local/share/nvim/site/after/syntax/NvimTree/*.vim"
Searching for "/Users/andrewgu/.local/share/nvim/site/after/pack/*/start/*/syntax/NvimTree.vim"
Searching for "/Users/andrewgu/.local/share/nvim/site/after/syntax/NvimTree/*.vim"
Searching for "/etc/xdg/nvim/after/pack/*/start/*/syntax/NvimTree.vim"
Searching for "/etc/xdg/nvim/after/syntax/NvimTree/*.vim"
Searching for "/Users/andrewgu/.config/nvim/after/pack/*/start/*/syntax/NvimTree.vim"
Searching for "/Users/andrewgu/.config/nvim/after/syntax/NvimTree/*.vim"
not found in 'packpath': "pack/*/start/*/syntax/NvimTree.vim syntax/NvimTree/*.vim"
Searching for "start/*/syntax/NvimTree.vim syntax/NvimTree/*.vim" in "/Users/andrewgu/.config/nvim,/etc/xdg/nvim,/Users/andrewgu/.local/share/nvim/site,/usr/local/share/nvim/site,/usr/share/nvim/site,/usr/local/Cellar/neovim/0.5.0/share/nvim/runtime,/usr/local/Cellar/neovim/0.5.0/lib/nvim,/usr/share/nvim/site/after,/usr/local/share/nvim/site/after,/Users/andrewgu/.local/share/nvim/site/after,/etc/xdg/nvim/after,/Users/andrewgu/.config/nvim/after"
Searching for "/Users/andrewgu/.config/nvim/start/*/syntax/NvimTree.vim"
Searching for "/Users/andrewgu/.config/nvim/syntax/NvimTree/*.vim"
Searching for "/etc/xdg/nvim/start/*/syntax/NvimTree.vim"
Searching for "/etc/xdg/nvim/syntax/NvimTree/*.vim"
Searching for "/Users/andrewgu/.local/share/nvim/site/start/*/syntax/NvimTree.vim"
Searching for "/Users/andrewgu/.local/share/nvim/site/syntax/NvimTree/*.vim"
Searching for "/usr/local/share/nvim/site/start/*/syntax/NvimTree.vim"
Searching for "/usr/local/share/nvim/site/syntax/NvimTree/*.vim"
Searching for "/usr/share/nvim/site/start/*/syntax/NvimTree.vim"
Searching for "/usr/share/nvim/site/syntax/NvimTree/*.vim"
Searching for "/usr/local/Cellar/neovim/0.5.0/share/nvim/runtime/start/*/syntax/NvimTree.vim"
Searching for "/usr/local/Cellar/neovim/0.5.0/share/nvim/runtime/syntax/NvimTree/*.vim"
Searching for "/usr/local/Cellar/neovim/0.5.0/lib/nvim/start/*/syntax/NvimTree.vim"
Searching for "/usr/local/Cellar/neovim/0.5.0/lib/nvim/syntax/NvimTree/*.vim"
Searching for "/usr/share/nvim/site/after/start/*/syntax/NvimTree.vim"
Searching for "/usr/share/nvim/site/after/syntax/NvimTree/*.vim"
Searching for "/usr/local/share/nvim/site/after/start/*/syntax/NvimTree.vim"
Searching for "/usr/local/share/nvim/site/after/syntax/NvimTree/*.vim"
Searching for "/Users/andrewgu/.local/share/nvim/site/after/start/*/syntax/NvimTree.vim"
Searching for "/Users/andrewgu/.local/share/nvim/site/after/syntax/NvimTree/*.vim"
Searching for "/etc/xdg/nvim/after/start/*/syntax/NvimTree.vim"
Searching for "/etc/xdg/nvim/after/syntax/NvimTree/*.vim"
Searching for "/Users/andrewgu/.config/nvim/after/start/*/syntax/NvimTree.vim"
Searching for "/Users/andrewgu/.config/nvim/after/syntax/NvimTree/*.vim"
not found in 'packpath': "start/*/syntax/NvimTree.vim syntax/NvimTree/*.vim"
line 26:         exe "runtime! syntax/" . name . ".lua syntax/" . name . "/*.lua"
line 26: runtime! syntax/NvimTree.lua syntax/NvimTree/*.lua
Searching for "syntax/NvimTree.lua syntax/NvimTree/*.lua" in "/Users/andrewgu/.config/nvim,/etc/xdg/nvim,/Users/andrewgu/.local/share/nvim/site,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/telescope.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/popup.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/plenary.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/packer.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-web-devicons,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-tree.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-lspconfig,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-compe,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-base16.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-autopairs,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/neoformat,/Users/andrewgu/.local/share/nvim/
Searching for "/Users/andrewgu/.config/nvim/syntax/NvimTree.lua"
Searching for "/Users/andrewgu/.config/nvim/syntax/NvimTree/*.lua"
Searching for "/etc/xdg/nvim/syntax/NvimTree.lua"
Searching for "/etc/xdg/nvim/syntax/NvimTree/*.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/syntax/NvimTree.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/syntax/NvimTree/*.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/telescope.nvim/syntax/NvimTree.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/telescope.nvim/syntax/NvimTree/*.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/popup.nvim/syntax/NvimTree.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/popup.nvim/syntax/NvimTree/*.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/plenary.nvim/syntax/NvimTree.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/plenary.nvim/syntax/NvimTree/*.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/packer.nvim/syntax/NvimTree.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/packer.nvim/syntax/NvimTree/*.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/syntax/NvimTree.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/syntax/NvimTree/*.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-web-devicons/syntax/NvimTree.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-web-devicons/syntax/NvimTree/*.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-tree.lua/syntax/NvimTree.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-tree.lua/syntax/NvimTree/*.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-lspconfig/syntax/NvimTree.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-lspconfig/syntax/NvimTree/*.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-compe/syntax/NvimTree.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-compe/syntax/NvimTree/*.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-base16.lua/syntax/NvimTree.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-base16.lua/syntax/NvimTree/*.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-autopairs/syntax/NvimTree.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-autopairs/syntax/NvimTree/*.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/neoformat/syntax/NvimTree.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/neoformat/syntax/NvimTree/*.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/lualine.nvim/syntax/NvimTree.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/lualine.nvim/syntax/NvimTree/*.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/indent-blankline.nvim/syntax/NvimTree.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/indent-blankline.nvim/syntax/NvimTree/*.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/gitsigns.nvim/syntax/NvimTree.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/gitsigns.nvim/syntax/NvimTree/*.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/barbar.nvim/syntax/NvimTree.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/barbar.nvim/syntax/NvimTree/*.lua"
Searching for "/usr/local/share/nvim/site/syntax/NvimTree.lua"
Searching for "/usr/local/share/nvim/site/syntax/NvimTree/*.lua"
Searching for "/usr/share/nvim/site/syntax/NvimTree.lua"
Searching for "/usr/share/nvim/site/syntax/NvimTree/*.lua"
Searching for "/usr/local/Cellar/neovim/0.5.0/share/nvim/runtime/syntax/NvimTree.lua"
Searching for "/usr/local/Cellar/neovim/0.5.0/share/nvim/runtime/syntax/NvimTree/*.lua"
Searching for "/usr/local/Cellar/neovim/0.5.0/share/nvim/runtime/pack/dist/opt/matchit/syntax/NvimTree.lua"
Searching for "/usr/local/Cellar/neovim/0.5.0/share/nvim/runtime/pack/dist/opt/matchit/syntax/NvimTree/*.lua"
Searching for "/usr/local/Cellar/neovim/0.5.0/lib/nvim/syntax/NvimTree.lua"
Searching for "/usr/local/Cellar/neovim/0.5.0/lib/nvim/syntax/NvimTree/*.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-compe/after/syntax/NvimTree.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-compe/after/syntax/NvimTree/*.lua"
Searching for "/usr/share/nvim/site/after/syntax/NvimTree.lua"
Searching for "/usr/share/nvim/site/after/syntax/NvimTree/*.lua"
Searching for "/usr/local/share/nvim/site/after/syntax/NvimTree.lua"
Searching for "/usr/local/share/nvim/site/after/syntax/NvimTree/*.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/after/syntax/NvimTree.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/after/syntax/NvimTree/*.lua"
Searching for "/etc/xdg/nvim/after/syntax/NvimTree.lua"
Searching for "/etc/xdg/nvim/after/syntax/NvimTree/*.lua"
Searching for "/Users/andrewgu/.config/nvim/after/syntax/NvimTree.lua"
Searching for "/Users/andrewgu/.config/nvim/after/syntax/NvimTree/*.lua"
not found in 'runtimepath': "syntax/NvimTree.lua syntax/NvimTree/*.lua"
Searching for "pack/*/start/*/syntax/NvimTree.lua syntax/NvimTree/*.lua" in "/Users/andrewgu/.config/nvim,/etc/xdg/nvim,/Users/andrewgu/.local/share/nvim/site,/usr/local/share/nvim/site,/usr/share/nvim/site,/usr/local/Cellar/neovim/0.5.0/share/nvim/runtime,/usr/local/Cellar/neovim/0.5.0/lib/nvim,/usr/share/nvim/site/after,/usr/local/share/nvim/site/after,/Users/andrewgu/.local/share/nvim/site/after,/etc/xdg/nvim/after,/Users/andrewgu/.config/nvim/after"
Searching for "/Users/andrewgu/.config/nvim/pack/*/start/*/syntax/NvimTree.lua"
Searching for "/Users/andrewgu/.config/nvim/syntax/NvimTree/*.lua"
Searching for "/etc/xdg/nvim/pack/*/start/*/syntax/NvimTree.lua"
Searching for "/etc/xdg/nvim/syntax/NvimTree/*.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/*/start/*/syntax/NvimTree.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/syntax/NvimTree/*.lua"
Searching for "/usr/local/share/nvim/site/pack/*/start/*/syntax/NvimTree.lua"
Searching for "/usr/local/share/nvim/site/syntax/NvimTree/*.lua"
Searching for "/usr/share/nvim/site/pack/*/start/*/syntax/NvimTree.lua"
Searching for "/usr/share/nvim/site/syntax/NvimTree/*.lua"
Searching for "/usr/local/Cellar/neovim/0.5.0/share/nvim/runtime/pack/*/start/*/syntax/NvimTree.lua"
Searching for "/usr/local/Cellar/neovim/0.5.0/share/nvim/runtime/syntax/NvimTree/*.lua"
Searching for "/usr/local/Cellar/neovim/0.5.0/lib/nvim/pack/*/start/*/syntax/NvimTree.lua"
Searching for "/usr/local/Cellar/neovim/0.5.0/lib/nvim/syntax/NvimTree/*.lua"
Searching for "/usr/share/nvim/site/after/pack/*/start/*/syntax/NvimTree.lua"
Searching for "/usr/share/nvim/site/after/syntax/NvimTree/*.lua"
Searching for "/usr/local/share/nvim/site/after/pack/*/start/*/syntax/NvimTree.lua"
Searching for "/usr/local/share/nvim/site/after/syntax/NvimTree/*.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/after/pack/*/start/*/syntax/NvimTree.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/after/syntax/NvimTree/*.lua"
Searching for "/etc/xdg/nvim/after/pack/*/start/*/syntax/NvimTree.lua"
Searching for "/etc/xdg/nvim/after/syntax/NvimTree/*.lua"
Searching for "/Users/andrewgu/.config/nvim/after/pack/*/start/*/syntax/NvimTree.lua"
Searching for "/Users/andrewgu/.config/nvim/after/syntax/NvimTree/*.lua"
not found in 'packpath': "pack/*/start/*/syntax/NvimTree.lua syntax/NvimTree/*.lua"
Searching for "start/*/syntax/NvimTree.lua syntax/NvimTree/*.lua" in "/Users/andrewgu/.config/nvim,/etc/xdg/nvim,/Users/andrewgu/.local/share/nvim/site,/usr/local/share/nvim/site,/usr/share/nvim/site,/usr/local/Cellar/neovim/0.5.0/share/nvim/runtime,/usr/local/Cellar/neovim/0.5.0/lib/nvim,/usr/share/nvim/site/after,/usr/local/share/nvim/site/after,/Users/andrewgu/.local/share/nvim/site/after,/etc/xdg/nvim/after,/Users/andrewgu/.config/nvim/after"
Searching for "/Users/andrewgu/.config/nvim/start/*/syntax/NvimTree.lua"
Searching for "/Users/andrewgu/.config/nvim/syntax/NvimTree/*.lua"
Searching for "/etc/xdg/nvim/start/*/syntax/NvimTree.lua"
Searching for "/etc/xdg/nvim/syntax/NvimTree/*.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/start/*/syntax/NvimTree.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/syntax/NvimTree/*.lua"
Searching for "/usr/local/share/nvim/site/start/*/syntax/NvimTree.lua"
Searching for "/usr/local/share/nvim/site/syntax/NvimTree/*.lua"
Searching for "/usr/share/nvim/site/start/*/syntax/NvimTree.lua"
Searching for "/usr/share/nvim/site/syntax/NvimTree/*.lua"
Searching for "/usr/local/Cellar/neovim/0.5.0/share/nvim/runtime/start/*/syntax/NvimTree.lua"
Searching for "/usr/local/Cellar/neovim/0.5.0/share/nvim/runtime/syntax/NvimTree/*.lua"
Searching for "/usr/local/Cellar/neovim/0.5.0/lib/nvim/start/*/syntax/NvimTree.lua"
Searching for "/usr/local/Cellar/neovim/0.5.0/lib/nvim/syntax/NvimTree/*.lua"
Searching for "/usr/share/nvim/site/after/start/*/syntax/NvimTree.lua"
Searching for "/usr/share/nvim/site/after/syntax/NvimTree/*.lua"
Searching for "/usr/local/share/nvim/site/after/start/*/syntax/NvimTree.lua"
Searching for "/usr/local/share/nvim/site/after/syntax/NvimTree/*.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/after/start/*/syntax/NvimTree.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/after/syntax/NvimTree/*.lua"
Searching for "/etc/xdg/nvim/after/start/*/syntax/NvimTree.lua"
Searching for "/etc/xdg/nvim/after/syntax/NvimTree/*.lua"
Searching for "/Users/andrewgu/.config/nvim/after/start/*/syntax/NvimTree.lua"
Searching for "/Users/andrewgu/.config/nvim/after/syntax/NvimTree/*.lua"
not found in 'packpath': "start/*/syntax/NvimTree.lua syntax/NvimTree/*.lua"
line 27:       endif
line 28:     endfor
line 23:     for name in split(s, '\.')
line 24:       if !empty(name)
line 25:         exe "runtime! syntax/" . name . ".vim syntax/" . name . "/*.vim"
line 26:         exe "runtime! syntax/" . name . ".lua syntax/" . name . "/*.lua"
line 27:       endif
line 28:     endfor
line 29:   endif
function <SNR>8_SynSet returning #0

continuing in Syntax Autocommands for "*"

Executing FileType Autocommands for "*"
autocommand :lua require("nvim-autopairs").force_attach()

Executing: :lua require("nvim-autopairs").force_attach()
Executing FileType Autocommands for "*"
autocommand IndentBlanklineRefresh

Executing: IndentBlanklineRefresh
Executing: call s:try('lua require("indent_blankline.commands").refresh("" == "!")')
calling function <SNR>29_try('lua require("indent_blankline.commands").refresh("" == "!")')

line 1:     try
line 2:         execute a:cmd
line 2: lua require("indent_blankline.commands").refresh("" == "!")
Executing: call indent_blankline#Refresh()
calling function indent_blankline#Refresh()

line 1:     try
line 2:         lua require("indent_blankline").refresh()
calling function indent_blankline#Refresh[2]..indent_blankline#helper#GetListChar('eol', '')

line 1:     let l:list_chars = {}
line 2: 
line 3:     for l:char in split(&listchars, ',')
line 4:         let l:split = split(l:char, ':')
line 5:         let l:list_chars[l:split[0]] = l:split[1]
line 6:     endfor
line 3:     for l:char in split(&listchars, ',')
line 4:         let l:split = split(l:char, ':')
line 5:         let l:list_chars[l:split[0]] = l:split[1]
line 6:     endfor
line 3:     for l:char in split(&listchars, ',')
line 4:         let l:split = split(l:char, ':')
line 5:         let l:list_chars[l:split[0]] = l:split[1]
line 6:     endfor
line 3:     for l:char in split(&listchars, ',')
line 4:         let l:split = split(l:char, ':')
line 5:         let l:list_chars[l:split[0]] = l:split[1]
line 6:     endfor
line 7: 
line 8:     return get(l:list_chars, a:key, a:fallback)
function indent_blankline#Refresh[2]..indent_blankline#helper#GetListChar returning ''

continuing in function indent_blankline#Refresh

line 3:     catch /E12/
line 4:         return
line 5:     catch
line 6:         if g:indent_blankline_debug
line 7:             echohl Error
line 8:             echom 'indent-blankline encountered an error on refresh: ' . v:exception
line 9:             echohl None
line 10:         endif
line 11:     endtry
function indent_blankline#Refresh returning #0

continuing in nvim_exec() called at function <SNR>29_try:2

line 3:     catch /E12/
line 4:         return
line 5:     endtry
function <SNR>29_try returning #0

continuing in FileType Autocommands for "*"

Executing: au! BufWinEnter * lua require'nvim-tree.view'._prevent_buffer_override()
Executing: highlight! DevIconDefault guifg=#6d8086
Executing: highlight! DevIconDefault guifg=#6d8086
Executing: highlight! DevIconD guifg=#427819
Executing: highlight! DevIconR guifg=#358a5b
Executing: highlight! DevIconTerminal guifg=#31B53E
Executing: highlight! DevIconSvg guifg=#FFB13B
Executing: highlight! DevIconBashProfile guifg=#89e051
Executing: highlight! DevIconBashrc guifg=#89e051
Executing: highlight! DevIconBabelrc guifg=#cbcb41
Executing: highlight! DevIconDsStore guifg=#41535b
Executing: highlight! DevIconEx guifg=#a074c4
Executing: highlight! DevIconGitAttributes guifg=#41535b
Executing: highlight! DevIconDiff guifg=#41535b
Executing: highlight! DevIconGitConfig guifg=#41535b
Executing: highlight! DevIconGitIgnore guifg=#41535b
Executing: highlight! DevIconGitModules guifg=#41535b
Executing: highlight! DevIconJs guifg=#cbcb41
Executing: highlight! DevIconLicense guifg=#cbcb41
Executing: highlight! DevIconLicense guifg=#cbcb41
Executing: highlight! DevIconGitlabCI guifg=#e24329
Executing: highlight! DevIconGvimrc guifg=#019833
Executing: highlight! DevIconNPMIgnore guifg=#E8274B
Executing: highlight! DevIconVimrc guifg=#019833
Executing: highlight! DevIconZshrc guifg=#89e051
Executing: highlight! DevIconZshenv guifg=#89e051
Executing: highlight! DevIconZshprofile guifg=#89e051
Executing: highlight! DevIconDockerfile guifg=#384d54
Executing: highlight! DevIconGemfile guifg=#701516
Executing: highlight! DevIconLicense guifg=#d0bf41
Executing: highlight! DevIconVagrantfile guifg=#1563FF
Executing: highlight! DevIconGvimrc guifg=#019833
Executing: highlight! DevIconVimrc guifg=#019833
Executing: highlight! DevIconAwk guifg=#4d5a5e
Executing: highlight! DevIconBash guifg=#89e051
Executing: highlight! DevIconBat guifg=#C1F12E
Executing: highlight! DevIconBmp guifg=#a074c4
Executing: highlight! DevIconCPlusPlus guifg=#f34b7d
Executing: highlight! DevIconMl guifg=#e37933
Executing: highlight! DevIconDb guifg=#dad8d8
Executing: highlight! DevIconTex guifg=#3D6117
Executing: highlight! DevIconRb guifg=#701516
Executing: highlight! DevIconClojureC guifg=#8dc149
Executing: highlight! DevIconRlib guifg=#dea584
Executing: highlight! DevIconClojureJS guifg=#519aba
Executing: highlight! DevIconXul guifg=#e37933
Executing: highlight! DevIconCs guifg=#596706
Executing: highlight! DevIconRmd guifg=#519aba
Executing: highlight! DevIconRmd guifg=#519aba
Executing: highlight! DevIconRproj guifg=#358a5b
Executing: highlight! DevIconCMake guifg=#6d8086
Executing: highlight! DevIconFsi guifg=#519aba
Executing: highlight! DevIconRs guifg=#dea584
Executing: highlight! DevIconGo guifg=#519aba
Executing: highlight! DevIconRss guifg=#FB9D3B
Executing: highlight! DevIconConf guifg=#6d8086
Executing: highlight! DevIconVim guifg=#019833
Executing: highlight! DevIconConfigRu guifg=#701516
Executing: highlight! DevIconSass guifg=#f55385
Executing: highlight! DevIconTextScene guifg=#a074c4
Executing: highlight! DevIconCpp guifg=#519aba
Executing: highlight! DevIconJpeg guifg=#a074c4
Executing: highlight! DevIconCsh guifg=#4d5a5e
Executing: highlight! DevIconJpg guifg=#a074c4
Executing: highlight! DevIconCson guifg=#cbcb41
Executing: highlight! DevIconScss guifg=#f55385
Executing: highlight! DevIconTs guifg=#519aba
Executing: highlight! DevIconJson guifg=#cbcb41
Executing: highlight! DevIconSlim guifg=#e34c26
Executing: highlight! DevIconJsx guifg=#519aba
Executing: highlight! DevIconSln guifg=#854CC7
Executing: highlight! DevIconCxx guifg=#519aba
Executing: highlight! DevIconSql guifg=#dad8d8
Executing: highlight! DevIconPp guifg=#302B6D
Executing: highlight! DevIconLeex guifg=#a074c4
Executing: highlight! DevIconDart guifg=#03589C
Executing: highlight! DevIconLess guifg=#563d7c
Executing: highlight! DevIconSuo guifg=#854CC7
Executing: highlight! DevIconLhs guifg=#a074c4
Executing: highlight! DevIconSwift guifg=#e37933
Executing: highlight! DevIconLicense guifg=#cbcb41
Executing: highlight! DevIconCp guifg=#519aba
Executing: highlight! DevIconMd guifg=#519aba
Executing: highlight! DevIconPm guifg=#519aba
Executing: highlight! DevIconMakefile guifg=#6d8086
Executing: highlight! DevIconDockerfile guifg=#384d54
Executing: highlight! DevIconKsh guifg=#4d5a5e
Executing: highlight! DevIconToml guifg=#6d8086
Executing: highlight! DevIconCss guifg=#563d7c
Executing: highlight! DevIconMdx guifg=#519aba
Executing: highlight! DevIconEdn guifg=#519aba
Executing: highlight! DevIconMixLock guifg=#a074c4
Executing: highlight! DevIconEjs guifg=#cbcb41
Executing: highlight! DevIconMjs guifg=#f1e05a
Executing: highlight! DevIconStyl guifg=#8dc149
Executing: highlight! DevIconElm guifg=#519aba
Executing: highlight! DevIconCMakeLists guifg=#6d8086
Executing: highlight! DevIconDoc guifg=#185abd
Executing: highlight! DevIconMli guifg=#e37933
Executing: highlight! DevIconConfiguration guifg=#ECECEC
Executing: highlight! DevIconMustache guifg=#e37933
Executing: highlight! DevIconTsx guifg=#519aba
Executing: highlight! DevIconNix guifg=#7ebae4
Executing: highlight! DevIconExs guifg=#a074c4
Executing: highlight! DevIconTwig guifg=#8dc149
Executing: highlight! DevIconFsharp guifg=#519aba
Executing: highlight! DevIconH guifg=#a074c4
Executing: highlight! DevIconHrl guifg=#B83998
Executing: highlight! DevIconFavicon guifg=#cbcb41
Executing: highlight! DevIconNodeModules guifg=#E8274B
Executing: highlight! DevIconWebmanifest guifg=#f1e05a
Executing: highlight! DevIconPl guifg=#519aba
Executing: highlight! DevIconWebp guifg=#a074c4
Executing: highlight! DevIconXls guifg=#207245
Executing: highlight! DevIconXcPlayground guifg=#e37933
Executing: highlight! DevIconPng guifg=#a074c4
Executing: highlight! DevIconFsscript guifg=#519aba
Executing: highlight! DevIconClojure guifg=#8dc149
Executing: highlight! DevIconFsx guifg=#519aba
Executing: highlight! DevIconYaml guifg=#6d8086
Executing: highlight! DevIconPromptPs1 guifg=#4d5a5e
Executing: highlight! DevIconYml guifg=#6d8086
Executing: highlight! DevIconPsb guifg=#519aba
Executing: highlight! DevIconZsh guifg=#89e051
Executing: highlight! DevIconRake guifg=#701516
Executing: highlight! DevIconPsd guifg=#519aba
Executing: highlight! DevIconIni guifg=#6d8086
Executing: highlight! DevIconPy guifg=#3572A5
Executing: highlight! DevIconPdf guifg=#b30b00
Executing: highlight! DevIconIco guifg=#cbcb41
Executing: highlight! DevIconGruntfile guifg=#e37933
Executing: highlight! DevIconR guifg=#358a5b
Executing: highlight! DevIconKotlin guifg=#F88A02
Executing: highlight! DevIconGitLogo guifg=#F14C28
Executing: highlight! DevIconGulpfile guifg=#cc3e44
Executing: highlight! DevIconHpp guifg=#a074c4
Executing: highlight! DevIconSvelte guifg=#ff3e00
Executing: highlight! DevIconVue guifg=#8dc149
Executing: highlight! DevIconDropbox guifg=#0061FE
Executing: highlight! DevIconHs guifg=#a074c4
Executing: highlight! DevIconGodotProject guifg=#6d8086
Executing: highlight! DevIconRakefile guifg=#701516
Executing: highlight! DevIconHtm guifg=#e34c26
Executing: highlight! DevIconTextResource guifg=#cbcb41
Executing: highlight! DevIconJava guifg=#cc3e44
Executing: highlight! DevIconBinaryGLTF guifg=#FFB13B
Executing: highlight! DevIconErb guifg=#701516
Executing: highlight! DevIconAi guifg=#cbcb41
Executing: highlight! DevIconHxx guifg=#a074c4
Executing: highlight! DevIconPpt guifg=#cb4a32
Executing: highlight! DevIconC guifg=#599eff
Executing: highlight! DevIconWebpack guifg=#519aba
Executing: highlight! DevIconFs guifg=#519aba
Executing: highlight! DevIconPackedResource guifg=#6d8086
Executing: highlight! DevIconGDScript guifg=#6d8086
Executing: highlight! DevIconOpenTypeFont guifg=#ECECEC
Executing: highlight! DevIconPyo guifg=#519aba
Executing: highlight! DevIconJl guifg=#a270ba
Executing: highlight! DevIconPyd guifg=#519aba
Executing: highlight! DevIconSettingsJson guifg=#854CC7
Executing: highlight! DevIconMaterial guifg=#B83998
Executing: highlight! DevIconXml guifg=#e37933
Executing: highlight! DevIconDesktopEntry guifg=#563d7c
Executing: highlight! DevIconTor guifg=#519aba
Executing: highlight! DevIconImportConfiguration guifg=#ECECEC
Executing: highlight! DevIconOPUS guifg=#F88A02
Executing: highlight! DevIconProcfile guifg=#a074c4
Executing: highlight! DevIconCPlusPlus guifg=#f34b7d
Executing: highlight! DevIconSh guifg=#4d5a5e
Executing: highlight! DevIconPyc guifg=#519aba
Executing: highlight! DevIconScala guifg=#cc3e44
Executing: highlight! DevIconCoffee guifg=#cbcb41
Executing: highlight! DevIconGitCommit guifg=#41535b
Executing: highlight! DevIconLua guifg=#51a0cf
Executing: highlight! DevIconDump guifg=#dad8d8
Executing: highlight! DevIconEex guifg=#a074c4
Executing: highlight! DevIconMarkdown guifg=#519aba
Executing: highlight! DevIconHh guifg=#a074c4
Executing: highlight! DevIconHaml guifg=#eaeae1
Executing: highlight! DevIconFish guifg=#4d5a5e
Executing: highlight! DevIconErl guifg=#B83998
Executing: highlight! DevIconPhp guifg=#a074c4
Executing: highlight! DevIconHbs guifg=#f0772b
Executing: highlight! DevIconGif guifg=#a074c4
Executing: highlight! DevIconGemspec guifg=#701516
Executing: highlight! DevIconHtml guifg=#e34c26
Executing: augroup NvimWebDevicons
Executing: autocmd!
Executing: autocmd ColorScheme * lua require('nvim-web-devicons').set_up_highlights()
Executing: augroup END
Executing: hi def NvimTreeGitDirty guifg=#BE5046
Executing: hi def NvimTreeGitDeleted guifg=#BE5046
Executing: hi def NvimTreeGitStaged guifg=#98C379
Executing: hi def NvimTreeGitMerge guifg=#D19A66
Executing: hi def NvimTreeGitRenamed guifg=#C678DD
Executing: hi def NvimTreeIndentMarker guifg=#8094b4
Executing: hi def NvimTreeWindowPicker gui=bold guifg=#ededed guibg=#4493c8
Executing: hi def NvimTreeSymlink gui=bold guifg=#56B6C2
Executing: hi def NvimTreeFolderIcon guifg=#8094b4
Executing: hi def NvimTreeRootFolder guifg=#C678DD
Executing: hi def NvimTreeExecFile gui=bold guifg=#98C379
Executing: hi def NvimTreeSpecialFile gui=bold,underline guifg=#E5C07B
Executing: hi def NvimTreeGitNew guifg=#E5C07B
Executing: hi def NvimTreeImageFile gui=bold guifg=#C678DD
Executing: hi def NvimTreeOpenedFile gui=bold guifg=#98C379
Executing: hi def link NvimTreeFolderName Directory
Executing: hi def link NvimTreeEmptyFolderName Directory
Executing: hi def link NvimTreeOpenedFolderName Directory
Executing: hi def link NvimTreeNormal Normal
Executing: hi def link NvimTreeEndOfBuffer EndOfBuffer
Executing: hi def link NvimTreeCursorLine CursorLine
Executing: hi def link NvimTreeVertSplit VertSplit
Executing: hi def link NvimTreeCursorColumn CursorColumn
Executing: hi def link NvimTreeFileDirty NvimTreeGitDirty
Executing: hi def link NvimTreeFileNew NvimTreeGitNew
Executing: hi def link NvimTreeFileRenamed NvimTreeGitRenamed
Executing: hi def link NvimTreeFileMerge NvimTreeGitMerge
Executing: hi def link NvimTreeFileStaged NvimTreeGitStaged
Executing: hi def link NvimTreeFileDeleted NvimTreeGitDeleted
Executing: hi def link NvimTreePopup Normal
Executing: hi def link NvimTreeGitIgnored Comment
Executing: hi def link NvimTreeLspDiagnosticsError LspDiagnosticsDefaultError
Executing: hi def link NvimTreeLspDiagnosticsWarning LspDiagnosticsDefaultWarning
Executing: hi def link NvimTreeLspDiagnosticsInformation LspDiagnosticsDefaultInformation
Executing: hi def link NvimTreeLspDiagnosticsHint LspDiagnosticsDefaultHint
Executing: hi def link NvimTreeStatusLine StatusLine
Executing: hi def link NvimTreeStatusLineNC StatusLineNC
Executing VimEnter Autocommands for "*"
autocommand sil call s:VimEnter(expand("<amatch>"))

Executing: sil call s:VimEnter(expand("<amatch>"))
calling function <SNR>16_VimEnter('/Users/andrewgu/.config/nvim')

line 1: "  call Dfunc("s:VimEnter(dirname<".a:dirname.">) expand(%)<".expand("%").">")
line 2:   let curwin       = winnr()
line 3:   let s:vimentered = 1
line 4:   windo call s:LocalBrowse(expand("%:p"))
line 4: call s:LocalBrowse(expand("%:p"))
calling function <SNR>16_VimEnter[4]..<SNR>16_LocalBrowse('/Users/andrewgu/.config/nvim/')

line 1:   " Unfortunate interaction -- only DechoMsg debugging calls can be safely used here.
line 2:   " Otherwise, the BufEnter event gets triggered when attempts to write to
line 3:   " the DBG buffer are made.
line 4: 
line 5:   if !exists("s:vimentered")
line 6:    " If s:vimentered doesn't exist, then the VimEnter event hasn't fired.  It will,
line 7:    " and so s:VimEnter() will then be calling this routine, but this time with s:vimentered defined.
line 8: "   call Dfunc("s:LocalBrowse(dirname<".a:dirname.">)  (s:vimentered doesn't exist)")
line 9: "   call Dret("s:LocalBrowse")
line 10:    return
line 11:   endif
line 12: 
line 13: "  call Dfunc("s:LocalBrowse(dirname<".a:dirname.">)  (s:vimentered=".s:vimentered.")")
line 14: 
line 15:   if has("amiga")
line 16:    " The check against '' is made for the Amiga, where the empty
line 17:    " string is the current directory and not checking would break
line 18:    " things such as the help command.
line 19: "   call Decho("(LocalBrowse) dirname<".a:dirname.">  (isdirectory, amiga)")
line 20:    if a:dirname != '' && isdirectory(a:dirname)
line 21:     sil! call netrw#LocalBrowseCheck(a:dirname)
line 22:     if exists("w:netrw_bannercnt") && line('.') < w:netrw_bannercnt
line 23:      exe w:netrw_bannercnt
line 24:     endif
line 25:    endif
line 26: 
line 27:   elseif isdirectory(a:dirname)
line 28: "   call Decho("(LocalBrowse) dirname<".a:dirname."> ft=".&ft."  (isdirectory, not amiga)")
line 29: "   call Dredir("LocalBrowse ft last set: ","verbose set ft")
line 30:    sil! call netrw#LocalBrowseCheck(a:dirname)
Searching for "autoload/netrw.vim" in "/Users/andrewgu/.config/nvim,/etc/xdg/nvim,/Users/andrewgu/.local/share/nvim/site,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/telescope.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/popup.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/plenary.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/packer.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-web-devicons,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-tree.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-lspconfig,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-compe,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-base16.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-autopairs,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/neoformat,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/
Searching for "/Users/andrewgu/.config/nvim/autoload/netrw.vim"
Searching for "/etc/xdg/nvim/autoload/netrw.vim"
Searching for "/Users/andrewgu/.local/share/nvim/site/autoload/netrw.vim"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/telescope.nvim/autoload/netrw.vim"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/popup.nvim/autoload/netrw.vim"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/plenary.nvim/autoload/netrw.vim"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/packer.nvim/autoload/netrw.vim"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/autoload/netrw.vim"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-web-devicons/autoload/netrw.vim"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-tree.lua/autoload/netrw.vim"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-lspconfig/autoload/netrw.vim"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-compe/autoload/netrw.vim"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-base16.lua/autoload/netrw.vim"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-autopairs/autoload/netrw.vim"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/neoformat/autoload/netrw.vim"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/lualine.nvim/autoload/netrw.vim"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/indent-blankline.nvim/autoload/netrw.vim"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/gitsigns.nvim/autoload/netrw.vim"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/barbar.nvim/autoload/netrw.vim"
Searching for "/usr/local/share/nvim/site/autoload/netrw.vim"
Searching for "/usr/share/nvim/site/autoload/netrw.vim"
Searching for "/usr/local/Cellar/neovim/0.5.0/share/nvim/runtime/autoload/netrw.vim"
chdir(/Users/andrewgu/.config/nvim)
chdir(/usr/local/Cellar/neovim/0.5.0/share/nvim/runtime/autoload)
chdir(/Users/andrewgu/.config/nvim)
line 30: sourcing "/usr/local/Cellar/neovim/0.5.0/share/nvim/runtime/autoload/netrw.vim"
line 1: " netrw.vim: Handles file transfer and remote directory listing across
line 2: "            AUTOLOAD SECTION
line 3: " Date:^I^ISep 18, 2020
line 4: " Version:^I170
line 5: " Maintainer:^ICharles E Campbell <NcampObell@SdrPchip.AorgM-NOSPAM>
line 6: " GetLatestVimScripts: 1075 1 :AutoInstall: netrw.vim
line 7: " Copyright:    Copyright (C) 2016 Charles E. Campbell {{{1
line 8: "               Permission is hereby granted to use and distribute this code,
line 9: "               with or without modifications, provided that this copyright
line 10: "               notice is copied with it. Like anything else that's free,
line 11: "               netrw.vim, netrwPlugin.vim, and netrwSettings.vim are provided
line 12: "               *as is* and come with no warranty of any kind, either
line 13: "               expressed or implied. By using this plugin, you agree that
line 14: "               in no event will the copyright holder be liable for any damages
line 15: "               resulting from the use of this software.
line 16: "
line 17: " Note: the code here was started in 1999 under a much earlier version of vim.  The directory browsing
line 18: "       code was written using vim v6, which did not have Lists (Lists were first offered with vim-v7).
line 19: "
line 20: "redraw!|call DechoSep()|call inputsave()|call input("Press <cr> to continue")|call inputrestore()
line 21: "
line 22: "  But be doers of the Word, and not only hearers, deluding your own selves {{{1
line 23: "  (James 1:22 RSV)
line 24: " =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
line 25: " Load Once: {{{1
line 26: if &cp || exists("g:loaded_netrw")
line 27:   finish
finished sourcing /usr/local/Cellar/neovim/0.5.0/share/nvim/runtime/autoload/netrw.vim
continuing in function <SNR>16_VimEnter[4]..<SNR>16_LocalBrowse
Error detected while processing function <SNR>16_VimEnter[4]..<SNR>16_LocalBrowse:
line   30:
E117: Unknown function: netrw#LocalBrowseCheck
line 31:    if exists("w:netrw_bannercnt") && line('.') < w:netrw_bannercnt
line 32:     exe w:netrw_bannercnt
line 33:    endif
line 34: 
line 35:   else
line 36:    " not a directory, ignore it
line 37: "   call Decho("(LocalBrowse) dirname<".a:dirname."> not a directory, ignoring...")
line 38:   endif
line 39: 
line 40: "  call Dret("s:LocalBrowse")
function <SNR>16_VimEnter[4]..<SNR>16_LocalBrowse returning #0

continuing in function <SNR>16_VimEnter

line 5:   exe curwin."wincmd w"
line 5: 1wincmd w
line 6: "  call Dret("s:VimEnter")
function <SNR>16_VimEnter returning #0

continuing in VimEnter Autocommands for "*"

Executing VimEnter Autocommands for "*"
autocommand lua require('gitsigns.manager').setup_signs_and_highlights()

Executing: lua require('gitsigns.manager').setup_signs_and_highlights()
Executing VimEnter Autocommands for "*"
autocommand call bufferline#highlight#setup()

Executing: call bufferline#highlight#setup()
calling function bufferline#highlight#setup()

line 1:    let fg_target = 'red'
line 2: 
line 3:    let fg_current  = s:fg(['Normal'], '#efefef')
calling function bufferline#highlight#setup[3]..<SNR>28_fg(['Normal'], '#efefef')

line 1:    for group in a:groups
line 2:       let hl = nvim_get_hl_by_name(group,   1)
line 3:       if has_key(hl, 'foreground')
line 4:          return printf("#%06x", hl.foreground)
function bufferline#highlight#setup[3]..<SNR>28_fg returning '#abb2bf'

continuing in function bufferline#highlight#setup

line 4:    let fg_visible  = s:fg(['TabLineSel'], '#efefef')
calling function bufferline#highlight#setup[4]..<SNR>28_fg(['TabLineSel'], '#efefef')

line 1:    for group in a:groups
line 2:       let hl = nvim_get_hl_by_name(group,   1)
line 3:       if has_key(hl, 'foreground')
line 4:          return printf("#%06x", hl.foreground)
function bufferline#highlight#setup[4]..<SNR>28_fg returning '#abb2bf'

continuing in function bufferline#highlight#setup

line 5:    let fg_inactive = s:fg(['TabLineFill'], '#888888')
calling function bufferline#highlight#setup[5]..<SNR>28_fg(['TabLineFill'], '#888888')

line 1:    for group in a:groups
line 2:       let hl = nvim_get_hl_by_name(group,   1)
line 3:       if has_key(hl, 'foreground')
line 4:          return printf("#%06x", hl.foreground)
line 5:       end
line 6:    endfor
line 1:    for group in a:groups
line 2:       let hl = nvim_get_hl_by_name(group,   1)
line 3:       if has_key(hl, 'foreground')
line 4:          return printf("#%06x", hl.foreground)
line 5:       end
line 6:    endfor
line 7:    return a:default
function bufferline#highlight#setup[5]..<SNR>28_fg returning '#888888'

continuing in function bufferline#highlight#setup

line 6: 
line 7:    let fg_modified = s:fg(['WarningMsg'], '#E5AB0E')
calling function bufferline#highlight#setup[7]..<SNR>28_fg(['WarningMsg'], '#E5AB0E')

line 1:    for group in a:groups
line 2:       let hl = nvim_get_hl_by_name(group,   1)
line 3:       if has_key(hl, 'foreground')
line 4:          return printf("#%06x", hl.foreground)
function bufferline#highlight#setup[7]..<SNR>28_fg returning '#e5c07b'

continuing in function bufferline#highlight#setup

line 8:    let fg_special  = s:fg(['Special'], '#599eff')
calling function bufferline#highlight#setup[8]..<SNR>28_fg(['Special'], '#599eff')

line 1:    for group in a:groups
line 2:       let hl = nvim_get_hl_by_name(group,   1)
line 3:       if has_key(hl, 'foreground')
line 4:          return printf("#%06x", hl.foreground)
function bufferline#highlight#setup[8]..<SNR>28_fg returning '#61afef'

continuing in function bufferline#highlight#setup

line 9:    let fg_subtle   = s:fg(['NonText', 'Comment'], '#555555')
calling function bufferline#highlight#setup[9]..<SNR>28_fg(['NonText', 'Comment'], '#555555')

line 1:    for group in a:groups
line 2:       let hl = nvim_get_hl_by_name(group,   1)
line 3:       if has_key(hl, 'foreground')
line 4:          return printf("#%06x", hl.foreground)
function bufferline#highlight#setup[9]..<SNR>28_fg returning '#3b4048'

continuing in function bufferline#highlight#setup

line 10: 
line 11:    let bg_current  = s:bg(['Normal'], 'none')
calling function bufferline#highlight#setup[11]..<SNR>28_bg(['Normal'], 'none')

line 1:    for group in a:groups
line 2:       let hl = nvim_get_hl_by_name(group,   1)
line 3:       if has_key(hl, 'background')
line 4:          return printf("#%06x", hl.background)
function bufferline#highlight#setup[11]..<SNR>28_bg returning '#282c34'

continuing in function bufferline#highlight#setup

line 12:    let bg_visible  = s:bg(['TabLineSel', 'Normal'], 'none')
calling function bufferline#highlight#setup[12]..<SNR>28_bg(['TabLineSel', 'Normal'], 'none')

line 1:    for group in a:groups
line 2:       let hl = nvim_get_hl_by_name(group,   1)
line 3:       if has_key(hl, 'background')
line 4:          return printf("#%06x", hl.background)
line 5:       end
line 6:    endfor
line 1:    for group in a:groups
line 2:       let hl = nvim_get_hl_by_name(group,   1)
line 3:       if has_key(hl, 'background')
line 4:          return printf("#%06x", hl.background)
function bufferline#highlight#setup[12]..<SNR>28_bg returning '#282c34'

continuing in function bufferline#highlight#setup

line 13:    let bg_inactive = s:bg(['TabLineFill', 'StatusLine'], 'none')
calling function bufferline#highlight#setup[13]..<SNR>28_bg(['TabLineFill', 'StatusLine'], 'none')

line 1:    for group in a:groups
line 2:       let hl = nvim_get_hl_by_name(group,   1)
line 3:       if has_key(hl, 'background')
line 4:          return printf("#%06x", hl.background)
line 5:       end
line 6:    endfor
line 1:    for group in a:groups
line 2:       let hl = nvim_get_hl_by_name(group,   1)
line 3:       if has_key(hl, 'background')
line 4:          return printf("#%06x", hl.background)
function bufferline#highlight#setup[13]..<SNR>28_bg returning '#2c323c'

continuing in function bufferline#highlight#setup

line 14: 
line 15:    "      Current: current buffer
line 16:    "      Visible: visible but not current buffer
line 17:    "     Inactive: invisible but not current buffer
line 18:    "        -Icon: filetype icon
line 19:    "       -Index: buffer index
line 20:    "         -Mod: when modified
line 21:    "        -Sign: the separator between buffers
line 22:    "      -Target: letter in buffer-picking mode
line 23:    call s:hi_all([ ['BufferCurrent',        fg_current,  bg_current], ['BufferCurrentIndex',   fg_special,  bg_current], ['BufferCurrentMod',     fg_modified, bg_current], ['BufferCurrentSign',    fg_special,  bg_current], ['BufferCurrentTarget',  fg_target,   bg_current,   'bold'], ['BufferVisible',        fg_visible,  bg_visible], ['BufferVisibleIndex',   fg_visible,  bg_visible], ['BufferVisibleMod',     fg_modified, bg_visible], ['BufferVisibleSign',    fg_visible,  bg_visible], ['BufferVisibleTarget',  fg_target,   bg_visible,   'bold'], ['BufferInactive',       fg_inactive, bg_inactive], ['BufferInactiveIndex',  fg_subtle,   bg_inactive], ['BufferInactiveMod',    fg_modified, bg_inactive], ['BufferInactiveSign',   fg_subtle,   bg_inactive], ['BufferInactiveTarget', fg_target,   bg_inactive,  'bold'], ['BufferTabpages',       fg_special,  bg_inactive, 'bold'], ['BufferTabpageFill',    fg_inactive, bg_inactive], ])
calling function bufferline#highlight#setup[23]..<SNR>28_hi_all([['BufferCurrent', '#abb2bf', '#282c34...ferTabpageFill', '#888888', '#2c323c']])

line 1:    for group in a:groups
line 2:       call call(function('s:hi'), group)
calling function bufferline#highlight#setup[23]..<SNR>28_hi_all[2]..<SNR>28_hi('BufferCurrent', '#abb2bf', '#282c34')

line 1:    let fg = ''
line 2:    let bg = ''
line 3:    let attr = ''
line 4: 
line 5:    if type(a:1) == 3
line 6:       let fg   = get(a:1, 0, '')
line 7:       let bg   = get(a:1, 1, '')
line 8:       let attr = get(a:1, 2, '')
line 9:    else
line 10:       let fg   = get(a:000, 0, '')
line 11:       let bg   = get(a:000, 1, '')
line 12:       let attr = get(a:000, 2, '')
line 13:    end
line 14: 
line 15:    let has_props = v:false
line 16: 
line 17:    let cmd = 'hi default ' . a:name
line 18:    if !empty(fg) && fg != 'none'
line 19:       let cmd .= ' guifg=' . fg
line 20:       let has_props = v:true
line 21:    end
line 22:    if !empty(bg) && bg != 'none'
line 23:       let cmd .= ' guibg=' . bg
line 24:       let has_props = v:true
line 25:    end
line 26:    if !empty(attr) && attr != 'none'
line 27:       let cmd .= ' gui=' . attr
line 28:       let has_props = v:true
line 29:    end
line 30:    execute 'hi default clear ' a:name
line 30: hi default clear  BufferCurrent
line 31:    if has_props
line 32:       execute cmd
line 32: hi default BufferCurrent guifg=#abb2bf guibg=#282c34
line 33:    end
function bufferline#highlight#setup[23]..<SNR>28_hi_all[2]..<SNR>28_hi returning #0

continuing in function bufferline#highlight#setup[23]..<SNR>28_hi_all

line 3:    endfor
line 1:    for group in a:groups
line 2:       call call(function('s:hi'), group)
calling function bufferline#highlight#setup[23]..<SNR>28_hi_all[2]..<SNR>28_hi('BufferCurrentIndex', '#61afef', '#282c34')

line 1:    let fg = ''
line 2:    let bg = ''
line 3:    let attr = ''
line 4: 
line 5:    if type(a:1) == 3
line 6:       let fg   = get(a:1, 0, '')
line 7:       let bg   = get(a:1, 1, '')
line 8:       let attr = get(a:1, 2, '')
line 9:    else
line 10:       let fg   = get(a:000, 0, '')
line 11:       let bg   = get(a:000, 1, '')
line 12:       let attr = get(a:000, 2, '')
line 13:    end
line 14: 
line 15:    let has_props = v:false
line 16: 
line 17:    let cmd = 'hi default ' . a:name
line 18:    if !empty(fg) && fg != 'none'
line 19:       let cmd .= ' guifg=' . fg
line 20:       let has_props = v:true
line 21:    end
line 22:    if !empty(bg) && bg != 'none'
line 23:       let cmd .= ' guibg=' . bg
line 24:       let has_props = v:true
line 25:    end
line 26:    if !empty(attr) && attr != 'none'
line 27:       let cmd .= ' gui=' . attr
line 28:       let has_props = v:true
line 29:    end
line 30:    execute 'hi default clear ' a:name
line 30: hi default clear  BufferCurrentIndex
line 31:    if has_props
line 32:       execute cmd
line 32: hi default BufferCurrentIndex guifg=#61afef guibg=#282c34
line 33:    end
function bufferline#highlight#setup[23]..<SNR>28_hi_all[2]..<SNR>28_hi returning #0

continuing in function bufferline#highlight#setup[23]..<SNR>28_hi_all

line 3:    endfor
line 1:    for group in a:groups
line 2:       call call(function('s:hi'), group)
calling function bufferline#highlight#setup[23]..<SNR>28_hi_all[2]..<SNR>28_hi('BufferCurrentMod', '#e5c07b', '#282c34')

line 1:    let fg = ''
line 2:    let bg = ''
line 3:    let attr = ''
line 4: 
line 5:    if type(a:1) == 3
line 6:       let fg   = get(a:1, 0, '')
line 7:       let bg   = get(a:1, 1, '')
line 8:       let attr = get(a:1, 2, '')
line 9:    else
line 10:       let fg   = get(a:000, 0, '')
line 11:       let bg   = get(a:000, 1, '')
line 12:       let attr = get(a:000, 2, '')
line 13:    end
line 14: 
line 15:    let has_props = v:false
line 16: 
line 17:    let cmd = 'hi default ' . a:name
line 18:    if !empty(fg) && fg != 'none'
line 19:       let cmd .= ' guifg=' . fg
line 20:       let has_props = v:true
line 21:    end
line 22:    if !empty(bg) && bg != 'none'
line 23:       let cmd .= ' guibg=' . bg
line 24:       let has_props = v:true
line 25:    end
line 26:    if !empty(attr) && attr != 'none'
line 27:       let cmd .= ' gui=' . attr
line 28:       let has_props = v:true
line 29:    end
line 30:    execute 'hi default clear ' a:name
line 30: hi default clear  BufferCurrentMod
line 31:    if has_props
line 32:       execute cmd
line 32: hi default BufferCurrentMod guifg=#e5c07b guibg=#282c34
line 33:    end
function bufferline#highlight#setup[23]..<SNR>28_hi_all[2]..<SNR>28_hi returning #0

continuing in function bufferline#highlight#setup[23]..<SNR>28_hi_all

line 3:    endfor
line 1:    for group in a:groups
line 2:       call call(function('s:hi'), group)
calling function bufferline#highlight#setup[23]..<SNR>28_hi_all[2]..<SNR>28_hi('BufferCurrentSign', '#61afef', '#282c34')

line 1:    let fg = ''
line 2:    let bg = ''
line 3:    let attr = ''
line 4: 
line 5:    if type(a:1) == 3
line 6:       let fg   = get(a:1, 0, '')
line 7:       let bg   = get(a:1, 1, '')
line 8:       let attr = get(a:1, 2, '')
line 9:    else
line 10:       let fg   = get(a:000, 0, '')
line 11:       let bg   = get(a:000, 1, '')
line 12:       let attr = get(a:000, 2, '')
line 13:    end
line 14: 
line 15:    let has_props = v:false
line 16: 
line 17:    let cmd = 'hi default ' . a:name
line 18:    if !empty(fg) && fg != 'none'
line 19:       let cmd .= ' guifg=' . fg
line 20:       let has_props = v:true
line 21:    end
line 22:    if !empty(bg) && bg != 'none'
line 23:       let cmd .= ' guibg=' . bg
line 24:       let has_props = v:true
line 25:    end
line 26:    if !empty(attr) && attr != 'none'
line 27:       let cmd .= ' gui=' . attr
line 28:       let has_props = v:true
line 29:    end
line 30:    execute 'hi default clear ' a:name
line 30: hi default clear  BufferCurrentSign
line 31:    if has_props
line 32:       execute cmd
line 32: hi default BufferCurrentSign guifg=#61afef guibg=#282c34
line 33:    end
function bufferline#highlight#setup[23]..<SNR>28_hi_all[2]..<SNR>28_hi returning #0

continuing in function bufferline#highlight#setup[23]..<SNR>28_hi_all

line 3:    endfor
line 1:    for group in a:groups
line 2:       call call(function('s:hi'), group)
calling function bufferline#highlight#setup[23]..<SNR>28_hi_all[2]..<SNR>28_hi('BufferCurrentTarget', 'red', '#282c34', 'bold')

line 1:    let fg = ''
line 2:    let bg = ''
line 3:    let attr = ''
line 4: 
line 5:    if type(a:1) == 3
line 6:       let fg   = get(a:1, 0, '')
line 7:       let bg   = get(a:1, 1, '')
line 8:       let attr = get(a:1, 2, '')
line 9:    else
line 10:       let fg   = get(a:000, 0, '')
line 11:       let bg   = get(a:000, 1, '')
line 12:       let attr = get(a:000, 2, '')
line 13:    end
line 14: 
line 15:    let has_props = v:false
line 16: 
line 17:    let cmd = 'hi default ' . a:name
line 18:    if !empty(fg) && fg != 'none'
line 19:       let cmd .= ' guifg=' . fg
line 20:       let has_props = v:true
line 21:    end
line 22:    if !empty(bg) && bg != 'none'
line 23:       let cmd .= ' guibg=' . bg
line 24:       let has_props = v:true
line 25:    end
line 26:    if !empty(attr) && attr != 'none'
line 27:       let cmd .= ' gui=' . attr
line 28:       let has_props = v:true
line 29:    end
line 30:    execute 'hi default clear ' a:name
line 30: hi default clear  BufferCurrentTarget
line 31:    if has_props
line 32:       execute cmd
line 32: hi default BufferCurrentTarget guifg=red guibg=#282c34 gui=bold
line 33:    end
function bufferline#highlight#setup[23]..<SNR>28_hi_all[2]..<SNR>28_hi returning #0

continuing in function bufferline#highlight#setup[23]..<SNR>28_hi_all

line 3:    endfor
line 1:    for group in a:groups
line 2:       call call(function('s:hi'), group)
calling function bufferline#highlight#setup[23]..<SNR>28_hi_all[2]..<SNR>28_hi('BufferVisible', '#abb2bf', '#282c34')

line 1:    let fg = ''
line 2:    let bg = ''
line 3:    let attr = ''
line 4: 
line 5:    if type(a:1) == 3
line 6:       let fg   = get(a:1, 0, '')
line 7:       let bg   = get(a:1, 1, '')
line 8:       let attr = get(a:1, 2, '')
line 9:    else
line 10:       let fg   = get(a:000, 0, '')
line 11:       let bg   = get(a:000, 1, '')
line 12:       let attr = get(a:000, 2, '')
line 13:    end
line 14: 
line 15:    let has_props = v:false
line 16: 
line 17:    let cmd = 'hi default ' . a:name
line 18:    if !empty(fg) && fg != 'none'
line 19:       let cmd .= ' guifg=' . fg
line 20:       let has_props = v:true
line 21:    end
line 22:    if !empty(bg) && bg != 'none'
line 23:       let cmd .= ' guibg=' . bg
line 24:       let has_props = v:true
line 25:    end
line 26:    if !empty(attr) && attr != 'none'
line 27:       let cmd .= ' gui=' . attr
line 28:       let has_props = v:true
line 29:    end
line 30:    execute 'hi default clear ' a:name
line 30: hi default clear  BufferVisible
line 31:    if has_props
line 32:       execute cmd
line 32: hi default BufferVisible guifg=#abb2bf guibg=#282c34
line 33:    end
function bufferline#highlight#setup[23]..<SNR>28_hi_all[2]..<SNR>28_hi returning #0

continuing in function bufferline#highlight#setup[23]..<SNR>28_hi_all

line 3:    endfor
line 1:    for group in a:groups
line 2:       call call(function('s:hi'), group)
calling function bufferline#highlight#setup[23]..<SNR>28_hi_all[2]..<SNR>28_hi('BufferVisibleIndex', '#abb2bf', '#282c34')

line 1:    let fg = ''
line 2:    let bg = ''
line 3:    let attr = ''
line 4: 
line 5:    if type(a:1) == 3
line 6:       let fg   = get(a:1, 0, '')
line 7:       let bg   = get(a:1, 1, '')
line 8:       let attr = get(a:1, 2, '')
line 9:    else
line 10:       let fg   = get(a:000, 0, '')
line 11:       let bg   = get(a:000, 1, '')
line 12:       let attr = get(a:000, 2, '')
line 13:    end
line 14: 
line 15:    let has_props = v:false
line 16: 
line 17:    let cmd = 'hi default ' . a:name
line 18:    if !empty(fg) && fg != 'none'
line 19:       let cmd .= ' guifg=' . fg
line 20:       let has_props = v:true
line 21:    end
line 22:    if !empty(bg) && bg != 'none'
line 23:       let cmd .= ' guibg=' . bg
line 24:       let has_props = v:true
line 25:    end
line 26:    if !empty(attr) && attr != 'none'
line 27:       let cmd .= ' gui=' . attr
line 28:       let has_props = v:true
line 29:    end
line 30:    execute 'hi default clear ' a:name
line 30: hi default clear  BufferVisibleIndex
line 31:    if has_props
line 32:       execute cmd
line 32: hi default BufferVisibleIndex guifg=#abb2bf guibg=#282c34
line 33:    end
function bufferline#highlight#setup[23]..<SNR>28_hi_all[2]..<SNR>28_hi returning #0

continuing in function bufferline#highlight#setup[23]..<SNR>28_hi_all

line 3:    endfor
line 1:    for group in a:groups
line 2:       call call(function('s:hi'), group)
calling function bufferline#highlight#setup[23]..<SNR>28_hi_all[2]..<SNR>28_hi('BufferVisibleMod', '#e5c07b', '#282c34')

line 1:    let fg = ''
line 2:    let bg = ''
line 3:    let attr = ''
line 4: 
line 5:    if type(a:1) == 3
line 6:       let fg   = get(a:1, 0, '')
line 7:       let bg   = get(a:1, 1, '')
line 8:       let attr = get(a:1, 2, '')
line 9:    else
line 10:       let fg   = get(a:000, 0, '')
line 11:       let bg   = get(a:000, 1, '')
line 12:       let attr = get(a:000, 2, '')
line 13:    end
line 14: 
line 15:    let has_props = v:false
line 16: 
line 17:    let cmd = 'hi default ' . a:name
line 18:    if !empty(fg) && fg != 'none'
line 19:       let cmd .= ' guifg=' . fg
line 20:       let has_props = v:true
line 21:    end
line 22:    if !empty(bg) && bg != 'none'
line 23:       let cmd .= ' guibg=' . bg
line 24:       let has_props = v:true
line 25:    end
line 26:    if !empty(attr) && attr != 'none'
line 27:       let cmd .= ' gui=' . attr
line 28:       let has_props = v:true
line 29:    end
line 30:    execute 'hi default clear ' a:name
line 30: hi default clear  BufferVisibleMod
line 31:    if has_props
line 32:       execute cmd
line 32: hi default BufferVisibleMod guifg=#e5c07b guibg=#282c34
line 33:    end
function bufferline#highlight#setup[23]..<SNR>28_hi_all[2]..<SNR>28_hi returning #0

continuing in function bufferline#highlight#setup[23]..<SNR>28_hi_all

line 3:    endfor
line 1:    for group in a:groups
line 2:       call call(function('s:hi'), group)
calling function bufferline#highlight#setup[23]..<SNR>28_hi_all[2]..<SNR>28_hi('BufferVisibleSign', '#abb2bf', '#282c34')

line 1:    let fg = ''
line 2:    let bg = ''
line 3:    let attr = ''
line 4: 
line 5:    if type(a:1) == 3
line 6:       let fg   = get(a:1, 0, '')
line 7:       let bg   = get(a:1, 1, '')
line 8:       let attr = get(a:1, 2, '')
line 9:    else
line 10:       let fg   = get(a:000, 0, '')
line 11:       let bg   = get(a:000, 1, '')
line 12:       let attr = get(a:000, 2, '')
line 13:    end
line 14: 
line 15:    let has_props = v:false
line 16: 
line 17:    let cmd = 'hi default ' . a:name
line 18:    if !empty(fg) && fg != 'none'
line 19:       let cmd .= ' guifg=' . fg
line 20:       let has_props = v:true
line 21:    end
line 22:    if !empty(bg) && bg != 'none'
line 23:       let cmd .= ' guibg=' . bg
line 24:       let has_props = v:true
line 25:    end
line 26:    if !empty(attr) && attr != 'none'
line 27:       let cmd .= ' gui=' . attr
line 28:       let has_props = v:true
line 29:    end
line 30:    execute 'hi default clear ' a:name
line 30: hi default clear  BufferVisibleSign
line 31:    if has_props
line 32:       execute cmd
line 32: hi default BufferVisibleSign guifg=#abb2bf guibg=#282c34
line 33:    end
function bufferline#highlight#setup[23]..<SNR>28_hi_all[2]..<SNR>28_hi returning #0

continuing in function bufferline#highlight#setup[23]..<SNR>28_hi_all

line 3:    endfor
line 1:    for group in a:groups
line 2:       call call(function('s:hi'), group)
calling function bufferline#highlight#setup[23]..<SNR>28_hi_all[2]..<SNR>28_hi('BufferVisibleTarget', 'red', '#282c34', 'bold')

line 1:    let fg = ''
line 2:    let bg = ''
line 3:    let attr = ''
line 4: 
line 5:    if type(a:1) == 3
line 6:       let fg   = get(a:1, 0, '')
line 7:       let bg   = get(a:1, 1, '')
line 8:       let attr = get(a:1, 2, '')
line 9:    else
line 10:       let fg   = get(a:000, 0, '')
line 11:       let bg   = get(a:000, 1, '')
line 12:       let attr = get(a:000, 2, '')
line 13:    end
line 14: 
line 15:    let has_props = v:false
line 16: 
line 17:    let cmd = 'hi default ' . a:name
line 18:    if !empty(fg) && fg != 'none'
line 19:       let cmd .= ' guifg=' . fg
line 20:       let has_props = v:true
line 21:    end
line 22:    if !empty(bg) && bg != 'none'
line 23:       let cmd .= ' guibg=' . bg
line 24:       let has_props = v:true
line 25:    end
line 26:    if !empty(attr) && attr != 'none'
line 27:       let cmd .= ' gui=' . attr
line 28:       let has_props = v:true
line 29:    end
line 30:    execute 'hi default clear ' a:name
line 30: hi default clear  BufferVisibleTarget
line 31:    if has_props
line 32:       execute cmd
line 32: hi default BufferVisibleTarget guifg=red guibg=#282c34 gui=bold
line 33:    end
function bufferline#highlight#setup[23]..<SNR>28_hi_all[2]..<SNR>28_hi returning #0

continuing in function bufferline#highlight#setup[23]..<SNR>28_hi_all

line 3:    endfor
line 1:    for group in a:groups
line 2:       call call(function('s:hi'), group)
calling function bufferline#highlight#setup[23]..<SNR>28_hi_all[2]..<SNR>28_hi('BufferInactive', '#888888', '#2c323c')

line 1:    let fg = ''
line 2:    let bg = ''
line 3:    let attr = ''
line 4: 
line 5:    if type(a:1) == 3
line 6:       let fg   = get(a:1, 0, '')
line 7:       let bg   = get(a:1, 1, '')
line 8:       let attr = get(a:1, 2, '')
line 9:    else
line 10:       let fg   = get(a:000, 0, '')
line 11:       let bg   = get(a:000, 1, '')
line 12:       let attr = get(a:000, 2, '')
line 13:    end
line 14: 
line 15:    let has_props = v:false
line 16: 
line 17:    let cmd = 'hi default ' . a:name
line 18:    if !empty(fg) && fg != 'none'
line 19:       let cmd .= ' guifg=' . fg
line 20:       let has_props = v:true
line 21:    end
line 22:    if !empty(bg) && bg != 'none'
line 23:       let cmd .= ' guibg=' . bg
line 24:       let has_props = v:true
line 25:    end
line 26:    if !empty(attr) && attr != 'none'
line 27:       let cmd .= ' gui=' . attr
line 28:       let has_props = v:true
line 29:    end
line 30:    execute 'hi default clear ' a:name
line 30: hi default clear  BufferInactive
line 31:    if has_props
line 32:       execute cmd
line 32: hi default BufferInactive guifg=#888888 guibg=#2c323c
line 33:    end
function bufferline#highlight#setup[23]..<SNR>28_hi_all[2]..<SNR>28_hi returning #0

continuing in function bufferline#highlight#setup[23]..<SNR>28_hi_all

line 3:    endfor
line 1:    for group in a:groups
line 2:       call call(function('s:hi'), group)
calling function bufferline#highlight#setup[23]..<SNR>28_hi_all[2]..<SNR>28_hi('BufferInactiveIndex', '#3b4048', '#2c323c')

line 1:    let fg = ''
line 2:    let bg = ''
line 3:    let attr = ''
line 4: 
line 5:    if type(a:1) == 3
line 6:       let fg   = get(a:1, 0, '')
line 7:       let bg   = get(a:1, 1, '')
line 8:       let attr = get(a:1, 2, '')
line 9:    else
line 10:       let fg   = get(a:000, 0, '')
line 11:       let bg   = get(a:000, 1, '')
line 12:       let attr = get(a:000, 2, '')
line 13:    end
line 14: 
line 15:    let has_props = v:false
line 16: 
line 17:    let cmd = 'hi default ' . a:name
line 18:    if !empty(fg) && fg != 'none'
line 19:       let cmd .= ' guifg=' . fg
line 20:       let has_props = v:true
line 21:    end
line 22:    if !empty(bg) && bg != 'none'
line 23:       let cmd .= ' guibg=' . bg
line 24:       let has_props = v:true
line 25:    end
line 26:    if !empty(attr) && attr != 'none'
line 27:       let cmd .= ' gui=' . attr
line 28:       let has_props = v:true
line 29:    end
line 30:    execute 'hi default clear ' a:name
line 30: hi default clear  BufferInactiveIndex
line 31:    if has_props
line 32:       execute cmd
line 32: hi default BufferInactiveIndex guifg=#3b4048 guibg=#2c323c
line 33:    end
function bufferline#highlight#setup[23]..<SNR>28_hi_all[2]..<SNR>28_hi returning #0

continuing in function bufferline#highlight#setup[23]..<SNR>28_hi_all

line 3:    endfor
line 1:    for group in a:groups
line 2:       call call(function('s:hi'), group)
calling function bufferline#highlight#setup[23]..<SNR>28_hi_all[2]..<SNR>28_hi('BufferInactiveMod', '#e5c07b', '#2c323c')

line 1:    let fg = ''
line 2:    let bg = ''
line 3:    let attr = ''
line 4: 
line 5:    if type(a:1) == 3
line 6:       let fg   = get(a:1, 0, '')
line 7:       let bg   = get(a:1, 1, '')
line 8:       let attr = get(a:1, 2, '')
line 9:    else
line 10:       let fg   = get(a:000, 0, '')
line 11:       let bg   = get(a:000, 1, '')
line 12:       let attr = get(a:000, 2, '')
line 13:    end
line 14: 
line 15:    let has_props = v:false
line 16: 
line 17:    let cmd = 'hi default ' . a:name
line 18:    if !empty(fg) && fg != 'none'
line 19:       let cmd .= ' guifg=' . fg
line 20:       let has_props = v:true
line 21:    end
line 22:    if !empty(bg) && bg != 'none'
line 23:       let cmd .= ' guibg=' . bg
line 24:       let has_props = v:true
line 25:    end
line 26:    if !empty(attr) && attr != 'none'
line 27:       let cmd .= ' gui=' . attr
line 28:       let has_props = v:true
line 29:    end
line 30:    execute 'hi default clear ' a:name
line 30: hi default clear  BufferInactiveMod
line 31:    if has_props
line 32:       execute cmd
line 32: hi default BufferInactiveMod guifg=#e5c07b guibg=#2c323c
line 33:    end
function bufferline#highlight#setup[23]..<SNR>28_hi_all[2]..<SNR>28_hi returning #0

continuing in function bufferline#highlight#setup[23]..<SNR>28_hi_all

line 3:    endfor
line 1:    for group in a:groups
line 2:       call call(function('s:hi'), group)
calling function bufferline#highlight#setup[23]..<SNR>28_hi_all[2]..<SNR>28_hi('BufferInactiveSign', '#3b4048', '#2c323c')

line 1:    let fg = ''
line 2:    let bg = ''
line 3:    let attr = ''
line 4: 
line 5:    if type(a:1) == 3
line 6:       let fg   = get(a:1, 0, '')
line 7:       let bg   = get(a:1, 1, '')
line 8:       let attr = get(a:1, 2, '')
line 9:    else
line 10:       let fg   = get(a:000, 0, '')
line 11:       let bg   = get(a:000, 1, '')
line 12:       let attr = get(a:000, 2, '')
line 13:    end
line 14: 
line 15:    let has_props = v:false
line 16: 
line 17:    let cmd = 'hi default ' . a:name
line 18:    if !empty(fg) && fg != 'none'
line 19:       let cmd .= ' guifg=' . fg
line 20:       let has_props = v:true
line 21:    end
line 22:    if !empty(bg) && bg != 'none'
line 23:       let cmd .= ' guibg=' . bg
line 24:       let has_props = v:true
line 25:    end
line 26:    if !empty(attr) && attr != 'none'
line 27:       let cmd .= ' gui=' . attr
line 28:       let has_props = v:true
line 29:    end
line 30:    execute 'hi default clear ' a:name
line 30: hi default clear  BufferInactiveSign
line 31:    if has_props
line 32:       execute cmd
line 32: hi default BufferInactiveSign guifg=#3b4048 guibg=#2c323c
line 33:    end
function bufferline#highlight#setup[23]..<SNR>28_hi_all[2]..<SNR>28_hi returning #0

continuing in function bufferline#highlight#setup[23]..<SNR>28_hi_all

line 3:    endfor
line 1:    for group in a:groups
line 2:       call call(function('s:hi'), group)
calling function bufferline#highlight#setup[23]..<SNR>28_hi_all[2]..<SNR>28_hi('BufferInactiveTarget', 'red', '#2c323c', 'bold')

line 1:    let fg = ''
line 2:    let bg = ''
line 3:    let attr = ''
line 4: 
line 5:    if type(a:1) == 3
line 6:       let fg   = get(a:1, 0, '')
line 7:       let bg   = get(a:1, 1, '')
line 8:       let attr = get(a:1, 2, '')
line 9:    else
line 10:       let fg   = get(a:000, 0, '')
line 11:       let bg   = get(a:000, 1, '')
line 12:       let attr = get(a:000, 2, '')
line 13:    end
line 14: 
line 15:    let has_props = v:false
line 16: 
line 17:    let cmd = 'hi default ' . a:name
line 18:    if !empty(fg) && fg != 'none'
line 19:       let cmd .= ' guifg=' . fg
line 20:       let has_props = v:true
line 21:    end
line 22:    if !empty(bg) && bg != 'none'
line 23:       let cmd .= ' guibg=' . bg
line 24:       let has_props = v:true
line 25:    end
line 26:    if !empty(attr) && attr != 'none'
line 27:       let cmd .= ' gui=' . attr
line 28:       let has_props = v:true
line 29:    end
line 30:    execute 'hi default clear ' a:name
line 30: hi default clear  BufferInactiveTarget
line 31:    if has_props
line 32:       execute cmd
line 32: hi default BufferInactiveTarget guifg=red guibg=#2c323c gui=bold
line 33:    end
function bufferline#highlight#setup[23]..<SNR>28_hi_all[2]..<SNR>28_hi returning #0

continuing in function bufferline#highlight#setup[23]..<SNR>28_hi_all

line 3:    endfor
line 1:    for group in a:groups
line 2:       call call(function('s:hi'), group)
calling function bufferline#highlight#setup[23]..<SNR>28_hi_all[2]..<SNR>28_hi('BufferTabpages', '#61afef', '#2c323c', 'bold')

line 1:    let fg = ''
line 2:    let bg = ''
line 3:    let attr = ''
line 4: 
line 5:    if type(a:1) == 3
line 6:       let fg   = get(a:1, 0, '')
line 7:       let bg   = get(a:1, 1, '')
line 8:       let attr = get(a:1, 2, '')
line 9:    else
line 10:       let fg   = get(a:000, 0, '')
line 11:       let bg   = get(a:000, 1, '')
line 12:       let attr = get(a:000, 2, '')
line 13:    end
line 14: 
line 15:    let has_props = v:false
line 16: 
line 17:    let cmd = 'hi default ' . a:name
line 18:    if !empty(fg) && fg != 'none'
line 19:       let cmd .= ' guifg=' . fg
line 20:       let has_props = v:true
line 21:    end
line 22:    if !empty(bg) && bg != 'none'
line 23:       let cmd .= ' guibg=' . bg
line 24:       let has_props = v:true
line 25:    end
line 26:    if !empty(attr) && attr != 'none'
line 27:       let cmd .= ' gui=' . attr
line 28:       let has_props = v:true
line 29:    end
line 30:    execute 'hi default clear ' a:name
line 30: hi default clear  BufferTabpages
line 31:    if has_props
line 32:       execute cmd
line 32: hi default BufferTabpages guifg=#61afef guibg=#2c323c gui=bold
line 33:    end
function bufferline#highlight#setup[23]..<SNR>28_hi_all[2]..<SNR>28_hi returning #0

continuing in function bufferline#highlight#setup[23]..<SNR>28_hi_all

line 3:    endfor
line 1:    for group in a:groups
line 2:       call call(function('s:hi'), group)
calling function bufferline#highlight#setup[23]..<SNR>28_hi_all[2]..<SNR>28_hi('BufferTabpageFill', '#888888', '#2c323c')

line 1:    let fg = ''
line 2:    let bg = ''
line 3:    let attr = ''
line 4: 
line 5:    if type(a:1) == 3
line 6:       let fg   = get(a:1, 0, '')
line 7:       let bg   = get(a:1, 1, '')
line 8:       let attr = get(a:1, 2, '')
line 9:    else
line 10:       let fg   = get(a:000, 0, '')
line 11:       let bg   = get(a:000, 1, '')
line 12:       let attr = get(a:000, 2, '')
line 13:    end
line 14: 
line 15:    let has_props = v:false
line 16: 
line 17:    let cmd = 'hi default ' . a:name
line 18:    if !empty(fg) && fg != 'none'
line 19:       let cmd .= ' guifg=' . fg
line 20:       let has_props = v:true
line 21:    end
line 22:    if !empty(bg) && bg != 'none'
line 23:       let cmd .= ' guibg=' . bg
line 24:       let has_props = v:true
line 25:    end
line 26:    if !empty(attr) && attr != 'none'
line 27:       let cmd .= ' gui=' . attr
line 28:       let has_props = v:true
line 29:    end
line 30:    execute 'hi default clear ' a:name
line 30: hi default clear  BufferTabpageFill
line 31:    if has_props
line 32:       execute cmd
line 32: hi default BufferTabpageFill guifg=#888888 guibg=#2c323c
line 33:    end
function bufferline#highlight#setup[23]..<SNR>28_hi_all[2]..<SNR>28_hi returning #0

continuing in function bufferline#highlight#setup[23]..<SNR>28_hi_all

line 3:    endfor
line 1:    for group in a:groups
line 2:       call call(function('s:hi'), group)
line 3:    endfor
function bufferline#highlight#setup[23]..<SNR>28_hi_all returning #0

continuing in function bufferline#highlight#setup

line 42: 
line 43:    call s:hi_link([ ['BufferCurrentIcon',  'BufferCurrent'], ['BufferVisibleIcon',  'BufferVisible'], ['BufferInactiveIcon', 'BufferInactive'], ['BufferOffset',       'BufferTabpageFill'], ])
calling function bufferline#highlight#setup[43]..<SNR>28_hi_link([['BufferCurrentIcon', 'BufferCurrent'... ['BufferOffset', 'BufferTabpageFill']])

line 1:    for pair in a:pairs
line 2:       execute 'hi default link ' . join(pair)
line 2: hi default link BufferCurrentIcon BufferCurrent
line 3:    endfor
line 1:    for pair in a:pairs
line 2:       execute 'hi default link ' . join(pair)
line 2: hi default link BufferVisibleIcon BufferVisible
line 3:    endfor
line 1:    for pair in a:pairs
line 2:       execute 'hi default link ' . join(pair)
line 2: hi default link BufferInactiveIcon BufferInactive
line 3:    endfor
line 1:    for pair in a:pairs
line 2:       execute 'hi default link ' . join(pair)
line 2: hi default link BufferOffset BufferTabpageFill
line 3:    endfor
line 1:    for pair in a:pairs
line 2:       execute 'hi default link ' . join(pair)
line 3:    endfor
function bufferline#highlight#setup[43]..<SNR>28_hi_link returning #0

continuing in function bufferline#highlight#setup

line 49: 
line 50:    lua require'bufferline.icons'.set_highlights()
line 50: hi! DevIconDefaultCurrent guifg=#6d8086 guibg=#282c34
function bufferline#highlight#setup returning #0

continuing in VimEnter Autocommands for "*"

Executing VimEnter Autocommands for "*"
autocommand call s:IndentBlanklineInit()

Executing: call s:IndentBlanklineInit()
calling function <SNR>29_IndentBlanklineInit()

line 1:     if exists(':IndentLinesEnable') && !g:indent_blankline_disable_warning_message
line 2:         echohl Error
line 3:         echom 'indent-blankline does not require IndentLine anymore, please remove it.'
line 4:         echohl None
line 5:     endif
line 6:     IndentBlanklineRefresh!
line 6: call s:try('lua require("indent_blankline.commands").refresh("!" == "!")')
calling function <SNR>29_IndentBlanklineInit[6]..<SNR>29_try('lua require("indent_blankline.commands").refresh("!" == "!")')

line 1:     try
line 2:         execute a:cmd
line 2: lua require("indent_blankline.commands").refresh("!" == "!")
Executing: windo call indent_blankline#Refresh()
Executing: call indent_blankline#Refresh()
calling function indent_blankline#Refresh()

line 1:     try
line 2:         lua require("indent_blankline").refresh()
calling function indent_blankline#Refresh[2]..indent_blankline#helper#GetListChar('eol', '')

line 1:     let l:list_chars = {}
line 2: 
line 3:     for l:char in split(&listchars, ',')
line 4:         let l:split = split(l:char, ':')
line 5:         let l:list_chars[l:split[0]] = l:split[1]
line 6:     endfor
line 3:     for l:char in split(&listchars, ',')
line 4:         let l:split = split(l:char, ':')
line 5:         let l:list_chars[l:split[0]] = l:split[1]
line 6:     endfor
line 3:     for l:char in split(&listchars, ',')
line 4:         let l:split = split(l:char, ':')
line 5:         let l:list_chars[l:split[0]] = l:split[1]
line 6:     endfor
line 3:     for l:char in split(&listchars, ',')
line 4:         let l:split = split(l:char, ':')
line 5:         let l:list_chars[l:split[0]] = l:split[1]
line 6:     endfor
line 7: 
line 8:     return get(l:list_chars, a:key, a:fallback)
function indent_blankline#Refresh[2]..indent_blankline#helper#GetListChar returning ''

continuing in function indent_blankline#Refresh

line 3:     catch /E12/
line 4:         return
line 5:     catch
line 6:         if g:indent_blankline_debug
line 7:             echohl Error
line 8:             echom 'indent-blankline encountered an error on refresh: ' . v:exception
line 9:             echohl None
line 10:         endif
line 11:     endtry
function indent_blankline#Refresh returning #0

continuing in nvim_exec() called at function <SNR>29_IndentBlanklineInit[6]..<SNR>29_try:2

line 3:     catch /E12/
line 4:         return
line 5:     endtry
function <SNR>29_IndentBlanklineInit[6]..<SNR>29_try returning #0

continuing in function <SNR>29_IndentBlanklineInit

function <SNR>29_IndentBlanklineInit returning #0

continuing in VimEnter Autocommands for "*"

Searching for "autoload/provider/clipboard.vim" in "/Users/andrewgu/.config/nvim,/etc/xdg/nvim,/Users/andrewgu/.local/share/nvim/site,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/telescope.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/popup.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/plenary.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/packer.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-web-devicons,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-tree.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-lspconfig,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-compe,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-base16.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-autopairs,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/neoformat,/Users/andrewgu/.local/share/nvim/site/pack/
Searching for "/Users/andrewgu/.config/nvim/autoload/provider/clipboard.vim"
Searching for "/etc/xdg/nvim/autoload/provider/clipboard.vim"
Searching for "/Users/andrewgu/.local/share/nvim/site/autoload/provider/clipboard.vim"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/telescope.nvim/autoload/provider/clipboard.vim"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/popup.nvim/autoload/provider/clipboard.vim"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/plenary.nvim/autoload/provider/clipboard.vim"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/packer.nvim/autoload/provider/clipboard.vim"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/autoload/provider/clipboard.vim"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-web-devicons/autoload/provider/clipboard.vim"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-tree.lua/autoload/provider/clipboard.vim"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-lspconfig/autoload/provider/clipboard.vim"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-compe/autoload/provider/clipboard.vim"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-base16.lua/autoload/provider/clipboard.vim"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-autopairs/autoload/provider/clipboard.vim"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/neoformat/autoload/provider/clipboard.vim"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/lualine.nvim/autoload/provider/clipboard.vim"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/indent-blankline.nvim/autoload/provider/clipboard.vim"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/gitsigns.nvim/autoload/provider/clipboard.vim"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/barbar.nvim/autoload/provider/clipboard.vim"
Searching for "/usr/local/share/nvim/site/autoload/provider/clipboard.vim"
Searching for "/usr/share/nvim/site/autoload/provider/clipboard.vim"
Searching for "/usr/local/Cellar/neovim/0.5.0/share/nvim/runtime/autoload/provider/clipboard.vim"
chdir(/Users/andrewgu/.config/nvim)
chdir(/usr/local/Cellar/neovim/0.5.0/share/nvim/runtime/autoload/provider)
chdir(/Users/andrewgu/.config/nvim)
sourcing "/usr/local/Cellar/neovim/0.5.0/share/nvim/runtime/autoload/provider/clipboard.vim"
line 1: " The clipboard provider uses shell commands to communicate with the clipboard.
line 2: " The provider function will only be registered if a supported command is
line 3: " available.
line 4: 
line 5: if exists('g:loaded_clipboard_provider')
line 6:   finish
line 7: endif
line 8: " Default to 1.  provider#clipboard#Executable() may set 2.
line 9: " To force a reload:
line 10: "   :unlet g:loaded_clipboard_provider
line 11: "   :runtime autoload/provider/clipboard.vim
line 12: let g:loaded_clipboard_provider = 1
line 13: 
line 14: let s:copy = {}
line 15: let s:paste = {}
line 16: let s:clipboard = {}
line 17: 
line 18: " When caching is enabled, store the jobid of the xclip/xsel process keeping
line 19: " ownership of the selection, so we know how long the cache is valid.
line 20: let s:selection = { 'owner': 0, 'data': [], 'stderr_buffered': v:true }
line 21: 
line 22: function! s:selection.on_exit(jobid, data, event) abort
line 34: 
line 35: let s:selections = { '*': s:selection, '+': copy(s:selection) }
line 36: 
line 37: function! s:try_cmd(cmd, ...) abort
line 50: 
line 51: " Returns TRUE if `cmd` exits with success, else FALSE.
line 52: function! s:cmd_ok(cmd) abort
line 56: 
line 57: function! s:split_cmd(cmd) abort
line 60: 
line 61: let s:cache_enabled = 1
line 62: let s:err = ''
line 63: 
line 64: function! provider#clipboard#Error() abort
line 67: 
line 68: function! provider#clipboard#Executable() abort
line 152: 
line 153: function! s:clipboard.get(reg) abort
line 168: 
line 169: function! s:clipboard.set(lines, regtype, reg) abort
line 227: 
line 228: function! provider#clipboard#Call(method, args) abort
line 239: 
line 240: " eval_has_provider() decides based on this variable.
line 241: let g:loaded_clipboard_provider = empty(provider#clipboard#Executable()) ? 1 : 2
calling function provider#clipboard#Executable()

line 1:   if exists('g:clipboard')
line 2:     if type({}) isnot# type(g:clipboard) || type({}) isnot# type(get(g:clipboard, 'copy', v:null)) || type({}) isnot# type(get(g:clipboard, 'paste', v:null))
line 5:       let s:err = 'clipboard: invalid g:clipboard'
line 6:       return ''
line 7:     endif
line 8: 
line 9:     let s:copy = {}
line 10:     let s:copy['+'] = s:split_cmd(get(g:clipboard.copy, '+', v:null))
line 11:     let s:copy['*'] = s:split_cmd(get(g:clipboard.copy, '*', v:null))
line 12: 
line 13:     let s:paste = {}
line 14:     let s:paste['+'] = s:split_cmd(get(g:clipboard.paste, '+', v:null))
line 15:     let s:paste['*'] = s:split_cmd(get(g:clipboard.paste, '*', v:null))
line 16: 
line 17:     let s:cache_enabled = get(g:clipboard, 'cache_enabled', 0)
line 18:     return get(g:clipboard, 'name', 'g:clipboard')
line 19:   elseif has('mac')
line 20:     let s:copy['+'] = ['pbcopy']
line 21:     let s:paste['+'] = ['pbpaste']
line 22:     let s:copy['*'] = s:copy['+']
line 23:     let s:paste['*'] = s:paste['+']
line 24:     let s:cache_enabled = 0
line 25:     return 'pbcopy'
function provider#clipboard#Executable returning 'pbcopy'

continuing in /usr/local/Cellar/neovim/0.5.0/share/nvim/runtime/autoload/provider/clipboard.vim

finished sourcing /usr/local/Cellar/neovim/0.5.0/share/nvim/runtime/autoload/provider/clipboard.vim
Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling function <SNR>15_Highlight_Matching_Pair()

line 1:   " Remove any previous match.
line 2:   call s:Remove_Matches()
calling function <SNR>15_Highlight_Matching_Pair[2]..<SNR>15_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     silent! call matchdelete(3)
line 3:     let w:paren_hl_on = 0
line 4:   endif
function <SNR>15_Highlight_Matching_Pair[2]..<SNR>15_Remove_Matches returning #0

continuing in function <SNR>15_Highlight_Matching_Pair

line 3: 
line 4:   " Avoid that we remove the popup menu.
line 5:   " Return when there are no colors (looks like the cursor jumps).
line 6:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 7:     return
line 8:   endif
line 9: 
line 10:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 11:   let c_lnum = line('.')
line 12:   let c_col = col('.')
line 13:   let before = 0
line 14: 
line 15:   let text = getline(c_lnum)
line 16:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 17:   if empty(matches)
line 18:     let [c_before, c] = ['', '']
line 19:   else
line 20:     let [c_before, c] = matches[1:2]
line 21:   endif
line 22:   let plist = split(&matchpairs, '.\zs[:,]')
line 23:   let i = index(plist, c)
line 24:   if i < 0
line 25:     " not found, in Insert mode try character before the cursor
line 26:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 27:       let before = strlen(c_before)
line 28:       let c = c_before
line 29:       let i = index(plist, c)
line 30:     endif
line 31:     if i < 0
line 32:       " not found, nothing to do
line 33:       return
function <SNR>15_Highlight_Matching_Pair returning #0

continuing in CursorMoved Autocommands for "*"

Executing WinScrolled Autocommands for "*"
autocommand IndentBlanklineRefresh

Executing: IndentBlanklineRefresh
Executing: call s:try('lua require("indent_blankline.commands").refresh("" == "!")')
calling function <SNR>29_try('lua require("indent_blankline.commands").refresh("" == "!")')

line 1:     try
line 2:         execute a:cmd
line 2: lua require("indent_blankline.commands").refresh("" == "!")
Executing: call indent_blankline#Refresh()
calling function indent_blankline#Refresh()

line 1:     try
line 2:         lua require("indent_blankline").refresh()
calling function indent_blankline#Refresh[2]..indent_blankline#helper#GetListChar('eol', '')

line 1:     let l:list_chars = {}
line 2: 
line 3:     for l:char in split(&listchars, ',')
line 4:         let l:split = split(l:char, ':')
line 5:         let l:list_chars[l:split[0]] = l:split[1]
line 6:     endfor
line 3:     for l:char in split(&listchars, ',')
line 4:         let l:split = split(l:char, ':')
line 5:         let l:list_chars[l:split[0]] = l:split[1]
line 6:     endfor
line 3:     for l:char in split(&listchars, ',')
line 4:         let l:split = split(l:char, ':')
line 5:         let l:list_chars[l:split[0]] = l:split[1]
line 6:     endfor
line 3:     for l:char in split(&listchars, ',')
line 4:         let l:split = split(l:char, ':')
line 5:         let l:list_chars[l:split[0]] = l:split[1]
line 6:     endfor
line 7: 
line 8:     return get(l:list_chars, a:key, a:fallback)
function indent_blankline#Refresh[2]..indent_blankline#helper#GetListChar returning ''

continuing in function indent_blankline#Refresh

line 3:     catch /E12/
line 4:         return
line 5:     catch
line 6:         if g:indent_blankline_debug
line 7:             echohl Error
line 8:             echom 'indent-blankline encountered an error on refresh: ' . v:exception
line 9:             echohl None
line 10:         endif
line 11:     endtry
function indent_blankline#Refresh returning #0

continuing in nvim_exec() called at function <SNR>29_try:2

line 3:     catch /E12/
line 4:         return
line 5:     endtry
function <SNR>29_try returning #0

continuing in WinScrolled Autocommands for "*"

Searching for "lua/lualine/utils/mode.lua" in "/Users/andrewgu/.config/nvim,/etc/xdg/nvim,/Users/andrewgu/.local/share/nvim/site,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/telescope.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/popup.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/plenary.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/packer.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-web-devicons,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-tree.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-lspconfig,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-compe,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-base16.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-autopairs,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/neoformat,/Users/andrewgu/.local/share/nvim/site/pack/packe
Searching for "/Users/andrewgu/.config/nvim/lua/lualine/utils/mode.lua"
Searching for "/etc/xdg/nvim/lua/lualine/utils/mode.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/lua/lualine/utils/mode.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/telescope.nvim/lua/lualine/utils/mode.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/popup.nvim/lua/lualine/utils/mode.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/plenary.nvim/lua/lualine/utils/mode.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/packer.nvim/lua/lualine/utils/mode.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/lua/lualine/utils/mode.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-web-devicons/lua/lualine/utils/mode.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-tree.lua/lua/lualine/utils/mode.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-lspconfig/lua/lualine/utils/mode.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-compe/lua/lualine/utils/mode.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-base16.lua/lua/lualine/utils/mode.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-autopairs/lua/lualine/utils/mode.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/neoformat/lua/lualine/utils/mode.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/lualine.nvim/lua/lualine/utils/mode.lua"

--- Terminal info --- {{{
&term: screen-256color
Description: GNU Screen with 256 colors
Aliases: screen-256color
Boolean capabilities:
  auto_left_margin          bw         = false
  auto_right_margin         am         = true
  no_esc_ctlc               xsb        = false
  ceol_standout_glitch      xhp        = false
  eat_newline_glitch        xenl       = true
  erase_overstrike          eo         = false
  generic_type              gn         = false
  hard_copy                 hc         = false
  has_meta_key              km         = true
  has_status_line           hs         = false
  insert_null_glitch        in         = false
  memory_above              da         = false
  memory_below              db         = false
  move_insert_mode          mir        = true
  move_standout_mode        msgr       = true
  over_strike               os         = false
  status_line_esc_ok        eslok      = false
  dest_tabs_magic_smso      xt         = false
  tilde_glitch              hz         = false
  transparent_underline     ul         = false
  xon_xoff                  xon        = false
  needs_xon_xoff            nxon       = false
  prtr_silent               mc5i       = false
  hard_cursor               chts       = false
  non_rev_rmcup             nrrmc      = false
  no_pad_char               npc        = false
  non_dest_scroll_region    ndscr      = false
  can_change                ccc        = false
  back_color_erase          bce        = false
  hue_lightness_saturation  hls        = false
  col_addr_glitch           xhpa       = false
  cr_cancels_micro_mode     crxm       = false
  has_print_wheel           daisy      = false
  row_addr_glitch           xvpa       = false
  semi_auto_right_margin    sam        = false
  cpi_changes_res           cpix       = false
  lpi_changes_res           lpix       = false
  backspaces_with_bs        OTbs       = true
  crt_no_scrolling          OTns       = false
  no_correctly_working_cr   OTnc       = false
  gnu_has_meta_key          OTMT       = false
  linefeed_is_newline       OTNL       = false
  has_hardware_tabs         OTpt       = true
  return_does_clr_eol       OTxr       = false
Numeric capabilities:
  columns                   cols       = 80
  init_tabs                 it         = 8
  lines                     lines      = 24
  lines_of_memory           lm         = -1
  magic_cookie_glitch       xmc        = -1
  padding_baud_rate         pb         = -1
  virtual_terminal          vt         = -1
  width_status_line         wsl        = -1
  num_labels                nlab       = -1
  label_height              lh         = -1
  label_width               lw         = -1
  max_attributes            ma         = -1
  maximum_windows           wnum       = -1
  max_colors                colors     = 256
  max_pairs                 pairs      = 32767
  no_color_video            ncv        = 3
  buffer_capacity           bufsz      = -1
  dot_vert_spacing          spinv      = -1
  dot_horz_spacing          spinh      = -1
  max_micro_address         maddr      = -1
  max_micro_jump            mjump      = -1
  micro_col_size            mcs        = -1
  micro_line_size           mls        = -1
  number_of_pins            npins      = -1
  output_res_char           orc        = -1
  output_res_line           orl        = -1
  output_res_horz_inch      orhi       = -1
  output_res_vert_inch      orvi       = -1
  print_rate                cps        = -1
  wide_char_size            widcs      = -1
  buttons                   btns       = -1
  bit_image_entwining       bitwin     = -1
  bit_image_type            bitype     = -1
  magic_cookie_glitch_ul    OTug       = -1
  carriage_return_delay     OTdC       = -1
  new_line_delay            OTdN       = -1
  backspace_delay           OTdB       = -1
  horizontal_tab_delay      OTdT       = -1
  number_of_function_keys   OTkn       = -1
String capabilities:
  back_tab                  cbt        = <Esc>[Z
  bell                      bel        = <C-G>
  carriage_return           cr         = <CR>
  change_scroll_region      csr        = <Esc>[%i%p1%d;%p2%dr
  clear_all_tabs            tbc        = <Esc>[3g
  clear_screen              clear      = <Esc>[H<Esc>[J
  clr_eol                   el         = <Esc>[K
  clr_eos                   ed         = <Esc>[J
  cursor_address            cup        = <Esc>[%i%p1%d;%p2%dH
  cursor_down               cud1       = <NL>
  cursor_home               home       = <Esc>[H
  cursor_invisible          civis      = <Esc>[?25l
  cursor_left               cub1       = <C-H>
  cursor_normal             cnorm      = <Esc>[34h<Esc>[?25h
  cursor_right              cuf1       = <Esc>[C
  cursor_up                 cuu1       = <Esc>M
  cursor_visible            cvvis      = <Esc>[34l
  delete_character          dch1       = <Esc>[P
  delete_line               dl1        = <Esc>[M
  enter_alt_charset_mode    smacs      = <C-N>
  enter_blink_mode          blink      = <Esc>[5m
  enter_bold_mode           bold       = <Esc>[1m
  enter_ca_mode             smcup      = <Esc>[?1049h
  enter_insert_mode         smir       = <Esc>[4h
  enter_reverse_mode        rev        = <Esc>[7m
  enter_standout_mode       smso       = <Esc>[3m
  enter_underline_mode      smul       = <Esc>[4m
  exit_alt_charset_mode     rmacs      = <C-O>
  exit_attribute_mode       sgr0       = <Esc>[m<C-O>
  exit_ca_mode              rmcup      = <Esc>[?1049l
  exit_insert_mode          rmir       = <Esc>[4l
  exit_standout_mode        rmso       = <Esc>[23m
  exit_underline_mode       rmul       = <Esc>[24m
  flash_screen              flash      = <Esc>g
  from_status_line          fsl        = <Esc>\
  init_2string              is2        = <Esc>)0
  insert_line               il1        = <Esc>[L
  key_backspace             kbs        = <C-H>
  key_dc                    kdch1      = <Esc>[3~
  key_down                  kcud1      = <Esc>OB
  key_f1                    kf1        = <Esc>OP
  key_f10                   kf10       = <Esc>[21~
  key_f2                    kf2        = <Esc>OQ
  key_f3                    kf3        = <Esc>OR
  key_f4                    kf4        = <Esc>OS
  key_f5                    kf5        = <Esc>[15~
  key_f6                    kf6        = <Esc>[17~
  key_f7                    kf7        = <Esc>[18~
  key_f8                    kf8        = <Esc>[19~
  key_f9                    kf9        = <Esc>[20~
  key_home                  khome      = <Esc>[1~
  key_ic                    kich1      = <Esc>[2~
  key_left                  kcub1      = <Esc>OD
  key_npage                 knp        = <Esc>[6~
  key_ppage                 kpp        = <Esc>[5~
  key_right                 kcuf1      = <Esc>OC
  key_up                    kcuu1      = <Esc>OA
  keypad_local              rmkx       = <Esc>[?1l<Esc>>
  keypad_xmit               smkx       = <Esc>[?1h<Esc>=
  newline                   nel        = <Esc>E
  parm_dch                  dch        = <Esc>[%p1%dP
  parm_delete_line          dl         = <Esc>[%p1%dM
  parm_down_cursor          cud        = <Esc>[%p1%dB
  parm_ich                  ich        = <Esc>[%p1%d@
  parm_insert_line          il         = <Esc>[%p1%dL
  parm_left_cursor          cub        = <Esc>[%p1%dD
  parm_right_cursor         cuf        = <Esc>[%p1%dC
  parm_up_cursor            cuu        = <Esc>[%p1%dA
  reset_2string             rs2        = <Esc>c<Esc>[?1000l<Esc>[?25h
  restore_cursor            rc         = <Esc>8
  save_cursor               sc         = <Esc>7
  scroll_forward            ind        = <NL>
  scroll_reverse            ri         = <Esc>M
  set_attributes            sgr        = <Esc>[0%?%p6%t;1%;%?%p1%t;3%;%?%p2%t;4%;%?%p3%t;7%;%?%p4%t;5%;m%?%p9%t<C-N>%e<C-O>%;
  set_tab                   hts        = <Esc>H
  tab                       ht         = <Tab>
  to_status_line            tsl        = <Esc>_
  acs_chars                 acsc       = ++,,--..00``aaffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzz{{||}}~~
  key_btab                  kcbt       = <Esc>[Z
  ena_acs                   enacs      = <Esc>(B<Esc>)0
  key_end                   kend       = <Esc>[4~
  key_f11                   kf11       = <Esc>[23~
  key_f12                   kf12       = <Esc>[24~
  clr_bol                   el1        = <Esc>[1K
  orig_pair                 op         = <Esc>[39;49m
  key_mouse                 kmous      = <Esc>[M
  set_a_foreground          setaf      = <Esc>[%?%p1%{8}%<%t3%p1%d%e%p1%{16}%<%t9%p1%{8}%-%d%e38;5;%p1%d%;m
  set_a_background          setab      = <Esc>[%?%p1%{8}%<%t4%p1%d%e%p1%{16}%<%t10%p1%{8}%-%d%e48;5;%p1%d%;m
Extended boolean capabilities:
  AX                        = true
  G0                        = true
Extended string capabilities:
  E0                        = <Esc>(B
  S0                        = <Esc>(%p1%c
  kDC5                      = 
  kDC6                      = 
  kDN                       = 
  kDN5                      = 
  kEND5                     = 
  kEND6                     = 
  kHOM5                     = 
  kHOM6                     = 
  kIC5                      = 
  kIC6                      = 
  kLFT5                     = 
  kNXT5                     = 
  kNXT6                     = 
  kPRV5                     = 
  kPRV6                     = 
  kRIT5                     = 
  kUP                       = 
  kUP5                      = 
  ka2                       = 
  kb1                       = 
  kb3                       = 
  kc2                       = 
  ext.get_bg                = <Esc>]11;?<C-G>
  Ss                        = <Esc>[%p1%d q
  Se                        = <Esc>[ q
  setrgbf                   = <Esc>[38;2;%p1%d;%p2%d;%p3%dm
  setrgbb                   = <Esc>[48;2;%p1%d;%p2%d;%p3%dm
  ext.set_cursor_color      = <Esc>]12;#%p1%06x<C-G>
  ext.reset_cursor_color    = <Esc>]112<C-G>
  ext.save_title            = <Esc>[22;0t
  ext.restore_title         = <Esc>[23;0t
  ext.enable_lr_margin      = <Esc>[?69h
  ext.disable_lr_margin     = <Esc>[?69l
  ext.enable_bpaste         = <Esc>[?2004h
  ext.disable_bpaste        = <Esc>[?2004l
  ext.enable_focus          = <Esc>[?1004h
  ext.disable_focus         = <Esc>[?1004l
  ext.enable_mouse          = <Esc>[?1002h<Esc>[?1006h
  ext.disable_mouse         = <Esc>[?1002l<Esc>[?1006l
}}}

packer.nvim: Error running config for nvim-lspconfig: ...ck/packer/start/nvim-lspconfig/lua/lspconfig/configs.lua:35: attempt to index local 'config' (a nil value)
Searching for "lua/lualine/themes/onedark.lua" in "/Users/andrewgu/.config/nvim,/etc/xdg/nvim,/Users/andrewgu/.local/share/nvim/site,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/telescope.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/popup.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/plenary.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/packer.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-web-devicons,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-tree.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-lspconfig,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-compe,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-base16.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-autopairs,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/neoformat,/Users/andrewgu/.local/share/nvim/site/pack/p
Searching for "/Users/andrewgu/.config/nvim/lua/lualine/themes/onedark.lua"
Searching for "/etc/xdg/nvim/lua/lualine/themes/onedark.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/lua/lualine/themes/onedark.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/telescope.nvim/lua/lualine/themes/onedark.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/popup.nvim/lua/lualine/themes/onedark.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/plenary.nvim/lua/lualine/themes/onedark.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/packer.nvim/lua/lualine/themes/onedark.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/lua/lualine/themes/onedark.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-web-devicons/lua/lualine/themes/onedark.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-tree.lua/lua/lualine/themes/onedark.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-lspconfig/lua/lualine/themes/onedark.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-compe/lua/lualine/themes/onedark.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-base16.lua/lua/lualine/themes/onedark.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-autopairs/lua/lualine/themes/onedark.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/neoformat/lua/lualine/themes/onedark.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/lualine.nvim/lua/lualine/themes/onedark.lua"
Executing: highlight lualine_c_normal guifg=#abb2bf guibg=#2c323d
Executing: highlight lualine_a_normal guifg=#282c34 guibg=#98c379 cterm=bold gui=bold
Executing: highlight lualine_b_normal guifg=#abb2bf guibg=#3e4452
Executing: highlight lualine_a_visual guifg=#282c34 guibg=#c678dd cterm=bold gui=bold
Executing: highlight lualine_a_replace guifg=#282c34 guibg=#e06c75 cterm=bold gui=bold
Executing: highlight lualine_a_insert guifg=#282c34 guibg=#61afef cterm=bold gui=bold
Executing: highlight lualine_c_inactive guifg=#5c6370 guibg=#2c323d
Executing: highlight lualine_a_inactive guifg=#5c6370 guibg=#282c34 cterm=bold gui=bold
Executing: highlight lualine_b_inactive guifg=#5c6370 guibg=#282c34
Executing:           augroup lualine
Executing:             autocmd ColorScheme * lua require'lualine.utils.utils'.reload_highlights()
Executing:           augroup END
Executing:           
Searching for "lua/lualine/components/progress.lua" in "/Users/andrewgu/.config/nvim,/etc/xdg/nvim,/Users/andrewgu/.local/share/nvim/site,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/telescope.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/popup.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/plenary.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/packer.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-web-devicons,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-tree.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-lspconfig,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-compe,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-base16.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-autopairs,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/neoformat,/Users/andrewgu/.local/share/nvim/site/p
Searching for "/Users/andrewgu/.config/nvim/lua/lualine/components/progress.lua"
Searching for "/etc/xdg/nvim/lua/lualine/components/progress.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/lua/lualine/components/progress.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/telescope.nvim/lua/lualine/components/progress.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/popup.nvim/lua/lualine/components/progress.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/plenary.nvim/lua/lualine/components/progress.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/packer.nvim/lua/lualine/components/progress.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/lua/lualine/components/progress.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-web-devicons/lua/lualine/components/progress.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-tree.lua/lua/lualine/components/progress.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-lspconfig/lua/lualine/components/progress.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-compe/lua/lualine/components/progress.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-base16.lua/lua/lualine/components/progress.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-autopairs/lua/lualine/components/progress.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/neoformat/lua/lualine/components/progress.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/lualine.nvim/lua/lualine/components/progress.lua"
Searching for "lua/lualine/component.lua" in "/Users/andrewgu/.config/nvim,/etc/xdg/nvim,/Users/andrewgu/.local/share/nvim/site,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/telescope.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/popup.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/plenary.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/packer.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-web-devicons,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-tree.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-lspconfig,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-compe,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-base16.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-autopairs,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/neoformat,/Users/andrewgu/.local/share/nvim/site/pack/packer
Searching for "/Users/andrewgu/.config/nvim/lua/lualine/component.lua"
Searching for "/etc/xdg/nvim/lua/lualine/component.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/lua/lualine/component.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/telescope.nvim/lua/lualine/component.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/popup.nvim/lua/lualine/component.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/plenary.nvim/lua/lualine/component.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/packer.nvim/lua/lualine/component.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/lua/lualine/component.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-web-devicons/lua/lualine/component.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-tree.lua/lua/lualine/component.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-lspconfig/lua/lualine/component.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-compe/lua/lualine/component.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-base16.lua/lua/lualine/component.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-autopairs/lua/lualine/component.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/neoformat/lua/lualine/component.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/lualine.nvim/lua/lualine/component.lua"
Searching for "lua/lualine/components/location.lua" in "/Users/andrewgu/.config/nvim,/etc/xdg/nvim,/Users/andrewgu/.local/share/nvim/site,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/telescope.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/popup.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/plenary.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/packer.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-web-devicons,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-tree.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-lspconfig,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-compe,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-base16.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-autopairs,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/neoformat,/Users/andrewgu/.local/share/nvim/site/p
Searching for "/Users/andrewgu/.config/nvim/lua/lualine/components/location.lua"
Searching for "/etc/xdg/nvim/lua/lualine/components/location.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/lua/lualine/components/location.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/telescope.nvim/lua/lualine/components/location.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/popup.nvim/lua/lualine/components/location.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/plenary.nvim/lua/lualine/components/location.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/packer.nvim/lua/lualine/components/location.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/lua/lualine/components/location.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-web-devicons/lua/lualine/components/location.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-tree.lua/lua/lualine/components/location.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-lspconfig/lua/lualine/components/location.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-compe/lua/lualine/components/location.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-base16.lua/lua/lualine/components/location.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-autopairs/lua/lualine/components/location.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/neoformat/lua/lualine/components/location.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/lualine.nvim/lua/lualine/components/location.lua"
Searching for "lua/lualine/components/mode.lua" in "/Users/andrewgu/.config/nvim,/etc/xdg/nvim,/Users/andrewgu/.local/share/nvim/site,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/telescope.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/popup.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/plenary.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/packer.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-web-devicons,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-tree.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-lspconfig,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-compe,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-base16.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-autopairs,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/neoformat,/Users/andrewgu/.local/share/nvim/site/pack/
Searching for "/Users/andrewgu/.config/nvim/lua/lualine/components/mode.lua"
Searching for "/etc/xdg/nvim/lua/lualine/components/mode.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/lua/lualine/components/mode.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/telescope.nvim/lua/lualine/components/mode.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/popup.nvim/lua/lualine/components/mode.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/plenary.nvim/lua/lualine/components/mode.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/packer.nvim/lua/lualine/components/mode.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/lua/lualine/components/mode.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-web-devicons/lua/lualine/components/mode.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-tree.lua/lua/lualine/components/mode.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-lspconfig/lua/lualine/components/mode.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-compe/lua/lualine/components/mode.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-base16.lua/lua/lualine/components/mode.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-autopairs/lua/lualine/components/mode.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/neoformat/lua/lualine/components/mode.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/lualine.nvim/lua/lualine/components/mode.lua"
Searching for "lua/lualine/components/branch.lua" in "/Users/andrewgu/.config/nvim,/etc/xdg/nvim,/Users/andrewgu/.local/share/nvim/site,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/telescope.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/popup.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/plenary.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/packer.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-web-devicons,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-tree.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-lspconfig,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-compe,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-base16.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-autopairs,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/neoformat,/Users/andrewgu/.local/share/nvim/site/pac
Searching for "/Users/andrewgu/.config/nvim/lua/lualine/components/branch.lua"
Searching for "/etc/xdg/nvim/lua/lualine/components/branch.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/lua/lualine/components/branch.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/telescope.nvim/lua/lualine/components/branch.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/popup.nvim/lua/lualine/components/branch.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/plenary.nvim/lua/lualine/components/branch.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/packer.nvim/lua/lualine/components/branch.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/lua/lualine/components/branch.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-web-devicons/lua/lualine/components/branch.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-tree.lua/lua/lualine/components/branch.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-lspconfig/lua/lualine/components/branch.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-compe/lua/lualine/components/branch.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-base16.lua/lua/lualine/components/branch.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-autopairs/lua/lualine/components/branch.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/neoformat/lua/lualine/components/branch.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/lualine.nvim/lua/lualine/components/branch.lua"
Executing: autocmd BufEnter * lua require'lualine.components.branch'.update_branch()
Searching for "lua/lualine/components/filename.lua" in "/Users/andrewgu/.config/nvim,/etc/xdg/nvim,/Users/andrewgu/.local/share/nvim/site,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/telescope.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/popup.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/plenary.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/packer.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-web-devicons,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-tree.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-lspconfig,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-compe,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-base16.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-autopairs,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/neoformat,/Users/andrewgu/.local/share/nvim/site/p
Searching for "/Users/andrewgu/.config/nvim/lua/lualine/components/filename.lua"
Searching for "/etc/xdg/nvim/lua/lualine/components/filename.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/lua/lualine/components/filename.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/telescope.nvim/lua/lualine/components/filename.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/popup.nvim/lua/lualine/components/filename.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/plenary.nvim/lua/lualine/components/filename.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/packer.nvim/lua/lualine/components/filename.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/lua/lualine/components/filename.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-web-devicons/lua/lualine/components/filename.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-tree.lua/lua/lualine/components/filename.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-lspconfig/lua/lualine/components/filename.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-compe/lua/lualine/components/filename.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-base16.lua/lua/lualine/components/filename.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-autopairs/lua/lualine/components/filename.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/neoformat/lua/lualine/components/filename.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/lualine.nvim/lua/lualine/components/filename.lua"
Searching for "lua/lualine/components/encoding.lua" in "/Users/andrewgu/.config/nvim,/etc/xdg/nvim,/Users/andrewgu/.local/share/nvim/site,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/telescope.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/popup.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/plenary.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/packer.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-web-devicons,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-tree.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-lspconfig,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-compe,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-base16.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-autopairs,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/neoformat,/Users/andrewgu/.local/share/nvim/site/p
Searching for "/Users/andrewgu/.config/nvim/lua/lualine/components/encoding.lua"
Searching for "/etc/xdg/nvim/lua/lualine/components/encoding.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/lua/lualine/components/encoding.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/telescope.nvim/lua/lualine/components/encoding.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/popup.nvim/lua/lualine/components/encoding.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/plenary.nvim/lua/lualine/components/encoding.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/packer.nvim/lua/lualine/components/encoding.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/lua/lualine/components/encoding.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-web-devicons/lua/lualine/components/encoding.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-tree.lua/lua/lualine/components/encoding.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-lspconfig/lua/lualine/components/encoding.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-compe/lua/lualine/components/encoding.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-base16.lua/lua/lualine/components/encoding.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-autopairs/lua/lualine/components/encoding.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/neoformat/lua/lualine/components/encoding.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/lualine.nvim/lua/lualine/components/encoding.lua"
Searching for "lua/lualine/components/fileformat.lua" in "/Users/andrewgu/.config/nvim,/etc/xdg/nvim,/Users/andrewgu/.local/share/nvim/site,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/telescope.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/popup.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/plenary.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/packer.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-web-devicons,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-tree.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-lspconfig,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-compe,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-base16.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-autopairs,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/neoformat,/Users/andrewgu/.local/share/nvim/site
Searching for "/Users/andrewgu/.config/nvim/lua/lualine/components/fileformat.lua"
Searching for "/etc/xdg/nvim/lua/lualine/components/fileformat.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/lua/lualine/components/fileformat.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/telescope.nvim/lua/lualine/components/fileformat.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/popup.nvim/lua/lualine/components/fileformat.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/plenary.nvim/lua/lualine/components/fileformat.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/packer.nvim/lua/lualine/components/fileformat.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/lua/lualine/components/fileformat.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-web-devicons/lua/lualine/components/fileformat.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-tree.lua/lua/lualine/components/fileformat.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-lspconfig/lua/lualine/components/fileformat.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-compe/lua/lualine/components/fileformat.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-base16.lua/lua/lualine/components/fileformat.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-autopairs/lua/lualine/components/fileformat.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/neoformat/lua/lualine/components/fileformat.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/lualine.nvim/lua/lualine/components/fileformat.lua"
Searching for "lua/lualine/components/filetype.lua" in "/Users/andrewgu/.config/nvim,/etc/xdg/nvim,/Users/andrewgu/.local/share/nvim/site,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/telescope.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/popup.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/plenary.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/packer.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-web-devicons,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-tree.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-lspconfig,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-compe,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-base16.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-autopairs,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/neoformat,/Users/andrewgu/.local/share/nvim/site/p
Searching for "/Users/andrewgu/.config/nvim/lua/lualine/components/filetype.lua"
Searching for "/etc/xdg/nvim/lua/lualine/components/filetype.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/lua/lualine/components/filetype.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/telescope.nvim/lua/lualine/components/filetype.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/popup.nvim/lua/lualine/components/filetype.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/plenary.nvim/lua/lualine/components/filetype.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/packer.nvim/lua/lualine/components/filetype.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/lua/lualine/components/filetype.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-web-devicons/lua/lualine/components/filetype.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-tree.lua/lua/lualine/components/filetype.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-lspconfig/lua/lualine/components/filetype.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-compe/lua/lualine/components/filetype.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-base16.lua/lua/lualine/components/filetype.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-autopairs/lua/lualine/components/filetype.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/neoformat/lua/lualine/components/filetype.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/lualine.nvim/lua/lualine/components/filetype.lua"
Executing command: "'/bin/zsh' '-c' 'git -C '/Users/andrewgu/.config/nvim' rev-parse --show-toplevel'"


Executing command: "'/bin/zsh' '-c' 'git -C '/Users/andrewgu/.config/nvim' config --type=bool status.showUntrackedFiles'"


Executing command: "'/bin/zsh' '-c' 'git -C '/Users/andrewgu/.config/nvim' status --porcelain=v1 --ignored=matching -u'"


Executing: vsp
Executing WinLeave Autocommands for "*"
autocommand call s:Remove_Matches()

Executing: call s:Remove_Matches()
calling function <SNR>15_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     silent! call matchdelete(3)
line 3:     let w:paren_hl_on = 0
line 4:   endif
function <SNR>15_Remove_Matches returning #0

continuing in WinLeave Autocommands for "*"

Executing WinLeave Autocommands for "*"
autocommand lua vim.wo.statusline=require'lualine'.statusline()

Executing: lua vim.wo.statusline=require'lualine'.statusline()
Executing WinLeave Autocommands for "*"
autocommand call bufferline#update()

Executing: call bufferline#update()
calling function bufferline#update()

line 1:    let new_value = bufferline#render(a:0 > 0 ? a:1 : v:false)
calling function bufferline#update[1]..bufferline#render(v:false)

line 1:    let result = luaeval("require'bufferline.render'.render_safe(_A)", a:update_names)
calling function bufferline#update[1]..bufferline#render[1]..bufferline#filter('&buflisted')

line 1:     let list = []
line 2:     for line in split(execute('ls!'), "\n")
line 2: ls!
  1 %a   "."                            line 1
  2u h-  "NvimTree"                     line 0
line 3:         call add(list, 0+matchstr(line, '\v\d+'))
line 4:     endfor
line 2:     for line in split(execute('ls!'), "\n")
line 3:         call add(list, 0+matchstr(line, '\v\d+'))
line 4:     endfor
line 2:     for line in split(execute('ls!'), "\n")
line 3:         call add(list, 0+matchstr(line, '\v\d+'))
line 4:     endfor
line 2:     for line in split(execute('ls!'), "\n")
line 3:         call add(list, 0+matchstr(line, '\v\d+'))
line 4:     endfor
line 5:     for a_expr in a:000
line 6:         let expr = a_expr
line 7:         let expr = substitute(expr, '&\w\+', 'getbufvar(v:val, "\0")', 'g')
line 8:         call filter(list, expr)
line 9:     endfor
line 5:     for a_expr in a:000
line 6:         let expr = a_expr
line 7:         let expr = substitute(expr, '&\w\+', 'getbufvar(v:val, "\0")', 'g')
line 8:         call filter(list, expr)
line 9:     endfor
line 10:     return list
function bufferline#update[1]..bufferline#render[1]..bufferline#filter returning [1]

continuing in function bufferline#update[1]..bufferline#render

line 2: 
line 3:    if result[0]
line 4:       return result[1]
function bufferline#update[1]..bufferline#render returning '%1@BufferlineMainClickHandler@%#Buffe...ufferTabpageFill#▎%#BufferTabpageFill#'

continuing in function bufferline#update

line 2:    if new_value == s:last_tabline
line 3:       return
function bufferline#update returning #0

continuing in WinLeave Autocommands for "*"

Executing WinEnter Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling function <SNR>15_Highlight_Matching_Pair()

line 1:   " Remove any previous match.
line 2:   call s:Remove_Matches()
calling function <SNR>15_Highlight_Matching_Pair[2]..<SNR>15_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     silent! call matchdelete(3)
line 3:     let w:paren_hl_on = 0
line 4:   endif
function <SNR>15_Highlight_Matching_Pair[2]..<SNR>15_Remove_Matches returning #0

continuing in function <SNR>15_Highlight_Matching_Pair

line 3: 
line 4:   " Avoid that we remove the popup menu.
line 5:   " Return when there are no colors (looks like the cursor jumps).
line 6:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 7:     return
line 8:   endif
line 9: 
line 10:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 11:   let c_lnum = line('.')
line 12:   let c_col = col('.')
line 13:   let before = 0
line 14: 
line 15:   let text = getline(c_lnum)
line 16:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 17:   if empty(matches)
line 18:     let [c_before, c] = ['', '']
line 19:   else
line 20:     let [c_before, c] = matches[1:2]
line 21:   endif
line 22:   let plist = split(&matchpairs, '.\zs[:,]')
line 23:   let i = index(plist, c)
line 24:   if i < 0
line 25:     " not found, in Insert mode try character before the cursor
line 26:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 27:       let before = strlen(c_before)
line 28:       let c = c_before
line 29:       let i = index(plist, c)
line 30:     endif
line 31:     if i < 0
line 32:       " not found, nothing to do
line 33:       return
function <SNR>15_Highlight_Matching_Pair returning #0

continuing in WinEnter Autocommands for "*"

Executing WinEnter Autocommands for "*"
autocommand set statusline<

Executing: set statusline<
Executing WinEnter Autocommands for "*"
autocommand call bufferline#update()

Executing: call bufferline#update()
calling function bufferline#update()

line 1:    let new_value = bufferline#render(a:0 > 0 ? a:1 : v:false)
calling function bufferline#update[1]..bufferline#render(v:false)

line 1:    let result = luaeval("require'bufferline.render'.render_safe(_A)", a:update_names)
calling function bufferline#update[1]..bufferline#render[1]..bufferline#filter('&buflisted')

line 1:     let list = []
line 2:     for line in split(execute('ls!'), "\n")
line 2: ls!
  1 %a   "."                            line 1
  2u h-  "NvimTree"                     line 0
line 3:         call add(list, 0+matchstr(line, '\v\d+'))
line 4:     endfor
line 2:     for line in split(execute('ls!'), "\n")
line 3:         call add(list, 0+matchstr(line, '\v\d+'))
line 4:     endfor
line 2:     for line in split(execute('ls!'), "\n")
line 3:         call add(list, 0+matchstr(line, '\v\d+'))
line 4:     endfor
line 2:     for line in split(execute('ls!'), "\n")
line 3:         call add(list, 0+matchstr(line, '\v\d+'))
line 4:     endfor
line 5:     for a_expr in a:000
line 6:         let expr = a_expr
line 7:         let expr = substitute(expr, '&\w\+', 'getbufvar(v:val, "\0")', 'g')
line 8:         call filter(list, expr)
line 9:     endfor
line 5:     for a_expr in a:000
line 6:         let expr = a_expr
line 7:         let expr = substitute(expr, '&\w\+', 'getbufvar(v:val, "\0")', 'g')
line 8:         call filter(list, expr)
line 9:     endfor
line 10:     return list
function bufferline#update[1]..bufferline#render[1]..bufferline#filter returning [1]

continuing in function bufferline#update[1]..bufferline#render

line 2: 
line 3:    if result[0]
line 4:       return result[1]
function bufferline#update[1]..bufferline#render returning '%1@BufferlineMainClickHandler@%#Buffe...ufferTabpageFill#▎%#BufferTabpageFill#'

continuing in function bufferline#update

line 2:    if new_value == s:last_tabline
line 3:       return
function bufferline#update returning #0

continuing in WinEnter Autocommands for "*"

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling function <SNR>15_Highlight_Matching_Pair()

line 1:   " Remove any previous match.
line 2:   call s:Remove_Matches()
calling function <SNR>15_Highlight_Matching_Pair[2]..<SNR>15_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     silent! call matchdelete(3)
line 3:     let w:paren_hl_on = 0
line 4:   endif
function <SNR>15_Highlight_Matching_Pair[2]..<SNR>15_Remove_Matches returning #0

continuing in function <SNR>15_Highlight_Matching_Pair

line 3: 
line 4:   " Avoid that we remove the popup menu.
line 5:   " Return when there are no colors (looks like the cursor jumps).
line 6:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 7:     return
line 8:   endif
line 9: 
line 10:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 11:   let c_lnum = line('.')
line 12:   let c_col = col('.')
line 13:   let before = 0
line 14: 
line 15:   let text = getline(c_lnum)
line 16:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 17:   if empty(matches)
line 18:     let [c_before, c] = ['', '']
line 19:   else
line 20:     let [c_before, c] = matches[1:2]
line 21:   endif
line 22:   let plist = split(&matchpairs, '.\zs[:,]')
line 23:   let i = index(plist, c)
line 24:   if i < 0
line 25:     " not found, in Insert mode try character before the cursor
line 26:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 27:       let before = strlen(c_before)
line 28:       let c = c_before
line 29:       let i = index(plist, c)
line 30:     endif
line 31:     if i < 0
line 32:       " not found, nothing to do
line 33:       return
function <SNR>15_Highlight_Matching_Pair returning #0

continuing in CursorMoved Autocommands for "*"

Executing: wincmd H
Executing: vertical resize 30
Executing: buffer 2
Executing BufLeave Autocommands for "*"
autocommand if &ft != "netrw"|let w:netrw_prvfile= expand("%:p")|endif

Executing: if &ft != "netrw"|let w:netrw_prvfile= expand("%:p")|endif
Executing: let w:netrw_prvfile= expand("%:p")|endif
Executing: endif
Executing BufLeave Autocommands for "*"
autocommand lua vim.wo.statusline=require'lualine'.statusline()

Executing: lua vim.wo.statusline=require'lualine'.statusline()
Executing BufEnter Autocommands for "*"
autocommand sil call s:LocalBrowse(expand("<amatch>"))

Executing: sil call s:LocalBrowse(expand("<amatch>"))
calling function <SNR>16_LocalBrowse('/Users/andrewgu/.config/nvim/NvimTree')

line 1:   " Unfortunate interaction -- only DechoMsg debugging calls can be safely used here.
line 2:   " Otherwise, the BufEnter event gets triggered when attempts to write to
line 3:   " the DBG buffer are made.
line 4: 
line 5:   if !exists("s:vimentered")
line 6:    " If s:vimentered doesn't exist, then the VimEnter event hasn't fired.  It will,
line 7:    " and so s:VimEnter() will then be calling this routine, but this time with s:vimentered defined.
line 8: "   call Dfunc("s:LocalBrowse(dirname<".a:dirname.">)  (s:vimentered doesn't exist)")
line 9: "   call Dret("s:LocalBrowse")
line 10:    return
line 11:   endif
line 12: 
line 13: "  call Dfunc("s:LocalBrowse(dirname<".a:dirname.">)  (s:vimentered=".s:vimentered.")")
line 14: 
line 15:   if has("amiga")
line 16:    " The check against '' is made for the Amiga, where the empty
line 17:    " string is the current directory and not checking would break
line 18:    " things such as the help command.
line 19: "   call Decho("(LocalBrowse) dirname<".a:dirname.">  (isdirectory, amiga)")
line 20:    if a:dirname != '' && isdirectory(a:dirname)
line 21:     sil! call netrw#LocalBrowseCheck(a:dirname)
line 22:     if exists("w:netrw_bannercnt") && line('.') < w:netrw_bannercnt
line 23:      exe w:netrw_bannercnt
line 24:     endif
line 25:    endif
line 26: 
line 27:   elseif isdirectory(a:dirname)
line 28: "   call Decho("(LocalBrowse) dirname<".a:dirname."> ft=".&ft."  (isdirectory, not amiga)")
line 29: "   call Dredir("LocalBrowse ft last set: ","verbose set ft")
line 30:    sil! call netrw#LocalBrowseCheck(a:dirname)
line 31:    if exists("w:netrw_bannercnt") && line('.') < w:netrw_bannercnt
line 32:     exe w:netrw_bannercnt
line 33:    endif
line 34: 
line 35:   else
line 36:    " not a directory, ignore it
line 37: "   call Decho("(LocalBrowse) dirname<".a:dirname."> not a directory, ignoring...")
line 38:   endif
line 39: 
line 40: "  call Dret("s:LocalBrowse")
function <SNR>16_LocalBrowse returning #0

continuing in BufEnter Autocommands for "*"

Executing BufEnter Autocommands for "*"
autocommand set statusline<

Executing: set statusline<
Executing BufEnter Autocommands for "*"
autocommand :lua require("nvim-autopairs").on_attach()

Executing: :lua require("nvim-autopairs").on_attach()
Executing BufEnter Autocommands for "*"
autocommand call bufferline#update()

Executing: call bufferline#update()
calling function bufferline#update()

line 1:    let new_value = bufferline#render(a:0 > 0 ? a:1 : v:false)
calling function bufferline#update[1]..bufferline#render(v:false)

line 1:    let result = luaeval("require'bufferline.render'.render_safe(_A)", a:update_names)
calling function bufferline#update[1]..bufferline#render[1]..bufferline#filter('&buflisted')

line 1:     let list = []
line 2:     for line in split(execute('ls!'), "\n")
line 2: ls!
  1 #a   "."                            line 1
  2u%a-  "NvimTree"                     line 1
line 3:         call add(list, 0+matchstr(line, '\v\d+'))
line 4:     endfor
line 2:     for line in split(execute('ls!'), "\n")
line 3:         call add(list, 0+matchstr(line, '\v\d+'))
line 4:     endfor
line 2:     for line in split(execute('ls!'), "\n")
line 3:         call add(list, 0+matchstr(line, '\v\d+'))
line 4:     endfor
line 2:     for line in split(execute('ls!'), "\n")
line 3:         call add(list, 0+matchstr(line, '\v\d+'))
line 4:     endfor
line 5:     for a_expr in a:000
line 6:         let expr = a_expr
line 7:         let expr = substitute(expr, '&\w\+', 'getbufvar(v:val, "\0")', 'g')
line 8:         call filter(list, expr)
line 9:     endfor
line 5:     for a_expr in a:000
line 6:         let expr = a_expr
line 7:         let expr = substitute(expr, '&\w\+', 'getbufvar(v:val, "\0")', 'g')
line 8:         call filter(list, expr)
line 9:     endfor
line 10:     return list
function bufferline#update[1]..bufferline#render[1]..bufferline#filter returning [1]

continuing in function bufferline#update[1]..bufferline#render

line 1: hi! DevIconDefaultVisible guifg=#6d8086 guibg=#282c34
line 2: 
line 3:    if result[0]
line 4:       return result[1]
function bufferline#update[1]..bufferline#render returning '%1@BufferlineMainClickHandler@%#Buffe...ufferTabpageFill#▎%#BufferTabpageFill#'

continuing in function bufferline#update

line 2:    if new_value == s:last_tabline
line 3:       return
line 4:    end
line 5:    let &tabline = new_value
line 6:    let s:last_tabline = new_value
function bufferline#update returning #0

continuing in BufEnter Autocommands for "*"

Executing BufEnter Autocommands for "*"
autocommand lua require'nvim-tree'.buf_enter()

Executing: lua require'nvim-tree'.buf_enter()
Executing BufEnter Autocommands for "*"
autocommand lua require'lualine.components.branch'.update_branch()

Executing: lua require'lualine.components.branch'.update_branch()
Executing BufWinEnter Autocommands for "*"
autocommand set statusline<

Executing: set statusline<
Executing BufWinEnter Autocommands for "*"
autocommand call bufferline#update()

Executing: call bufferline#update()
calling function bufferline#update()

line 1:    let new_value = bufferline#render(a:0 > 0 ? a:1 : v:false)
calling function bufferline#update[1]..bufferline#render(v:false)

line 1:    let result = luaeval("require'bufferline.render'.render_safe(_A)", a:update_names)
calling function bufferline#update[1]..bufferline#render[1]..bufferline#filter('&buflisted')

line 1:     let list = []
line 2:     for line in split(execute('ls!'), "\n")
line 2: ls!
  1 #a   "."                            line 1
  2u%a-  "NvimTree"                     line 1
line 3:         call add(list, 0+matchstr(line, '\v\d+'))
line 4:     endfor
line 2:     for line in split(execute('ls!'), "\n")
line 3:         call add(list, 0+matchstr(line, '\v\d+'))
line 4:     endfor
line 2:     for line in split(execute('ls!'), "\n")
line 3:         call add(list, 0+matchstr(line, '\v\d+'))
line 4:     endfor
line 2:     for line in split(execute('ls!'), "\n")
line 3:         call add(list, 0+matchstr(line, '\v\d+'))
line 4:     endfor
line 5:     for a_expr in a:000
line 6:         let expr = a_expr
line 7:         let expr = substitute(expr, '&\w\+', 'getbufvar(v:val, "\0")', 'g')
line 8:         call filter(list, expr)
line 9:     endfor
line 5:     for a_expr in a:000
line 6:         let expr = a_expr
line 7:         let expr = substitute(expr, '&\w\+', 'getbufvar(v:val, "\0")', 'g')
line 8:         call filter(list, expr)
line 9:     endfor
line 10:     return list
function bufferline#update[1]..bufferline#render[1]..bufferline#filter returning [1]

continuing in function bufferline#update[1]..bufferline#render

line 2: 
line 3:    if result[0]
line 4:       return result[1]
function bufferline#update[1]..bufferline#render returning '%1@BufferlineMainClickHandler@%#Buffe...ufferTabpageFill#▎%#BufferTabpageFill#'

continuing in function bufferline#update

line 2:    if new_value == s:last_tabline
line 3:       return
function bufferline#update returning #0

continuing in BufWinEnter Autocommands for "*"

Executing BufWinEnter Autocommands for "*"
autocommand IndentBlanklineRefresh

Executing: IndentBlanklineRefresh
Executing: call s:try('lua require("indent_blankline.commands").refresh("" == "!")')
calling function <SNR>29_try('lua require("indent_blankline.commands").refresh("" == "!")')

line 1:     try
line 2:         execute a:cmd
line 2: lua require("indent_blankline.commands").refresh("" == "!")
Executing: call indent_blankline#Refresh()
calling function indent_blankline#Refresh()

line 1:     try
line 2:         lua require("indent_blankline").refresh()
calling function indent_blankline#Refresh[2]..indent_blankline#helper#GetListChar('eol', '')

line 1:     let l:list_chars = {}
line 2: 
line 3:     for l:char in split(&listchars, ',')
line 4:         let l:split = split(l:char, ':')
line 5:         let l:list_chars[l:split[0]] = l:split[1]
line 6:     endfor
line 3:     for l:char in split(&listchars, ',')
line 4:         let l:split = split(l:char, ':')
line 5:         let l:list_chars[l:split[0]] = l:split[1]
line 6:     endfor
line 3:     for l:char in split(&listchars, ',')
line 4:         let l:split = split(l:char, ':')
line 5:         let l:list_chars[l:split[0]] = l:split[1]
line 6:     endfor
line 3:     for l:char in split(&listchars, ',')
line 4:         let l:split = split(l:char, ':')
line 5:         let l:list_chars[l:split[0]] = l:split[1]
line 6:     endfor
line 7: 
line 8:     return get(l:list_chars, a:key, a:fallback)
function indent_blankline#Refresh[2]..indent_blankline#helper#GetListChar returning ''

continuing in function indent_blankline#Refresh

line 3:     catch /E12/
line 4:         return
line 5:     catch
line 6:         if g:indent_blankline_debug
line 7:             echohl Error
line 8:             echom 'indent-blankline encountered an error on refresh: ' . v:exception
line 9:             echohl None
line 10:         endif
line 11:     endtry
function indent_blankline#Refresh returning #0

continuing in nvim_exec() called at function <SNR>29_try:2

line 3:     catch /E12/
line 4:         return
line 5:     endtry
function <SNR>29_try returning #0

continuing in BufWinEnter Autocommands for "*"

Executing BufWinEnter Autocommands for "*"
autocommand lua require'nvim-tree.view'._prevent_buffer_override()

Executing: lua require'nvim-tree.view'._prevent_buffer_override()
Executing: unlet! b:keymap_name
Executing: setlocal nonumber
Executing: setlocal signcolumn=yes
Executing: setlocal winhl=EndOfBuffer:NvimTreeEndOfBuffer,Normal:NvimTreeNormal,CursorLine:NvimTreeCursorLine,VertSplit:NvimTreeVertSplit,SignColumn:NvimTreeNormal,StatusLine:NvimTreeStatusLine,StatusLineNC:NvimTreeStatuslineNC
Executing: setlocal winfixheight
Executing: setlocal colorcolumn=0
Executing: setlocal winfixwidth
Executing: setlocal foldmethod=manual
Executing: setlocal foldcolumn=0
Executing: setlocal nofoldenable
Executing: setlocal nolist
Executing: setlocal norelativenumber
Executing: setlocal nocursorcolumn
Executing: setlocal nospell
Executing: :wincmd =
chdir(/Users/andrewgu/.config/nvim)
chdir(/Users/andrewgu/.config/nvim)
chdir(/Users/andrewgu/.config/nvim)
chdir(/Users/andrewgu/.config/nvim)
chdir(/Users/andrewgu/.config/nvim)
chdir(/Users/andrewgu/.config/nvim)
chdir(/Users/andrewgu/.config/nvim)
chdir(/Users/andrewgu/.config/nvim)
chdir(/Users/andrewgu/.config/nvim)
chdir(/Users/andrewgu/.config/nvim)
chdir(/Users/andrewgu/.config/nvim)
chdir(/Users/andrewgu/.config/nvim)
chdir(/Users/andrewgu/.config/nvim)
chdir(/Users/andrewgu/.config/nvim)
chdir(/Users/andrewgu/.config/nvim)
chdir(/Users/andrewgu/.config/nvim)
chdir(/Users/andrewgu/.config/nvim)
chdir(/Users/andrewgu/.config/nvim)
Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling function <SNR>15_Highlight_Matching_Pair()

line 1:   " Remove any previous match.
line 2:   call s:Remove_Matches()
calling function <SNR>15_Highlight_Matching_Pair[2]..<SNR>15_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     silent! call matchdelete(3)
line 3:     let w:paren_hl_on = 0
line 4:   endif
function <SNR>15_Highlight_Matching_Pair[2]..<SNR>15_Remove_Matches returning #0

continuing in function <SNR>15_Highlight_Matching_Pair

line 3: 
line 4:   " Avoid that we remove the popup menu.
line 5:   " Return when there are no colors (looks like the cursor jumps).
line 6:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 7:     return
line 8:   endif
line 9: 
line 10:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 11:   let c_lnum = line('.')
line 12:   let c_col = col('.')
line 13:   let before = 0
line 14: 
line 15:   let text = getline(c_lnum)
line 16:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 17:   if empty(matches)
line 18:     let [c_before, c] = ['', '']
line 19:   else
line 20:     let [c_before, c] = matches[1:2]
line 21:   endif
line 22:   let plist = split(&matchpairs, '.\zs[:,]')
line 23:   let i = index(plist, c)
line 24:   if i < 0
line 25:     " not found, in Insert mode try character before the cursor
line 26:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 27:       let before = strlen(c_before)
line 28:       let c = c_before
line 29:       let i = index(plist, c)
line 30:     endif
line 31:     if i < 0
line 32:       " not found, nothing to do
line 33:       return
function <SNR>15_Highlight_Matching_Pair returning #0

continuing in CursorMoved Autocommands for "*"

Executing CursorMoved Autocommands for "NvimTree"
autocommand lua require'nvim-tree'.place_cursor_on_node()

Executing: lua require'nvim-tree'.place_cursor_on_node()
Executing TextChanged Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling function <SNR>15_Highlight_Matching_Pair()

line 1:   " Remove any previous match.
line 2:   call s:Remove_Matches()
calling function <SNR>15_Highlight_Matching_Pair[2]..<SNR>15_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     silent! call matchdelete(3)
line 3:     let w:paren_hl_on = 0
line 4:   endif
function <SNR>15_Highlight_Matching_Pair[2]..<SNR>15_Remove_Matches returning #0

continuing in function <SNR>15_Highlight_Matching_Pair

line 3: 
line 4:   " Avoid that we remove the popup menu.
line 5:   " Return when there are no colors (looks like the cursor jumps).
line 6:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 7:     return
line 8:   endif
line 9: 
line 10:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 11:   let c_lnum = line('.')
line 12:   let c_col = col('.')
line 13:   let before = 0
line 14: 
line 15:   let text = getline(c_lnum)
line 16:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 17:   if empty(matches)
line 18:     let [c_before, c] = ['', '']
line 19:   else
line 20:     let [c_before, c] = matches[1:2]
line 21:   endif
line 22:   let plist = split(&matchpairs, '.\zs[:,]')
line 23:   let i = index(plist, c)
line 24:   if i < 0
line 25:     " not found, in Insert mode try character before the cursor
line 26:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 27:       let before = strlen(c_before)
line 28:       let c = c_before
line 29:       let i = index(plist, c)
line 30:     endif
line 31:     if i < 0
line 32:       " not found, nothing to do
line 33:       return
function <SNR>15_Highlight_Matching_Pair returning #0

continuing in TextChanged Autocommands for "*"

Executing TextChanged Autocommands for "*"
autocommand IndentBlanklineRefresh

Executing: IndentBlanklineRefresh
Executing: call s:try('lua require("indent_blankline.commands").refresh("" == "!")')
calling function <SNR>29_try('lua require("indent_blankline.commands").refresh("" == "!")')

line 1:     try
line 2:         execute a:cmd
line 2: lua require("indent_blankline.commands").refresh("" == "!")
Executing: call indent_blankline#Refresh()
calling function indent_blankline#Refresh()

line 1:     try
line 2:         lua require("indent_blankline").refresh()
calling function indent_blankline#Refresh[2]..indent_blankline#helper#GetListChar('eol', '')

line 1:     let l:list_chars = {}
line 2: 
line 3:     for l:char in split(&listchars, ',')
line 4:         let l:split = split(l:char, ':')
line 5:         let l:list_chars[l:split[0]] = l:split[1]
line 6:     endfor
line 3:     for l:char in split(&listchars, ',')
line 4:         let l:split = split(l:char, ':')
line 5:         let l:list_chars[l:split[0]] = l:split[1]
line 6:     endfor
line 3:     for l:char in split(&listchars, ',')
line 4:         let l:split = split(l:char, ':')
line 5:         let l:list_chars[l:split[0]] = l:split[1]
line 6:     endfor
line 3:     for l:char in split(&listchars, ',')
line 4:         let l:split = split(l:char, ':')
line 5:         let l:list_chars[l:split[0]] = l:split[1]
line 6:     endfor
line 7: 
line 8:     return get(l:list_chars, a:key, a:fallback)
function indent_blankline#Refresh[2]..indent_blankline#helper#GetListChar returning ''

continuing in function indent_blankline#Refresh

line 3:     catch /E12/
line 4:         return
line 5:     catch
line 6:         if g:indent_blankline_debug
line 7:             echohl Error
line 8:             echom 'indent-blankline encountered an error on refresh: ' . v:exception
line 9:             echohl None
line 10:         endif
line 11:     endtry
function indent_blankline#Refresh returning #0

continuing in nvim_exec() called at function <SNR>29_try:2

line 3:     catch /E12/
line 4:         return
line 5:     endtry
function <SNR>29_try returning #0

continuing in TextChanged Autocommands for "*"

Executing WinScrolled Autocommands for "*"
autocommand IndentBlanklineRefresh

Executing: IndentBlanklineRefresh
Executing: call s:try('lua require("indent_blankline.commands").refresh("" == "!")')
calling function <SNR>29_try('lua require("indent_blankline.commands").refresh("" == "!")')

line 1:     try
line 2:         execute a:cmd
line 2: lua require("indent_blankline.commands").refresh("" == "!")
Executing: call indent_blankline#Refresh()
calling function indent_blankline#Refresh()

line 1:     try
line 2:         lua require("indent_blankline").refresh()
calling function indent_blankline#Refresh[2]..indent_blankline#helper#GetListChar('eol', '')

line 1:     let l:list_chars = {}
line 2: 
line 3:     for l:char in split(&listchars, ',')
line 4:         let l:split = split(l:char, ':')
line 5:         let l:list_chars[l:split[0]] = l:split[1]
line 6:     endfor
line 3:     for l:char in split(&listchars, ',')
line 4:         let l:split = split(l:char, ':')
line 5:         let l:list_chars[l:split[0]] = l:split[1]
line 6:     endfor
line 3:     for l:char in split(&listchars, ',')
line 4:         let l:split = split(l:char, ':')
line 5:         let l:list_chars[l:split[0]] = l:split[1]
line 6:     endfor
line 3:     for l:char in split(&listchars, ',')
line 4:         let l:split = split(l:char, ':')
line 5:         let l:list_chars[l:split[0]] = l:split[1]
line 6:     endfor
line 7: 
line 8:     return get(l:list_chars, a:key, a:fallback)
function indent_blankline#Refresh[2]..indent_blankline#helper#GetListChar returning ''

continuing in function indent_blankline#Refresh

line 3:     catch /E12/
line 4:         return
line 5:     catch
line 6:         if g:indent_blankline_debug
line 7:             echohl Error
line 8:             echom 'indent-blankline encountered an error on refresh: ' . v:exception
line 9:             echohl None
line 10:         endif
line 11:     endtry
function indent_blankline#Refresh returning #0

continuing in nvim_exec() called at function <SNR>29_try:2

line 3:     catch /E12/
line 4:         return
line 5:     endtry
function <SNR>29_try returning #0

continuing in WinScrolled Autocommands for "*"

Executing BufModifiedSet Autocommands for "*"
autocommand call <SID>check_modified()

Executing: call <SID>check_modified()
calling function <SNR>26_check_modified()

line 1:    if (&modified != get(b:, 'checked'))
line 2:       let b:checked = &modified
line 3:       call bufferline#update()
line 4:    end
function <SNR>26_check_modified returning #0

continuing in BufModifiedSet Autocommands for "*"

Executing: highlight lualine_a_normal_to_lualine_b_normal guifg=#98c379 guibg=#3e4452
Executing: highlight lualine_b_normal_to_lualine_c_normal guifg=#3e4452 guibg=#2c323d
Executing: highlight lualine_c_normal_to_lualine_b_normal guifg=#3e4452 guibg=#2c323d
Executing: highlight lualine_b_normal_to_lualine_a_normal guifg=#98c379 guibg=#3e4452
Executing: augroup gitsigns | autocmd! | augroup END
Executing:  autocmd! | augroup END
Executing: autocmd gitsigns VimLeavePre * lua require("gitsigns").detach_all()
Executing: autocmd gitsigns BufRead,BufNewFile,BufWritePost * lua require("gitsigns").attach()
Executing: autocmd gitsigns ColorScheme * lua require("gitsigns")._update_highlights()
Searching for "lua/gitsigns/current_line_blame.lua" in "/Users/andrewgu/.config/nvim,/etc/xdg/nvim,/Users/andrewgu/.local/share/nvim/site,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/telescope.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/popup.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/plenary.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/packer.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-web-devicons,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-tree.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-lspconfig,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-compe,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-base16.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-autopairs,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/neoformat,/Users/andrewgu/.local/share/nvim/site/p
Searching for "/Users/andrewgu/.config/nvim/lua/gitsigns/current_line_blame.lua"
Searching for "/etc/xdg/nvim/lua/gitsigns/current_line_blame.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/lua/gitsigns/current_line_blame.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/telescope.nvim/lua/gitsigns/current_line_blame.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/popup.nvim/lua/gitsigns/current_line_blame.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/plenary.nvim/lua/gitsigns/current_line_blame.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/packer.nvim/lua/gitsigns/current_line_blame.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/lua/gitsigns/current_line_blame.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-web-devicons/lua/gitsigns/current_line_blame.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-tree.lua/lua/gitsigns/current_line_blame.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-lspconfig/lua/gitsigns/current_line_blame.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-compe/lua/gitsigns/current_line_blame.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-base16.lua/lua/gitsigns/current_line_blame.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-autopairs/lua/gitsigns/current_line_blame.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/neoformat/lua/gitsigns/current_line_blame.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/lualine.nvim/lua/gitsigns/current_line_blame.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/indent-blankline.nvim/lua/gitsigns/current_line_blame.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/gitsigns.nvim/lua/gitsigns/current_line_blame.lua"
Executing: augroup gitsigns_blame | autocmd! | augroup END
Executing:  autocmd! | augroup END
Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling function <SNR>15_Highlight_Matching_Pair()

line 1:   " Remove any previous match.
line 2:   call s:Remove_Matches()
calling function <SNR>15_Highlight_Matching_Pair[2]..<SNR>15_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     silent! call matchdelete(3)
line 3:     let w:paren_hl_on = 0
line 4:   endif
function <SNR>15_Highlight_Matching_Pair[2]..<SNR>15_Remove_Matches returning #0

continuing in function <SNR>15_Highlight_Matching_Pair

line 3: 
line 4:   " Avoid that we remove the popup menu.
line 5:   " Return when there are no colors (looks like the cursor jumps).
line 6:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 7:     return
line 8:   endif
line 9: 
line 10:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 11:   let c_lnum = line('.')
line 12:   let c_col = col('.')
line 13:   let before = 0
line 14: 
line 15:   let text = getline(c_lnum)
line 16:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 17:   if empty(matches)
line 18:     let [c_before, c] = ['', '']
line 19:   else
line 20:     let [c_before, c] = matches[1:2]
line 21:   endif
line 22:   let plist = split(&matchpairs, '.\zs[:,]')
line 23:   let i = index(plist, c)
line 24:   if i < 0
line 25:     " not found, in Insert mode try character before the cursor
line 26:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 27:       let before = strlen(c_before)
line 28:       let c = c_before
line 29:       let i = index(plist, c)
line 30:     endif
line 31:     if i < 0
line 32:       " not found, nothing to do
line 33:       return
function <SNR>15_Highlight_Matching_Pair returning #0

continuing in CursorMoved Autocommands for "*"

Executing CursorMoved Autocommands for "NvimTree"
autocommand lua require'nvim-tree'.place_cursor_on_node()

Executing: lua require'nvim-tree'.place_cursor_on_node()
Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling function <SNR>15_Highlight_Matching_Pair()

line 1:   " Remove any previous match.
line 2:   call s:Remove_Matches()
calling function <SNR>15_Highlight_Matching_Pair[2]..<SNR>15_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     silent! call matchdelete(3)
line 3:     let w:paren_hl_on = 0
line 4:   endif
function <SNR>15_Highlight_Matching_Pair[2]..<SNR>15_Remove_Matches returning #0

continuing in function <SNR>15_Highlight_Matching_Pair

line 3: 
line 4:   " Avoid that we remove the popup menu.
line 5:   " Return when there are no colors (looks like the cursor jumps).
line 6:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 7:     return
line 8:   endif
line 9: 
line 10:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 11:   let c_lnum = line('.')
line 12:   let c_col = col('.')
line 13:   let before = 0
line 14: 
line 15:   let text = getline(c_lnum)
line 16:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 17:   if empty(matches)
line 18:     let [c_before, c] = ['', '']
line 19:   else
line 20:     let [c_before, c] = matches[1:2]
line 21:   endif
line 22:   let plist = split(&matchpairs, '.\zs[:,]')
line 23:   let i = index(plist, c)
line 24:   if i < 0
line 25:     " not found, in Insert mode try character before the cursor
line 26:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 27:       let before = strlen(c_before)
line 28:       let c = c_before
line 29:       let i = index(plist, c)
line 30:     endif
line 31:     if i < 0
line 32:       " not found, nothing to do
line 33:       return
function <SNR>15_Highlight_Matching_Pair returning #0

continuing in CursorMoved Autocommands for "*"

Executing CursorMoved Autocommands for "NvimTree"
autocommand lua require'nvim-tree'.place_cursor_on_node()

Executing: lua require'nvim-tree'.place_cursor_on_node()
Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling function <SNR>15_Highlight_Matching_Pair()

line 1:   " Remove any previous match.
line 2:   call s:Remove_Matches()
calling function <SNR>15_Highlight_Matching_Pair[2]..<SNR>15_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     silent! call matchdelete(3)
line 3:     let w:paren_hl_on = 0
line 4:   endif
function <SNR>15_Highlight_Matching_Pair[2]..<SNR>15_Remove_Matches returning #0

continuing in function <SNR>15_Highlight_Matching_Pair

line 3: 
line 4:   " Avoid that we remove the popup menu.
line 5:   " Return when there are no colors (looks like the cursor jumps).
line 6:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 7:     return
line 8:   endif
line 9: 
line 10:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 11:   let c_lnum = line('.')
line 12:   let c_col = col('.')
line 13:   let before = 0
line 14: 
line 15:   let text = getline(c_lnum)
line 16:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 17:   if empty(matches)
line 18:     let [c_before, c] = ['', '']
line 19:   else
line 20:     let [c_before, c] = matches[1:2]
line 21:   endif
line 22:   let plist = split(&matchpairs, '.\zs[:,]')
line 23:   let i = index(plist, c)
line 24:   if i < 0
line 25:     " not found, in Insert mode try character before the cursor
line 26:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 27:       let before = strlen(c_before)
line 28:       let c = c_before
line 29:       let i = index(plist, c)
line 30:     endif
line 31:     if i < 0
line 32:       " not found, nothing to do
line 33:       return
function <SNR>15_Highlight_Matching_Pair returning #0

continuing in CursorMoved Autocommands for "*"

Executing CursorMoved Autocommands for "NvimTree"
autocommand lua require'nvim-tree'.place_cursor_on_node()

Executing: lua require'nvim-tree'.place_cursor_on_node()
Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling function <SNR>15_Highlight_Matching_Pair()

line 1:   " Remove any previous match.
line 2:   call s:Remove_Matches()
calling function <SNR>15_Highlight_Matching_Pair[2]..<SNR>15_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     silent! call matchdelete(3)
line 3:     let w:paren_hl_on = 0
line 4:   endif
function <SNR>15_Highlight_Matching_Pair[2]..<SNR>15_Remove_Matches returning #0

continuing in function <SNR>15_Highlight_Matching_Pair

line 3: 
line 4:   " Avoid that we remove the popup menu.
line 5:   " Return when there are no colors (looks like the cursor jumps).
line 6:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 7:     return
line 8:   endif
line 9: 
line 10:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 11:   let c_lnum = line('.')
line 12:   let c_col = col('.')
line 13:   let before = 0
line 14: 
line 15:   let text = getline(c_lnum)
line 16:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 17:   if empty(matches)
line 18:     let [c_before, c] = ['', '']
line 19:   else
line 20:     let [c_before, c] = matches[1:2]
line 21:   endif
line 22:   let plist = split(&matchpairs, '.\zs[:,]')
line 23:   let i = index(plist, c)
line 24:   if i < 0
line 25:     " not found, in Insert mode try character before the cursor
line 26:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 27:       let before = strlen(c_before)
line 28:       let c = c_before
line 29:       let i = index(plist, c)
line 30:     endif
line 31:     if i < 0
line 32:       " not found, nothing to do
line 33:       return
function <SNR>15_Highlight_Matching_Pair returning #0

continuing in CursorMoved Autocommands for "*"

Executing CursorMoved Autocommands for "NvimTree"
autocommand lua require'nvim-tree'.place_cursor_on_node()

Executing: lua require'nvim-tree'.place_cursor_on_node()
Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling function <SNR>15_Highlight_Matching_Pair()

line 1:   " Remove any previous match.
line 2:   call s:Remove_Matches()
calling function <SNR>15_Highlight_Matching_Pair[2]..<SNR>15_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     silent! call matchdelete(3)
line 3:     let w:paren_hl_on = 0
line 4:   endif
function <SNR>15_Highlight_Matching_Pair[2]..<SNR>15_Remove_Matches returning #0

continuing in function <SNR>15_Highlight_Matching_Pair

line 3: 
line 4:   " Avoid that we remove the popup menu.
line 5:   " Return when there are no colors (looks like the cursor jumps).
line 6:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 7:     return
line 8:   endif
line 9: 
line 10:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 11:   let c_lnum = line('.')
line 12:   let c_col = col('.')
line 13:   let before = 0
line 14: 
line 15:   let text = getline(c_lnum)
line 16:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 17:   if empty(matches)
line 18:     let [c_before, c] = ['', '']
line 19:   else
line 20:     let [c_before, c] = matches[1:2]
line 21:   endif
line 22:   let plist = split(&matchpairs, '.\zs[:,]')
line 23:   let i = index(plist, c)
line 24:   if i < 0
line 25:     " not found, in Insert mode try character before the cursor
line 26:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 27:       let before = strlen(c_before)
line 28:       let c = c_before
line 29:       let i = index(plist, c)
line 30:     endif
line 31:     if i < 0
line 32:       " not found, nothing to do
line 33:       return
function <SNR>15_Highlight_Matching_Pair returning #0

continuing in CursorMoved Autocommands for "*"

Executing CursorMoved Autocommands for "NvimTree"
autocommand lua require'nvim-tree'.place_cursor_on_node()

Executing: lua require'nvim-tree'.place_cursor_on_node()
Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling function <SNR>15_Highlight_Matching_Pair()

line 1:   " Remove any previous match.
line 2:   call s:Remove_Matches()
calling function <SNR>15_Highlight_Matching_Pair[2]..<SNR>15_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     silent! call matchdelete(3)
line 3:     let w:paren_hl_on = 0
line 4:   endif
function <SNR>15_Highlight_Matching_Pair[2]..<SNR>15_Remove_Matches returning #0

continuing in function <SNR>15_Highlight_Matching_Pair

line 3: 
line 4:   " Avoid that we remove the popup menu.
line 5:   " Return when there are no colors (looks like the cursor jumps).
line 6:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 7:     return
line 8:   endif
line 9: 
line 10:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 11:   let c_lnum = line('.')
line 12:   let c_col = col('.')
line 13:   let before = 0
line 14: 
line 15:   let text = getline(c_lnum)
line 16:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 17:   if empty(matches)
line 18:     let [c_before, c] = ['', '']
line 19:   else
line 20:     let [c_before, c] = matches[1:2]
line 21:   endif
line 22:   let plist = split(&matchpairs, '.\zs[:,]')
line 23:   let i = index(plist, c)
line 24:   if i < 0
line 25:     " not found, in Insert mode try character before the cursor
line 26:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 27:       let before = strlen(c_before)
line 28:       let c = c_before
line 29:       let i = index(plist, c)
line 30:     endif
line 31:     if i < 0
line 32:       " not found, nothing to do
line 33:       return
function <SNR>15_Highlight_Matching_Pair returning #0

continuing in CursorMoved Autocommands for "*"

Executing CursorMoved Autocommands for "NvimTree"
autocommand lua require'nvim-tree'.place_cursor_on_node()

Executing: lua require'nvim-tree'.place_cursor_on_node()
Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling function <SNR>15_Highlight_Matching_Pair()

line 1:   " Remove any previous match.
line 2:   call s:Remove_Matches()
calling function <SNR>15_Highlight_Matching_Pair[2]..<SNR>15_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     silent! call matchdelete(3)
line 3:     let w:paren_hl_on = 0
line 4:   endif
function <SNR>15_Highlight_Matching_Pair[2]..<SNR>15_Remove_Matches returning #0

continuing in function <SNR>15_Highlight_Matching_Pair

line 3: 
line 4:   " Avoid that we remove the popup menu.
line 5:   " Return when there are no colors (looks like the cursor jumps).
line 6:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 7:     return
line 8:   endif
line 9: 
line 10:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 11:   let c_lnum = line('.')
line 12:   let c_col = col('.')
line 13:   let before = 0
line 14: 
line 15:   let text = getline(c_lnum)
line 16:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 17:   if empty(matches)
line 18:     let [c_before, c] = ['', '']
line 19:   else
line 20:     let [c_before, c] = matches[1:2]
line 21:   endif
line 22:   let plist = split(&matchpairs, '.\zs[:,]')
line 23:   let i = index(plist, c)
line 24:   if i < 0
line 25:     " not found, in Insert mode try character before the cursor
line 26:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 27:       let before = strlen(c_before)
line 28:       let c = c_before
line 29:       let i = index(plist, c)
line 30:     endif
line 31:     if i < 0
line 32:       " not found, nothing to do
line 33:       return
function <SNR>15_Highlight_Matching_Pair returning #0

continuing in CursorMoved Autocommands for "*"

Executing CursorMoved Autocommands for "NvimTree"
autocommand lua require'nvim-tree'.place_cursor_on_node()

Executing: lua require'nvim-tree'.place_cursor_on_node()

Executing: lua require'nvim-tree'.on_keypress('edit')
Executing BufLeave Autocommands for "*"
autocommand if &ft != "netrw"|let w:netrw_prvfile= expand("%:p")|endif

Executing: if &ft != "netrw"|let w:netrw_prvfile= expand("%:p")|endif
Executing: let w:netrw_prvfile= expand("%:p")|endif
Executing: endif
Executing BufLeave Autocommands for "*"
autocommand lua vim.wo.statusline=require'lualine'.statusline()

Executing: lua vim.wo.statusline=require'lualine'.statusline()
Executing WinLeave Autocommands for "*"
autocommand call s:Remove_Matches()

Executing: call s:Remove_Matches()
calling function <SNR>15_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     silent! call matchdelete(3)
line 3:     let w:paren_hl_on = 0
line 4:   endif
function <SNR>15_Remove_Matches returning #0

continuing in WinLeave Autocommands for "*"

Executing WinLeave Autocommands for "*"
autocommand lua vim.wo.statusline=require'lualine'.statusline()

Executing: lua vim.wo.statusline=require'lualine'.statusline()
Executing WinLeave Autocommands for "*"
autocommand call bufferline#update()

Executing: call bufferline#update()
calling function bufferline#update()

line 1:    let new_value = bufferline#render(a:0 > 0 ? a:1 : v:false)
calling function bufferline#update[1]..bufferline#render(v:false)

line 1:    let result = luaeval("require'bufferline.render'.render_safe(_A)", a:update_names)
calling function bufferline#update[1]..bufferline#render[1]..bufferline#filter('&buflisted')

line 1:     let list = []
line 2:     for line in split(execute('ls!'), "\n")
line 2: ls!
  1 #a   "."                            line 1
  2u%a-  "NvimTree"                     line 8
line 3:         call add(list, 0+matchstr(line, '\v\d+'))
line 4:     endfor
line 2:     for line in split(execute('ls!'), "\n")
line 3:         call add(list, 0+matchstr(line, '\v\d+'))
line 4:     endfor
line 2:     for line in split(execute('ls!'), "\n")
line 3:         call add(list, 0+matchstr(line, '\v\d+'))
line 4:     endfor
line 2:     for line in split(execute('ls!'), "\n")
line 3:         call add(list, 0+matchstr(line, '\v\d+'))
line 4:     endfor
line 5:     for a_expr in a:000
line 6:         let expr = a_expr
line 7:         let expr = substitute(expr, '&\w\+', 'getbufvar(v:val, "\0")', 'g')
line 8:         call filter(list, expr)
line 9:     endfor
line 5:     for a_expr in a:000
line 6:         let expr = a_expr
line 7:         let expr = substitute(expr, '&\w\+', 'getbufvar(v:val, "\0")', 'g')
line 8:         call filter(list, expr)
line 9:     endfor
line 10:     return list
function bufferline#update[1]..bufferline#render[1]..bufferline#filter returning [1]

continuing in function bufferline#update[1]..bufferline#render

line 2: 
line 3:    if result[0]
line 4:       return result[1]
function bufferline#update[1]..bufferline#render returning '%1@BufferlineMainClickHandler@%#Buffe...ufferTabpageFill#▎%#BufferTabpageFill#'

continuing in function bufferline#update

line 2:    if new_value == s:last_tabline
line 3:       return
function bufferline#update returning #0

continuing in WinLeave Autocommands for "*"

Executing WinEnter Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling function <SNR>15_Highlight_Matching_Pair()

line 1:   " Remove any previous match.
line 2:   call s:Remove_Matches()
calling function <SNR>15_Highlight_Matching_Pair[2]..<SNR>15_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     silent! call matchdelete(3)
line 3:     let w:paren_hl_on = 0
line 4:   endif
function <SNR>15_Highlight_Matching_Pair[2]..<SNR>15_Remove_Matches returning #0

continuing in function <SNR>15_Highlight_Matching_Pair

line 3: 
line 4:   " Avoid that we remove the popup menu.
line 5:   " Return when there are no colors (looks like the cursor jumps).
line 6:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 7:     return
line 8:   endif
line 9: 
line 10:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 11:   let c_lnum = line('.')
line 12:   let c_col = col('.')
line 13:   let before = 0
line 14: 
line 15:   let text = getline(c_lnum)
line 16:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 17:   if empty(matches)
line 18:     let [c_before, c] = ['', '']
line 19:   else
line 20:     let [c_before, c] = matches[1:2]
line 21:   endif
line 22:   let plist = split(&matchpairs, '.\zs[:,]')
line 23:   let i = index(plist, c)
line 24:   if i < 0
line 25:     " not found, in Insert mode try character before the cursor
line 26:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 27:       let before = strlen(c_before)
line 28:       let c = c_before
line 29:       let i = index(plist, c)
line 30:     endif
line 31:     if i < 0
line 32:       " not found, nothing to do
line 33:       return
function <SNR>15_Highlight_Matching_Pair returning #0

continuing in WinEnter Autocommands for "*"

Executing WinEnter Autocommands for "*"
autocommand set statusline<

Executing: set statusline<
Executing WinEnter Autocommands for "*"
autocommand call bufferline#update()

Executing: call bufferline#update()
calling function bufferline#update()

line 1:    let new_value = bufferline#render(a:0 > 0 ? a:1 : v:false)
calling function bufferline#update[1]..bufferline#render(v:false)

line 1:    let result = luaeval("require'bufferline.render'.render_safe(_A)", a:update_names)
calling function bufferline#update[1]..bufferline#render[1]..bufferline#filter('&buflisted')

line 1:     let list = []
line 2:     for line in split(execute('ls!'), "\n")
line 2: ls!
  1 %a   "."                            line 1
  2u a-  "NvimTree"                     line 0
line 3:         call add(list, 0+matchstr(line, '\v\d+'))
line 4:     endfor
line 2:     for line in split(execute('ls!'), "\n")
line 3:         call add(list, 0+matchstr(line, '\v\d+'))
line 4:     endfor
line 2:     for line in split(execute('ls!'), "\n")
line 3:         call add(list, 0+matchstr(line, '\v\d+'))
line 4:     endfor
line 2:     for line in split(execute('ls!'), "\n")
line 3:         call add(list, 0+matchstr(line, '\v\d+'))
line 4:     endfor
line 5:     for a_expr in a:000
line 6:         let expr = a_expr
line 7:         let expr = substitute(expr, '&\w\+', 'getbufvar(v:val, "\0")', 'g')
line 8:         call filter(list, expr)
line 9:     endfor
line 5:     for a_expr in a:000
line 6:         let expr = a_expr
line 7:         let expr = substitute(expr, '&\w\+', 'getbufvar(v:val, "\0")', 'g')
line 8:         call filter(list, expr)
line 9:     endfor
line 10:     return list
function bufferline#update[1]..bufferline#render[1]..bufferline#filter returning [1]

continuing in function bufferline#update[1]..bufferline#render

line 2: 
line 3:    if result[0]
line 4:       return result[1]
function bufferline#update[1]..bufferline#render returning '%1@BufferlineMainClickHandler@%#Buffe...ufferTabpageFill#▎%#BufferTabpageFill#'

continuing in function bufferline#update

line 2:    if new_value == s:last_tabline
line 3:       return
line 4:    end
line 5:    let &tabline = new_value
line 6:    let s:last_tabline = new_value
function bufferline#update returning #0

continuing in WinEnter Autocommands for "*"

Executing BufEnter Autocommands for "*"
autocommand sil call s:LocalBrowse(expand("<amatch>"))

Executing: sil call s:LocalBrowse(expand("<amatch>"))
calling function <SNR>16_LocalBrowse('/Users/andrewgu/.config/nvim')

line 1:   " Unfortunate interaction -- only DechoMsg debugging calls can be safely used here.
line 2:   " Otherwise, the BufEnter event gets triggered when attempts to write to
line 3:   " the DBG buffer are made.
line 4: 
line 5:   if !exists("s:vimentered")
line 6:    " If s:vimentered doesn't exist, then the VimEnter event hasn't fired.  It will,
line 7:    " and so s:VimEnter() will then be calling this routine, but this time with s:vimentered defined.
line 8: "   call Dfunc("s:LocalBrowse(dirname<".a:dirname.">)  (s:vimentered doesn't exist)")
line 9: "   call Dret("s:LocalBrowse")
line 10:    return
line 11:   endif
line 12: 
line 13: "  call Dfunc("s:LocalBrowse(dirname<".a:dirname.">)  (s:vimentered=".s:vimentered.")")
line 14: 
line 15:   if has("amiga")
line 16:    " The check against '' is made for the Amiga, where the empty
line 17:    " string is the current directory and not checking would break
line 18:    " things such as the help command.
line 19: "   call Decho("(LocalBrowse) dirname<".a:dirname.">  (isdirectory, amiga)")
line 20:    if a:dirname != '' && isdirectory(a:dirname)
line 21:     sil! call netrw#LocalBrowseCheck(a:dirname)
line 22:     if exists("w:netrw_bannercnt") && line('.') < w:netrw_bannercnt
line 23:      exe w:netrw_bannercnt
line 24:     endif
line 25:    endif
line 26: 
line 27:   elseif isdirectory(a:dirname)
line 28: "   call Decho("(LocalBrowse) dirname<".a:dirname."> ft=".&ft."  (isdirectory, not amiga)")
line 29: "   call Dredir("LocalBrowse ft last set: ","verbose set ft")
line 30:    sil! call netrw#LocalBrowseCheck(a:dirname)
Searching for "autoload/netrw.vim" in "/Users/andrewgu/.config/nvim,/etc/xdg/nvim,/Users/andrewgu/.local/share/nvim/site,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/telescope.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/popup.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/plenary.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/packer.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-web-devicons,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-tree.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-lspconfig,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-compe,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-base16.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-autopairs,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/neoformat,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/
Searching for "/Users/andrewgu/.config/nvim/autoload/netrw.vim"
Searching for "/etc/xdg/nvim/autoload/netrw.vim"
Searching for "/Users/andrewgu/.local/share/nvim/site/autoload/netrw.vim"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/telescope.nvim/autoload/netrw.vim"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/popup.nvim/autoload/netrw.vim"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/plenary.nvim/autoload/netrw.vim"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/packer.nvim/autoload/netrw.vim"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/autoload/netrw.vim"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-web-devicons/autoload/netrw.vim"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-tree.lua/autoload/netrw.vim"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-lspconfig/autoload/netrw.vim"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-compe/autoload/netrw.vim"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-base16.lua/autoload/netrw.vim"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-autopairs/autoload/netrw.vim"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/neoformat/autoload/netrw.vim"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/lualine.nvim/autoload/netrw.vim"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/indent-blankline.nvim/autoload/netrw.vim"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/gitsigns.nvim/autoload/netrw.vim"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/barbar.nvim/autoload/netrw.vim"
Searching for "/usr/local/share/nvim/site/autoload/netrw.vim"
Searching for "/usr/share/nvim/site/autoload/netrw.vim"
Searching for "/usr/local/Cellar/neovim/0.5.0/share/nvim/runtime/autoload/netrw.vim"
chdir(/Users/andrewgu/.config/nvim)
chdir(/usr/local/Cellar/neovim/0.5.0/share/nvim/runtime/autoload)
chdir(/Users/andrewgu/.config/nvim)
line 30: sourcing "/usr/local/Cellar/neovim/0.5.0/share/nvim/runtime/autoload/netrw.vim"
line 1: " netrw.vim: Handles file transfer and remote directory listing across
line 2: "            AUTOLOAD SECTION
line 3: " Date:^I^ISep 18, 2020
line 4: " Version:^I170
line 5: " Maintainer:^ICharles E Campbell <NcampObell@SdrPchip.AorgM-NOSPAM>
line 6: " GetLatestVimScripts: 1075 1 :AutoInstall: netrw.vim
line 7: " Copyright:    Copyright (C) 2016 Charles E. Campbell {{{1
line 8: "               Permission is hereby granted to use and distribute this code,
line 9: "               with or without modifications, provided that this copyright
line 10: "               notice is copied with it. Like anything else that's free,
line 11: "               netrw.vim, netrwPlugin.vim, and netrwSettings.vim are provided
line 12: "               *as is* and come with no warranty of any kind, either
line 13: "               expressed or implied. By using this plugin, you agree that
line 14: "               in no event will the copyright holder be liable for any damages
line 15: "               resulting from the use of this software.
line 16: "
line 17: " Note: the code here was started in 1999 under a much earlier version of vim.  The directory browsing
line 18: "       code was written using vim v6, which did not have Lists (Lists were first offered with vim-v7).
line 19: "
line 20: "redraw!|call DechoSep()|call inputsave()|call input("Press <cr> to continue")|call inputrestore()
line 21: "
line 22: "  But be doers of the Word, and not only hearers, deluding your own selves {{{1
line 23: "  (James 1:22 RSV)
line 24: " =-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
line 25: " Load Once: {{{1
line 26: if &cp || exists("g:loaded_netrw")
line 27:   finish
finished sourcing /usr/local/Cellar/neovim/0.5.0/share/nvim/runtime/autoload/netrw.vim
continuing in function <SNR>16_LocalBrowse
Error detected while processing function <SNR>16_LocalBrowse:
line   30:
E117: Unknown function: netrw#LocalBrowseCheck
line 31:    if exists("w:netrw_bannercnt") && line('.') < w:netrw_bannercnt
line 32:     exe w:netrw_bannercnt
line 33:    endif
line 34: 
line 35:   else
line 36:    " not a directory, ignore it
line 37: "   call Decho("(LocalBrowse) dirname<".a:dirname."> not a directory, ignoring...")
line 38:   endif
line 39: 
line 40: "  call Dret("s:LocalBrowse")
function <SNR>16_LocalBrowse returning #0

continuing in BufEnter Autocommands for "*"

Executing BufEnter Autocommands for "*"
autocommand set statusline<

Executing: set statusline<
Executing BufEnter Autocommands for "*"
autocommand :lua require("nvim-autopairs").on_attach()

Executing: :lua require("nvim-autopairs").on_attach()
Executing BufEnter Autocommands for "*"
autocommand call bufferline#update()

Executing: call bufferline#update()
calling function bufferline#update()

line 1:    let new_value = bufferline#render(a:0 > 0 ? a:1 : v:false)
calling function bufferline#update[1]..bufferline#render(v:false)

line 1:    let result = luaeval("require'bufferline.render'.render_safe(_A)", a:update_names)
calling function bufferline#update[1]..bufferline#render[1]..bufferline#filter('&buflisted')

line 1:     let list = []
line 2:     for line in split(execute('ls!'), "\n")
line 2: ls!
  1 %a   "."                            line 1
  2u a-  "NvimTree"                     line 0
line 3:         call add(list, 0+matchstr(line, '\v\d+'))
line 4:     endfor
line 2:     for line in split(execute('ls!'), "\n")
line 3:         call add(list, 0+matchstr(line, '\v\d+'))
line 4:     endfor
line 2:     for line in split(execute('ls!'), "\n")
line 3:         call add(list, 0+matchstr(line, '\v\d+'))
line 4:     endfor
line 2:     for line in split(execute('ls!'), "\n")
line 3:         call add(list, 0+matchstr(line, '\v\d+'))
line 4:     endfor
line 5:     for a_expr in a:000
line 6:         let expr = a_expr
line 7:         let expr = substitute(expr, '&\w\+', 'getbufvar(v:val, "\0")', 'g')
line 8:         call filter(list, expr)
line 9:     endfor
line 5:     for a_expr in a:000
line 6:         let expr = a_expr
line 7:         let expr = substitute(expr, '&\w\+', 'getbufvar(v:val, "\0")', 'g')
line 8:         call filter(list, expr)
line 9:     endfor
line 10:     return list
function bufferline#update[1]..bufferline#render[1]..bufferline#filter returning [1]

continuing in function bufferline#update[1]..bufferline#render

line 2: 
line 3:    if result[0]
line 4:       return result[1]
function bufferline#update[1]..bufferline#render returning '%1@BufferlineMainClickHandler@%#Buffe...ufferTabpageFill#▎%#BufferTabpageFill#'

continuing in function bufferline#update

line 2:    if new_value == s:last_tabline
line 3:       return
function bufferline#update returning #0

continuing in BufEnter Autocommands for "*"

Executing BufEnter Autocommands for "*"
autocommand lua require'nvim-tree'.buf_enter()

Executing: lua require'nvim-tree'.buf_enter()
Executing BufEnter Autocommands for "*"
autocommand lua require'lualine.components.branch'.update_branch()

Executing: lua require'lualine.components.branch'.update_branch()
Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling function <SNR>15_Highlight_Matching_Pair()

line 1:   " Remove any previous match.
line 2:   call s:Remove_Matches()
calling function <SNR>15_Highlight_Matching_Pair[2]..<SNR>15_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     silent! call matchdelete(3)
line 3:     let w:paren_hl_on = 0
line 4:   endif
function <SNR>15_Highlight_Matching_Pair[2]..<SNR>15_Remove_Matches returning #0

continuing in function <SNR>15_Highlight_Matching_Pair

line 3: 
line 4:   " Avoid that we remove the popup menu.
line 5:   " Return when there are no colors (looks like the cursor jumps).
line 6:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 7:     return
line 8:   endif
line 9: 
line 10:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 11:   let c_lnum = line('.')
line 12:   let c_col = col('.')
line 13:   let before = 0
line 14: 
line 15:   let text = getline(c_lnum)
line 16:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 17:   if empty(matches)
line 18:     let [c_before, c] = ['', '']
line 19:   else
line 20:     let [c_before, c] = matches[1:2]
line 21:   endif
line 22:   let plist = split(&matchpairs, '.\zs[:,]')
line 23:   let i = index(plist, c)
line 24:   if i < 0
line 25:     " not found, in Insert mode try character before the cursor
line 26:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 27:       let before = strlen(c_before)
line 28:       let c = c_before
line 29:       let i = index(plist, c)
line 30:     endif
line 31:     if i < 0
line 32:       " not found, nothing to do
line 33:       return
function <SNR>15_Highlight_Matching_Pair returning #0

continuing in CursorMoved Autocommands for "*"

Executing: edit /Users/andrewgu/.config/nvim/vimlo
chdir(/Users/andrewgu/.config/nvim)
chdir(/Users/andrewgu/.config/nvim)
chdir(/Users/andrewgu/.config/nvim)
chdir(/Users/andrewgu/.config/nvim)
chdir(/Users/andrewgu/.config/nvim)
chdir(/Users/andrewgu/.config/nvim)
Executing BufNew Autocommands for "*"
autocommand call bufferline#update(v:true)

Executing: call bufferline#update(v:true)
calling function bufferline#update(v:true)

line 1:    let new_value = bufferline#render(a:0 > 0 ? a:1 : v:false)
calling function bufferline#update[1]..bufferline#render(v:true)

line 1:    let result = luaeval("require'bufferline.render'.render_safe(_A)", a:update_names)
calling function bufferline#update[1]..bufferline#render[1]..bufferline#filter('&buflisted')

line 1:     let list = []
line 2:     for line in split(execute('ls!'), "\n")
line 2: ls!
  1 %a   "."                            line 1
  2u a-  "NvimTree"                     line 0
  3      "~/.config/nvim/vimlo"         line 0
line 3:         call add(list, 0+matchstr(line, '\v\d+'))
line 4:     endfor
line 2:     for line in split(execute('ls!'), "\n")
line 3:         call add(list, 0+matchstr(line, '\v\d+'))
line 4:     endfor
line 2:     for line in split(execute('ls!'), "\n")
line 3:         call add(list, 0+matchstr(line, '\v\d+'))
line 4:     endfor
line 2:     for line in split(execute('ls!'), "\n")
line 3:         call add(list, 0+matchstr(line, '\v\d+'))
line 4:     endfor
line 2:     for line in split(execute('ls!'), "\n")
line 3:         call add(list, 0+matchstr(line, '\v\d+'))
line 4:     endfor
line 5:     for a_expr in a:000
line 6:         let expr = a_expr
line 7:         let expr = substitute(expr, '&\w\+', 'getbufvar(v:val, "\0")', 'g')
line 8:         call filter(list, expr)
line 9:     endfor
line 5:     for a_expr in a:000
line 6:         let expr = a_expr
line 7:         let expr = substitute(expr, '&\w\+', 'getbufvar(v:val, "\0")', 'g')
line 8:         call filter(list, expr)
line 9:     endfor
line 10:     return list
function bufferline#update[1]..bufferline#render[1]..bufferline#filter returning [1, 3]

continuing in function bufferline#update[1]..bufferline#render

line 1: hi! DevIconDefaultInactive guifg=#6d8086 guibg=#2c323c
line 2: 
line 3:    if result[0]
line 4:       return result[1]
function bufferline#update[1]..bufferline#render returning '%1@BufferlineMainClickHandler@%#Buffe...ufferTabpageFill#▎%#BufferTabpageFill#'

continuing in function bufferline#update

line 2:    if new_value == s:last_tabline
line 3:       return
line 4:    end
line 5:    let &tabline = new_value
line 6:    let s:last_tabline = new_value
function bufferline#update returning #0

continuing in BufNew Autocommands for "*"

Executing BufLeave Autocommands for "*"
autocommand if &ft != "netrw"|let w:netrw_prvfile= expand("%:p")|endif

Executing: if &ft != "netrw"|let w:netrw_prvfile= expand("%:p")|endif
Executing: let w:netrw_prvfile= expand("%:p")|endif
Executing: endif
Executing BufLeave Autocommands for "*"
autocommand lua vim.wo.statusline=require'lualine'.statusline()

Executing: lua vim.wo.statusline=require'lualine'.statusline()
Executing BufWinLeave Autocommands for "*"
autocommand call bufferline#update()

Executing: call bufferline#update()
calling function bufferline#update()

line 1:    let new_value = bufferline#render(a:0 > 0 ? a:1 : v:false)
calling function bufferline#update[1]..bufferline#render(v:false)

line 1:    let result = luaeval("require'bufferline.render'.render_safe(_A)", a:update_names)
calling function bufferline#update[1]..bufferline#render[1]..bufferline#filter('&buflisted')

line 1:     let list = []
line 2:     for line in split(execute('ls!'), "\n")
line 2: ls!
  1 %a   "."                            line 1
  2u a-  "NvimTree"                     line 0
  3      "~/.config/nvim/vimlo"         line 0
line 3:         call add(list, 0+matchstr(line, '\v\d+'))
line 4:     endfor
line 2:     for line in split(execute('ls!'), "\n")
line 3:         call add(list, 0+matchstr(line, '\v\d+'))
line 4:     endfor
line 2:     for line in split(execute('ls!'), "\n")
line 3:         call add(list, 0+matchstr(line, '\v\d+'))
line 4:     endfor
line 2:     for line in split(execute('ls!'), "\n")
line 3:         call add(list, 0+matchstr(line, '\v\d+'))
line 4:     endfor
line 2:     for line in split(execute('ls!'), "\n")
line 3:         call add(list, 0+matchstr(line, '\v\d+'))
line 4:     endfor
line 5:     for a_expr in a:000
line 6:         let expr = a_expr
line 7:         let expr = substitute(expr, '&\w\+', 'getbufvar(v:val, "\0")', 'g')
line 8:         call filter(list, expr)
line 9:     endfor
line 5:     for a_expr in a:000
line 6:         let expr = a_expr
line 7:         let expr = substitute(expr, '&\w\+', 'getbufvar(v:val, "\0")', 'g')
line 8:         call filter(list, expr)
line 9:     endfor
line 10:     return list
function bufferline#update[1]..bufferline#render[1]..bufferline#filter returning [1, 3]

continuing in function bufferline#update[1]..bufferline#render

line 2: 
line 3:    if result[0]
line 4:       return result[1]
function bufferline#update[1]..bufferline#render returning '%1@BufferlineMainClickHandler@%#Buffe...ufferTabpageFill#▎%#BufferTabpageFill#'

continuing in function bufferline#update

line 2:    if new_value == s:last_tabline
line 3:       return
function bufferline#update returning #0

continuing in BufWinLeave Autocommands for "*"

chdir(/Users/andrewgu/.config/nvim)
chdir(/Users/andrewgu/.config/nvim)
chdir(/Users/andrewgu/.config/nvim)
"~/.config/nvim/vimlo" [noeol] 45131L, 2832465C
Reading ShaDa file "/Users/andrewgu/.local/share/nvim/shada/main.shada" marks
Executing BufReadPost Autocommands for "*"
autocommand if !did_filetype() && expand("<amatch>") !~ g:ft_ignore_pat | runtime! scripts.vim | endif

Executing: if !did_filetype() && expand("<amatch>") !~ g:ft_ignore_pat | runtime! scripts.vim | endif
Executing:  runtime! scripts.vim | endif
Searching for "scripts.vim" in "/Users/andrewgu/.config/nvim,/etc/xdg/nvim,/Users/andrewgu/.local/share/nvim/site,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/telescope.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/popup.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/plenary.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/packer.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-web-devicons,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-tree.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-lspconfig,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-compe,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-base16.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-autopairs,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/neoformat,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/lualine
Searching for "/Users/andrewgu/.config/nvim/scripts.vim"
Searching for "/etc/xdg/nvim/scripts.vim"
Searching for "/Users/andrewgu/.local/share/nvim/site/scripts.vim"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/telescope.nvim/scripts.vim"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/popup.nvim/scripts.vim"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/plenary.nvim/scripts.vim"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/packer.nvim/scripts.vim"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/scripts.vim"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-web-devicons/scripts.vim"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-tree.lua/scripts.vim"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-lspconfig/scripts.vim"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-compe/scripts.vim"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-base16.lua/scripts.vim"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-autopairs/scripts.vim"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/neoformat/scripts.vim"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/lualine.nvim/scripts.vim"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/indent-blankline.nvim/scripts.vim"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/gitsigns.nvim/scripts.vim"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/barbar.nvim/scripts.vim"
Searching for "/usr/local/share/nvim/site/scripts.vim"
Searching for "/usr/share/nvim/site/scripts.vim"
Searching for "/usr/local/Cellar/neovim/0.5.0/share/nvim/runtime/scripts.vim"
chdir(/Users/andrewgu/.config/nvim)
chdir(/usr/local/Cellar/neovim/0.5.0/share/nvim/runtime)
chdir(/Users/andrewgu/.config/nvim)
line 0: sourcing "/usr/local/Cellar/neovim/0.5.0/share/nvim/runtime/scripts.vim"
line 1: " Vim support file to detect file types in scripts
line 2: "
line 3: " Maintainer:^IBram Moolenaar <Bram@vim.org>
line 4: " Last change:^I2021 Jan 22
line 5: 
line 6: " This file is called by an autocommand for every file that has just been
line 7: " loaded into a buffer.  It checks if the type of file can be recognized by
line 8: " the file contents.  The autocommand is in $VIMRUNTIME/filetype.vim.
line 9: "
line 10: " Note that the pattern matches are done with =~# to avoid the value of the
line 11: " 'ignorecase' option making a difference.  Where case is to be ignored use
line 12: " =~? instead.  Do not use =~ anywhere.
line 13: 
line 14: 
line 15: " Only do the rest when the FileType autocommand has not been triggered yet.
line 16: if did_filetype()
line 17:   finish
line 18: endif
line 19: 
line 20: " Load the user defined scripts file first
line 21: " Only do this when the FileType autocommand has not been triggered yet
line 22: if exists("myscriptsfile") && filereadable(expand(myscriptsfile))
line 23:   execute "source " . myscriptsfile
line 24:   if did_filetype()
line 25:     finish
line 26:   endif
line 27: endif
line 28: 
line 29: " Line continuation is used here, remove 'C' from 'cpoptions'
line 30: let s:cpo_save = &cpo
line 31: set cpo&vim
line 32: 
line 33: let s:line1 = getline(1)
line 34: 
line 35: if s:line1 =~# "^#!"
line 36:   " A script that starts with "#!".
line 37: 
line 38:   " Check for a line like "#!/usr/bin/env {options} bash".  Turn it into
line 39:   " "#!/usr/bin/bash" to make matching easier.
line 40:   " Recognize only a few {options} that are commonly used.
line 41:   if s:line1 =~# '^#!\s*\S*\<env\s'
line 42:     let s:line1 = substitute(s:line1, '\S\+=\S\+', '', 'g')
line 43:     let s:line1 = substitute(s:line1, '\(-[iS]\|--ignore-environment\|--split-string\)', '', '')
line 44:     let s:line1 = substitute(s:line1, '\<env\s\+', '', '')
line 45:   endif
line 46: 
line 47:   " Get the program name.
line 48:   " Only accept spaces in PC style paths: "#!c:/program files/perl [args]".
line 49:   " If the word env is used, use the first word after the space:
line 50:   " "#!/usr/bin/env perl [path/args]"
line 51:   " If there is no path use the first word: "#!perl [path/args]".
line 52:   " Otherwise get the last word after a slash: "#!/usr/bin/perl [path/args]".
line 53:   if s:line1 =~# '^#!\s*\a:[/\\]'
line 54:     let s:name = substitute(s:line1, '^#!.*[/\\]\(\i\+\).*', '\1', '')
line 55:   elseif s:line1 =~# '^#!.*\<env\>'
line 56:     let s:name = substitute(s:line1, '^#!.*\<env\>\s\+\(\i\+\).*', '\1', '')
line 57:   elseif s:line1 =~# '^#!\s*[^/\\ ]*\>\([^/\\]\|$\)'
line 58:     let s:name = substitute(s:line1, '^#!\s*\([^/\\ ]*\>\).*', '\1', '')
line 59:   else
line 60:     let s:name = substitute(s:line1, '^#!\s*\S*[/\\]\(\i\+\).*', '\1', '')
line 61:   endif
line 62: 
line 63:   " tcl scripts may have #!/bin/sh in the first line and "exec wish" in the
line 64:   " third line.  Suggested by Steven Atkinson.
line 65:   if getline(3) =~# '^exec wish'
line 66:     let s:name = 'wish'
line 67:   endif
line 68: 
line 69:   " Bourne-like shell scripts: bash bash2 ksh ksh93 sh
line 70:   if s:name =~# '^\(bash\d*\|\|ksh\d*\|sh\)\>'
line 71:     call dist#ft#SetFileTypeSH(s:line1)^I" defined in filetype.vim
line 72: 
line 73:     " csh scripts
line 74:   elseif s:name =~# '^csh\>'
line 75:     if exists("g:filetype_csh")
line 76:       call dist#ft#SetFileTypeShell(g:filetype_csh)
line 77:     else
line 78:       call dist#ft#SetFileTypeShell("csh")
line 79:     endif
line 80: 
line 81:     " tcsh scripts
line 82:   elseif s:name =~# '^tcsh\>'
line 83:     call dist#ft#SetFileTypeShell("tcsh")
line 84: 
line 85:     " Z shell scripts
line 86:   elseif s:name =~# '^zsh\>'
line 87:     set ft=zsh
line 88: 
line 89:     " TCL scripts
line 90:   elseif s:name =~# '^\(tclsh\|wish\|expectk\|itclsh\|itkwish\)\>'
line 91:     set ft=tcl
line 92: 
line 93:     " Expect scripts
line 94:   elseif s:name =~# '^expect\>'
line 95:     set ft=expect
line 96: 
line 97:     " Gnuplot scripts
line 98:   elseif s:name =~# '^gnuplot\>'
line 99:     set ft=gnuplot
line 100: 
line 101:     " Makefiles
line 102:   elseif s:name =~# 'make\>'
line 103:     set ft=make
line 104: 
line 105:     " Pike
line 106:   elseif s:name =~# '^pike\%(\>\|[0-9]\)'
line 107:     set ft=pike
line 108: 
line 109:     " Lua
line 110:   elseif s:name =~# 'lua'
line 111:     set ft=lua
line 112: 
line 113:     " Perl
line 114:   elseif s:name =~# 'perl'
line 115:     set ft=perl
line 116: 
line 117:     " PHP
line 118:   elseif s:name =~# 'php'
line 119:     set ft=php
line 120: 
line 121:     " Python
line 122:   elseif s:name =~# 'python'
line 123:     set ft=python
line 124: 
line 125:     " Groovy
line 126:   elseif s:name =~# '^groovy\>'
line 127:     set ft=groovy
line 128: 
line 129:     " Raku
line 130:   elseif s:name =~# 'raku'
line 131:     set ft=raku
line 132: 
line 133:     " Ruby
line 134:   elseif s:name =~# 'ruby'
line 135:     set ft=ruby
line 136: 
line 137:     " JavaScript
line 138:   elseif s:name =~# 'node\(js\)\=\>\|js\>' || s:name =~# 'rhino\>'
line 139:     set ft=javascript
line 140: 
line 141:     " BC calculator
line 142:   elseif s:name =~# '^bc\>'
line 143:     set ft=bc
line 144: 
line 145:     " sed
line 146:   elseif s:name =~# 'sed\>'
line 147:     set ft=sed
line 148: 
line 149:     " OCaml-scripts
line 150:   elseif s:name =~# 'ocaml'
line 151:     set ft=ocaml
line 152: 
line 153:     " Awk scripts; also finds "gawk"
line 154:   elseif s:name =~# 'awk\>'
line 155:     set ft=awk
line 156: 
line 157:     " Website MetaLanguage
line 158:   elseif s:name =~# 'wml'
line 159:     set ft=wml
line 160: 
line 161:     " Scheme scripts
line 162:   elseif s:name =~# 'scheme'
line 163:     set ft=scheme
line 164: 
line 165:     " CFEngine scripts
line 166:   elseif s:name =~# 'cfengine'
line 167:     set ft=cfengine
line 168: 
line 169:     " Erlang scripts
line 170:   elseif s:name =~# 'escript'
line 171:     set ft=erlang
line 172: 
line 173:     " Haskell
line 174:   elseif s:name =~# 'haskell'
line 175:     set ft=haskell
line 176: 
line 177:     " Scala
line 178:   elseif s:name =~# 'scala\>'
line 179:     set ft=scala
line 180: 
line 181:     " Clojure
line 182:   elseif s:name =~# 'clojure'
line 183:     set ft=clojure
line 184: 
line 185:     " Free Pascal
line 186:   elseif s:name =~# 'instantfpc\>'
line 187:     set ft=pascal
line 188: 
line 189:     " Fennel
line 190:   elseif s:name =~# 'fennel\>'
line 191:     set ft=fennel
line 192: 
line 193:   endif
line 194:   unlet s:name
line 195: 
line 196: else
line 197:   " File does not start with "#!".
line 198: 
line 199:   let s:line2 = getline(2)
line 200:   let s:line3 = getline(3)
line 201:   let s:line4 = getline(4)
line 202:   let s:line5 = getline(5)
line 203: 
line 204:   " Bourne-like shell scripts: sh ksh bash bash2
line 205:   if s:line1 =~# '^:$'
line 206:     call dist#ft#SetFileTypeSH(s:line1)^I" defined in filetype.vim
line 207: 
line 208:   " Z shell scripts
line 209:   elseif s:line1 =~# '^#compdef\>' || s:line1 =~# '^#autoload\>' || "\n".s:line1."\n".s:line2."\n".s:line3."\n".s:line4."\n".s:line5 =~# '\n\s*emulate\s\+\%(-[LR]\s\+\)\=[ckz]\=sh\>'
line 211:     set ft=zsh
line 212: 
line 213:   " ELM Mail files
line 214:   elseif s:line1 =~# '^From \([a-zA-Z][a-zA-Z_0-9\.=-]*\(@[^ ]*\)\=\|-\) .* \(19\|20\)\d\d$'
line 215:     set ft=mail
line 216: 
line 217:   " Mason
line 218:   elseif s:line1 =~# '^<[%&].*>'
line 219:     set ft=mason
line 220: 
line 221:   " Vim scripts (must have '" vim' as the first line to trigger this)
line 222:   elseif s:line1 =~# '^" *[vV]im$'
line 223:     set ft=vim
line 224: 
line 225:   " libcxx and libstdc++ standard library headers like "iostream" do not have
line 226:   " an extension, recognize the Emacs file mode.
line 227:   elseif s:line1 =~? '-\*-.*C++.*-\*-'
line 228:     set ft=cpp
line 229: 
line 230:   " MOO
line 231:   elseif s:line1 =~# '^\*\* LambdaMOO Database, Format Version \%([1-3]\>\)\@!\d\+ \*\*$'
line 232:     set ft=moo
line 233: 
line 234:     " Diff file:
line 235:     " - "diff" in first line (context diff)
line 236:     " - "Only in " in first line
line 237:     " - "--- " in first line and "+++ " in second line (unified diff).
line 238:     " - "*** " in first line and "--- " in second line (context diff).
line 239:     " - "# It was generated by makepatch " in the second line (makepatch diff).
line 240:     " - "Index: <filename>" in the first line (CVS file)
line 241:     " - "=== ", line of "=", "---", "+++ " (SVK diff)
line 242:     " - "=== ", "--- ", "+++ " (bzr diff, common case)
line 243:     " - "=== (removed|added|renamed|modified)" (bzr diff, alternative)
line 244:     " - "# HG changeset patch" in first line (Mercurial export format)
line 245:   elseif s:line1 =~# '^\(diff\>\|Only in \|\d\+\(,\d\+\)\=[cda]\d\+\>\|# It was generated by makepatch \|Index:\s\+\f\+\r\=$\|===== \f\+ \d\+\.\d\+ vs edited\|==== //\f\+#\d\+\|# HG changeset patch\)' || (s:line1 =~# '^--- ' && s:line2 =~# '^+++ ') || (s:line1 =~# '^\* looking for ' && s:line2 =~# '^\* comparing to ') || (s:line1 =~# '^\*\*\* ' && s:line2 =~# '^--- ') || (s:line1 =~# '^=== ' && ((s:line2 =~# '^=\{66\}' && s:line3 =~# '^--- ' && s:line4 =~# '^+++') || (s:line2 =~# '^--- ' && s:line3 =~# '^+++ '))) || (s:line1 =~# '^=== \(removed\|added\|renamed\|modified\)')
line 251:     set ft=diff
line 252: 
line 253:     " PostScript Files (must have %!PS as the first line, like a2ps output)
line 254:   elseif s:line1 =~# '^%![ \t]*PS'
line 255:     set ft=postscr
line 256: 
line 257:     " M4 scripts: Guess there is a line that starts with "dnl".
line 258:   elseif s:line1 =~# '^\s*dnl\>' || s:line2 =~# '^\s*dnl\>' || s:line3 =~# '^\s*dnl\>' || s:line4 =~# '^\s*dnl\>' || s:line5 =~# '^\s*dnl\>'
line 263:     set ft=m4
line 264: 
line 265:     " AmigaDos scripts
line 266:   elseif $TERM == "amiga" && (s:line1 =~# "^;" || s:line1 =~? '^\.bra')
line 268:     set ft=amiga
line 269: 
line 270:     " SiCAD scripts (must have procn or procd as the first line to trigger this)
line 271:   elseif s:line1 =~? '^ *proc[nd] *$'
line 272:     set ft=sicad
line 273: 
line 274:     " Purify log files start with "****  Purify"
line 275:   elseif s:line1 =~# '^\*\*\*\*  Purify'
line 276:     set ft=purifylog
line 277: 
line 278:     " XML
line 279:   elseif s:line1 =~# '<?\s*xml.*?>'
line 280:     set ft=xml
line 281: 
line 282:     " XHTML (e.g.: PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN")
line 283:   elseif s:line1 =~# '\<DTD\s\+XHTML\s'
line 284:     set ft=xhtml
line 285: 
line 286:     " HTML (e.g.: <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN")
line 287:     " Avoid "doctype html", used by slim.
line 288:   elseif s:line1 =~? '<!DOCTYPE\s\+html\>'
line 289:     set ft=html
line 290: 
line 291:     " PDF
line 292:   elseif s:line1 =~# '^%PDF-'
line 293:     set ft=pdf
line 294: 
line 295:     " XXD output
line 296:   elseif s:line1 =~# '^\x\{7}: \x\{2} \=\x\{2} \=\x\{2} \=\x\{2} '
line 297:     set ft=xxd
line 298: 
line 299:     " RCS/CVS log output
line 300:   elseif s:line1 =~# '^RCS file:' || s:line2 =~# '^RCS file:'
line 301:     set ft=rcslog
line 302: 
line 303:     " CVS commit
line 304:   elseif s:line2 =~# '^CVS:' || getline("$") =~# '^CVS: '
line 305:     set ft=cvs
line 306: 
line 307:     " Prescribe
line 308:   elseif s:line1 =~# '^!R!'
line 309:     set ft=prescribe
line 310: 
line 311:     " Send-pr
line 312:   elseif s:line1 =~# '^SEND-PR:'
line 313:     set ft=sendpr
line 314: 
line 315:     " SNNS files
line 316:   elseif s:line1 =~# '^SNNS network definition file'
line 317:     set ft=snnsnet
line 318:   elseif s:line1 =~# '^SNNS pattern definition file'
line 319:     set ft=snnspat
line 320:   elseif s:line1 =~# '^SNNS result file'
line 321:     set ft=snnsres
line 322: 
line 323:     " Virata
line 324:   elseif s:line1 =~# '^%.\{-}[Vv]irata' || s:line2 =~# '^%.\{-}[Vv]irata' || s:line3 =~# '^%.\{-}[Vv]irata' || s:line4 =~# '^%.\{-}[Vv]irata' || s:line5 =~# '^%.\{-}[Vv]irata'
line 329:     set ft=virata
line 330: 
line 331:     " Strace
line 332:   elseif s:line1 =~# '[0-9:.]* *execve(' || s:line1 =~# '^__libc_start_main'
line 333:     set ft=strace
line 334: 
line 335:     " VSE JCL
line 336:   elseif s:line1 =~# '^\* $$ JOB\>' || s:line1 =~# '^// *JOB\>'
line 337:     set ft=vsejcl
line 338: 
line 339:     " TAK and SINDA
line 340:   elseif s:line4 =~# 'K & K  Associates' || s:line2 =~# 'TAK 2000'
line 341:     set ft=takout
line 342:   elseif s:line3 =~# 'S Y S T E M S   I M P R O V E D '
line 343:     set ft=sindaout
line 344:   elseif getline(6) =~# 'Run Date: '
line 345:     set ft=takcmp
line 346:   elseif getline(9) =~# 'Node    File  1'
line 347:     set ft=sindacmp
line 348: 
line 349:     " DNS zone files
line 350:   elseif s:line1.s:line2.s:line3.s:line4 =~# '^; <<>> DiG [0-9.]\+.* <<>>\|$ORIGIN\|$TTL\|IN\s\+SOA'
line 351:     set ft=bindzone
line 352: 
line 353:     " BAAN
line 354:   elseif s:line1 =~# '|\*\{1,80}' && s:line2 =~# 'VRC ' || s:line2 =~# '|\*\{1,80}' && s:line3 =~# 'VRC '
line 356:     set ft=baan
line 357: 
line 358:   " Valgrind
line 359:   elseif s:line1 =~# '^==\d\+== valgrind' || s:line3 =~# '^==\d\+== Using valgrind'
line 360:     set ft=valgrind
line 361: 
line 362:   " Go docs
line 363:   elseif s:line1 =~# '^PACKAGE DOCUMENTATION$'
line 364:     set ft=godoc
line 365: 
line 366:   " Renderman Interface Bytestream
line 367:   elseif s:line1 =~# '^##RenderMan'
line 368:     set ft=rib
line 369: 
line 370:   " Scheme scripts
line 371:   elseif s:line1 =~# 'exec\s\+\S*scheme' || s:line2 =~# 'exec\s\+\S*scheme'
line 372:     set ft=scheme
line 373: 
line 374:   " Git output
line 375:   elseif s:line1 =~# '^\(commit\|tree\|object\) \x\{40\}\>\|^tag \S\+$'
line 376:     set ft=git
line 377: 
line 378:    " Gprof (gnu profiler)
line 379:    elseif s:line1 == 'Flat profile:' && s:line2 == '' && s:line3 =~# '^Each sample counts as .* seconds.$'
line 382:      set ft=gprof
line 383: 
line 384:   " Erlang terms
line 385:   " (See also: http://www.gnu.org/software/emacs/manual/html_node/emacs/Choosing-Modes.html#Choosing-Modes)
line 386:   elseif s:line1 =~? '-\*-.*erlang.*-\*-'
line 387:     set ft=erlang
line 388: 
line 389:   " YAML
line 390:   elseif s:line1 =~# '^%YAML'
line 391:     set ft=yaml
line 392: 
line 393:   " CVS diff
line 394:   else
line 395:     let s:lnum = 1
line 396:     while getline(s:lnum) =~# "^? " && s:lnum < line("$")
line 397:       let s:lnum += 1
line 398:     endwhile
line 399:     if getline(s:lnum) =~# '^Index:\s\+\f\+$'
line 400:       set ft=diff
line 401: 
line 402:       " locale input files: Formal Definitions of Cultural Conventions
line 403:       " filename must be like en_US, fr_FR@euro or en_US.UTF-8
line 404:     elseif expand("%") =~# '\a\a_\a\a\($\|[.@]\)\|i18n$\|POSIX$\|translit_'
line 405:       let s:lnum = 1
line 406:       while s:lnum < 100 && s:lnum < line("$")
line 407: ^Iif getline(s:lnum) =~# '^LC_\(IDENTIFICATION\|CTYPE\|COLLATE\|MONETARY\|NUMERIC\|TIME\|MESSAGES\|PAPER\|TELEPHONE\|MEASUREMENT\|NAME\|ADDRESS\)$'
line 408: ^I  setf fdcc
line 409: ^I  break
line 410: ^Iendif
line 411: ^Ilet s:lnum += 1
line 412:       endwhile
line 413:     endif
line 414:     unlet s:lnum
line 415: 
line 416:   endif
line 417: 
line 418:   unlet s:line2 s:line3 s:line4 s:line5
line 419: 
line 420: endif
line 421: 
line 422: " Restore 'cpoptions'
line 423: let &cpo = s:cpo_save
line 424: 
line 425: unlet s:cpo_save s:line1
finished sourcing /usr/local/Cellar/neovim/0.5.0/share/nvim/runtime/scripts.vim
continuing in BufReadPost Autocommands for "*"
Searching for "/usr/local/Cellar/neovim/0.5.0/share/nvim/runtime/pack/dist/opt/matchit/scripts.vim"
Searching for "/usr/local/Cellar/neovim/0.5.0/lib/nvim/scripts.vim"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-compe/after/scripts.vim"
Searching for "/usr/share/nvim/site/after/scripts.vim"
Searching for "/usr/local/share/nvim/site/after/scripts.vim"
Searching for "/Users/andrewgu/.local/share/nvim/site/after/scripts.vim"
Searching for "/etc/xdg/nvim/after/scripts.vim"
Searching for "/Users/andrewgu/.config/nvim/after/scripts.vim"
Searching for "pack/*/start/*/scripts.vim" in "/Users/andrewgu/.config/nvim,/etc/xdg/nvim,/Users/andrewgu/.local/share/nvim/site,/usr/local/share/nvim/site,/usr/share/nvim/site,/usr/local/Cellar/neovim/0.5.0/share/nvim/runtime,/usr/local/Cellar/neovim/0.5.0/lib/nvim,/usr/share/nvim/site/after,/usr/local/share/nvim/site/after,/Users/andrewgu/.local/share/nvim/site/after,/etc/xdg/nvim/after,/Users/andrewgu/.config/nvim/after"
Searching for "/Users/andrewgu/.config/nvim/pack/*/start/*/scripts.vim"
Searching for "/etc/xdg/nvim/pack/*/start/*/scripts.vim"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/*/start/*/scripts.vim"
Searching for "/usr/local/share/nvim/site/pack/*/start/*/scripts.vim"
Searching for "/usr/share/nvim/site/pack/*/start/*/scripts.vim"
Searching for "/usr/local/Cellar/neovim/0.5.0/share/nvim/runtime/pack/*/start/*/scripts.vim"
Searching for "/usr/local/Cellar/neovim/0.5.0/lib/nvim/pack/*/start/*/scripts.vim"
Searching for "/usr/share/nvim/site/after/pack/*/start/*/scripts.vim"
Searching for "/usr/local/share/nvim/site/after/pack/*/start/*/scripts.vim"
Searching for "/Users/andrewgu/.local/share/nvim/site/after/pack/*/start/*/scripts.vim"
Searching for "/etc/xdg/nvim/after/pack/*/start/*/scripts.vim"
Searching for "/Users/andrewgu/.config/nvim/after/pack/*/start/*/scripts.vim"
not found in 'packpath': "pack/*/start/*/scripts.vim"
Searching for "start/*/scripts.vim" in "/Users/andrewgu/.config/nvim,/etc/xdg/nvim,/Users/andrewgu/.local/share/nvim/site,/usr/local/share/nvim/site,/usr/share/nvim/site,/usr/local/Cellar/neovim/0.5.0/share/nvim/runtime,/usr/local/Cellar/neovim/0.5.0/lib/nvim,/usr/share/nvim/site/after,/usr/local/share/nvim/site/after,/Users/andrewgu/.local/share/nvim/site/after,/etc/xdg/nvim/after,/Users/andrewgu/.config/nvim/after"
Searching for "/Users/andrewgu/.config/nvim/start/*/scripts.vim"
Searching for "/etc/xdg/nvim/start/*/scripts.vim"
Searching for "/Users/andrewgu/.local/share/nvim/site/start/*/scripts.vim"
Searching for "/usr/local/share/nvim/site/start/*/scripts.vim"
Searching for "/usr/share/nvim/site/start/*/scripts.vim"
Searching for "/usr/local/Cellar/neovim/0.5.0/share/nvim/runtime/start/*/scripts.vim"
Searching for "/usr/local/Cellar/neovim/0.5.0/lib/nvim/start/*/scripts.vim"
Searching for "/usr/share/nvim/site/after/start/*/scripts.vim"
Searching for "/usr/local/share/nvim/site/after/start/*/scripts.vim"
Searching for "/Users/andrewgu/.local/share/nvim/site/after/start/*/scripts.vim"
Searching for "/etc/xdg/nvim/after/start/*/scripts.vim"
Searching for "/Users/andrewgu/.config/nvim/after/start/*/scripts.vim"
not found in 'packpath': "start/*/scripts.vim"
Executing:  endif
Executing BufReadPost Autocommands for "*"
autocommand if !did_filetype() && expand("<amatch>") !~ g:ft_ignore_pat    && (getline(1) =~ '^#' || getline(2) =~ '^#' || getline(3) =~ '^#'^I|| getline(4) =~ '^#' || getline(5) =~ '^#') |   setf FALLBACK conf | endif

Executing: if !did_filetype() && expand("<amatch>") !~ g:ft_ignore_pat    && (getline(1) =~ '^#' || getline(2) =~ '^#' || getline(3) =~ '^#'^I|| getline(4) =~ '^#' || getline(5) =~ '^#') |   setf FALLBACK conf | endif
Executing:    setf FALLBACK conf | endif
Executing:  endif
Executing BufReadPost Autocommands for "*"
autocommand lua require("packer.load")({'nvim-colorizer.lua', 'nvim-treesitter'}, { event = "BufRead *" }, _G.packer_plugins)

Executing: lua require("packer.load")({'nvim-colorizer.lua', 'nvim-treesitter'}, { event = "BufRead *" }, _G.packer_plugins)
Searching for "lua/packer/load.lua" in "/Users/andrewgu/.config/nvim,/etc/xdg/nvim,/Users/andrewgu/.local/share/nvim/site,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/telescope.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/popup.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/plenary.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/packer.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-web-devicons,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-tree.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-lspconfig,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-compe,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-base16.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-autopairs,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/neoformat,/Users/andrewgu/.local/share/nvim/site/pack/packer/start
Searching for "/Users/andrewgu/.config/nvim/lua/packer/load.lua"
Searching for "/etc/xdg/nvim/lua/packer/load.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/lua/packer/load.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/telescope.nvim/lua/packer/load.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/popup.nvim/lua/packer/load.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/plenary.nvim/lua/packer/load.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/packer.nvim/lua/packer/load.lua"
Executing: packadd nvim-colorizer.lua
Searching for "pack/*/opt/nvim-colorizer.lua" in "/Users/andrewgu/.config/nvim,/etc/xdg/nvim,/Users/andrewgu/.local/share/nvim/site,/usr/local/share/nvim/site,/usr/share/nvim/site,/usr/local/Cellar/neovim/0.5.0/share/nvim/runtime,/usr/local/Cellar/neovim/0.5.0/lib/nvim,/usr/share/nvim/site/after,/usr/local/share/nvim/site/after,/Users/andrewgu/.local/share/nvim/site/after,/etc/xdg/nvim/after,/Users/andrewgu/.config/nvim/after"
Searching for "/Users/andrewgu/.config/nvim/pack/*/opt/nvim-colorizer.lua"
Searching for "/etc/xdg/nvim/pack/*/opt/nvim-colorizer.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/*/opt/nvim-colorizer.lua"
chdir(/Users/andrewgu/.config/nvim)
chdir(/Users/andrewgu/.local/share/nvim/site)
chdir(/Users/andrewgu/.config/nvim)
chdir(/Users/andrewgu/.config/nvim)
chdir(/Users/andrewgu/.config/nvim)
chdir(/Users/andrewgu/.config/nvim)
chdir(/Users/andrewgu/.config/nvim)
chdir(/etc/xdg/nvim)
chdir(/Users/andrewgu/.config/nvim)
chdir(/Users/andrewgu/.config/nvim)
chdir(/Users/andrewgu/.local/share/nvim/site)
chdir(/Users/andrewgu/.config/nvim)
chdir(/Users/andrewgu/.config/nvim)
chdir(/Users/andrewgu/.local/share/nvim/site/pack/packer/opt)
chdir(/Users/andrewgu/.config/nvim)
chdir(/Users/andrewgu/.config/nvim)
chdir(/Users/andrewgu/.local/share/nvim/site/pack/packer/opt/nvim-colorizer.lua/plugin)
chdir(/Users/andrewgu/.config/nvim)
line 0: sourcing "/Users/andrewgu/.local/share/nvim/site/pack/packer/opt/nvim-colorizer.lua/plugin/colorizer.vim"
line 1: if exists('g:loaded_colorizer')
line 2:   finish
line 3: endif
line 4: 
line 5: command! ColorizerAttachToBuffer lua require'colorizer'.attach_to_buffer(0)
line 6: command! ColorizerDetachFromBuffer lua require'colorizer'.detach_from_buffer(0)
line 7: command! ColorizerReloadAllBuffers lua require'colorizer'.reload_all_buffers()
line 8: command! ColorizerToggle lua local c = require'colorizer' if c.is_buffer_attached(0) then c.detach_from_buffer(0) else c.attach_to_buffer(0) end
line 11: 
line 12: let g:loaded_colorizer = 1
finished sourcing /Users/andrewgu/.local/share/nvim/site/pack/packer/opt/nvim-colorizer.lua/plugin/colorizer.vim
continuing in BufReadPost Autocommands for "*"
Executing: augroup filetypedetect
Executing: augroup END
Searching for "/usr/local/share/nvim/site/pack/*/opt/nvim-colorizer.lua"
Searching for "/usr/share/nvim/site/pack/*/opt/nvim-colorizer.lua"
Searching for "/usr/local/Cellar/neovim/0.5.0/share/nvim/runtime/pack/*/opt/nvim-colorizer.lua"
Searching for "/usr/local/Cellar/neovim/0.5.0/lib/nvim/pack/*/opt/nvim-colorizer.lua"
Searching for "/usr/share/nvim/site/after/pack/*/opt/nvim-colorizer.lua"
Searching for "/usr/local/share/nvim/site/after/pack/*/opt/nvim-colorizer.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/after/pack/*/opt/nvim-colorizer.lua"
Searching for "/etc/xdg/nvim/after/pack/*/opt/nvim-colorizer.lua"
Searching for "/Users/andrewgu/.config/nvim/after/pack/*/opt/nvim-colorizer.lua"
Searching for "lua/colorizer.lua" in "/Users/andrewgu/.config/nvim,/etc/xdg/nvim,/Users/andrewgu/.local/share/nvim/site,/Users/andrewgu/.local/share/nvim/site/pack/packer/opt/nvim-colorizer.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/telescope.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/popup.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/plenary.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/packer.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-web-devicons,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-tree.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-lspconfig,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-compe,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-base16.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-autopairs,/Users/andrewgu/.local/share/nvim/site/pack/packer/
Searching for "/Users/andrewgu/.config/nvim/lua/colorizer.lua"
Searching for "/etc/xdg/nvim/lua/colorizer.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/lua/colorizer.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/opt/nvim-colorizer.lua/lua/colorizer.lua"
Searching for "lua/colorizer/nvim.lua" in "/Users/andrewgu/.config/nvim,/etc/xdg/nvim,/Users/andrewgu/.local/share/nvim/site,/Users/andrewgu/.local/share/nvim/site/pack/packer/opt/nvim-colorizer.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/telescope.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/popup.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/plenary.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/packer.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-web-devicons,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-tree.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-lspconfig,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-compe,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-base16.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-autopairs,/Users/andrewgu/.local/share/nvim/site/pack/pa
Searching for "/Users/andrewgu/.config/nvim/lua/colorizer/nvim.lua"
Searching for "/etc/xdg/nvim/lua/colorizer/nvim.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/lua/colorizer/nvim.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/opt/nvim-colorizer.lua/lua/colorizer/nvim.lua"
Searching for "lua/colorizer/trie.lua" in "/Users/andrewgu/.config/nvim,/etc/xdg/nvim,/Users/andrewgu/.local/share/nvim/site,/Users/andrewgu/.local/share/nvim/site/pack/packer/opt/nvim-colorizer.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/telescope.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/popup.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/plenary.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/packer.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-web-devicons,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-tree.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-lspconfig,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-compe,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-base16.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-autopairs,/Users/andrewgu/.local/share/nvim/site/pack/pa
Searching for "/Users/andrewgu/.config/nvim/lua/colorizer/trie.lua"
Searching for "/etc/xdg/nvim/lua/colorizer/trie.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/lua/colorizer/trie.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/opt/nvim-colorizer.lua/lua/colorizer/trie.lua"
Searching for "lua/ffi.lua" in "/Users/andrewgu/.config/nvim,/etc/xdg/nvim,/Users/andrewgu/.local/share/nvim/site,/Users/andrewgu/.local/share/nvim/site/pack/packer/opt/nvim-colorizer.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/telescope.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/popup.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/plenary.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/packer.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-web-devicons,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-tree.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-lspconfig,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-compe,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-base16.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-autopairs,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/
Searching for "/Users/andrewgu/.config/nvim/lua/ffi.lua"
Searching for "/etc/xdg/nvim/lua/ffi.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/lua/ffi.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/opt/nvim-colorizer.lua/lua/ffi.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/telescope.nvim/lua/ffi.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/popup.nvim/lua/ffi.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/plenary.nvim/lua/ffi.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/packer.nvim/lua/ffi.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/lua/ffi.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-web-devicons/lua/ffi.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-tree.lua/lua/ffi.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-lspconfig/lua/ffi.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-compe/lua/ffi.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-base16.lua/lua/ffi.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-autopairs/lua/ffi.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/neoformat/lua/ffi.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/lualine.nvim/lua/ffi.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/indent-blankline.nvim/lua/ffi.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/gitsigns.nvim/lua/ffi.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/barbar.nvim/lua/ffi.lua"
Searching for "/usr/local/share/nvim/site/lua/ffi.lua"
Searching for "/usr/share/nvim/site/lua/ffi.lua"
Searching for "/usr/local/Cellar/neovim/0.5.0/share/nvim/runtime/lua/ffi.lua"
Searching for "/usr/local/Cellar/neovim/0.5.0/share/nvim/runtime/pack/dist/opt/matchit/lua/ffi.lua"
Searching for "/usr/local/Cellar/neovim/0.5.0/lib/nvim/lua/ffi.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-compe/after/lua/ffi.lua"
Searching for "/usr/share/nvim/site/after/lua/ffi.lua"
Searching for "/usr/local/share/nvim/site/after/lua/ffi.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/after/lua/ffi.lua"
Searching for "/etc/xdg/nvim/after/lua/ffi.lua"
Searching for "/Users/andrewgu/.config/nvim/after/lua/ffi.lua"
not found in 'runtimepath': "lua/ffi.lua"
Searching for "pack/*/start/*/lua/ffi.lua" in "/Users/andrewgu/.config/nvim,/etc/xdg/nvim,/Users/andrewgu/.local/share/nvim/site,/usr/local/share/nvim/site,/usr/share/nvim/site,/usr/local/Cellar/neovim/0.5.0/share/nvim/runtime,/usr/local/Cellar/neovim/0.5.0/lib/nvim,/usr/share/nvim/site/after,/usr/local/share/nvim/site/after,/Users/andrewgu/.local/share/nvim/site/after,/etc/xdg/nvim/after,/Users/andrewgu/.config/nvim/after"
Searching for "/Users/andrewgu/.config/nvim/pack/*/start/*/lua/ffi.lua"
Searching for "/etc/xdg/nvim/pack/*/start/*/lua/ffi.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/*/start/*/lua/ffi.lua"
Searching for "/usr/local/share/nvim/site/pack/*/start/*/lua/ffi.lua"
Searching for "/usr/share/nvim/site/pack/*/start/*/lua/ffi.lua"
Searching for "/usr/local/Cellar/neovim/0.5.0/share/nvim/runtime/pack/*/start/*/lua/ffi.lua"
Searching for "/usr/local/Cellar/neovim/0.5.0/lib/nvim/pack/*/start/*/lua/ffi.lua"
Searching for "/usr/share/nvim/site/after/pack/*/start/*/lua/ffi.lua"
Searching for "/usr/local/share/nvim/site/after/pack/*/start/*/lua/ffi.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/after/pack/*/start/*/lua/ffi.lua"
Searching for "/etc/xdg/nvim/after/pack/*/start/*/lua/ffi.lua"
Searching for "/Users/andrewgu/.config/nvim/after/pack/*/start/*/lua/ffi.lua"
not found in 'packpath': "pack/*/start/*/lua/ffi.lua"
Searching for "start/*/lua/ffi.lua" in "/Users/andrewgu/.config/nvim,/etc/xdg/nvim,/Users/andrewgu/.local/share/nvim/site,/usr/local/share/nvim/site,/usr/share/nvim/site,/usr/local/Cellar/neovim/0.5.0/share/nvim/runtime,/usr/local/Cellar/neovim/0.5.0/lib/nvim,/usr/share/nvim/site/after,/usr/local/share/nvim/site/after,/Users/andrewgu/.local/share/nvim/site/after,/etc/xdg/nvim/after,/Users/andrewgu/.config/nvim/after"
Searching for "/Users/andrewgu/.config/nvim/start/*/lua/ffi.lua"
Searching for "/etc/xdg/nvim/start/*/lua/ffi.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/start/*/lua/ffi.lua"
Searching for "/usr/local/share/nvim/site/start/*/lua/ffi.lua"
Searching for "/usr/share/nvim/site/start/*/lua/ffi.lua"
Searching for "/usr/local/Cellar/neovim/0.5.0/share/nvim/runtime/start/*/lua/ffi.lua"
Searching for "/usr/local/Cellar/neovim/0.5.0/lib/nvim/start/*/lua/ffi.lua"
Searching for "/usr/share/nvim/site/after/start/*/lua/ffi.lua"
Searching for "/usr/local/share/nvim/site/after/start/*/lua/ffi.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/after/start/*/lua/ffi.lua"
Searching for "/etc/xdg/nvim/after/start/*/lua/ffi.lua"
Searching for "/Users/andrewgu/.config/nvim/after/start/*/lua/ffi.lua"
not found in 'packpath': "start/*/lua/ffi.lua"
Searching for "lua/ffi/init.lua" in "/Users/andrewgu/.config/nvim,/etc/xdg/nvim,/Users/andrewgu/.local/share/nvim/site,/Users/andrewgu/.local/share/nvim/site/pack/packer/opt/nvim-colorizer.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/telescope.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/popup.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/plenary.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/packer.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-web-devicons,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-tree.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-lspconfig,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-compe,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-base16.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-autopairs,/Users/andrewgu/.local/share/nvim/site/pack/packer/s
Searching for "/Users/andrewgu/.config/nvim/lua/ffi/init.lua"
Searching for "/etc/xdg/nvim/lua/ffi/init.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/lua/ffi/init.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/opt/nvim-colorizer.lua/lua/ffi/init.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/telescope.nvim/lua/ffi/init.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/popup.nvim/lua/ffi/init.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/plenary.nvim/lua/ffi/init.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/packer.nvim/lua/ffi/init.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/lua/ffi/init.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-web-devicons/lua/ffi/init.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-tree.lua/lua/ffi/init.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-lspconfig/lua/ffi/init.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-compe/lua/ffi/init.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-base16.lua/lua/ffi/init.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-autopairs/lua/ffi/init.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/neoformat/lua/ffi/init.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/lualine.nvim/lua/ffi/init.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/indent-blankline.nvim/lua/ffi/init.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/gitsigns.nvim/lua/ffi/init.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/barbar.nvim/lua/ffi/init.lua"
Searching for "/usr/local/share/nvim/site/lua/ffi/init.lua"
Searching for "/usr/share/nvim/site/lua/ffi/init.lua"
Searching for "/usr/local/Cellar/neovim/0.5.0/share/nvim/runtime/lua/ffi/init.lua"
Searching for "/usr/local/Cellar/neovim/0.5.0/share/nvim/runtime/pack/dist/opt/matchit/lua/ffi/init.lua"
Searching for "/usr/local/Cellar/neovim/0.5.0/lib/nvim/lua/ffi/init.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-compe/after/lua/ffi/init.lua"
Searching for "/usr/share/nvim/site/after/lua/ffi/init.lua"
Searching for "/usr/local/share/nvim/site/after/lua/ffi/init.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/after/lua/ffi/init.lua"
Searching for "/etc/xdg/nvim/after/lua/ffi/init.lua"
Searching for "/Users/andrewgu/.config/nvim/after/lua/ffi/init.lua"
not found in 'runtimepath': "lua/ffi/init.lua"
Searching for "pack/*/start/*/lua/ffi/init.lua" in "/Users/andrewgu/.config/nvim,/etc/xdg/nvim,/Users/andrewgu/.local/share/nvim/site,/usr/local/share/nvim/site,/usr/share/nvim/site,/usr/local/Cellar/neovim/0.5.0/share/nvim/runtime,/usr/local/Cellar/neovim/0.5.0/lib/nvim,/usr/share/nvim/site/after,/usr/local/share/nvim/site/after,/Users/andrewgu/.local/share/nvim/site/after,/etc/xdg/nvim/after,/Users/andrewgu/.config/nvim/after"
Searching for "/Users/andrewgu/.config/nvim/pack/*/start/*/lua/ffi/init.lua"
Searching for "/etc/xdg/nvim/pack/*/start/*/lua/ffi/init.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/*/start/*/lua/ffi/init.lua"
Searching for "/usr/local/share/nvim/site/pack/*/start/*/lua/ffi/init.lua"
Searching for "/usr/share/nvim/site/pack/*/start/*/lua/ffi/init.lua"
Searching for "/usr/local/Cellar/neovim/0.5.0/share/nvim/runtime/pack/*/start/*/lua/ffi/init.lua"
Searching for "/usr/local/Cellar/neovim/0.5.0/lib/nvim/pack/*/start/*/lua/ffi/init.lua"
Searching for "/usr/share/nvim/site/after/pack/*/start/*/lua/ffi/init.lua"
Searching for "/usr/local/share/nvim/site/after/pack/*/start/*/lua/ffi/init.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/after/pack/*/start/*/lua/ffi/init.lua"
Searching for "/etc/xdg/nvim/after/pack/*/start/*/lua/ffi/init.lua"
Searching for "/Users/andrewgu/.config/nvim/after/pack/*/start/*/lua/ffi/init.lua"
not found in 'packpath': "pack/*/start/*/lua/ffi/init.lua"
Searching for "start/*/lua/ffi/init.lua" in "/Users/andrewgu/.config/nvim,/etc/xdg/nvim,/Users/andrewgu/.local/share/nvim/site,/usr/local/share/nvim/site,/usr/share/nvim/site,/usr/local/Cellar/neovim/0.5.0/share/nvim/runtime,/usr/local/Cellar/neovim/0.5.0/lib/nvim,/usr/share/nvim/site/after,/usr/local/share/nvim/site/after,/Users/andrewgu/.local/share/nvim/site/after,/etc/xdg/nvim/after,/Users/andrewgu/.config/nvim/after"
Searching for "/Users/andrewgu/.config/nvim/start/*/lua/ffi/init.lua"
Searching for "/etc/xdg/nvim/start/*/lua/ffi/init.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/start/*/lua/ffi/init.lua"
Searching for "/usr/local/share/nvim/site/start/*/lua/ffi/init.lua"
Searching for "/usr/share/nvim/site/start/*/lua/ffi/init.lua"
Searching for "/usr/local/Cellar/neovim/0.5.0/share/nvim/runtime/start/*/lua/ffi/init.lua"
Searching for "/usr/local/Cellar/neovim/0.5.0/lib/nvim/start/*/lua/ffi/init.lua"
Searching for "/usr/share/nvim/site/after/start/*/lua/ffi/init.lua"
Searching for "/usr/local/share/nvim/site/after/start/*/lua/ffi/init.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/after/start/*/lua/ffi/init.lua"
Searching for "/etc/xdg/nvim/after/start/*/lua/ffi/init.lua"
Searching for "/Users/andrewgu/.config/nvim/after/start/*/lua/ffi/init.lua"
not found in 'packpath': "start/*/lua/ffi/init.lua"
Searching for "lua/ffi.so" in "/Users/andrewgu/.config/nvim,/etc/xdg/nvim,/Users/andrewgu/.local/share/nvim/site,/Users/andrewgu/.local/share/nvim/site/pack/packer/opt/nvim-colorizer.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/telescope.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/popup.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/plenary.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/packer.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-web-devicons,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-tree.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-lspconfig,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-compe,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-base16.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-autopairs,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/n
Searching for "/Users/andrewgu/.config/nvim/lua/ffi.so"
Searching for "/etc/xdg/nvim/lua/ffi.so"
Searching for "/Users/andrewgu/.local/share/nvim/site/lua/ffi.so"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/opt/nvim-colorizer.lua/lua/ffi.so"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/telescope.nvim/lua/ffi.so"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/popup.nvim/lua/ffi.so"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/plenary.nvim/lua/ffi.so"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/packer.nvim/lua/ffi.so"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/lua/ffi.so"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-web-devicons/lua/ffi.so"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-tree.lua/lua/ffi.so"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-lspconfig/lua/ffi.so"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-compe/lua/ffi.so"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-base16.lua/lua/ffi.so"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-autopairs/lua/ffi.so"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/neoformat/lua/ffi.so"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/lualine.nvim/lua/ffi.so"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/indent-blankline.nvim/lua/ffi.so"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/gitsigns.nvim/lua/ffi.so"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/barbar.nvim/lua/ffi.so"
Searching for "/usr/local/share/nvim/site/lua/ffi.so"
Searching for "/usr/share/nvim/site/lua/ffi.so"
Searching for "/usr/local/Cellar/neovim/0.5.0/share/nvim/runtime/lua/ffi.so"
Searching for "/usr/local/Cellar/neovim/0.5.0/share/nvim/runtime/pack/dist/opt/matchit/lua/ffi.so"
Searching for "/usr/local/Cellar/neovim/0.5.0/lib/nvim/lua/ffi.so"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-compe/after/lua/ffi.so"
Searching for "/usr/share/nvim/site/after/lua/ffi.so"
Searching for "/usr/local/share/nvim/site/after/lua/ffi.so"
Searching for "/Users/andrewgu/.local/share/nvim/site/after/lua/ffi.so"
Searching for "/etc/xdg/nvim/after/lua/ffi.so"
Searching for "/Users/andrewgu/.config/nvim/after/lua/ffi.so"
not found in 'runtimepath': "lua/ffi.so"
Searching for "pack/*/start/*/lua/ffi.so" in "/Users/andrewgu/.config/nvim,/etc/xdg/nvim,/Users/andrewgu/.local/share/nvim/site,/usr/local/share/nvim/site,/usr/share/nvim/site,/usr/local/Cellar/neovim/0.5.0/share/nvim/runtime,/usr/local/Cellar/neovim/0.5.0/lib/nvim,/usr/share/nvim/site/after,/usr/local/share/nvim/site/after,/Users/andrewgu/.local/share/nvim/site/after,/etc/xdg/nvim/after,/Users/andrewgu/.config/nvim/after"
Searching for "/Users/andrewgu/.config/nvim/pack/*/start/*/lua/ffi.so"
Searching for "/etc/xdg/nvim/pack/*/start/*/lua/ffi.so"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/*/start/*/lua/ffi.so"
Searching for "/usr/local/share/nvim/site/pack/*/start/*/lua/ffi.so"
Searching for "/usr/share/nvim/site/pack/*/start/*/lua/ffi.so"
Searching for "/usr/local/Cellar/neovim/0.5.0/share/nvim/runtime/pack/*/start/*/lua/ffi.so"
Searching for "/usr/local/Cellar/neovim/0.5.0/lib/nvim/pack/*/start/*/lua/ffi.so"
Searching for "/usr/share/nvim/site/after/pack/*/start/*/lua/ffi.so"
Searching for "/usr/local/share/nvim/site/after/pack/*/start/*/lua/ffi.so"
Searching for "/Users/andrewgu/.local/share/nvim/site/after/pack/*/start/*/lua/ffi.so"
Searching for "/etc/xdg/nvim/after/pack/*/start/*/lua/ffi.so"
Searching for "/Users/andrewgu/.config/nvim/after/pack/*/start/*/lua/ffi.so"
not found in 'packpath': "pack/*/start/*/lua/ffi.so"
Searching for "start/*/lua/ffi.so" in "/Users/andrewgu/.config/nvim,/etc/xdg/nvim,/Users/andrewgu/.local/share/nvim/site,/usr/local/share/nvim/site,/usr/share/nvim/site,/usr/local/Cellar/neovim/0.5.0/share/nvim/runtime,/usr/local/Cellar/neovim/0.5.0/lib/nvim,/usr/share/nvim/site/after,/usr/local/share/nvim/site/after,/Users/andrewgu/.local/share/nvim/site/after,/etc/xdg/nvim/after,/Users/andrewgu/.config/nvim/after"
Searching for "/Users/andrewgu/.config/nvim/start/*/lua/ffi.so"
Searching for "/etc/xdg/nvim/start/*/lua/ffi.so"
Searching for "/Users/andrewgu/.local/share/nvim/site/start/*/lua/ffi.so"
Searching for "/usr/local/share/nvim/site/start/*/lua/ffi.so"
Searching for "/usr/share/nvim/site/start/*/lua/ffi.so"
Searching for "/usr/local/Cellar/neovim/0.5.0/share/nvim/runtime/start/*/lua/ffi.so"
Searching for "/usr/local/Cellar/neovim/0.5.0/lib/nvim/start/*/lua/ffi.so"
Searching for "/usr/share/nvim/site/after/start/*/lua/ffi.so"
Searching for "/usr/local/share/nvim/site/after/start/*/lua/ffi.so"
Searching for "/Users/andrewgu/.local/share/nvim/site/after/start/*/lua/ffi.so"
Searching for "/etc/xdg/nvim/after/start/*/lua/ffi.so"
Searching for "/Users/andrewgu/.config/nvim/after/start/*/lua/ffi.so"
not found in 'packpath': "start/*/lua/ffi.so"
Executing: augroup ColorizerSetup
Executing: autocmd!
Executing: autocmd FileType * lua COLORIZER_SETUP_HOOK()
Executing: augroup END
Executing: ColorizerReloadAllBuffers
Executing: lua require'colorizer'.reload_all_buffers()
Executing: packadd nvim-treesitter
Searching for "pack/*/opt/nvim-treesitter" in "/Users/andrewgu/.config/nvim,/etc/xdg/nvim,/Users/andrewgu/.local/share/nvim/site,/usr/local/share/nvim/site,/usr/share/nvim/site,/usr/local/Cellar/neovim/0.5.0/share/nvim/runtime,/usr/local/Cellar/neovim/0.5.0/lib/nvim,/usr/share/nvim/site/after,/usr/local/share/nvim/site/after,/Users/andrewgu/.local/share/nvim/site/after,/etc/xdg/nvim/after,/Users/andrewgu/.config/nvim/after"
Searching for "/Users/andrewgu/.config/nvim/pack/*/opt/nvim-treesitter"
Searching for "/etc/xdg/nvim/pack/*/opt/nvim-treesitter"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/*/opt/nvim-treesitter"
chdir(/Users/andrewgu/.config/nvim)
chdir(/Users/andrewgu/.local/share/nvim/site)
chdir(/Users/andrewgu/.config/nvim)
chdir(/Users/andrewgu/.config/nvim)
chdir(/Users/andrewgu/.config/nvim)
chdir(/Users/andrewgu/.config/nvim)
chdir(/Users/andrewgu/.config/nvim)
chdir(/etc/xdg/nvim)
chdir(/Users/andrewgu/.config/nvim)
chdir(/Users/andrewgu/.config/nvim)
chdir(/Users/andrewgu/.local/share/nvim/site)
chdir(/Users/andrewgu/.config/nvim)
chdir(/Users/andrewgu/.config/nvim)
chdir(/Users/andrewgu/.local/share/nvim/site/pack/packer/opt)
chdir(/Users/andrewgu/.config/nvim)
chdir(/Users/andrewgu/.config/nvim)
chdir(/Users/andrewgu/.local/share/nvim/site/pack/packer/opt/nvim-treesitter/plugin)
chdir(/Users/andrewgu/.config/nvim)
line 0: sourcing "/Users/andrewgu/.local/share/nvim/site/pack/packer/opt/nvim-treesitter/plugin/nvim-treesitter.vim"
line 1: " Last Change: 2020 Aug 13
line 2: 
line 3: if exists('g:loaded_nvim_treesitter')
line 4:   finish
line 5: endif
line 6: 
line 7: augroup NvimTreesitter
line 8:   " on every query file write we want to set an autocommand that will reload the cache
line 9:   autocmd FileType query autocmd! NvimTreesitter BufWritePost <buffer> call v:lua.require('nvim-treesitter.query').invalidate_query_file(expand('%:p'))
line 11: augroup END
line 12: 
line 13: let g:loaded_nvim_treesitter = 1
line 14: 
line 15: lua require'nvim-treesitter'.setup()
Searching for "lua/nvim-treesitter.lua" in "/Users/andrewgu/.config/nvim,/etc/xdg/nvim,/Users/andrewgu/.local/share/nvim/site,/Users/andrewgu/.local/share/nvim/site/pack/packer/opt/nvim-treesitter,/Users/andrewgu/.local/share/nvim/site/pack/packer/opt/nvim-colorizer.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/telescope.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/popup.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/plenary.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/packer.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-web-devicons,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-tree.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-lspconfig,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-compe,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-base16.lua,/Users/andrewgu/.local/share/nvim/site/pack/pa
Searching for "/Users/andrewgu/.config/nvim/lua/nvim-treesitter.lua"
Searching for "/etc/xdg/nvim/lua/nvim-treesitter.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/lua/nvim-treesitter.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/opt/nvim-treesitter/lua/nvim-treesitter.lua"
Searching for "lua/vim/treesitter/languagetree.lua" in "/Users/andrewgu/.config/nvim,/etc/xdg/nvim,/Users/andrewgu/.local/share/nvim/site,/Users/andrewgu/.local/share/nvim/site/pack/packer/opt/nvim-treesitter,/Users/andrewgu/.local/share/nvim/site/pack/packer/opt/nvim-colorizer.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/telescope.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/popup.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/plenary.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/packer.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-web-devicons,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-tree.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-lspconfig,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-compe,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-base16.lua,/Users/andrewgu/.local/share/nvim/
Searching for "/Users/andrewgu/.config/nvim/lua/vim/treesitter/languagetree.lua"
Searching for "/etc/xdg/nvim/lua/vim/treesitter/languagetree.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/lua/vim/treesitter/languagetree.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/opt/nvim-treesitter/lua/vim/treesitter/languagetree.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/opt/nvim-colorizer.lua/lua/vim/treesitter/languagetree.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/telescope.nvim/lua/vim/treesitter/languagetree.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/popup.nvim/lua/vim/treesitter/languagetree.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/plenary.nvim/lua/vim/treesitter/languagetree.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/packer.nvim/lua/vim/treesitter/languagetree.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/lua/vim/treesitter/languagetree.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-web-devicons/lua/vim/treesitter/languagetree.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-tree.lua/lua/vim/treesitter/languagetree.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-lspconfig/lua/vim/treesitter/languagetree.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-compe/lua/vim/treesitter/languagetree.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-base16.lua/lua/vim/treesitter/languagetree.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-autopairs/lua/vim/treesitter/languagetree.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/neoformat/lua/vim/treesitter/languagetree.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/lualine.nvim/lua/vim/treesitter/languagetree.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/indent-blankline.nvim/lua/vim/treesitter/languagetree.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/gitsigns.nvim/lua/vim/treesitter/languagetree.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/barbar.nvim/lua/vim/treesitter/languagetree.lua"
Searching for "/usr/local/share/nvim/site/lua/vim/treesitter/languagetree.lua"
Searching for "/usr/share/nvim/site/lua/vim/treesitter/languagetree.lua"
Searching for "/usr/local/Cellar/neovim/0.5.0/share/nvim/runtime/lua/vim/treesitter/languagetree.lua"
Searching for "lua/vim/treesitter/query.lua" in "/Users/andrewgu/.config/nvim,/etc/xdg/nvim,/Users/andrewgu/.local/share/nvim/site,/Users/andrewgu/.local/share/nvim/site/pack/packer/opt/nvim-treesitter,/Users/andrewgu/.local/share/nvim/site/pack/packer/opt/nvim-colorizer.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/telescope.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/popup.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/plenary.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/packer.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-web-devicons,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-tree.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-lspconfig,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-compe,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-base16.lua,/Users/andrewgu/.local/share/nvim/site/pa
Searching for "/Users/andrewgu/.config/nvim/lua/vim/treesitter/query.lua"
Searching for "/etc/xdg/nvim/lua/vim/treesitter/query.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/lua/vim/treesitter/query.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/opt/nvim-treesitter/lua/vim/treesitter/query.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/opt/nvim-colorizer.lua/lua/vim/treesitter/query.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/telescope.nvim/lua/vim/treesitter/query.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/popup.nvim/lua/vim/treesitter/query.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/plenary.nvim/lua/vim/treesitter/query.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/packer.nvim/lua/vim/treesitter/query.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/lua/vim/treesitter/query.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-web-devicons/lua/vim/treesitter/query.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-tree.lua/lua/vim/treesitter/query.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-lspconfig/lua/vim/treesitter/query.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-compe/lua/vim/treesitter/query.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-base16.lua/lua/vim/treesitter/query.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-autopairs/lua/vim/treesitter/query.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/neoformat/lua/vim/treesitter/query.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/lualine.nvim/lua/vim/treesitter/query.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/indent-blankline.nvim/lua/vim/treesitter/query.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/gitsigns.nvim/lua/vim/treesitter/query.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/barbar.nvim/lua/vim/treesitter/query.lua"
Searching for "/usr/local/share/nvim/site/lua/vim/treesitter/query.lua"
Searching for "/usr/share/nvim/site/lua/vim/treesitter/query.lua"
Searching for "/usr/local/Cellar/neovim/0.5.0/share/nvim/runtime/lua/vim/treesitter/query.lua"
Searching for "lua/vim/treesitter/language.lua" in "/Users/andrewgu/.config/nvim,/etc/xdg/nvim,/Users/andrewgu/.local/share/nvim/site,/Users/andrewgu/.local/share/nvim/site/pack/packer/opt/nvim-treesitter,/Users/andrewgu/.local/share/nvim/site/pack/packer/opt/nvim-colorizer.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/telescope.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/popup.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/plenary.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/packer.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-web-devicons,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-tree.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-lspconfig,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-compe,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-base16.lua,/Users/andrewgu/.local/share/nvim/site
Searching for "/Users/andrewgu/.config/nvim/lua/vim/treesitter/language.lua"
Searching for "/etc/xdg/nvim/lua/vim/treesitter/language.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/lua/vim/treesitter/language.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/opt/nvim-treesitter/lua/vim/treesitter/language.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/opt/nvim-colorizer.lua/lua/vim/treesitter/language.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/telescope.nvim/lua/vim/treesitter/language.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/popup.nvim/lua/vim/treesitter/language.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/plenary.nvim/lua/vim/treesitter/language.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/packer.nvim/lua/vim/treesitter/language.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/lua/vim/treesitter/language.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-web-devicons/lua/vim/treesitter/language.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-tree.lua/lua/vim/treesitter/language.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-lspconfig/lua/vim/treesitter/language.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-compe/lua/vim/treesitter/language.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-base16.lua/lua/vim/treesitter/language.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-autopairs/lua/vim/treesitter/language.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/neoformat/lua/vim/treesitter/language.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/lualine.nvim/lua/vim/treesitter/language.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/indent-blankline.nvim/lua/vim/treesitter/language.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/gitsigns.nvim/lua/vim/treesitter/language.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/barbar.nvim/lua/vim/treesitter/language.lua"
Searching for "/usr/local/share/nvim/site/lua/vim/treesitter/language.lua"
Searching for "/usr/share/nvim/site/lua/vim/treesitter/language.lua"
Searching for "/usr/local/Cellar/neovim/0.5.0/share/nvim/runtime/lua/vim/treesitter/language.lua"
Searching for "lua/nvim-treesitter/install.lua" in "/Users/andrewgu/.config/nvim,/etc/xdg/nvim,/Users/andrewgu/.local/share/nvim/site,/Users/andrewgu/.local/share/nvim/site/pack/packer/opt/nvim-treesitter,/Users/andrewgu/.local/share/nvim/site/pack/packer/opt/nvim-colorizer.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/telescope.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/popup.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/plenary.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/packer.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-web-devicons,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-tree.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-lspconfig,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-compe,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-base16.lua,/Users/andrewgu/.local/share/nvim/site
Searching for "/Users/andrewgu/.config/nvim/lua/nvim-treesitter/install.lua"
Searching for "/etc/xdg/nvim/lua/nvim-treesitter/install.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/lua/nvim-treesitter/install.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/opt/nvim-treesitter/lua/nvim-treesitter/install.lua"
Searching for "lua/nvim-treesitter/utils.lua" in "/Users/andrewgu/.config/nvim,/etc/xdg/nvim,/Users/andrewgu/.local/share/nvim/site,/Users/andrewgu/.local/share/nvim/site/pack/packer/opt/nvim-treesitter,/Users/andrewgu/.local/share/nvim/site/pack/packer/opt/nvim-colorizer.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/telescope.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/popup.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/plenary.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/packer.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-web-devicons,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-tree.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-lspconfig,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-compe,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-base16.lua,/Users/andrewgu/.local/share/nvim/site/p
Searching for "/Users/andrewgu/.config/nvim/lua/nvim-treesitter/utils.lua"
Searching for "/etc/xdg/nvim/lua/nvim-treesitter/utils.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/lua/nvim-treesitter/utils.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/opt/nvim-treesitter/lua/nvim-treesitter/utils.lua"
Searching for "lua/nvim-treesitter/parsers.lua" in "/Users/andrewgu/.config/nvim,/etc/xdg/nvim,/Users/andrewgu/.local/share/nvim/site,/Users/andrewgu/.local/share/nvim/site/pack/packer/opt/nvim-treesitter,/Users/andrewgu/.local/share/nvim/site/pack/packer/opt/nvim-colorizer.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/telescope.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/popup.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/plenary.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/packer.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-web-devicons,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-tree.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-lspconfig,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-compe,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-base16.lua,/Users/andrewgu/.local/share/nvim/site
Searching for "/Users/andrewgu/.config/nvim/lua/nvim-treesitter/parsers.lua"
Searching for "/etc/xdg/nvim/lua/nvim-treesitter/parsers.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/lua/nvim-treesitter/parsers.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/opt/nvim-treesitter/lua/nvim-treesitter/parsers.lua"
Searching for "lua/vim/treesitter.lua" in "/Users/andrewgu/.config/nvim,/etc/xdg/nvim,/Users/andrewgu/.local/share/nvim/site,/Users/andrewgu/.local/share/nvim/site/pack/packer/opt/nvim-treesitter,/Users/andrewgu/.local/share/nvim/site/pack/packer/opt/nvim-colorizer.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/telescope.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/popup.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/plenary.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/packer.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-web-devicons,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-tree.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-lspconfig,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-compe,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-base16.lua,/Users/andrewgu/.local/share/nvim/site/pack/pac
Searching for "/Users/andrewgu/.config/nvim/lua/vim/treesitter.lua"
Searching for "/etc/xdg/nvim/lua/vim/treesitter.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/lua/vim/treesitter.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/opt/nvim-treesitter/lua/vim/treesitter.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/opt/nvim-colorizer.lua/lua/vim/treesitter.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/telescope.nvim/lua/vim/treesitter.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/popup.nvim/lua/vim/treesitter.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/plenary.nvim/lua/vim/treesitter.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/packer.nvim/lua/vim/treesitter.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/lua/vim/treesitter.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-web-devicons/lua/vim/treesitter.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-tree.lua/lua/vim/treesitter.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-lspconfig/lua/vim/treesitter.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-compe/lua/vim/treesitter.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-base16.lua/lua/vim/treesitter.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-autopairs/lua/vim/treesitter.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/neoformat/lua/vim/treesitter.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/lualine.nvim/lua/vim/treesitter.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/indent-blankline.nvim/lua/vim/treesitter.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/gitsigns.nvim/lua/vim/treesitter.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/barbar.nvim/lua/vim/treesitter.lua"
Searching for "/usr/local/share/nvim/site/lua/vim/treesitter.lua"
Searching for "/usr/share/nvim/site/lua/vim/treesitter.lua"
Searching for "/usr/local/Cellar/neovim/0.5.0/share/nvim/runtime/lua/vim/treesitter.lua"
Searching for "lua/nvim-treesitter/info.lua" in "/Users/andrewgu/.config/nvim,/etc/xdg/nvim,/Users/andrewgu/.local/share/nvim/site,/Users/andrewgu/.local/share/nvim/site/pack/packer/opt/nvim-treesitter,/Users/andrewgu/.local/share/nvim/site/pack/packer/opt/nvim-colorizer.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/telescope.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/popup.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/plenary.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/packer.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-web-devicons,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-tree.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-lspconfig,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-compe,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-base16.lua,/Users/andrewgu/.local/share/nvim/site/pa
Searching for "/Users/andrewgu/.config/nvim/lua/nvim-treesitter/info.lua"
Searching for "/etc/xdg/nvim/lua/nvim-treesitter/info.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/lua/nvim-treesitter/info.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/opt/nvim-treesitter/lua/nvim-treesitter/info.lua"
Searching for "lua/nvim-treesitter/configs.lua" in "/Users/andrewgu/.config/nvim,/etc/xdg/nvim,/Users/andrewgu/.local/share/nvim/site,/Users/andrewgu/.local/share/nvim/site/pack/packer/opt/nvim-treesitter,/Users/andrewgu/.local/share/nvim/site/pack/packer/opt/nvim-colorizer.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/telescope.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/popup.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/plenary.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/packer.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-web-devicons,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-tree.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-lspconfig,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-compe,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-base16.lua,/Users/andrewgu/.local/share/nvim/site
Searching for "/Users/andrewgu/.config/nvim/lua/nvim-treesitter/configs.lua"
Searching for "/etc/xdg/nvim/lua/nvim-treesitter/configs.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/lua/nvim-treesitter/configs.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/opt/nvim-treesitter/lua/nvim-treesitter/configs.lua"
Searching for "lua/nvim-treesitter/query.lua" in "/Users/andrewgu/.config/nvim,/etc/xdg/nvim,/Users/andrewgu/.local/share/nvim/site,/Users/andrewgu/.local/share/nvim/site/pack/packer/opt/nvim-treesitter,/Users/andrewgu/.local/share/nvim/site/pack/packer/opt/nvim-colorizer.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/telescope.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/popup.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/plenary.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/packer.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-web-devicons,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-tree.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-lspconfig,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-compe,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-base16.lua,/Users/andrewgu/.local/share/nvim/site/p
Searching for "/Users/andrewgu/.config/nvim/lua/nvim-treesitter/query.lua"
Searching for "/etc/xdg/nvim/lua/nvim-treesitter/query.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/lua/nvim-treesitter/query.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/opt/nvim-treesitter/lua/nvim-treesitter/query.lua"
Searching for "lua/nvim-treesitter/tsrange.lua" in "/Users/andrewgu/.config/nvim,/etc/xdg/nvim,/Users/andrewgu/.local/share/nvim/site,/Users/andrewgu/.local/share/nvim/site/pack/packer/opt/nvim-treesitter,/Users/andrewgu/.local/share/nvim/site/pack/packer/opt/nvim-colorizer.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/telescope.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/popup.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/plenary.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/packer.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-web-devicons,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-tree.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-lspconfig,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-compe,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-base16.lua,/Users/andrewgu/.local/share/nvim/site
Searching for "/Users/andrewgu/.config/nvim/lua/nvim-treesitter/tsrange.lua"
Searching for "/etc/xdg/nvim/lua/nvim-treesitter/tsrange.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/lua/nvim-treesitter/tsrange.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/opt/nvim-treesitter/lua/nvim-treesitter/tsrange.lua"
Searching for "lua/nvim-treesitter/ts_utils.lua" in "/Users/andrewgu/.config/nvim,/etc/xdg/nvim,/Users/andrewgu/.local/share/nvim/site,/Users/andrewgu/.local/share/nvim/site/pack/packer/opt/nvim-treesitter,/Users/andrewgu/.local/share/nvim/site/pack/packer/opt/nvim-colorizer.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/telescope.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/popup.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/plenary.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/packer.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-web-devicons,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-tree.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-lspconfig,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-compe,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-base16.lua,/Users/andrewgu/.local/share/nvim/sit
Searching for "/Users/andrewgu/.config/nvim/lua/nvim-treesitter/ts_utils.lua"
Searching for "/etc/xdg/nvim/lua/nvim-treesitter/ts_utils.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/lua/nvim-treesitter/ts_utils.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/opt/nvim-treesitter/lua/nvim-treesitter/ts_utils.lua"
Searching for "lua/nvim-treesitter/caching.lua" in "/Users/andrewgu/.config/nvim,/etc/xdg/nvim,/Users/andrewgu/.local/share/nvim/site,/Users/andrewgu/.local/share/nvim/site/pack/packer/opt/nvim-treesitter,/Users/andrewgu/.local/share/nvim/site/pack/packer/opt/nvim-colorizer.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/telescope.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/popup.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/plenary.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/packer.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-web-devicons,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-tree.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-lspconfig,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-compe,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-base16.lua,/Users/andrewgu/.local/share/nvim/site
Searching for "/Users/andrewgu/.config/nvim/lua/nvim-treesitter/caching.lua"
Searching for "/etc/xdg/nvim/lua/nvim-treesitter/caching.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/lua/nvim-treesitter/caching.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/opt/nvim-treesitter/lua/nvim-treesitter/caching.lua"
Searching for "lua/nvim-treesitter/shell_command_selectors.lua" in "/Users/andrewgu/.config/nvim,/etc/xdg/nvim,/Users/andrewgu/.local/share/nvim/site,/Users/andrewgu/.local/share/nvim/site/pack/packer/opt/nvim-treesitter,/Users/andrewgu/.local/share/nvim/site/pack/packer/opt/nvim-colorizer.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/telescope.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/popup.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/plenary.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/packer.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-web-devicons,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-tree.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-lspconfig,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-compe,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-base16.lua,/Users/andrewgu/.local
Searching for "/Users/andrewgu/.config/nvim/lua/nvim-treesitter/shell_command_selectors.lua"
Searching for "/etc/xdg/nvim/lua/nvim-treesitter/shell_command_selectors.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/lua/nvim-treesitter/shell_command_selectors.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/opt/nvim-treesitter/lua/nvim-treesitter/shell_command_selectors.lua"
Searching for "lua/nvim-treesitter/query_predicates.lua" in "/Users/andrewgu/.config/nvim,/etc/xdg/nvim,/Users/andrewgu/.local/share/nvim/site,/Users/andrewgu/.local/share/nvim/site/pack/packer/opt/nvim-treesitter,/Users/andrewgu/.local/share/nvim/site/pack/packer/opt/nvim-colorizer.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/telescope.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/popup.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/plenary.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/packer.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-web-devicons,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-tree.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-lspconfig,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-compe,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-base16.lua,/Users/andrewgu/.local/share/
Searching for "/Users/andrewgu/.config/nvim/lua/nvim-treesitter/query_predicates.lua"
Searching for "/etc/xdg/nvim/lua/nvim-treesitter/query_predicates.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/lua/nvim-treesitter/query_predicates.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/opt/nvim-treesitter/lua/nvim-treesitter/query_predicates.lua"
line 15: command! -nargs=* -complete=custom,nvim_treesitter#installed_parsers TSUpdate lua require'nvim-treesitter.install'.commands.TSUpdate['run<bang>'](<f-args>)
line 15: command! -nargs=+ -bang -complete=custom,nvim_treesitter#installable_parsers TSInstall lua require'nvim-treesitter.install'.commands.TSInstall['run<bang>'](<f-args>)
line 15: command! -nargs=* -complete=custom,nvim_treesitter#installed_parsers TSUpdateSync lua require'nvim-treesitter.install'.commands.TSUpdateSync['run<bang>'](<f-args>)
line 15: command! -nargs=+ -complete=custom,nvim_treesitter#installed_parsers TSUninstall lua require'nvim-treesitter.install'.commands.TSUninstall['run<bang>'](<f-args>)
line 15: command! -nargs=+ -bang -complete=custom,nvim_treesitter#installable_parsers TSInstallFromGrammar lua require'nvim-treesitter.install'.commands.TSInstallFromGrammar['run<bang>'](<f-args>)
line 15: command! -nargs=+ -bang -complete=custom,nvim_treesitter#installable_parsers TSInstallSync lua require'nvim-treesitter.install'.commands.TSInstallSync['run<bang>'](<f-args>)
line 15: command! -nargs=0 TSInstallInfo lua require'nvim-treesitter.info'.commands.TSInstallInfo['run<bang>'](<f-args>)
line 15: command! -nargs=? -complete=custom,nvim_treesitter#available_modules TSModuleInfo lua require'nvim-treesitter.info'.commands.TSModuleInfo['run<bang>'](<f-args>)
line 15: command! -nargs=1 -complete=custom,nvim_treesitter#available_modules TSBufDisable lua require'nvim-treesitter.configs'.commands.TSBufDisable['run<bang>'](<f-args>)
line 15: command! -nargs=1 -complete=custom,nvim_treesitter#available_modules TSBufToggle lua require'nvim-treesitter.configs'.commands.TSBufToggle['run<bang>'](<f-args>)
line 15: command! -nargs=+ -complete=custom,nvim_treesitter#available_modules TSEnableAll lua require'nvim-treesitter.configs'.commands.TSEnableAll['run<bang>'](<f-args>)
line 15: command! -nargs=+ -complete=custom,nvim_treesitter#available_modules TSDisableAll lua require'nvim-treesitter.configs'.commands.TSDisableAll['run<bang>'](<f-args>)
line 15: command! -nargs=+ -complete=custom,nvim_treesitter#available_modules TSToggleAll lua require'nvim-treesitter.configs'.commands.TSToggleAll['run<bang>'](<f-args>)
line 15: command! -nargs=0 TSConfigInfo lua require'nvim-treesitter.configs'.commands.TSConfigInfo['run<bang>'](<f-args>)
line 15: command! -nargs=+ -complete=custom,nvim_treesitter#available_query_groups TSEditQuery lua require'nvim-treesitter.configs'.commands.TSEditQuery['run<bang>'](<f-args>)
line 15: command! -nargs=+ -complete=custom,nvim_treesitter#available_query_groups TSEditQueryUserAfter lua require'nvim-treesitter.configs'.commands.TSEditQueryUserAfter['run<bang>'](<f-args>)
line 15: command! -nargs=1 -complete=custom,nvim_treesitter#available_modules TSBufEnable lua require'nvim-treesitter.configs'.commands.TSBufEnable['run<bang>'](<f-args>)
line 16: 
line 17: function s:has_attr(attr, mode)
line 21: 
line 22: " if the ctermfg or guifg is not known by nvim then using the
line 23: " fg or foreground highlighting value will cause an E419 error
line 24: " so we check to see if either highlight has been set if not default to NONE
line 25: let cterm_normal = s:has_attr('fg', 'cterm') ? 'fg' : 'NONE'
calling function <SNR>45_has_attr('fg', 'cterm')

line 1:   let norm_color = synIDattr(hlID('Normal'), a:attr, a:mode)
line 2:   return strlen(norm_color) > 0
function <SNR>45_has_attr returning #1

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/opt/nvim-treesitter/plugin/nvim-treesitter.vim

line 26: let gui_normal = s:has_attr('fg', 'gui') ? 'foreground' : 'NONE'
calling function <SNR>45_has_attr('fg', 'gui')

line 1:   let norm_color = synIDattr(hlID('Normal'), a:attr, a:mode)
line 2:   return strlen(norm_color) > 0
function <SNR>45_has_attr returning #1

continuing in /Users/andrewgu/.local/share/nvim/site/pack/packer/opt/nvim-treesitter/plugin/nvim-treesitter.vim

line 27: 
line 28: execute 'highlight default TSNone term=NONE cterm=NONE gui=NONE guifg='.gui_normal.' ctermfg='.cterm_normal
line 28: highlight default TSNone term=NONE cterm=NONE gui=NONE guifg=foreground ctermfg=fg
line 29: 
line 30: highlight default link TSPunctDelimiter Delimiter
line 31: highlight default link TSPunctBracket Delimiter
line 32: highlight default link TSPunctSpecial Delimiter
line 33: 
line 34: highlight default link TSConstant Constant
line 35: highlight default link TSConstBuiltin Special
line 36: highlight default link TSConstMacro Define
line 37: highlight default link TSString String
line 38: highlight default link TSStringRegex String
line 39: highlight default link TSStringEscape SpecialChar
line 40: highlight default link TSStringSpecial SpecialChar
line 41: highlight default link TSCharacter Character
line 42: highlight default link TSNumber Number
line 43: highlight default link TSBoolean Boolean
line 44: highlight default link TSFloat Float
line 45: 
line 46: highlight default link TSFunction Function
line 47: highlight default link TSFuncBuiltin Special
line 48: highlight default link TSFuncMacro Macro
line 49: highlight default link TSParameter Identifier
line 50: highlight default link TSParameterReference TSParameter
line 51: highlight default link TSMethod Function
line 52: highlight default link TSField Identifier
line 53: highlight default link TSProperty Identifier
line 54: highlight default link TSConstructor Special
line 55: highlight default link TSAnnotation PreProc
line 56: highlight default link TSAttribute PreProc
line 57: highlight default link TSNamespace Include
line 58: highlight default link TSSymbol Identifier
line 59: 
line 60: highlight default link TSConditional Conditional
line 61: highlight default link TSRepeat Repeat
line 62: highlight default link TSLabel Label
line 63: highlight default link TSOperator Operator
line 64: highlight default link TSKeyword Keyword
line 65: highlight default link TSKeywordFunction Keyword
line 66: highlight default link TSKeywordOperator TSOperator
line 67: highlight default link TSKeywordReturn TSKeyword
line 68: highlight default link TSException Exception
line 69: 
line 70: highlight default link TSType Type
line 71: highlight default link TSTypeBuiltin Type
line 72: highlight default link TSInclude Include
line 73: 
line 74: highlight default link TSVariableBuiltin Special
line 75: 
line 76: highlight default link TSText TSNone
line 77: highlight default TSStrong term=bold cterm=bold gui=bold
line 78: highlight default TSEmphasis term=italic cterm=italic gui=italic
line 79: highlight default TSUnderline term=underline cterm=underline gui=underline
line 80: highlight default TSStrike term=strikethrough cterm=strikethrough gui=strikethrough
line 81: highlight default link TSMath Special
line 82: highlight default link TSTextReference Constant
line 83: highlight default link TSEnvironment Macro
line 84: highlight default link TSEnvironmentName Type
line 85: highlight default link TSTitle Title
line 86: highlight default link TSLiteral String
line 87: highlight default link TSURI Underlined
line 88: 
line 89: highlight default link TSComment Comment
line 90: highlight default link TSNote SpecialComment
line 91: highlight default link TSWarning Todo
line 92: highlight default link TSDanger WarningMsg
line 93: 
line 94: highlight default link TSTag Label
line 95: highlight default link TSTagDelimiter Delimiter
line 96: highlight default link TSTagAttribute TSProperty
finished sourcing /Users/andrewgu/.local/share/nvim/site/pack/packer/opt/nvim-treesitter/plugin/nvim-treesitter.vim
continuing in BufReadPost Autocommands for "*"
Executing: augroup filetypedetect
chdir(/Users/andrewgu/.config/nvim)
chdir(/Users/andrewgu/.local/share/nvim/site/pack/packer/opt/nvim-treesitter/ftdetect)
chdir(/Users/andrewgu/.config/nvim)
line 0: sourcing "/Users/andrewgu/.local/share/nvim/site/pack/packer/opt/nvim-treesitter/ftdetect/gdscript.vim"
line 1: autocmd BufNewFile,BufRead *.gd set ft=gdscript
finished sourcing /Users/andrewgu/.local/share/nvim/site/pack/packer/opt/nvim-treesitter/ftdetect/gdscript.vim
continuing in BufReadPost Autocommands for "*"
chdir(/Users/andrewgu/.config/nvim)
chdir(/Users/andrewgu/.local/share/nvim/site/pack/packer/opt/nvim-treesitter/ftdetect)
chdir(/Users/andrewgu/.config/nvim)
line 0: sourcing "/Users/andrewgu/.local/share/nvim/site/pack/packer/opt/nvim-treesitter/ftdetect/gomod.vim"
line 1: au BufRead,BufNewFile go.mod set filetype=gomod
finished sourcing /Users/andrewgu/.local/share/nvim/site/pack/packer/opt/nvim-treesitter/ftdetect/gomod.vim
continuing in BufReadPost Autocommands for "*"
chdir(/Users/andrewgu/.config/nvim)
chdir(/Users/andrewgu/.local/share/nvim/site/pack/packer/opt/nvim-treesitter/ftdetect)
chdir(/Users/andrewgu/.config/nvim)
line 0: sourcing "/Users/andrewgu/.local/share/nvim/site/pack/packer/opt/nvim-treesitter/ftdetect/hcl.vim"
line 1: autocmd BufRead,BufNewFile *.hcl set filetype=hcl
line 2: autocmd BufRead,BufNewFile *.tf,*.tfvars set filetype=terraform
finished sourcing /Users/andrewgu/.local/share/nvim/site/pack/packer/opt/nvim-treesitter/ftdetect/hcl.vim
continuing in BufReadPost Autocommands for "*"
chdir(/Users/andrewgu/.config/nvim)
chdir(/Users/andrewgu/.local/share/nvim/site/pack/packer/opt/nvim-treesitter/ftdetect)
chdir(/Users/andrewgu/.config/nvim)
line 0: sourcing "/Users/andrewgu/.local/share/nvim/site/pack/packer/opt/nvim-treesitter/ftdetect/query.vim"
line 1: " Last Change: 2020 Sep 01
line 2: 
line 3: function! s:shouldFt(path)
line 10: 
line 11: autocmd BufNewFile,BufRead *.scm call s:shouldFt(expand("%"))
finished sourcing /Users/andrewgu/.local/share/nvim/site/pack/packer/opt/nvim-treesitter/ftdetect/query.vim
continuing in BufReadPost Autocommands for "*"
chdir(/Users/andrewgu/.config/nvim)
chdir(/Users/andrewgu/.local/share/nvim/site/pack/packer/opt/nvim-treesitter/ftdetect)
chdir(/Users/andrewgu/.config/nvim)
line 0: sourcing "/Users/andrewgu/.local/share/nvim/site/pack/packer/opt/nvim-treesitter/ftdetect/yang.vim"
line 1: au BufRead,BufNewFile *.yang set filetype=yang
finished sourcing /Users/andrewgu/.local/share/nvim/site/pack/packer/opt/nvim-treesitter/ftdetect/yang.vim
continuing in BufReadPost Autocommands for "*"
Executing: augroup END
Searching for "/usr/local/share/nvim/site/pack/*/opt/nvim-treesitter"
Searching for "/usr/share/nvim/site/pack/*/opt/nvim-treesitter"
Searching for "/usr/local/Cellar/neovim/0.5.0/share/nvim/runtime/pack/*/opt/nvim-treesitter"
Searching for "/usr/local/Cellar/neovim/0.5.0/lib/nvim/pack/*/opt/nvim-treesitter"
Searching for "/usr/share/nvim/site/after/pack/*/opt/nvim-treesitter"
Searching for "/usr/local/share/nvim/site/after/pack/*/opt/nvim-treesitter"
Searching for "/Users/andrewgu/.local/share/nvim/site/after/pack/*/opt/nvim-treesitter"
Searching for "/etc/xdg/nvim/after/pack/*/opt/nvim-treesitter"
Searching for "/Users/andrewgu/.config/nvim/after/pack/*/opt/nvim-treesitter"
Searching for "parser/fennel.so" in "/Users/andrewgu/.config/nvim,/etc/xdg/nvim,/Users/andrewgu/.local/share/nvim/site,/Users/andrewgu/.local/share/nvim/site/pack/packer/opt/nvim-treesitter,/Users/andrewgu/.local/share/nvim/site/pack/packer/opt/nvim-colorizer.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/telescope.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/popup.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/plenary.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/packer.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-web-devicons,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-tree.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-lspconfig,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-compe,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-base16.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/st
Searching for "/Users/andrewgu/.config/nvim/parser/fennel.so"
Searching for "/etc/xdg/nvim/parser/fennel.so"
Searching for "/Users/andrewgu/.local/share/nvim/site/parser/fennel.so"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/opt/nvim-treesitter/parser/fennel.so"
Searching for "parser/cpp.so" in "/Users/andrewgu/.config/nvim,/etc/xdg/nvim,/Users/andrewgu/.local/share/nvim/site,/Users/andrewgu/.local/share/nvim/site/pack/packer/opt/nvim-treesitter,/Users/andrewgu/.local/share/nvim/site/pack/packer/opt/nvim-colorizer.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/telescope.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/popup.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/plenary.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/packer.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-web-devicons,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-tree.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-lspconfig,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-compe,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-base16.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start
Searching for "/Users/andrewgu/.config/nvim/parser/cpp.so"
Searching for "/etc/xdg/nvim/parser/cpp.so"
Searching for "/Users/andrewgu/.local/share/nvim/site/parser/cpp.so"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/opt/nvim-treesitter/parser/cpp.so"
Searching for "parser/julia.so" in "/Users/andrewgu/.config/nvim,/etc/xdg/nvim,/Users/andrewgu/.local/share/nvim/site,/Users/andrewgu/.local/share/nvim/site/pack/packer/opt/nvim-treesitter,/Users/andrewgu/.local/share/nvim/site/pack/packer/opt/nvim-colorizer.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/telescope.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/popup.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/plenary.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/packer.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-web-devicons,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-tree.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-lspconfig,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-compe,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-base16.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/sta
Searching for "/Users/andrewgu/.config/nvim/parser/julia.so"
Searching for "/etc/xdg/nvim/parser/julia.so"
Searching for "/Users/andrewgu/.local/share/nvim/site/parser/julia.so"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/opt/nvim-treesitter/parser/julia.so"
Searching for "parser/ql.so" in "/Users/andrewgu/.config/nvim,/etc/xdg/nvim,/Users/andrewgu/.local/share/nvim/site,/Users/andrewgu/.local/share/nvim/site/pack/packer/opt/nvim-treesitter,/Users/andrewgu/.local/share/nvim/site/pack/packer/opt/nvim-colorizer.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/telescope.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/popup.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/plenary.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/packer.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-web-devicons,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-tree.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-lspconfig,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-compe,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-base16.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/
Searching for "/Users/andrewgu/.config/nvim/parser/ql.so"
Searching for "/etc/xdg/nvim/parser/ql.so"
Searching for "/Users/andrewgu/.local/share/nvim/site/parser/ql.so"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/opt/nvim-treesitter/parser/ql.so"
Searching for "parser/python.so" in "/Users/andrewgu/.config/nvim,/etc/xdg/nvim,/Users/andrewgu/.local/share/nvim/site,/Users/andrewgu/.local/share/nvim/site/pack/packer/opt/nvim-treesitter,/Users/andrewgu/.local/share/nvim/site/pack/packer/opt/nvim-colorizer.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/telescope.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/popup.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/plenary.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/packer.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-web-devicons,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-tree.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-lspconfig,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-compe,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-base16.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/st
Searching for "/Users/andrewgu/.config/nvim/parser/python.so"
Searching for "/etc/xdg/nvim/parser/python.so"
Searching for "/Users/andrewgu/.local/share/nvim/site/parser/python.so"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/opt/nvim-treesitter/parser/python.so"
Searching for "parser/verilog.so" in "/Users/andrewgu/.config/nvim,/etc/xdg/nvim,/Users/andrewgu/.local/share/nvim/site,/Users/andrewgu/.local/share/nvim/site/pack/packer/opt/nvim-treesitter,/Users/andrewgu/.local/share/nvim/site/pack/packer/opt/nvim-colorizer.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/telescope.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/popup.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/plenary.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/packer.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-web-devicons,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-tree.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-lspconfig,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-compe,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-base16.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/s
Searching for "/Users/andrewgu/.config/nvim/parser/verilog.so"
Searching for "/etc/xdg/nvim/parser/verilog.so"
Searching for "/Users/andrewgu/.local/share/nvim/site/parser/verilog.so"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/opt/nvim-treesitter/parser/verilog.so"
Searching for "parser/json.so" in "/Users/andrewgu/.config/nvim,/etc/xdg/nvim,/Users/andrewgu/.local/share/nvim/site,/Users/andrewgu/.local/share/nvim/site/pack/packer/opt/nvim-treesitter,/Users/andrewgu/.local/share/nvim/site/pack/packer/opt/nvim-colorizer.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/telescope.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/popup.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/plenary.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/packer.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-web-devicons,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-tree.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-lspconfig,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-compe,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-base16.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/star
Searching for "/Users/andrewgu/.config/nvim/parser/json.so"
Searching for "/etc/xdg/nvim/parser/json.so"
Searching for "/Users/andrewgu/.local/share/nvim/site/parser/json.so"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/opt/nvim-treesitter/parser/json.so"
Searching for "parser/erlang.so" in "/Users/andrewgu/.config/nvim,/etc/xdg/nvim,/Users/andrewgu/.local/share/nvim/site,/Users/andrewgu/.local/share/nvim/site/pack/packer/opt/nvim-treesitter,/Users/andrewgu/.local/share/nvim/site/pack/packer/opt/nvim-colorizer.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/telescope.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/popup.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/plenary.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/packer.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-web-devicons,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-tree.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-lspconfig,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-compe,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-base16.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/st
Searching for "/Users/andrewgu/.config/nvim/parser/erlang.so"
Searching for "/etc/xdg/nvim/parser/erlang.so"
Searching for "/Users/andrewgu/.local/share/nvim/site/parser/erlang.so"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/opt/nvim-treesitter/parser/erlang.so"
Searching for "parser/lua.so" in "/Users/andrewgu/.config/nvim,/etc/xdg/nvim,/Users/andrewgu/.local/share/nvim/site,/Users/andrewgu/.local/share/nvim/site/pack/packer/opt/nvim-treesitter,/Users/andrewgu/.local/share/nvim/site/pack/packer/opt/nvim-colorizer.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/telescope.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/popup.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/plenary.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/packer.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-web-devicons,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-tree.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-lspconfig,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-compe,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-base16.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start
Searching for "/Users/andrewgu/.config/nvim/parser/lua.so"
Searching for "/etc/xdg/nvim/parser/lua.so"
Searching for "/Users/andrewgu/.local/share/nvim/site/parser/lua.so"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/opt/nvim-treesitter/parser/lua.so"
Searching for "parser/elixir.so" in "/Users/andrewgu/.config/nvim,/etc/xdg/nvim,/Users/andrewgu/.local/share/nvim/site,/Users/andrewgu/.local/share/nvim/site/pack/packer/opt/nvim-treesitter,/Users/andrewgu/.local/share/nvim/site/pack/packer/opt/nvim-colorizer.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/telescope.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/popup.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/plenary.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/packer.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-web-devicons,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-tree.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-lspconfig,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-compe,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-base16.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/st
Searching for "/Users/andrewgu/.config/nvim/parser/elixir.so"
Searching for "/etc/xdg/nvim/parser/elixir.so"
Searching for "/Users/andrewgu/.local/share/nvim/site/parser/elixir.so"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/opt/nvim-treesitter/parser/elixir.so"
Searching for "parser/jsdoc.so" in "/Users/andrewgu/.config/nvim,/etc/xdg/nvim,/Users/andrewgu/.local/share/nvim/site,/Users/andrewgu/.local/share/nvim/site/pack/packer/opt/nvim-treesitter,/Users/andrewgu/.local/share/nvim/site/pack/packer/opt/nvim-colorizer.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/telescope.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/popup.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/plenary.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/packer.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-web-devicons,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-tree.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-lspconfig,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-compe,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-base16.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/sta
Searching for "/Users/andrewgu/.config/nvim/parser/jsdoc.so"
Searching for "/etc/xdg/nvim/parser/jsdoc.so"
Searching for "/Users/andrewgu/.local/share/nvim/site/parser/jsdoc.so"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/opt/nvim-treesitter/parser/jsdoc.so"
Searching for "parser/ocaml.so" in "/Users/andrewgu/.config/nvim,/etc/xdg/nvim,/Users/andrewgu/.local/share/nvim/site,/Users/andrewgu/.local/share/nvim/site/pack/packer/opt/nvim-treesitter,/Users/andrewgu/.local/share/nvim/site/pack/packer/opt/nvim-colorizer.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/telescope.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/popup.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/plenary.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/packer.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-web-devicons,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-tree.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-lspconfig,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-compe,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-base16.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/sta
Searching for "/Users/andrewgu/.config/nvim/parser/ocaml.so"
Searching for "/etc/xdg/nvim/parser/ocaml.so"
Searching for "/Users/andrewgu/.local/share/nvim/site/parser/ocaml.so"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/opt/nvim-treesitter/parser/ocaml.so"
Searching for "parser/sparql.so" in "/Users/andrewgu/.config/nvim,/etc/xdg/nvim,/Users/andrewgu/.local/share/nvim/site,/Users/andrewgu/.local/share/nvim/site/pack/packer/opt/nvim-treesitter,/Users/andrewgu/.local/share/nvim/site/pack/packer/opt/nvim-colorizer.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/telescope.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/popup.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/plenary.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/packer.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-web-devicons,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-tree.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-lspconfig,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-compe,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-base16.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/st
Searching for "/Users/andrewgu/.config/nvim/parser/sparql.so"
Searching for "/etc/xdg/nvim/parser/sparql.so"
Searching for "/Users/andrewgu/.local/share/nvim/site/parser/sparql.so"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/opt/nvim-treesitter/parser/sparql.so"
Searching for "parser/gdscript.so" in "/Users/andrewgu/.config/nvim,/etc/xdg/nvim,/Users/andrewgu/.local/share/nvim/site,/Users/andrewgu/.local/share/nvim/site/pack/packer/opt/nvim-treesitter,/Users/andrewgu/.local/share/nvim/site/pack/packer/opt/nvim-colorizer.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/telescope.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/popup.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/plenary.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/packer.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-web-devicons,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-tree.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-lspconfig,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-compe,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-base16.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/
Searching for "/Users/andrewgu/.config/nvim/parser/gdscript.so"
Searching for "/etc/xdg/nvim/parser/gdscript.so"
Searching for "/Users/andrewgu/.local/share/nvim/site/parser/gdscript.so"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/opt/nvim-treesitter/parser/gdscript.so"
Searching for "parser/turtle.so" in "/Users/andrewgu/.config/nvim,/etc/xdg/nvim,/Users/andrewgu/.local/share/nvim/site,/Users/andrewgu/.local/share/nvim/site/pack/packer/opt/nvim-treesitter,/Users/andrewgu/.local/share/nvim/site/pack/packer/opt/nvim-colorizer.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/telescope.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/popup.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/plenary.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/packer.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-web-devicons,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-tree.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-lspconfig,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-compe,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-base16.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/st
Searching for "/Users/andrewgu/.config/nvim/parser/turtle.so"
Searching for "/etc/xdg/nvim/parser/turtle.so"
Searching for "/Users/andrewgu/.local/share/nvim/site/parser/turtle.so"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/opt/nvim-treesitter/parser/turtle.so"
Searching for "parser/dockerfile.so" in "/Users/andrewgu/.config/nvim,/etc/xdg/nvim,/Users/andrewgu/.local/share/nvim/site,/Users/andrewgu/.local/share/nvim/site/pack/packer/opt/nvim-treesitter,/Users/andrewgu/.local/share/nvim/site/pack/packer/opt/nvim-colorizer.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/telescope.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/popup.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/plenary.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/packer.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-web-devicons,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-tree.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-lspconfig,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-compe,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-base16.lua,/Users/andrewgu/.local/share/nvim/site/pack/packe
Searching for "/Users/andrewgu/.config/nvim/parser/dockerfile.so"
Searching for "/etc/xdg/nvim/parser/dockerfile.so"
Searching for "/Users/andrewgu/.local/share/nvim/site/parser/dockerfile.so"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/opt/nvim-treesitter/parser/dockerfile.so"
Searching for "parser/devicetree.so" in "/Users/andrewgu/.config/nvim,/etc/xdg/nvim,/Users/andrewgu/.local/share/nvim/site,/Users/andrewgu/.local/share/nvim/site/pack/packer/opt/nvim-treesitter,/Users/andrewgu/.local/share/nvim/site/pack/packer/opt/nvim-colorizer.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/telescope.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/popup.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/plenary.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/packer.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-web-devicons,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-tree.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-lspconfig,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-compe,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-base16.lua,/Users/andrewgu/.local/share/nvim/site/pack/packe
Searching for "/Users/andrewgu/.config/nvim/parser/devicetree.so"
Searching for "/etc/xdg/nvim/parser/devicetree.so"
Searching for "/Users/andrewgu/.local/share/nvim/site/parser/devicetree.so"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/opt/nvim-treesitter/parser/devicetree.so"
Searching for "parser/javascript.so" in "/Users/andrewgu/.config/nvim,/etc/xdg/nvim,/Users/andrewgu/.local/share/nvim/site,/Users/andrewgu/.local/share/nvim/site/pack/packer/opt/nvim-treesitter,/Users/andrewgu/.local/share/nvim/site/pack/packer/opt/nvim-colorizer.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/telescope.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/popup.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/plenary.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/packer.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-web-devicons,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-tree.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-lspconfig,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-compe,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-base16.lua,/Users/andrewgu/.local/share/nvim/site/pack/packe
Searching for "/Users/andrewgu/.config/nvim/parser/javascript.so"
Searching for "/etc/xdg/nvim/parser/javascript.so"
Searching for "/Users/andrewgu/.local/share/nvim/site/parser/javascript.so"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/opt/nvim-treesitter/parser/javascript.so"
Searching for "parser/typescript.so" in "/Users/andrewgu/.config/nvim,/etc/xdg/nvim,/Users/andrewgu/.local/share/nvim/site,/Users/andrewgu/.local/share/nvim/site/pack/packer/opt/nvim-treesitter,/Users/andrewgu/.local/share/nvim/site/pack/packer/opt/nvim-colorizer.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/telescope.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/popup.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/plenary.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/packer.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-web-devicons,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-tree.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-lspconfig,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-compe,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-base16.lua,/Users/andrewgu/.local/share/nvim/site/pack/packe
Searching for "/Users/andrewgu/.config/nvim/parser/typescript.so"
Searching for "/etc/xdg/nvim/parser/typescript.so"
Searching for "/Users/andrewgu/.local/share/nvim/site/parser/typescript.so"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/opt/nvim-treesitter/parser/typescript.so"
Searching for "parser/beancount.so" in "/Users/andrewgu/.config/nvim,/etc/xdg/nvim,/Users/andrewgu/.local/share/nvim/site,/Users/andrewgu/.local/share/nvim/site/pack/packer/opt/nvim-treesitter,/Users/andrewgu/.local/share/nvim/site/pack/packer/opt/nvim-colorizer.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/telescope.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/popup.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/plenary.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/packer.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-web-devicons,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-tree.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-lspconfig,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-compe,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-base16.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer
Searching for "/Users/andrewgu/.config/nvim/parser/beancount.so"
Searching for "/etc/xdg/nvim/parser/beancount.so"
Searching for "/Users/andrewgu/.local/share/nvim/site/parser/beancount.so"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/opt/nvim-treesitter/parser/beancount.so"
Searching for "parser/latex.so" in "/Users/andrewgu/.config/nvim,/etc/xdg/nvim,/Users/andrewgu/.local/share/nvim/site,/Users/andrewgu/.local/share/nvim/site/pack/packer/opt/nvim-treesitter,/Users/andrewgu/.local/share/nvim/site/pack/packer/opt/nvim-colorizer.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/telescope.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/popup.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/plenary.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/packer.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-web-devicons,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-tree.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-lspconfig,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-compe,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-base16.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/sta
Searching for "/Users/andrewgu/.config/nvim/parser/latex.so"
Searching for "/etc/xdg/nvim/parser/latex.so"
Searching for "/Users/andrewgu/.local/share/nvim/site/parser/latex.so"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/opt/nvim-treesitter/parser/latex.so"
Searching for "parser/tsx.so" in "/Users/andrewgu/.config/nvim,/etc/xdg/nvim,/Users/andrewgu/.local/share/nvim/site,/Users/andrewgu/.local/share/nvim/site/pack/packer/opt/nvim-treesitter,/Users/andrewgu/.local/share/nvim/site/pack/packer/opt/nvim-colorizer.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/telescope.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/popup.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/plenary.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/packer.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-web-devicons,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-tree.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-lspconfig,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-compe,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-base16.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start
Searching for "/Users/andrewgu/.config/nvim/parser/tsx.so"
Searching for "/etc/xdg/nvim/parser/tsx.so"
Searching for "/Users/andrewgu/.local/share/nvim/site/parser/tsx.so"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/opt/nvim-treesitter/parser/tsx.so"
Searching for "parser/nix.so" in "/Users/andrewgu/.config/nvim,/etc/xdg/nvim,/Users/andrewgu/.local/share/nvim/site,/Users/andrewgu/.local/share/nvim/site/pack/packer/opt/nvim-treesitter,/Users/andrewgu/.local/share/nvim/site/pack/packer/opt/nvim-colorizer.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/telescope.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/popup.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/plenary.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/packer.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-web-devicons,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-tree.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-lspconfig,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-compe,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-base16.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start
Searching for "/Users/andrewgu/.config/nvim/parser/nix.so"
Searching for "/etc/xdg/nvim/parser/nix.so"
Searching for "/Users/andrewgu/.local/share/nvim/site/parser/nix.so"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/opt/nvim-treesitter/parser/nix.so"
Searching for "parser/zig.so" in "/Users/andrewgu/.config/nvim,/etc/xdg/nvim,/Users/andrewgu/.local/share/nvim/site,/Users/andrewgu/.local/share/nvim/site/pack/packer/opt/nvim-treesitter,/Users/andrewgu/.local/share/nvim/site/pack/packer/opt/nvim-colorizer.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/telescope.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/popup.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/plenary.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/packer.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-web-devicons,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-tree.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-lspconfig,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-compe,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-base16.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start
Searching for "/Users/andrewgu/.config/nvim/parser/zig.so"
Searching for "/etc/xdg/nvim/parser/zig.so"
Searching for "/Users/andrewgu/.local/share/nvim/site/parser/zig.so"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/opt/nvim-treesitter/parser/zig.so"
Searching for "parser/php.so" in "/Users/andrewgu/.config/nvim,/etc/xdg/nvim,/Users/andrewgu/.local/share/nvim/site,/Users/andrewgu/.local/share/nvim/site/pack/packer/opt/nvim-treesitter,/Users/andrewgu/.local/share/nvim/site/pack/packer/opt/nvim-colorizer.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/telescope.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/popup.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/plenary.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/packer.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-web-devicons,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-tree.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-lspconfig,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-compe,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-base16.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start
Searching for "/Users/andrewgu/.config/nvim/parser/php.so"
Searching for "/etc/xdg/nvim/parser/php.so"
Searching for "/Users/andrewgu/.local/share/nvim/site/parser/php.so"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/opt/nvim-treesitter/parser/php.so"
Searching for "parser/fish.so" in "/Users/andrewgu/.config/nvim,/etc/xdg/nvim,/Users/andrewgu/.local/share/nvim/site,/Users/andrewgu/.local/share/nvim/site/pack/packer/opt/nvim-treesitter,/Users/andrewgu/.local/share/nvim/site/pack/packer/opt/nvim-colorizer.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/telescope.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/popup.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/plenary.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/packer.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-web-devicons,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-tree.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-lspconfig,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-compe,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-base16.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/star
Searching for "/Users/andrewgu/.config/nvim/parser/fish.so"
Searching for "/etc/xdg/nvim/parser/fish.so"
Searching for "/Users/andrewgu/.local/share/nvim/site/parser/fish.so"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/opt/nvim-treesitter/parser/fish.so"
Searching for "parser/yaml.so" in "/Users/andrewgu/.config/nvim,/etc/xdg/nvim,/Users/andrewgu/.local/share/nvim/site,/Users/andrewgu/.local/share/nvim/site/pack/packer/opt/nvim-treesitter,/Users/andrewgu/.local/share/nvim/site/pack/packer/opt/nvim-colorizer.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/telescope.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/popup.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/plenary.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/packer.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-web-devicons,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-tree.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-lspconfig,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-compe,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-base16.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/star
Searching for "/Users/andrewgu/.config/nvim/parser/yaml.so"
Searching for "/etc/xdg/nvim/parser/yaml.so"
Searching for "/Users/andrewgu/.local/share/nvim/site/parser/yaml.so"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/opt/nvim-treesitter/parser/yaml.so"
Searching for "parser/html.so" in "/Users/andrewgu/.config/nvim,/etc/xdg/nvim,/Users/andrewgu/.local/share/nvim/site,/Users/andrewgu/.local/share/nvim/site/pack/packer/opt/nvim-treesitter,/Users/andrewgu/.local/share/nvim/site/pack/packer/opt/nvim-colorizer.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/telescope.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/popup.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/plenary.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/packer.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-web-devicons,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-tree.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-lspconfig,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-compe,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-base16.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/star
Searching for "/Users/andrewgu/.config/nvim/parser/html.so"
Searching for "/etc/xdg/nvim/parser/html.so"
Searching for "/Users/andrewgu/.local/share/nvim/site/parser/html.so"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/opt/nvim-treesitter/parser/html.so"
Searching for "parser/svelte.so" in "/Users/andrewgu/.config/nvim,/etc/xdg/nvim,/Users/andrewgu/.local/share/nvim/site,/Users/andrewgu/.local/share/nvim/site/pack/packer/opt/nvim-treesitter,/Users/andrewgu/.local/share/nvim/site/pack/packer/opt/nvim-colorizer.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/telescope.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/popup.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/plenary.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/packer.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-web-devicons,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-tree.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-lspconfig,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-compe,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-base16.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/st
Searching for "/Users/andrewgu/.config/nvim/parser/svelte.so"
Searching for "/etc/xdg/nvim/parser/svelte.so"
Searching for "/Users/andrewgu/.local/share/nvim/site/parser/svelte.so"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/opt/nvim-treesitter/parser/svelte.so"
Searching for "parser/vue.so" in "/Users/andrewgu/.config/nvim,/etc/xdg/nvim,/Users/andrewgu/.local/share/nvim/site,/Users/andrewgu/.local/share/nvim/site/pack/packer/opt/nvim-treesitter,/Users/andrewgu/.local/share/nvim/site/pack/packer/opt/nvim-colorizer.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/telescope.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/popup.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/plenary.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/packer.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-web-devicons,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-tree.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-lspconfig,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-compe,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-base16.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start
Searching for "/Users/andrewgu/.config/nvim/parser/vue.so"
Searching for "/etc/xdg/nvim/parser/vue.so"
Searching for "/Users/andrewgu/.local/share/nvim/site/parser/vue.so"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/opt/nvim-treesitter/parser/vue.so"
Searching for "parser/query.so" in "/Users/andrewgu/.config/nvim,/etc/xdg/nvim,/Users/andrewgu/.local/share/nvim/site,/Users/andrewgu/.local/share/nvim/site/pack/packer/opt/nvim-treesitter,/Users/andrewgu/.local/share/nvim/site/pack/packer/opt/nvim-colorizer.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/telescope.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/popup.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/plenary.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/packer.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-web-devicons,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-tree.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-lspconfig,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-compe,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-base16.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/sta
Searching for "/Users/andrewgu/.config/nvim/parser/query.so"
Searching for "/etc/xdg/nvim/parser/query.so"
Searching for "/Users/andrewgu/.local/share/nvim/site/parser/query.so"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/opt/nvim-treesitter/parser/query.so"
Searching for "parser/ocaml_interface.so" in "/Users/andrewgu/.config/nvim,/etc/xdg/nvim,/Users/andrewgu/.local/share/nvim/site,/Users/andrewgu/.local/share/nvim/site/pack/packer/opt/nvim-treesitter,/Users/andrewgu/.local/share/nvim/site/pack/packer/opt/nvim-colorizer.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/telescope.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/popup.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/plenary.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/packer.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-web-devicons,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-tree.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-lspconfig,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-compe,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-base16.lua,/Users/andrewgu/.local/share/nvim/site/pack/
Searching for "/Users/andrewgu/.config/nvim/parser/ocaml_interface.so"
Searching for "/etc/xdg/nvim/parser/ocaml_interface.so"
Searching for "/Users/andrewgu/.local/share/nvim/site/parser/ocaml_interface.so"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/opt/nvim-treesitter/parser/ocaml_interface.so"
Searching for "parser/ocamllex.so" in "/Users/andrewgu/.config/nvim,/etc/xdg/nvim,/Users/andrewgu/.local/share/nvim/site,/Users/andrewgu/.local/share/nvim/site/pack/packer/opt/nvim-treesitter,/Users/andrewgu/.local/share/nvim/site/pack/packer/opt/nvim-colorizer.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/telescope.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/popup.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/plenary.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/packer.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-web-devicons,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-tree.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-lspconfig,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-compe,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-base16.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/
Searching for "/Users/andrewgu/.config/nvim/parser/ocamllex.so"
Searching for "/etc/xdg/nvim/parser/ocamllex.so"
Searching for "/Users/andrewgu/.local/share/nvim/site/parser/ocamllex.so"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/opt/nvim-treesitter/parser/ocamllex.so"
Searching for "parser/c_sharp.so" in "/Users/andrewgu/.config/nvim,/etc/xdg/nvim,/Users/andrewgu/.local/share/nvim/site,/Users/andrewgu/.local/share/nvim/site/pack/packer/opt/nvim-treesitter,/Users/andrewgu/.local/share/nvim/site/pack/packer/opt/nvim-colorizer.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/telescope.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/popup.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/plenary.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/packer.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-web-devicons,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-tree.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-lspconfig,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-compe,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-base16.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/s
Searching for "/Users/andrewgu/.config/nvim/parser/c_sharp.so"
Searching for "/etc/xdg/nvim/parser/c_sharp.so"
Searching for "/Users/andrewgu/.local/share/nvim/site/parser/c_sharp.so"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/opt/nvim-treesitter/parser/c_sharp.so"
Searching for "parser/c.so" in "/Users/andrewgu/.config/nvim,/etc/xdg/nvim,/Users/andrewgu/.local/share/nvim/site,/Users/andrewgu/.local/share/nvim/site/pack/packer/opt/nvim-treesitter,/Users/andrewgu/.local/share/nvim/site/pack/packer/opt/nvim-colorizer.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/telescope.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/popup.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/plenary.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/packer.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-web-devicons,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-tree.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-lspconfig,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-compe,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-base16.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/n
Searching for "/Users/andrewgu/.config/nvim/parser/c.so"
Searching for "/etc/xdg/nvim/parser/c.so"
Searching for "/Users/andrewgu/.local/share/nvim/site/parser/c.so"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/opt/nvim-treesitter/parser/c.so"
Searching for "parser/bash.so" in "/Users/andrewgu/.config/nvim,/etc/xdg/nvim,/Users/andrewgu/.local/share/nvim/site,/Users/andrewgu/.local/share/nvim/site/pack/packer/opt/nvim-treesitter,/Users/andrewgu/.local/share/nvim/site/pack/packer/opt/nvim-colorizer.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/telescope.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/popup.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/plenary.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/packer.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-web-devicons,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-tree.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-lspconfig,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-compe,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-base16.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/star
Searching for "/Users/andrewgu/.config/nvim/parser/bash.so"
Searching for "/etc/xdg/nvim/parser/bash.so"
Searching for "/Users/andrewgu/.local/share/nvim/site/parser/bash.so"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/opt/nvim-treesitter/parser/bash.so"
Searching for "parser/java.so" in "/Users/andrewgu/.config/nvim,/etc/xdg/nvim,/Users/andrewgu/.local/share/nvim/site,/Users/andrewgu/.local/share/nvim/site/pack/packer/opt/nvim-treesitter,/Users/andrewgu/.local/share/nvim/site/pack/packer/opt/nvim-colorizer.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/telescope.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/popup.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/plenary.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/packer.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-web-devicons,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-tree.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-lspconfig,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-compe,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-base16.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/star
Searching for "/Users/andrewgu/.config/nvim/parser/java.so"
Searching for "/etc/xdg/nvim/parser/java.so"
Searching for "/Users/andrewgu/.local/share/nvim/site/parser/java.so"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/opt/nvim-treesitter/parser/java.so"
Searching for "parser/cuda.so" in "/Users/andrewgu/.config/nvim,/etc/xdg/nvim,/Users/andrewgu/.local/share/nvim/site,/Users/andrewgu/.local/share/nvim/site/pack/packer/opt/nvim-treesitter,/Users/andrewgu/.local/share/nvim/site/pack/packer/opt/nvim-colorizer.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/telescope.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/popup.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/plenary.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/packer.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-web-devicons,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-tree.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-lspconfig,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-compe,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-base16.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/star
Searching for "/Users/andrewgu/.config/nvim/parser/cuda.so"
Searching for "/etc/xdg/nvim/parser/cuda.so"
Searching for "/Users/andrewgu/.local/share/nvim/site/parser/cuda.so"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/opt/nvim-treesitter/parser/cuda.so"
Searching for "parser/rust.so" in "/Users/andrewgu/.config/nvim,/etc/xdg/nvim,/Users/andrewgu/.local/share/nvim/site,/Users/andrewgu/.local/share/nvim/site/pack/packer/opt/nvim-treesitter,/Users/andrewgu/.local/share/nvim/site/pack/packer/opt/nvim-colorizer.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/telescope.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/popup.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/plenary.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/packer.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-web-devicons,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-tree.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-lspconfig,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-compe,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-base16.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/star
Searching for "/Users/andrewgu/.config/nvim/parser/rust.so"
Searching for "/etc/xdg/nvim/parser/rust.so"
Searching for "/Users/andrewgu/.local/share/nvim/site/parser/rust.so"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/opt/nvim-treesitter/parser/rust.so"
Searching for "parser/ledger.so" in "/Users/andrewgu/.config/nvim,/etc/xdg/nvim,/Users/andrewgu/.local/share/nvim/site,/Users/andrewgu/.local/share/nvim/site/pack/packer/opt/nvim-treesitter,/Users/andrewgu/.local/share/nvim/site/pack/packer/opt/nvim-colorizer.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/telescope.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/popup.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/plenary.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/packer.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-web-devicons,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-tree.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-lspconfig,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-compe,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-base16.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/st
Searching for "/Users/andrewgu/.config/nvim/parser/ledger.so"
Searching for "/etc/xdg/nvim/parser/ledger.so"
Searching for "/Users/andrewgu/.local/share/nvim/site/parser/ledger.so"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/opt/nvim-treesitter/parser/ledger.so"
Searching for "parser/clojure.so" in "/Users/andrewgu/.config/nvim,/etc/xdg/nvim,/Users/andrewgu/.local/share/nvim/site,/Users/andrewgu/.local/share/nvim/site/pack/packer/opt/nvim-treesitter,/Users/andrewgu/.local/share/nvim/site/pack/packer/opt/nvim-colorizer.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/telescope.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/popup.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/plenary.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/packer.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-web-devicons,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-tree.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-lspconfig,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-compe,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-base16.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/s
Searching for "/Users/andrewgu/.config/nvim/parser/clojure.so"
Searching for "/etc/xdg/nvim/parser/clojure.so"
Searching for "/Users/andrewgu/.local/share/nvim/site/parser/clojure.so"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/opt/nvim-treesitter/parser/clojure.so"
Searching for "parser/bibtex.so" in "/Users/andrewgu/.config/nvim,/etc/xdg/nvim,/Users/andrewgu/.local/share/nvim/site,/Users/andrewgu/.local/share/nvim/site/pack/packer/opt/nvim-treesitter,/Users/andrewgu/.local/share/nvim/site/pack/packer/opt/nvim-colorizer.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/telescope.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/popup.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/plenary.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/packer.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-web-devicons,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-tree.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-lspconfig,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-compe,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-base16.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/st
Searching for "/Users/andrewgu/.config/nvim/parser/bibtex.so"
Searching for "/etc/xdg/nvim/parser/bibtex.so"
Searching for "/Users/andrewgu/.local/share/nvim/site/parser/bibtex.so"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/opt/nvim-treesitter/parser/bibtex.so"
Searching for "parser/glimmer.so" in "/Users/andrewgu/.config/nvim,/etc/xdg/nvim,/Users/andrewgu/.local/share/nvim/site,/Users/andrewgu/.local/share/nvim/site/pack/packer/opt/nvim-treesitter,/Users/andrewgu/.local/share/nvim/site/pack/packer/opt/nvim-colorizer.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/telescope.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/popup.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/plenary.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/packer.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-web-devicons,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-tree.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-lspconfig,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-compe,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-base16.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/s
Searching for "/Users/andrewgu/.config/nvim/parser/glimmer.so"
Searching for "/etc/xdg/nvim/parser/glimmer.so"
Searching for "/Users/andrewgu/.local/share/nvim/site/parser/glimmer.so"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/opt/nvim-treesitter/parser/glimmer.so"
Searching for "parser/r.so" in "/Users/andrewgu/.config/nvim,/etc/xdg/nvim,/Users/andrewgu/.local/share/nvim/site,/Users/andrewgu/.local/share/nvim/site/pack/packer/opt/nvim-treesitter,/Users/andrewgu/.local/share/nvim/site/pack/packer/opt/nvim-colorizer.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/telescope.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/popup.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/plenary.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/packer.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-web-devicons,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-tree.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-lspconfig,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-compe,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-base16.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/n
Searching for "/Users/andrewgu/.config/nvim/parser/r.so"
Searching for "/etc/xdg/nvim/parser/r.so"
Searching for "/Users/andrewgu/.local/share/nvim/site/parser/r.so"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/opt/nvim-treesitter/parser/r.so"
Searching for "parser/scss.so" in "/Users/andrewgu/.config/nvim,/etc/xdg/nvim,/Users/andrewgu/.local/share/nvim/site,/Users/andrewgu/.local/share/nvim/site/pack/packer/opt/nvim-treesitter,/Users/andrewgu/.local/share/nvim/site/pack/packer/opt/nvim-colorizer.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/telescope.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/popup.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/plenary.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/packer.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-web-devicons,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-tree.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-lspconfig,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-compe,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-base16.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/star
Searching for "/Users/andrewgu/.config/nvim/parser/scss.so"
Searching for "/etc/xdg/nvim/parser/scss.so"
Searching for "/Users/andrewgu/.local/share/nvim/site/parser/scss.so"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/opt/nvim-treesitter/parser/scss.so"
Searching for "parser/commonlisp.so" in "/Users/andrewgu/.config/nvim,/etc/xdg/nvim,/Users/andrewgu/.local/share/nvim/site,/Users/andrewgu/.local/share/nvim/site/pack/packer/opt/nvim-treesitter,/Users/andrewgu/.local/share/nvim/site/pack/packer/opt/nvim-colorizer.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/telescope.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/popup.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/plenary.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/packer.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-web-devicons,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-tree.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-lspconfig,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-compe,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-base16.lua,/Users/andrewgu/.local/share/nvim/site/pack/packe
Searching for "/Users/andrewgu/.config/nvim/parser/commonlisp.so"
Searching for "/etc/xdg/nvim/parser/commonlisp.so"
Searching for "/Users/andrewgu/.local/share/nvim/site/parser/commonlisp.so"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/opt/nvim-treesitter/parser/commonlisp.so"
Searching for "parser/teal.so" in "/Users/andrewgu/.config/nvim,/etc/xdg/nvim,/Users/andrewgu/.local/share/nvim/site,/Users/andrewgu/.local/share/nvim/site/pack/packer/opt/nvim-treesitter,/Users/andrewgu/.local/share/nvim/site/pack/packer/opt/nvim-colorizer.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/telescope.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/popup.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/plenary.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/packer.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-web-devicons,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-tree.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-lspconfig,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-compe,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-base16.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/star
Searching for "/Users/andrewgu/.config/nvim/parser/teal.so"
Searching for "/etc/xdg/nvim/parser/teal.so"
Searching for "/Users/andrewgu/.local/share/nvim/site/parser/teal.so"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/opt/nvim-treesitter/parser/teal.so"
Searching for "parser/gomod.so" in "/Users/andrewgu/.config/nvim,/etc/xdg/nvim,/Users/andrewgu/.local/share/nvim/site,/Users/andrewgu/.local/share/nvim/site/pack/packer/opt/nvim-treesitter,/Users/andrewgu/.local/share/nvim/site/pack/packer/opt/nvim-colorizer.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/telescope.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/popup.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/plenary.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/packer.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-web-devicons,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-tree.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-lspconfig,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-compe,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-base16.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/sta
Searching for "/Users/andrewgu/.config/nvim/parser/gomod.so"
Searching for "/etc/xdg/nvim/parser/gomod.so"
Searching for "/Users/andrewgu/.local/share/nvim/site/parser/gomod.so"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/opt/nvim-treesitter/parser/gomod.so"
Searching for "parser/css.so" in "/Users/andrewgu/.config/nvim,/etc/xdg/nvim,/Users/andrewgu/.local/share/nvim/site,/Users/andrewgu/.local/share/nvim/site/pack/packer/opt/nvim-treesitter,/Users/andrewgu/.local/share/nvim/site/pack/packer/opt/nvim-colorizer.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/telescope.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/popup.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/plenary.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/packer.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-web-devicons,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-tree.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-lspconfig,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-compe,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-base16.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start
Searching for "/Users/andrewgu/.config/nvim/parser/css.so"
Searching for "/etc/xdg/nvim/parser/css.so"
Searching for "/Users/andrewgu/.local/share/nvim/site/parser/css.so"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/opt/nvim-treesitter/parser/css.so"
Searching for "parser/graphql.so" in "/Users/andrewgu/.config/nvim,/etc/xdg/nvim,/Users/andrewgu/.local/share/nvim/site,/Users/andrewgu/.local/share/nvim/site/pack/packer/opt/nvim-treesitter,/Users/andrewgu/.local/share/nvim/site/pack/packer/opt/nvim-colorizer.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/telescope.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/popup.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/plenary.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/packer.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-web-devicons,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-tree.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-lspconfig,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-compe,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-base16.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/s
Searching for "/Users/andrewgu/.config/nvim/parser/graphql.so"
Searching for "/etc/xdg/nvim/parser/graphql.so"
Searching for "/Users/andrewgu/.local/share/nvim/site/parser/graphql.so"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/opt/nvim-treesitter/parser/graphql.so"
Searching for "parser/jsonc.so" in "/Users/andrewgu/.config/nvim,/etc/xdg/nvim,/Users/andrewgu/.local/share/nvim/site,/Users/andrewgu/.local/share/nvim/site/pack/packer/opt/nvim-treesitter,/Users/andrewgu/.local/share/nvim/site/pack/packer/opt/nvim-colorizer.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/telescope.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/popup.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/plenary.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/packer.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-web-devicons,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-tree.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-lspconfig,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-compe,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-base16.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/sta
Searching for "/Users/andrewgu/.config/nvim/parser/jsonc.so"
Searching for "/etc/xdg/nvim/parser/jsonc.so"
Searching for "/Users/andrewgu/.local/share/nvim/site/parser/jsonc.so"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/opt/nvim-treesitter/parser/jsonc.so"
Searching for "parser/ruby.so" in "/Users/andrewgu/.config/nvim,/etc/xdg/nvim,/Users/andrewgu/.local/share/nvim/site,/Users/andrewgu/.local/share/nvim/site/pack/packer/opt/nvim-treesitter,/Users/andrewgu/.local/share/nvim/site/pack/packer/opt/nvim-colorizer.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/telescope.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/popup.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/plenary.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/packer.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-web-devicons,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-tree.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-lspconfig,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-compe,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-base16.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/star
Searching for "/Users/andrewgu/.config/nvim/parser/ruby.so"
Searching for "/etc/xdg/nvim/parser/ruby.so"
Searching for "/Users/andrewgu/.local/share/nvim/site/parser/ruby.so"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/opt/nvim-treesitter/parser/ruby.so"
Searching for "parser/toml.so" in "/Users/andrewgu/.config/nvim,/etc/xdg/nvim,/Users/andrewgu/.local/share/nvim/site,/Users/andrewgu/.local/share/nvim/site/pack/packer/opt/nvim-treesitter,/Users/andrewgu/.local/share/nvim/site/pack/packer/opt/nvim-colorizer.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/telescope.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/popup.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/plenary.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/packer.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-web-devicons,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-tree.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-lspconfig,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-compe,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-base16.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/star
Searching for "/Users/andrewgu/.config/nvim/parser/toml.so"
Searching for "/etc/xdg/nvim/parser/toml.so"
Searching for "/Users/andrewgu/.local/share/nvim/site/parser/toml.so"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/opt/nvim-treesitter/parser/toml.so"
Searching for "parser/hcl.so" in "/Users/andrewgu/.config/nvim,/etc/xdg/nvim,/Users/andrewgu/.local/share/nvim/site,/Users/andrewgu/.local/share/nvim/site/pack/packer/opt/nvim-treesitter,/Users/andrewgu/.local/share/nvim/site/pack/packer/opt/nvim-colorizer.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/telescope.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/popup.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/plenary.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/packer.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-web-devicons,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-tree.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-lspconfig,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-compe,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-base16.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start
Searching for "/Users/andrewgu/.config/nvim/parser/hcl.so"
Searching for "/etc/xdg/nvim/parser/hcl.so"
Searching for "/Users/andrewgu/.local/share/nvim/site/parser/hcl.so"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/opt/nvim-treesitter/parser/hcl.so"
Searching for "parser/yang.so" in "/Users/andrewgu/.config/nvim,/etc/xdg/nvim,/Users/andrewgu/.local/share/nvim/site,/Users/andrewgu/.local/share/nvim/site/pack/packer/opt/nvim-treesitter,/Users/andrewgu/.local/share/nvim/site/pack/packer/opt/nvim-colorizer.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/telescope.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/popup.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/plenary.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/packer.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-web-devicons,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-tree.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-lspconfig,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-compe,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-base16.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/star
Searching for "/Users/andrewgu/.config/nvim/parser/yang.so"
Searching for "/etc/xdg/nvim/parser/yang.so"
Searching for "/Users/andrewgu/.local/share/nvim/site/parser/yang.so"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/opt/nvim-treesitter/parser/yang.so"
Searching for "parser/cmake.so" in "/Users/andrewgu/.config/nvim,/etc/xdg/nvim,/Users/andrewgu/.local/share/nvim/site,/Users/andrewgu/.local/share/nvim/site/pack/packer/opt/nvim-treesitter,/Users/andrewgu/.local/share/nvim/site/pack/packer/opt/nvim-colorizer.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/telescope.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/popup.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/plenary.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/packer.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-web-devicons,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-tree.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-lspconfig,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-compe,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-base16.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/sta
Searching for "/Users/andrewgu/.config/nvim/parser/cmake.so"
Searching for "/etc/xdg/nvim/parser/cmake.so"
Searching for "/Users/andrewgu/.local/share/nvim/site/parser/cmake.so"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/opt/nvim-treesitter/parser/cmake.so"
Searching for "parser/supercollider.so" in "/Users/andrewgu/.config/nvim,/etc/xdg/nvim,/Users/andrewgu/.local/share/nvim/site,/Users/andrewgu/.local/share/nvim/site/pack/packer/opt/nvim-treesitter,/Users/andrewgu/.local/share/nvim/site/pack/packer/opt/nvim-colorizer.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/telescope.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/popup.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/plenary.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/packer.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-web-devicons,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-tree.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-lspconfig,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-compe,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-base16.lua,/Users/andrewgu/.local/share/nvim/site/pack/pa
Searching for "/Users/andrewgu/.config/nvim/parser/supercollider.so"
Searching for "/etc/xdg/nvim/parser/supercollider.so"
Searching for "/Users/andrewgu/.local/share/nvim/site/parser/supercollider.so"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/opt/nvim-treesitter/parser/supercollider.so"
Searching for "parser/dart.so" in "/Users/andrewgu/.config/nvim,/etc/xdg/nvim,/Users/andrewgu/.local/share/nvim/site,/Users/andrewgu/.local/share/nvim/site/pack/packer/opt/nvim-treesitter,/Users/andrewgu/.local/share/nvim/site/pack/packer/opt/nvim-colorizer.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/telescope.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/popup.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/plenary.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/packer.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-web-devicons,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-tree.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-lspconfig,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-compe,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-base16.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/star
Searching for "/Users/andrewgu/.config/nvim/parser/dart.so"
Searching for "/etc/xdg/nvim/parser/dart.so"
Searching for "/Users/andrewgu/.local/share/nvim/site/parser/dart.so"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/opt/nvim-treesitter/parser/dart.so"
Searching for "parser/go.so" in "/Users/andrewgu/.config/nvim,/etc/xdg/nvim,/Users/andrewgu/.local/share/nvim/site,/Users/andrewgu/.local/share/nvim/site/pack/packer/opt/nvim-treesitter,/Users/andrewgu/.local/share/nvim/site/pack/packer/opt/nvim-colorizer.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/telescope.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/popup.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/plenary.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/packer.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-web-devicons,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-tree.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-lspconfig,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-compe,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-base16.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/
Searching for "/Users/andrewgu/.config/nvim/parser/go.so"
Searching for "/etc/xdg/nvim/parser/go.so"
Searching for "/Users/andrewgu/.local/share/nvim/site/parser/go.so"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/opt/nvim-treesitter/parser/go.so"
Searching for "parser/regex.so" in "/Users/andrewgu/.config/nvim,/etc/xdg/nvim,/Users/andrewgu/.local/share/nvim/site,/Users/andrewgu/.local/share/nvim/site/pack/packer/opt/nvim-treesitter,/Users/andrewgu/.local/share/nvim/site/pack/packer/opt/nvim-colorizer.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/telescope.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/popup.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/plenary.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/packer.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-web-devicons,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-tree.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-lspconfig,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-compe,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-base16.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/sta
Searching for "/Users/andrewgu/.config/nvim/parser/regex.so"
Searching for "/etc/xdg/nvim/parser/regex.so"
Searching for "/Users/andrewgu/.local/share/nvim/site/parser/regex.so"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/opt/nvim-treesitter/parser/regex.so"
Searching for "parser/comment.so" in "/Users/andrewgu/.config/nvim,/etc/xdg/nvim,/Users/andrewgu/.local/share/nvim/site,/Users/andrewgu/.local/share/nvim/site/pack/packer/opt/nvim-treesitter,/Users/andrewgu/.local/share/nvim/site/pack/packer/opt/nvim-colorizer.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/telescope.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/popup.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/plenary.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/packer.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-web-devicons,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-tree.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-lspconfig,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-compe,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-base16.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/s
Searching for "/Users/andrewgu/.config/nvim/parser/comment.so"
Searching for "/etc/xdg/nvim/parser/comment.so"
Searching for "/Users/andrewgu/.local/share/nvim/site/parser/comment.so"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/opt/nvim-treesitter/parser/comment.so"
Searching for "parser/rst.so" in "/Users/andrewgu/.config/nvim,/etc/xdg/nvim,/Users/andrewgu/.local/share/nvim/site,/Users/andrewgu/.local/share/nvim/site/pack/packer/opt/nvim-treesitter,/Users/andrewgu/.local/share/nvim/site/pack/packer/opt/nvim-colorizer.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/telescope.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/popup.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/plenary.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/packer.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-web-devicons,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-tree.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-lspconfig,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-compe,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-base16.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start
Searching for "/Users/andrewgu/.config/nvim/parser/rst.so"
Searching for "/etc/xdg/nvim/parser/rst.so"
Searching for "/Users/andrewgu/.local/share/nvim/site/parser/rst.so"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/opt/nvim-treesitter/parser/rst.so"
Searching for "parser/kotlin.so" in "/Users/andrewgu/.config/nvim,/etc/xdg/nvim,/Users/andrewgu/.local/share/nvim/site,/Users/andrewgu/.local/share/nvim/site/pack/packer/opt/nvim-treesitter,/Users/andrewgu/.local/share/nvim/site/pack/packer/opt/nvim-colorizer.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/telescope.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/popup.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/plenary.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/packer.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-web-devicons,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-tree.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-lspconfig,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-compe,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-base16.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/st
Searching for "/Users/andrewgu/.config/nvim/parser/kotlin.so"
Searching for "/etc/xdg/nvim/parser/kotlin.so"
Searching for "/Users/andrewgu/.local/share/nvim/site/parser/kotlin.so"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/opt/nvim-treesitter/parser/kotlin.so"
Searching for "lua/nvim-treesitter/highlight.lua" in "/Users/andrewgu/.config/nvim,/etc/xdg/nvim,/Users/andrewgu/.local/share/nvim/site,/Users/andrewgu/.local/share/nvim/site/pack/packer/opt/nvim-treesitter,/Users/andrewgu/.local/share/nvim/site/pack/packer/opt/nvim-colorizer.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/telescope.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/popup.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/plenary.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/packer.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-web-devicons,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-tree.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-lspconfig,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-compe,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-base16.lua,/Users/andrewgu/.local/share/nvim/si
Searching for "/Users/andrewgu/.config/nvim/lua/nvim-treesitter/highlight.lua"
Searching for "/etc/xdg/nvim/lua/nvim-treesitter/highlight.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/lua/nvim-treesitter/highlight.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/opt/nvim-treesitter/lua/nvim-treesitter/highlight.lua"
Searching for "lua/vim/treesitter/highlighter.lua" in "/Users/andrewgu/.config/nvim,/etc/xdg/nvim,/Users/andrewgu/.local/share/nvim/site,/Users/andrewgu/.local/share/nvim/site/pack/packer/opt/nvim-treesitter,/Users/andrewgu/.local/share/nvim/site/pack/packer/opt/nvim-colorizer.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/telescope.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/popup.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/plenary.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/packer.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-web-devicons,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-tree.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-lspconfig,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-compe,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-base16.lua,/Users/andrewgu/.local/share/nvim/s
Searching for "/Users/andrewgu/.config/nvim/lua/vim/treesitter/highlighter.lua"
Searching for "/etc/xdg/nvim/lua/vim/treesitter/highlighter.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/lua/vim/treesitter/highlighter.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/opt/nvim-treesitter/lua/vim/treesitter/highlighter.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/opt/nvim-colorizer.lua/lua/vim/treesitter/highlighter.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/telescope.nvim/lua/vim/treesitter/highlighter.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/popup.nvim/lua/vim/treesitter/highlighter.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/plenary.nvim/lua/vim/treesitter/highlighter.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/packer.nvim/lua/vim/treesitter/highlighter.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/lua/vim/treesitter/highlighter.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-web-devicons/lua/vim/treesitter/highlighter.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-tree.lua/lua/vim/treesitter/highlighter.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-lspconfig/lua/vim/treesitter/highlighter.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-compe/lua/vim/treesitter/highlighter.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-base16.lua/lua/vim/treesitter/highlighter.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-autopairs/lua/vim/treesitter/highlighter.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/neoformat/lua/vim/treesitter/highlighter.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/lualine.nvim/lua/vim/treesitter/highlighter.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/indent-blankline.nvim/lua/vim/treesitter/highlighter.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/gitsigns.nvim/lua/vim/treesitter/highlighter.lua"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/barbar.nvim/lua/vim/treesitter/highlighter.lua"
Searching for "/usr/local/share/nvim/site/lua/vim/treesitter/highlighter.lua"
Searching for "/usr/share/nvim/site/lua/vim/treesitter/highlighter.lua"
Searching for "/usr/local/Cellar/neovim/0.5.0/share/nvim/runtime/lua/vim/treesitter/highlighter.lua"
Executing: autocmd NvimTreesitter FileType * lua require'nvim-treesitter.configs'.reattach_module('highlight')
Executing: doautocmd BufRead
Executing BufReadPost Autocommands for "*"
autocommand if !did_filetype() && expand("<amatch>") !~ g:ft_ignore_pat | runtime! scripts.vim | endif

Executing: if !did_filetype() && expand("<amatch>") !~ g:ft_ignore_pat | runtime! scripts.vim | endif
Executing:  runtime! scripts.vim | endif
Searching for "scripts.vim" in "/Users/andrewgu/.config/nvim,/etc/xdg/nvim,/Users/andrewgu/.local/share/nvim/site,/Users/andrewgu/.local/share/nvim/site/pack/packer/opt/nvim-treesitter,/Users/andrewgu/.local/share/nvim/site/pack/packer/opt/nvim-colorizer.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/telescope.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/popup.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/plenary.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/packer.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-web-devicons,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-tree.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-lspconfig,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-compe,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-base16.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/n
Searching for "/Users/andrewgu/.config/nvim/scripts.vim"
Searching for "/etc/xdg/nvim/scripts.vim"
Searching for "/Users/andrewgu/.local/share/nvim/site/scripts.vim"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/opt/nvim-treesitter/scripts.vim"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/opt/nvim-colorizer.lua/scripts.vim"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/telescope.nvim/scripts.vim"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/popup.nvim/scripts.vim"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/plenary.nvim/scripts.vim"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/packer.nvim/scripts.vim"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/scripts.vim"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-web-devicons/scripts.vim"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-tree.lua/scripts.vim"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-lspconfig/scripts.vim"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-compe/scripts.vim"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-base16.lua/scripts.vim"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-autopairs/scripts.vim"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/neoformat/scripts.vim"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/lualine.nvim/scripts.vim"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/indent-blankline.nvim/scripts.vim"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/gitsigns.nvim/scripts.vim"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/barbar.nvim/scripts.vim"
Searching for "/usr/local/share/nvim/site/scripts.vim"
Searching for "/usr/share/nvim/site/scripts.vim"
Searching for "/usr/local/Cellar/neovim/0.5.0/share/nvim/runtime/scripts.vim"
chdir(/Users/andrewgu/.config/nvim)
chdir(/usr/local/Cellar/neovim/0.5.0/share/nvim/runtime)
chdir(/Users/andrewgu/.config/nvim)
line 0: sourcing "/usr/local/Cellar/neovim/0.5.0/share/nvim/runtime/scripts.vim"
line 1: " Vim support file to detect file types in scripts
line 2: "
line 3: " Maintainer:^IBram Moolenaar <Bram@vim.org>
line 4: " Last change:^I2021 Jan 22
line 5: 
line 6: " This file is called by an autocommand for every file that has just been
line 7: " loaded into a buffer.  It checks if the type of file can be recognized by
line 8: " the file contents.  The autocommand is in $VIMRUNTIME/filetype.vim.
line 9: "
line 10: " Note that the pattern matches are done with =~# to avoid the value of the
line 11: " 'ignorecase' option making a difference.  Where case is to be ignored use
line 12: " =~? instead.  Do not use =~ anywhere.
line 13: 
line 14: 
line 15: " Only do the rest when the FileType autocommand has not been triggered yet.
line 16: if did_filetype()
line 17:   finish
line 18: endif
line 19: 
line 20: " Load the user defined scripts file first
line 21: " Only do this when the FileType autocommand has not been triggered yet
line 22: if exists("myscriptsfile") && filereadable(expand(myscriptsfile))
line 23:   execute "source " . myscriptsfile
line 24:   if did_filetype()
line 25:     finish
line 26:   endif
line 27: endif
line 28: 
line 29: " Line continuation is used here, remove 'C' from 'cpoptions'
line 30: let s:cpo_save = &cpo
line 31: set cpo&vim
line 32: 
line 33: let s:line1 = getline(1)
line 34: 
line 35: if s:line1 =~# "^#!"
line 36:   " A script that starts with "#!".
line 37: 
line 38:   " Check for a line like "#!/usr/bin/env {options} bash".  Turn it into
line 39:   " "#!/usr/bin/bash" to make matching easier.
line 40:   " Recognize only a few {options} that are commonly used.
line 41:   if s:line1 =~# '^#!\s*\S*\<env\s'
line 42:     let s:line1 = substitute(s:line1, '\S\+=\S\+', '', 'g')
line 43:     let s:line1 = substitute(s:line1, '\(-[iS]\|--ignore-environment\|--split-string\)', '', '')
line 44:     let s:line1 = substitute(s:line1, '\<env\s\+', '', '')
line 45:   endif
line 46: 
line 47:   " Get the program name.
line 48:   " Only accept spaces in PC style paths: "#!c:/program files/perl [args]".
line 49:   " If the word env is used, use the first word after the space:
line 50:   " "#!/usr/bin/env perl [path/args]"
line 51:   " If there is no path use the first word: "#!perl [path/args]".
line 52:   " Otherwise get the last word after a slash: "#!/usr/bin/perl [path/args]".
line 53:   if s:line1 =~# '^#!\s*\a:[/\\]'
line 54:     let s:name = substitute(s:line1, '^#!.*[/\\]\(\i\+\).*', '\1', '')
line 55:   elseif s:line1 =~# '^#!.*\<env\>'
line 56:     let s:name = substitute(s:line1, '^#!.*\<env\>\s\+\(\i\+\).*', '\1', '')
line 57:   elseif s:line1 =~# '^#!\s*[^/\\ ]*\>\([^/\\]\|$\)'
line 58:     let s:name = substitute(s:line1, '^#!\s*\([^/\\ ]*\>\).*', '\1', '')
line 59:   else
line 60:     let s:name = substitute(s:line1, '^#!\s*\S*[/\\]\(\i\+\).*', '\1', '')
line 61:   endif
line 62: 
line 63:   " tcl scripts may have #!/bin/sh in the first line and "exec wish" in the
line 64:   " third line.  Suggested by Steven Atkinson.
line 65:   if getline(3) =~# '^exec wish'
line 66:     let s:name = 'wish'
line 67:   endif
line 68: 
line 69:   " Bourne-like shell scripts: bash bash2 ksh ksh93 sh
line 70:   if s:name =~# '^\(bash\d*\|\|ksh\d*\|sh\)\>'
line 71:     call dist#ft#SetFileTypeSH(s:line1)^I" defined in filetype.vim
line 72: 
line 73:     " csh scripts
line 74:   elseif s:name =~# '^csh\>'
line 75:     if exists("g:filetype_csh")
line 76:       call dist#ft#SetFileTypeShell(g:filetype_csh)
line 77:     else
line 78:       call dist#ft#SetFileTypeShell("csh")
line 79:     endif
line 80: 
line 81:     " tcsh scripts
line 82:   elseif s:name =~# '^tcsh\>'
line 83:     call dist#ft#SetFileTypeShell("tcsh")
line 84: 
line 85:     " Z shell scripts
line 86:   elseif s:name =~# '^zsh\>'
line 87:     set ft=zsh
line 88: 
line 89:     " TCL scripts
line 90:   elseif s:name =~# '^\(tclsh\|wish\|expectk\|itclsh\|itkwish\)\>'
line 91:     set ft=tcl
line 92: 
line 93:     " Expect scripts
line 94:   elseif s:name =~# '^expect\>'
line 95:     set ft=expect
line 96: 
line 97:     " Gnuplot scripts
line 98:   elseif s:name =~# '^gnuplot\>'
line 99:     set ft=gnuplot
line 100: 
line 101:     " Makefiles
line 102:   elseif s:name =~# 'make\>'
line 103:     set ft=make
line 104: 
line 105:     " Pike
line 106:   elseif s:name =~# '^pike\%(\>\|[0-9]\)'
line 107:     set ft=pike
line 108: 
line 109:     " Lua
line 110:   elseif s:name =~# 'lua'
line 111:     set ft=lua
line 112: 
line 113:     " Perl
line 114:   elseif s:name =~# 'perl'
line 115:     set ft=perl
line 116: 
line 117:     " PHP
line 118:   elseif s:name =~# 'php'
line 119:     set ft=php
line 120: 
line 121:     " Python
line 122:   elseif s:name =~# 'python'
line 123:     set ft=python
line 124: 
line 125:     " Groovy
line 126:   elseif s:name =~# '^groovy\>'
line 127:     set ft=groovy
line 128: 
line 129:     " Raku
line 130:   elseif s:name =~# 'raku'
line 131:     set ft=raku
line 132: 
line 133:     " Ruby
line 134:   elseif s:name =~# 'ruby'
line 135:     set ft=ruby
line 136: 
line 137:     " JavaScript
line 138:   elseif s:name =~# 'node\(js\)\=\>\|js\>' || s:name =~# 'rhino\>'
line 139:     set ft=javascript
line 140: 
line 141:     " BC calculator
line 142:   elseif s:name =~# '^bc\>'
line 143:     set ft=bc
line 144: 
line 145:     " sed
line 146:   elseif s:name =~# 'sed\>'
line 147:     set ft=sed
line 148: 
line 149:     " OCaml-scripts
line 150:   elseif s:name =~# 'ocaml'
line 151:     set ft=ocaml
line 152: 
line 153:     " Awk scripts; also finds "gawk"
line 154:   elseif s:name =~# 'awk\>'
line 155:     set ft=awk
line 156: 
line 157:     " Website MetaLanguage
line 158:   elseif s:name =~# 'wml'
line 159:     set ft=wml
line 160: 
line 161:     " Scheme scripts
line 162:   elseif s:name =~# 'scheme'
line 163:     set ft=scheme
line 164: 
line 165:     " CFEngine scripts
line 166:   elseif s:name =~# 'cfengine'
line 167:     set ft=cfengine
line 168: 
line 169:     " Erlang scripts
line 170:   elseif s:name =~# 'escript'
line 171:     set ft=erlang
line 172: 
line 173:     " Haskell
line 174:   elseif s:name =~# 'haskell'
line 175:     set ft=haskell
line 176: 
line 177:     " Scala
line 178:   elseif s:name =~# 'scala\>'
line 179:     set ft=scala
line 180: 
line 181:     " Clojure
line 182:   elseif s:name =~# 'clojure'
line 183:     set ft=clojure
line 184: 
line 185:     " Free Pascal
line 186:   elseif s:name =~# 'instantfpc\>'
line 187:     set ft=pascal
line 188: 
line 189:     " Fennel
line 190:   elseif s:name =~# 'fennel\>'
line 191:     set ft=fennel
line 192: 
line 193:   endif
line 194:   unlet s:name
line 195: 
line 196: else
line 197:   " File does not start with "#!".
line 198: 
line 199:   let s:line2 = getline(2)
line 200:   let s:line3 = getline(3)
line 201:   let s:line4 = getline(4)
line 202:   let s:line5 = getline(5)
line 203: 
line 204:   " Bourne-like shell scripts: sh ksh bash bash2
line 205:   if s:line1 =~# '^:$'
line 206:     call dist#ft#SetFileTypeSH(s:line1)^I" defined in filetype.vim
line 207: 
line 208:   " Z shell scripts
line 209:   elseif s:line1 =~# '^#compdef\>' || s:line1 =~# '^#autoload\>' || "\n".s:line1."\n".s:line2."\n".s:line3."\n".s:line4."\n".s:line5 =~# '\n\s*emulate\s\+\%(-[LR]\s\+\)\=[ckz]\=sh\>'
line 211:     set ft=zsh
line 212: 
line 213:   " ELM Mail files
line 214:   elseif s:line1 =~# '^From \([a-zA-Z][a-zA-Z_0-9\.=-]*\(@[^ ]*\)\=\|-\) .* \(19\|20\)\d\d$'
line 215:     set ft=mail
line 216: 
line 217:   " Mason
line 218:   elseif s:line1 =~# '^<[%&].*>'
line 219:     set ft=mason
line 220: 
line 221:   " Vim scripts (must have '" vim' as the first line to trigger this)
line 222:   elseif s:line1 =~# '^" *[vV]im$'
line 223:     set ft=vim
line 224: 
line 225:   " libcxx and libstdc++ standard library headers like "iostream" do not have
line 226:   " an extension, recognize the Emacs file mode.
line 227:   elseif s:line1 =~? '-\*-.*C++.*-\*-'
line 228:     set ft=cpp
line 229: 
line 230:   " MOO
line 231:   elseif s:line1 =~# '^\*\* LambdaMOO Database, Format Version \%([1-3]\>\)\@!\d\+ \*\*$'
line 232:     set ft=moo
line 233: 
line 234:     " Diff file:
line 235:     " - "diff" in first line (context diff)
line 236:     " - "Only in " in first line
line 237:     " - "--- " in first line and "+++ " in second line (unified diff).
line 238:     " - "*** " in first line and "--- " in second line (context diff).
line 239:     " - "# It was generated by makepatch " in the second line (makepatch diff).
line 240:     " - "Index: <filename>" in the first line (CVS file)
line 241:     " - "=== ", line of "=", "---", "+++ " (SVK diff)
line 242:     " - "=== ", "--- ", "+++ " (bzr diff, common case)
line 243:     " - "=== (removed|added|renamed|modified)" (bzr diff, alternative)
line 244:     " - "# HG changeset patch" in first line (Mercurial export format)
line 245:   elseif s:line1 =~# '^\(diff\>\|Only in \|\d\+\(,\d\+\)\=[cda]\d\+\>\|# It was generated by makepatch \|Index:\s\+\f\+\r\=$\|===== \f\+ \d\+\.\d\+ vs edited\|==== //\f\+#\d\+\|# HG changeset patch\)' || (s:line1 =~# '^--- ' && s:line2 =~# '^+++ ') || (s:line1 =~# '^\* looking for ' && s:line2 =~# '^\* comparing to ') || (s:line1 =~# '^\*\*\* ' && s:line2 =~# '^--- ') || (s:line1 =~# '^=== ' && ((s:line2 =~# '^=\{66\}' && s:line3 =~# '^--- ' && s:line4 =~# '^+++') || (s:line2 =~# '^--- ' && s:line3 =~# '^+++ '))) || (s:line1 =~# '^=== \(removed\|added\|renamed\|modified\)')
line 251:     set ft=diff
line 252: 
line 253:     " PostScript Files (must have %!PS as the first line, like a2ps output)
line 254:   elseif s:line1 =~# '^%![ \t]*PS'
line 255:     set ft=postscr
line 256: 
line 257:     " M4 scripts: Guess there is a line that starts with "dnl".
line 258:   elseif s:line1 =~# '^\s*dnl\>' || s:line2 =~# '^\s*dnl\>' || s:line3 =~# '^\s*dnl\>' || s:line4 =~# '^\s*dnl\>' || s:line5 =~# '^\s*dnl\>'
line 263:     set ft=m4
line 264: 
line 265:     " AmigaDos scripts
line 266:   elseif $TERM == "amiga" && (s:line1 =~# "^;" || s:line1 =~? '^\.bra')
line 268:     set ft=amiga
line 269: 
line 270:     " SiCAD scripts (must have procn or procd as the first line to trigger this)
line 271:   elseif s:line1 =~? '^ *proc[nd] *$'
line 272:     set ft=sicad
line 273: 
line 274:     " Purify log files start with "****  Purify"
line 275:   elseif s:line1 =~# '^\*\*\*\*  Purify'
line 276:     set ft=purifylog
line 277: 
line 278:     " XML
line 279:   elseif s:line1 =~# '<?\s*xml.*?>'
line 280:     set ft=xml
line 281: 
line 282:     " XHTML (e.g.: PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN")
line 283:   elseif s:line1 =~# '\<DTD\s\+XHTML\s'
line 284:     set ft=xhtml
line 285: 
line 286:     " HTML (e.g.: <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN")
line 287:     " Avoid "doctype html", used by slim.
line 288:   elseif s:line1 =~? '<!DOCTYPE\s\+html\>'
line 289:     set ft=html
line 290: 
line 291:     " PDF
line 292:   elseif s:line1 =~# '^%PDF-'
line 293:     set ft=pdf
line 294: 
line 295:     " XXD output
line 296:   elseif s:line1 =~# '^\x\{7}: \x\{2} \=\x\{2} \=\x\{2} \=\x\{2} '
line 297:     set ft=xxd
line 298: 
line 299:     " RCS/CVS log output
line 300:   elseif s:line1 =~# '^RCS file:' || s:line2 =~# '^RCS file:'
line 301:     set ft=rcslog
line 302: 
line 303:     " CVS commit
line 304:   elseif s:line2 =~# '^CVS:' || getline("$") =~# '^CVS: '
line 305:     set ft=cvs
line 306: 
line 307:     " Prescribe
line 308:   elseif s:line1 =~# '^!R!'
line 309:     set ft=prescribe
line 310: 
line 311:     " Send-pr
line 312:   elseif s:line1 =~# '^SEND-PR:'
line 313:     set ft=sendpr
line 314: 
line 315:     " SNNS files
line 316:   elseif s:line1 =~# '^SNNS network definition file'
line 317:     set ft=snnsnet
line 318:   elseif s:line1 =~# '^SNNS pattern definition file'
line 319:     set ft=snnspat
line 320:   elseif s:line1 =~# '^SNNS result file'
line 321:     set ft=snnsres
line 322: 
line 323:     " Virata
line 324:   elseif s:line1 =~# '^%.\{-}[Vv]irata' || s:line2 =~# '^%.\{-}[Vv]irata' || s:line3 =~# '^%.\{-}[Vv]irata' || s:line4 =~# '^%.\{-}[Vv]irata' || s:line5 =~# '^%.\{-}[Vv]irata'
line 329:     set ft=virata
line 330: 
line 331:     " Strace
line 332:   elseif s:line1 =~# '[0-9:.]* *execve(' || s:line1 =~# '^__libc_start_main'
line 333:     set ft=strace
line 334: 
line 335:     " VSE JCL
line 336:   elseif s:line1 =~# '^\* $$ JOB\>' || s:line1 =~# '^// *JOB\>'
line 337:     set ft=vsejcl
line 338: 
line 339:     " TAK and SINDA
line 340:   elseif s:line4 =~# 'K & K  Associates' || s:line2 =~# 'TAK 2000'
line 341:     set ft=takout
line 342:   elseif s:line3 =~# 'S Y S T E M S   I M P R O V E D '
line 343:     set ft=sindaout
line 344:   elseif getline(6) =~# 'Run Date: '
line 345:     set ft=takcmp
line 346:   elseif getline(9) =~# 'Node    File  1'
line 347:     set ft=sindacmp
line 348: 
line 349:     " DNS zone files
line 350:   elseif s:line1.s:line2.s:line3.s:line4 =~# '^; <<>> DiG [0-9.]\+.* <<>>\|$ORIGIN\|$TTL\|IN\s\+SOA'
line 351:     set ft=bindzone
line 352: 
line 353:     " BAAN
line 354:   elseif s:line1 =~# '|\*\{1,80}' && s:line2 =~# 'VRC ' || s:line2 =~# '|\*\{1,80}' && s:line3 =~# 'VRC '
line 356:     set ft=baan
line 357: 
line 358:   " Valgrind
line 359:   elseif s:line1 =~# '^==\d\+== valgrind' || s:line3 =~# '^==\d\+== Using valgrind'
line 360:     set ft=valgrind
line 361: 
line 362:   " Go docs
line 363:   elseif s:line1 =~# '^PACKAGE DOCUMENTATION$'
line 364:     set ft=godoc
line 365: 
line 366:   " Renderman Interface Bytestream
line 367:   elseif s:line1 =~# '^##RenderMan'
line 368:     set ft=rib
line 369: 
line 370:   " Scheme scripts
line 371:   elseif s:line1 =~# 'exec\s\+\S*scheme' || s:line2 =~# 'exec\s\+\S*scheme'
line 372:     set ft=scheme
line 373: 
line 374:   " Git output
line 375:   elseif s:line1 =~# '^\(commit\|tree\|object\) \x\{40\}\>\|^tag \S\+$'
line 376:     set ft=git
line 377: 
line 378:    " Gprof (gnu profiler)
line 379:    elseif s:line1 == 'Flat profile:' && s:line2 == '' && s:line3 =~# '^Each sample counts as .* seconds.$'
line 382:      set ft=gprof
line 383: 
line 384:   " Erlang terms
line 385:   " (See also: http://www.gnu.org/software/emacs/manual/html_node/emacs/Choosing-Modes.html#Choosing-Modes)
line 386:   elseif s:line1 =~? '-\*-.*erlang.*-\*-'
line 387:     set ft=erlang
line 388: 
line 389:   " YAML
line 390:   elseif s:line1 =~# '^%YAML'
line 391:     set ft=yaml
line 392: 
line 393:   " CVS diff
line 394:   else
line 395:     let s:lnum = 1
line 396:     while getline(s:lnum) =~# "^? " && s:lnum < line("$")
line 397:       let s:lnum += 1
line 398:     endwhile
line 399:     if getline(s:lnum) =~# '^Index:\s\+\f\+$'
line 400:       set ft=diff
line 401: 
line 402:       " locale input files: Formal Definitions of Cultural Conventions
line 403:       " filename must be like en_US, fr_FR@euro or en_US.UTF-8
line 404:     elseif expand("%") =~# '\a\a_\a\a\($\|[.@]\)\|i18n$\|POSIX$\|translit_'
line 405:       let s:lnum = 1
line 406:       while s:lnum < 100 && s:lnum < line("$")
line 407: ^Iif getline(s:lnum) =~# '^LC_\(IDENTIFICATION\|CTYPE\|COLLATE\|MONETARY\|NUMERIC\|TIME\|MESSAGES\|PAPER\|TELEPHONE\|MEASUREMENT\|NAME\|ADDRESS\)$'
line 408: ^I  setf fdcc
line 409: ^I  break
line 410: ^Iendif
line 411: ^Ilet s:lnum += 1
line 412:       endwhile
line 413:     endif
line 414:     unlet s:lnum
line 415: 
line 416:   endif
line 417: 
line 418:   unlet s:line2 s:line3 s:line4 s:line5
line 419: 
line 420: endif
line 421: 
line 422: " Restore 'cpoptions'
line 423: let &cpo = s:cpo_save
line 424: 
line 425: unlet s:cpo_save s:line1
finished sourcing /usr/local/Cellar/neovim/0.5.0/share/nvim/runtime/scripts.vim
continuing in BufReadPost Autocommands for "*"
Searching for "/usr/local/Cellar/neovim/0.5.0/share/nvim/runtime/pack/dist/opt/matchit/scripts.vim"
Searching for "/usr/local/Cellar/neovim/0.5.0/lib/nvim/scripts.vim"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/opt/nvim-treesitter/after/scripts.vim"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-compe/after/scripts.vim"
Searching for "/usr/share/nvim/site/after/scripts.vim"
Searching for "/usr/local/share/nvim/site/after/scripts.vim"
Searching for "/Users/andrewgu/.local/share/nvim/site/after/scripts.vim"
Searching for "/etc/xdg/nvim/after/scripts.vim"
Searching for "/Users/andrewgu/.config/nvim/after/scripts.vim"
Searching for "pack/*/start/*/scripts.vim" in "/Users/andrewgu/.config/nvim,/etc/xdg/nvim,/Users/andrewgu/.local/share/nvim/site,/usr/local/share/nvim/site,/usr/share/nvim/site,/usr/local/Cellar/neovim/0.5.0/share/nvim/runtime,/usr/local/Cellar/neovim/0.5.0/lib/nvim,/usr/share/nvim/site/after,/usr/local/share/nvim/site/after,/Users/andrewgu/.local/share/nvim/site/after,/etc/xdg/nvim/after,/Users/andrewgu/.config/nvim/after"
Searching for "/Users/andrewgu/.config/nvim/pack/*/start/*/scripts.vim"
Searching for "/etc/xdg/nvim/pack/*/start/*/scripts.vim"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/*/start/*/scripts.vim"
Searching for "/usr/local/share/nvim/site/pack/*/start/*/scripts.vim"
Searching for "/usr/share/nvim/site/pack/*/start/*/scripts.vim"
Searching for "/usr/local/Cellar/neovim/0.5.0/share/nvim/runtime/pack/*/start/*/scripts.vim"
Searching for "/usr/local/Cellar/neovim/0.5.0/lib/nvim/pack/*/start/*/scripts.vim"
Searching for "/usr/share/nvim/site/after/pack/*/start/*/scripts.vim"
Searching for "/usr/local/share/nvim/site/after/pack/*/start/*/scripts.vim"
Searching for "/Users/andrewgu/.local/share/nvim/site/after/pack/*/start/*/scripts.vim"
Searching for "/etc/xdg/nvim/after/pack/*/start/*/scripts.vim"
Searching for "/Users/andrewgu/.config/nvim/after/pack/*/start/*/scripts.vim"
not found in 'packpath': "pack/*/start/*/scripts.vim"
Searching for "start/*/scripts.vim" in "/Users/andrewgu/.config/nvim,/etc/xdg/nvim,/Users/andrewgu/.local/share/nvim/site,/usr/local/share/nvim/site,/usr/share/nvim/site,/usr/local/Cellar/neovim/0.5.0/share/nvim/runtime,/usr/local/Cellar/neovim/0.5.0/lib/nvim,/usr/share/nvim/site/after,/usr/local/share/nvim/site/after,/Users/andrewgu/.local/share/nvim/site/after,/etc/xdg/nvim/after,/Users/andrewgu/.config/nvim/after"
Searching for "/Users/andrewgu/.config/nvim/start/*/scripts.vim"
Searching for "/etc/xdg/nvim/start/*/scripts.vim"
Searching for "/Users/andrewgu/.local/share/nvim/site/start/*/scripts.vim"
Searching for "/usr/local/share/nvim/site/start/*/scripts.vim"
Searching for "/usr/share/nvim/site/start/*/scripts.vim"
Searching for "/usr/local/Cellar/neovim/0.5.0/share/nvim/runtime/start/*/scripts.vim"
Searching for "/usr/local/Cellar/neovim/0.5.0/lib/nvim/start/*/scripts.vim"
Searching for "/usr/share/nvim/site/after/start/*/scripts.vim"
Searching for "/usr/local/share/nvim/site/after/start/*/scripts.vim"
Searching for "/Users/andrewgu/.local/share/nvim/site/after/start/*/scripts.vim"
Searching for "/etc/xdg/nvim/after/start/*/scripts.vim"
Searching for "/Users/andrewgu/.config/nvim/after/start/*/scripts.vim"
not found in 'packpath': "start/*/scripts.vim"
Executing:  endif
Executing BufReadPost Autocommands for "*"
autocommand if !did_filetype() && expand("<amatch>") !~ g:ft_ignore_pat    && (getline(1) =~ '^#' || getline(2) =~ '^#' || getline(3) =~ '^#'^I|| getline(4) =~ '^#' || getline(5) =~ '^#') |   setf FALLBACK conf | endif

Executing: if !did_filetype() && expand("<amatch>") !~ g:ft_ignore_pat    && (getline(1) =~ '^#' || getline(2) =~ '^#' || getline(3) =~ '^#'^I|| getline(4) =~ '^#' || getline(5) =~ '^#') |   setf FALLBACK conf | endif
Executing:    setf FALLBACK conf | endif
Executing:  endif
Executing BufReadPost Autocommands for "*"
Executing BufReadPost Autocommands for "*"
autocommand call <SID>on_buffer_open(expand('<abuf>'))

Executing: call <SID>on_buffer_open(expand('<abuf>'))
calling function <SNR>26_on_buffer_open('3')

line 1:    call luaeval("require'bufferline.jump_mode'.assign_next_letter(_A)", a:abuf)
function <SNR>26_on_buffer_open returning #0

continuing in BufReadPost Autocommands for "*"

Executing BufReadPost Autocommands for "*"
autocommand lua require("gitsigns").attach()

Executing: lua require("gitsigns").attach()
Executing: doautocmd <nomodeline> BufRead *
Executing BufReadPost Autocommands for "*"
autocommand if !did_filetype() && expand("<amatch>") !~ g:ft_ignore_pat | runtime! scripts.vim | endif

Executing: if !did_filetype() && expand("<amatch>") !~ g:ft_ignore_pat | runtime! scripts.vim | endif
Executing:  runtime! scripts.vim | endif
Searching for "scripts.vim" in "/Users/andrewgu/.config/nvim,/etc/xdg/nvim,/Users/andrewgu/.local/share/nvim/site,/Users/andrewgu/.local/share/nvim/site/pack/packer/opt/nvim-treesitter,/Users/andrewgu/.local/share/nvim/site/pack/packer/opt/nvim-colorizer.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/telescope.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/popup.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/plenary.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/packer.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-web-devicons,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-tree.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-lspconfig,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-compe,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-base16.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/n
Searching for "/Users/andrewgu/.config/nvim/scripts.vim"
Searching for "/etc/xdg/nvim/scripts.vim"
Searching for "/Users/andrewgu/.local/share/nvim/site/scripts.vim"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/opt/nvim-treesitter/scripts.vim"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/opt/nvim-colorizer.lua/scripts.vim"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/telescope.nvim/scripts.vim"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/popup.nvim/scripts.vim"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/plenary.nvim/scripts.vim"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/packer.nvim/scripts.vim"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/scripts.vim"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-web-devicons/scripts.vim"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-tree.lua/scripts.vim"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-lspconfig/scripts.vim"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-compe/scripts.vim"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-base16.lua/scripts.vim"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-autopairs/scripts.vim"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/neoformat/scripts.vim"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/lualine.nvim/scripts.vim"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/indent-blankline.nvim/scripts.vim"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/gitsigns.nvim/scripts.vim"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/barbar.nvim/scripts.vim"
Searching for "/usr/local/share/nvim/site/scripts.vim"
Searching for "/usr/share/nvim/site/scripts.vim"
Searching for "/usr/local/Cellar/neovim/0.5.0/share/nvim/runtime/scripts.vim"
chdir(/Users/andrewgu/.config/nvim)
chdir(/usr/local/Cellar/neovim/0.5.0/share/nvim/runtime)
chdir(/Users/andrewgu/.config/nvim)
line 0: sourcing "/usr/local/Cellar/neovim/0.5.0/share/nvim/runtime/scripts.vim"
line 1: " Vim support file to detect file types in scripts
line 2: "
line 3: " Maintainer:^IBram Moolenaar <Bram@vim.org>
line 4: " Last change:^I2021 Jan 22
line 5: 
line 6: " This file is called by an autocommand for every file that has just been
line 7: " loaded into a buffer.  It checks if the type of file can be recognized by
line 8: " the file contents.  The autocommand is in $VIMRUNTIME/filetype.vim.
line 9: "
line 10: " Note that the pattern matches are done with =~# to avoid the value of the
line 11: " 'ignorecase' option making a difference.  Where case is to be ignored use
line 12: " =~? instead.  Do not use =~ anywhere.
line 13: 
line 14: 
line 15: " Only do the rest when the FileType autocommand has not been triggered yet.
line 16: if did_filetype()
line 17:   finish
line 18: endif
line 19: 
line 20: " Load the user defined scripts file first
line 21: " Only do this when the FileType autocommand has not been triggered yet
line 22: if exists("myscriptsfile") && filereadable(expand(myscriptsfile))
line 23:   execute "source " . myscriptsfile
line 24:   if did_filetype()
line 25:     finish
line 26:   endif
line 27: endif
line 28: 
line 29: " Line continuation is used here, remove 'C' from 'cpoptions'
line 30: let s:cpo_save = &cpo
line 31: set cpo&vim
line 32: 
line 33: let s:line1 = getline(1)
line 34: 
line 35: if s:line1 =~# "^#!"
line 36:   " A script that starts with "#!".
line 37: 
line 38:   " Check for a line like "#!/usr/bin/env {options} bash".  Turn it into
line 39:   " "#!/usr/bin/bash" to make matching easier.
line 40:   " Recognize only a few {options} that are commonly used.
line 41:   if s:line1 =~# '^#!\s*\S*\<env\s'
line 42:     let s:line1 = substitute(s:line1, '\S\+=\S\+', '', 'g')
line 43:     let s:line1 = substitute(s:line1, '\(-[iS]\|--ignore-environment\|--split-string\)', '', '')
line 44:     let s:line1 = substitute(s:line1, '\<env\s\+', '', '')
line 45:   endif
line 46: 
line 47:   " Get the program name.
line 48:   " Only accept spaces in PC style paths: "#!c:/program files/perl [args]".
line 49:   " If the word env is used, use the first word after the space:
line 50:   " "#!/usr/bin/env perl [path/args]"
line 51:   " If there is no path use the first word: "#!perl [path/args]".
line 52:   " Otherwise get the last word after a slash: "#!/usr/bin/perl [path/args]".
line 53:   if s:line1 =~# '^#!\s*\a:[/\\]'
line 54:     let s:name = substitute(s:line1, '^#!.*[/\\]\(\i\+\).*', '\1', '')
line 55:   elseif s:line1 =~# '^#!.*\<env\>'
line 56:     let s:name = substitute(s:line1, '^#!.*\<env\>\s\+\(\i\+\).*', '\1', '')
line 57:   elseif s:line1 =~# '^#!\s*[^/\\ ]*\>\([^/\\]\|$\)'
line 58:     let s:name = substitute(s:line1, '^#!\s*\([^/\\ ]*\>\).*', '\1', '')
line 59:   else
line 60:     let s:name = substitute(s:line1, '^#!\s*\S*[/\\]\(\i\+\).*', '\1', '')
line 61:   endif
line 62: 
line 63:   " tcl scripts may have #!/bin/sh in the first line and "exec wish" in the
line 64:   " third line.  Suggested by Steven Atkinson.
line 65:   if getline(3) =~# '^exec wish'
line 66:     let s:name = 'wish'
line 67:   endif
line 68: 
line 69:   " Bourne-like shell scripts: bash bash2 ksh ksh93 sh
line 70:   if s:name =~# '^\(bash\d*\|\|ksh\d*\|sh\)\>'
line 71:     call dist#ft#SetFileTypeSH(s:line1)^I" defined in filetype.vim
line 72: 
line 73:     " csh scripts
line 74:   elseif s:name =~# '^csh\>'
line 75:     if exists("g:filetype_csh")
line 76:       call dist#ft#SetFileTypeShell(g:filetype_csh)
line 77:     else
line 78:       call dist#ft#SetFileTypeShell("csh")
line 79:     endif
line 80: 
line 81:     " tcsh scripts
line 82:   elseif s:name =~# '^tcsh\>'
line 83:     call dist#ft#SetFileTypeShell("tcsh")
line 84: 
line 85:     " Z shell scripts
line 86:   elseif s:name =~# '^zsh\>'
line 87:     set ft=zsh
line 88: 
line 89:     " TCL scripts
line 90:   elseif s:name =~# '^\(tclsh\|wish\|expectk\|itclsh\|itkwish\)\>'
line 91:     set ft=tcl
line 92: 
line 93:     " Expect scripts
line 94:   elseif s:name =~# '^expect\>'
line 95:     set ft=expect
line 96: 
line 97:     " Gnuplot scripts
line 98:   elseif s:name =~# '^gnuplot\>'
line 99:     set ft=gnuplot
line 100: 
line 101:     " Makefiles
line 102:   elseif s:name =~# 'make\>'
line 103:     set ft=make
line 104: 
line 105:     " Pike
line 106:   elseif s:name =~# '^pike\%(\>\|[0-9]\)'
line 107:     set ft=pike
line 108: 
line 109:     " Lua
line 110:   elseif s:name =~# 'lua'
line 111:     set ft=lua
line 112: 
line 113:     " Perl
line 114:   elseif s:name =~# 'perl'
line 115:     set ft=perl
line 116: 
line 117:     " PHP
line 118:   elseif s:name =~# 'php'
line 119:     set ft=php
line 120: 
line 121:     " Python
line 122:   elseif s:name =~# 'python'
line 123:     set ft=python
line 124: 
line 125:     " Groovy
line 126:   elseif s:name =~# '^groovy\>'
line 127:     set ft=groovy
line 128: 
line 129:     " Raku
line 130:   elseif s:name =~# 'raku'
line 131:     set ft=raku
line 132: 
line 133:     " Ruby
line 134:   elseif s:name =~# 'ruby'
line 135:     set ft=ruby
line 136: 
line 137:     " JavaScript
line 138:   elseif s:name =~# 'node\(js\)\=\>\|js\>' || s:name =~# 'rhino\>'
line 139:     set ft=javascript
line 140: 
line 141:     " BC calculator
line 142:   elseif s:name =~# '^bc\>'
line 143:     set ft=bc
line 144: 
line 145:     " sed
line 146:   elseif s:name =~# 'sed\>'
line 147:     set ft=sed
line 148: 
line 149:     " OCaml-scripts
line 150:   elseif s:name =~# 'ocaml'
line 151:     set ft=ocaml
line 152: 
line 153:     " Awk scripts; also finds "gawk"
line 154:   elseif s:name =~# 'awk\>'
line 155:     set ft=awk
line 156: 
line 157:     " Website MetaLanguage
line 158:   elseif s:name =~# 'wml'
line 159:     set ft=wml
line 160: 
line 161:     " Scheme scripts
line 162:   elseif s:name =~# 'scheme'
line 163:     set ft=scheme
line 164: 
line 165:     " CFEngine scripts
line 166:   elseif s:name =~# 'cfengine'
line 167:     set ft=cfengine
line 168: 
line 169:     " Erlang scripts
line 170:   elseif s:name =~# 'escript'
line 171:     set ft=erlang
line 172: 
line 173:     " Haskell
line 174:   elseif s:name =~# 'haskell'
line 175:     set ft=haskell
line 176: 
line 177:     " Scala
line 178:   elseif s:name =~# 'scala\>'
line 179:     set ft=scala
line 180: 
line 181:     " Clojure
line 182:   elseif s:name =~# 'clojure'
line 183:     set ft=clojure
line 184: 
line 185:     " Free Pascal
line 186:   elseif s:name =~# 'instantfpc\>'
line 187:     set ft=pascal
line 188: 
line 189:     " Fennel
line 190:   elseif s:name =~# 'fennel\>'
line 191:     set ft=fennel
line 192: 
line 193:   endif
line 194:   unlet s:name
line 195: 
line 196: else
line 197:   " File does not start with "#!".
line 198: 
line 199:   let s:line2 = getline(2)
line 200:   let s:line3 = getline(3)
line 201:   let s:line4 = getline(4)
line 202:   let s:line5 = getline(5)
line 203: 
line 204:   " Bourne-like shell scripts: sh ksh bash bash2
line 205:   if s:line1 =~# '^:$'
line 206:     call dist#ft#SetFileTypeSH(s:line1)^I" defined in filetype.vim
line 207: 
line 208:   " Z shell scripts
line 209:   elseif s:line1 =~# '^#compdef\>' || s:line1 =~# '^#autoload\>' || "\n".s:line1."\n".s:line2."\n".s:line3."\n".s:line4."\n".s:line5 =~# '\n\s*emulate\s\+\%(-[LR]\s\+\)\=[ckz]\=sh\>'
line 211:     set ft=zsh
line 212: 
line 213:   " ELM Mail files
line 214:   elseif s:line1 =~# '^From \([a-zA-Z][a-zA-Z_0-9\.=-]*\(@[^ ]*\)\=\|-\) .* \(19\|20\)\d\d$'
line 215:     set ft=mail
line 216: 
line 217:   " Mason
line 218:   elseif s:line1 =~# '^<[%&].*>'
line 219:     set ft=mason
line 220: 
line 221:   " Vim scripts (must have '" vim' as the first line to trigger this)
line 222:   elseif s:line1 =~# '^" *[vV]im$'
line 223:     set ft=vim
line 224: 
line 225:   " libcxx and libstdc++ standard library headers like "iostream" do not have
line 226:   " an extension, recognize the Emacs file mode.
line 227:   elseif s:line1 =~? '-\*-.*C++.*-\*-'
line 228:     set ft=cpp
line 229: 
line 230:   " MOO
line 231:   elseif s:line1 =~# '^\*\* LambdaMOO Database, Format Version \%([1-3]\>\)\@!\d\+ \*\*$'
line 232:     set ft=moo
line 233: 
line 234:     " Diff file:
line 235:     " - "diff" in first line (context diff)
line 236:     " - "Only in " in first line
line 237:     " - "--- " in first line and "+++ " in second line (unified diff).
line 238:     " - "*** " in first line and "--- " in second line (context diff).
line 239:     " - "# It was generated by makepatch " in the second line (makepatch diff).
line 240:     " - "Index: <filename>" in the first line (CVS file)
line 241:     " - "=== ", line of "=", "---", "+++ " (SVK diff)
line 242:     " - "=== ", "--- ", "+++ " (bzr diff, common case)
line 243:     " - "=== (removed|added|renamed|modified)" (bzr diff, alternative)
line 244:     " - "# HG changeset patch" in first line (Mercurial export format)
line 245:   elseif s:line1 =~# '^\(diff\>\|Only in \|\d\+\(,\d\+\)\=[cda]\d\+\>\|# It was generated by makepatch \|Index:\s\+\f\+\r\=$\|===== \f\+ \d\+\.\d\+ vs edited\|==== //\f\+#\d\+\|# HG changeset patch\)' || (s:line1 =~# '^--- ' && s:line2 =~# '^+++ ') || (s:line1 =~# '^\* looking for ' && s:line2 =~# '^\* comparing to ') || (s:line1 =~# '^\*\*\* ' && s:line2 =~# '^--- ') || (s:line1 =~# '^=== ' && ((s:line2 =~# '^=\{66\}' && s:line3 =~# '^--- ' && s:line4 =~# '^+++') || (s:line2 =~# '^--- ' && s:line3 =~# '^+++ '))) || (s:line1 =~# '^=== \(removed\|added\|renamed\|modified\)')
line 251:     set ft=diff
line 252: 
line 253:     " PostScript Files (must have %!PS as the first line, like a2ps output)
line 254:   elseif s:line1 =~# '^%![ \t]*PS'
line 255:     set ft=postscr
line 256: 
line 257:     " M4 scripts: Guess there is a line that starts with "dnl".
line 258:   elseif s:line1 =~# '^\s*dnl\>' || s:line2 =~# '^\s*dnl\>' || s:line3 =~# '^\s*dnl\>' || s:line4 =~# '^\s*dnl\>' || s:line5 =~# '^\s*dnl\>'
line 263:     set ft=m4
line 264: 
line 265:     " AmigaDos scripts
line 266:   elseif $TERM == "amiga" && (s:line1 =~# "^;" || s:line1 =~? '^\.bra')
line 268:     set ft=amiga
line 269: 
line 270:     " SiCAD scripts (must have procn or procd as the first line to trigger this)
line 271:   elseif s:line1 =~? '^ *proc[nd] *$'
line 272:     set ft=sicad
line 273: 
line 274:     " Purify log files start with "****  Purify"
line 275:   elseif s:line1 =~# '^\*\*\*\*  Purify'
line 276:     set ft=purifylog
line 277: 
line 278:     " XML
line 279:   elseif s:line1 =~# '<?\s*xml.*?>'
line 280:     set ft=xml
line 281: 
line 282:     " XHTML (e.g.: PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN")
line 283:   elseif s:line1 =~# '\<DTD\s\+XHTML\s'
line 284:     set ft=xhtml
line 285: 
line 286:     " HTML (e.g.: <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01//EN")
line 287:     " Avoid "doctype html", used by slim.
line 288:   elseif s:line1 =~? '<!DOCTYPE\s\+html\>'
line 289:     set ft=html
line 290: 
line 291:     " PDF
line 292:   elseif s:line1 =~# '^%PDF-'
line 293:     set ft=pdf
line 294: 
line 295:     " XXD output
line 296:   elseif s:line1 =~# '^\x\{7}: \x\{2} \=\x\{2} \=\x\{2} \=\x\{2} '
line 297:     set ft=xxd
line 298: 
line 299:     " RCS/CVS log output
line 300:   elseif s:line1 =~# '^RCS file:' || s:line2 =~# '^RCS file:'
line 301:     set ft=rcslog
line 302: 
line 303:     " CVS commit
line 304:   elseif s:line2 =~# '^CVS:' || getline("$") =~# '^CVS: '
line 305:     set ft=cvs
line 306: 
line 307:     " Prescribe
line 308:   elseif s:line1 =~# '^!R!'
line 309:     set ft=prescribe
line 310: 
line 311:     " Send-pr
line 312:   elseif s:line1 =~# '^SEND-PR:'
line 313:     set ft=sendpr
line 314: 
line 315:     " SNNS files
line 316:   elseif s:line1 =~# '^SNNS network definition file'
line 317:     set ft=snnsnet
line 318:   elseif s:line1 =~# '^SNNS pattern definition file'
line 319:     set ft=snnspat
line 320:   elseif s:line1 =~# '^SNNS result file'
line 321:     set ft=snnsres
line 322: 
line 323:     " Virata
line 324:   elseif s:line1 =~# '^%.\{-}[Vv]irata' || s:line2 =~# '^%.\{-}[Vv]irata' || s:line3 =~# '^%.\{-}[Vv]irata' || s:line4 =~# '^%.\{-}[Vv]irata' || s:line5 =~# '^%.\{-}[Vv]irata'
line 329:     set ft=virata
line 330: 
line 331:     " Strace
line 332:   elseif s:line1 =~# '[0-9:.]* *execve(' || s:line1 =~# '^__libc_start_main'
line 333:     set ft=strace
line 334: 
line 335:     " VSE JCL
line 336:   elseif s:line1 =~# '^\* $$ JOB\>' || s:line1 =~# '^// *JOB\>'
line 337:     set ft=vsejcl
line 338: 
line 339:     " TAK and SINDA
line 340:   elseif s:line4 =~# 'K & K  Associates' || s:line2 =~# 'TAK 2000'
line 341:     set ft=takout
line 342:   elseif s:line3 =~# 'S Y S T E M S   I M P R O V E D '
line 343:     set ft=sindaout
line 344:   elseif getline(6) =~# 'Run Date: '
line 345:     set ft=takcmp
line 346:   elseif getline(9) =~# 'Node    File  1'
line 347:     set ft=sindacmp
line 348: 
line 349:     " DNS zone files
line 350:   elseif s:line1.s:line2.s:line3.s:line4 =~# '^; <<>> DiG [0-9.]\+.* <<>>\|$ORIGIN\|$TTL\|IN\s\+SOA'
line 351:     set ft=bindzone
line 352: 
line 353:     " BAAN
line 354:   elseif s:line1 =~# '|\*\{1,80}' && s:line2 =~# 'VRC ' || s:line2 =~# '|\*\{1,80}' && s:line3 =~# 'VRC '
line 356:     set ft=baan
line 357: 
line 358:   " Valgrind
line 359:   elseif s:line1 =~# '^==\d\+== valgrind' || s:line3 =~# '^==\d\+== Using valgrind'
line 360:     set ft=valgrind
line 361: 
line 362:   " Go docs
line 363:   elseif s:line1 =~# '^PACKAGE DOCUMENTATION$'
line 364:     set ft=godoc
line 365: 
line 366:   " Renderman Interface Bytestream
line 367:   elseif s:line1 =~# '^##RenderMan'
line 368:     set ft=rib
line 369: 
line 370:   " Scheme scripts
line 371:   elseif s:line1 =~# 'exec\s\+\S*scheme' || s:line2 =~# 'exec\s\+\S*scheme'
line 372:     set ft=scheme
line 373: 
line 374:   " Git output
line 375:   elseif s:line1 =~# '^\(commit\|tree\|object\) \x\{40\}\>\|^tag \S\+$'
line 376:     set ft=git
line 377: 
line 378:    " Gprof (gnu profiler)
line 379:    elseif s:line1 == 'Flat profile:' && s:line2 == '' && s:line3 =~# '^Each sample counts as .* seconds.$'
line 382:      set ft=gprof
line 383: 
line 384:   " Erlang terms
line 385:   " (See also: http://www.gnu.org/software/emacs/manual/html_node/emacs/Choosing-Modes.html#Choosing-Modes)
line 386:   elseif s:line1 =~? '-\*-.*erlang.*-\*-'
line 387:     set ft=erlang
line 388: 
line 389:   " YAML
line 390:   elseif s:line1 =~# '^%YAML'
line 391:     set ft=yaml
line 392: 
line 393:   " CVS diff
line 394:   else
line 395:     let s:lnum = 1
line 396:     while getline(s:lnum) =~# "^? " && s:lnum < line("$")
line 397:       let s:lnum += 1
line 398:     endwhile
line 399:     if getline(s:lnum) =~# '^Index:\s\+\f\+$'
line 400:       set ft=diff
line 401: 
line 402:       " locale input files: Formal Definitions of Cultural Conventions
line 403:       " filename must be like en_US, fr_FR@euro or en_US.UTF-8
line 404:     elseif expand("%") =~# '\a\a_\a\a\($\|[.@]\)\|i18n$\|POSIX$\|translit_'
line 405:       let s:lnum = 1
line 406:       while s:lnum < 100 && s:lnum < line("$")
line 407: ^Iif getline(s:lnum) =~# '^LC_\(IDENTIFICATION\|CTYPE\|COLLATE\|MONETARY\|NUMERIC\|TIME\|MESSAGES\|PAPER\|TELEPHONE\|MEASUREMENT\|NAME\|ADDRESS\)$'
line 408: ^I  setf fdcc
line 409: ^I  break
line 410: ^Iendif
line 411: ^Ilet s:lnum += 1
line 412:       endwhile
line 413:     endif
line 414:     unlet s:lnum
line 415: 
line 416:   endif
line 417: 
line 418:   unlet s:line2 s:line3 s:line4 s:line5
line 419: 
line 420: endif
line 421: 
line 422: " Restore 'cpoptions'
line 423: let &cpo = s:cpo_save
line 424: 
line 425: unlet s:cpo_save s:line1
finished sourcing /usr/local/Cellar/neovim/0.5.0/share/nvim/runtime/scripts.vim
continuing in BufReadPost Autocommands for "*"
Searching for "/usr/local/Cellar/neovim/0.5.0/share/nvim/runtime/pack/dist/opt/matchit/scripts.vim"
Searching for "/usr/local/Cellar/neovim/0.5.0/lib/nvim/scripts.vim"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/opt/nvim-treesitter/after/scripts.vim"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-compe/after/scripts.vim"
Searching for "/usr/share/nvim/site/after/scripts.vim"
Searching for "/usr/local/share/nvim/site/after/scripts.vim"
Searching for "/Users/andrewgu/.local/share/nvim/site/after/scripts.vim"
Searching for "/etc/xdg/nvim/after/scripts.vim"
Searching for "/Users/andrewgu/.config/nvim/after/scripts.vim"
Searching for "pack/*/start/*/scripts.vim" in "/Users/andrewgu/.config/nvim,/etc/xdg/nvim,/Users/andrewgu/.local/share/nvim/site,/usr/local/share/nvim/site,/usr/share/nvim/site,/usr/local/Cellar/neovim/0.5.0/share/nvim/runtime,/usr/local/Cellar/neovim/0.5.0/lib/nvim,/usr/share/nvim/site/after,/usr/local/share/nvim/site/after,/Users/andrewgu/.local/share/nvim/site/after,/etc/xdg/nvim/after,/Users/andrewgu/.config/nvim/after"
Searching for "/Users/andrewgu/.config/nvim/pack/*/start/*/scripts.vim"
Searching for "/etc/xdg/nvim/pack/*/start/*/scripts.vim"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/*/start/*/scripts.vim"
Searching for "/usr/local/share/nvim/site/pack/*/start/*/scripts.vim"
Searching for "/usr/share/nvim/site/pack/*/start/*/scripts.vim"
Searching for "/usr/local/Cellar/neovim/0.5.0/share/nvim/runtime/pack/*/start/*/scripts.vim"
Searching for "/usr/local/Cellar/neovim/0.5.0/lib/nvim/pack/*/start/*/scripts.vim"
Searching for "/usr/share/nvim/site/after/pack/*/start/*/scripts.vim"
Searching for "/usr/local/share/nvim/site/after/pack/*/start/*/scripts.vim"
Searching for "/Users/andrewgu/.local/share/nvim/site/after/pack/*/start/*/scripts.vim"
Searching for "/etc/xdg/nvim/after/pack/*/start/*/scripts.vim"
Searching for "/Users/andrewgu/.config/nvim/after/pack/*/start/*/scripts.vim"
not found in 'packpath': "pack/*/start/*/scripts.vim"
Searching for "start/*/scripts.vim" in "/Users/andrewgu/.config/nvim,/etc/xdg/nvim,/Users/andrewgu/.local/share/nvim/site,/usr/local/share/nvim/site,/usr/share/nvim/site,/usr/local/Cellar/neovim/0.5.0/share/nvim/runtime,/usr/local/Cellar/neovim/0.5.0/lib/nvim,/usr/share/nvim/site/after,/usr/local/share/nvim/site/after,/Users/andrewgu/.local/share/nvim/site/after,/etc/xdg/nvim/after,/Users/andrewgu/.config/nvim/after"
Searching for "/Users/andrewgu/.config/nvim/start/*/scripts.vim"
Searching for "/etc/xdg/nvim/start/*/scripts.vim"
Searching for "/Users/andrewgu/.local/share/nvim/site/start/*/scripts.vim"
Searching for "/usr/local/share/nvim/site/start/*/scripts.vim"
Searching for "/usr/share/nvim/site/start/*/scripts.vim"
Searching for "/usr/local/Cellar/neovim/0.5.0/share/nvim/runtime/start/*/scripts.vim"
Searching for "/usr/local/Cellar/neovim/0.5.0/lib/nvim/start/*/scripts.vim"
Searching for "/usr/share/nvim/site/after/start/*/scripts.vim"
Searching for "/usr/local/share/nvim/site/after/start/*/scripts.vim"
Searching for "/Users/andrewgu/.local/share/nvim/site/after/start/*/scripts.vim"
Searching for "/etc/xdg/nvim/after/start/*/scripts.vim"
Searching for "/Users/andrewgu/.config/nvim/after/start/*/scripts.vim"
not found in 'packpath': "start/*/scripts.vim"
Executing:  endif
Executing BufReadPost Autocommands for "*"
autocommand if !did_filetype() && expand("<amatch>") !~ g:ft_ignore_pat    && (getline(1) =~ '^#' || getline(2) =~ '^#' || getline(3) =~ '^#'^I|| getline(4) =~ '^#' || getline(5) =~ '^#') |   setf FALLBACK conf | endif

Executing: if !did_filetype() && expand("<amatch>") !~ g:ft_ignore_pat    && (getline(1) =~ '^#' || getline(2) =~ '^#' || getline(3) =~ '^#'^I|| getline(4) =~ '^#' || getline(5) =~ '^#') |   setf FALLBACK conf | endif
Executing:    setf FALLBACK conf | endif
Executing:  endif
Executing BufReadPost Autocommands for "*"
Executing BufReadPost Autocommands for "*"
autocommand call <SID>on_buffer_open(expand('<abuf>'))

Executing: call <SID>on_buffer_open(expand('<abuf>'))
calling function <SNR>26_on_buffer_open('3')

line 1:    call luaeval("require'bufferline.jump_mode'.assign_next_letter(_A)", a:abuf)
function <SNR>26_on_buffer_open returning #0

continuing in BufReadPost Autocommands for "*"

Executing BufReadPost Autocommands for "*"
autocommand lua require("gitsigns").attach()

Executing: lua require("gitsigns").attach()
Executing BufReadPost Autocommands for "*"
autocommand call <SID>on_buffer_open(expand('<abuf>'))

Executing: call <SID>on_buffer_open(expand('<abuf>'))
calling function <SNR>26_on_buffer_open('3')

line 1:    call luaeval("require'bufferline.jump_mode'.assign_next_letter(_A)", a:abuf)
function <SNR>26_on_buffer_open returning #0

continuing in BufReadPost Autocommands for "*"

Executing BufReadPost Autocommands for "*"
autocommand lua require("gitsigns").attach()

Executing: lua require("gitsigns").attach()
Executing BufEnter Autocommands for "*"
autocommand sil call s:LocalBrowse(expand("<amatch>"))

Executing: sil call s:LocalBrowse(expand("<amatch>"))
calling function <SNR>16_LocalBrowse('/Users/andrewgu/.config/nvim/vimlo')

line 1:   " Unfortunate interaction -- only DechoMsg debugging calls can be safely used here.
line 2:   " Otherwise, the BufEnter event gets triggered when attempts to write to
line 3:   " the DBG buffer are made.
line 4: 
line 5:   if !exists("s:vimentered")
line 6:    " If s:vimentered doesn't exist, then the VimEnter event hasn't fired.  It will,
line 7:    " and so s:VimEnter() will then be calling this routine, but this time with s:vimentered defined.
line 8: "   call Dfunc("s:LocalBrowse(dirname<".a:dirname.">)  (s:vimentered doesn't exist)")
line 9: "   call Dret("s:LocalBrowse")
line 10:    return
line 11:   endif
line 12: 
line 13: "  call Dfunc("s:LocalBrowse(dirname<".a:dirname.">)  (s:vimentered=".s:vimentered.")")
line 14: 
line 15:   if has("amiga")
line 16:    " The check against '' is made for the Amiga, where the empty
line 17:    " string is the current directory and not checking would break
line 18:    " things such as the help command.
line 19: "   call Decho("(LocalBrowse) dirname<".a:dirname.">  (isdirectory, amiga)")
line 20:    if a:dirname != '' && isdirectory(a:dirname)
line 21:     sil! call netrw#LocalBrowseCheck(a:dirname)
line 22:     if exists("w:netrw_bannercnt") && line('.') < w:netrw_bannercnt
line 23:      exe w:netrw_bannercnt
line 24:     endif
line 25:    endif
line 26: 
line 27:   elseif isdirectory(a:dirname)
line 28: "   call Decho("(LocalBrowse) dirname<".a:dirname."> ft=".&ft."  (isdirectory, not amiga)")
line 29: "   call Dredir("LocalBrowse ft last set: ","verbose set ft")
line 30:    sil! call netrw#LocalBrowseCheck(a:dirname)
line 31:    if exists("w:netrw_bannercnt") && line('.') < w:netrw_bannercnt
line 32:     exe w:netrw_bannercnt
line 33:    endif
line 34: 
line 35:   else
line 36:    " not a directory, ignore it
line 37: "   call Decho("(LocalBrowse) dirname<".a:dirname."> not a directory, ignoring...")
line 38:   endif
line 39: 
line 40: "  call Dret("s:LocalBrowse")
function <SNR>16_LocalBrowse returning #0

continuing in BufEnter Autocommands for "*"

Executing BufEnter Autocommands for "*"
autocommand set statusline<

Executing: set statusline<
Executing BufEnter Autocommands for "*"
autocommand :lua require("nvim-autopairs").on_attach()

Executing: :lua require("nvim-autopairs").on_attach()
Executing BufEnter Autocommands for "*"
autocommand call bufferline#update()

Executing: call bufferline#update()
calling function bufferline#update()

line 1:    let new_value = bufferline#render(a:0 > 0 ? a:1 : v:false)
calling function bufferline#update[1]..bufferline#render(v:false)

line 1:    let result = luaeval("require'bufferline.render'.render_safe(_A)", a:update_names)
calling function bufferline#update[1]..bufferline#render[1]..bufferline#filter('&buflisted')

line 1:     let list = []
line 2:     for line in split(execute('ls!'), "\n")
line 2: ls!
  1 #    "."                            line 1
  2u a-  "NvimTree"                     line 0
  3 %a   "~/.config/nvim/vimlo"         line 1
line 3:         call add(list, 0+matchstr(line, '\v\d+'))
line 4:     endfor
line 2:     for line in split(execute('ls!'), "\n")
line 3:         call add(list, 0+matchstr(line, '\v\d+'))
line 4:     endfor
line 2:     for line in split(execute('ls!'), "\n")
line 3:         call add(list, 0+matchstr(line, '\v\d+'))
line 4:     endfor
line 2:     for line in split(execute('ls!'), "\n")
line 3:         call add(list, 0+matchstr(line, '\v\d+'))
line 4:     endfor
line 2:     for line in split(execute('ls!'), "\n")
line 3:         call add(list, 0+matchstr(line, '\v\d+'))
line 4:     endfor
line 5:     for a_expr in a:000
line 6:         let expr = a_expr
line 7:         let expr = substitute(expr, '&\w\+', 'getbufvar(v:val, "\0")', 'g')
line 8:         call filter(list, expr)
line 9:     endfor
line 5:     for a_expr in a:000
line 6:         let expr = a_expr
line 7:         let expr = substitute(expr, '&\w\+', 'getbufvar(v:val, "\0")', 'g')
line 8:         call filter(list, expr)
line 9:     endfor
line 10:     return list
function bufferline#update[1]..bufferline#render[1]..bufferline#filter returning [1, 3]

continuing in function bufferline#update[1]..bufferline#render

line 2: 
line 3:    if result[0]
line 4:       return result[1]
function bufferline#update[1]..bufferline#render returning '%1@BufferlineMainClickHandler@%#Buffe...ufferTabpageFill#▎%#BufferTabpageFill#'

continuing in function bufferline#update

line 2:    if new_value == s:last_tabline
line 3:       return
line 4:    end
line 5:    let &tabline = new_value
line 6:    let s:last_tabline = new_value
function bufferline#update returning #0

continuing in BufEnter Autocommands for "*"

Executing BufEnter Autocommands for "*"
autocommand lua require'nvim-tree'.buf_enter()

Executing: lua require'nvim-tree'.buf_enter()
Executing BufEnter Autocommands for "*"
autocommand lua require'lualine.components.branch'.update_branch()

Executing: lua require'lualine.components.branch'.update_branch()
Executing BufWinEnter Autocommands for "*"
autocommand set statusline<

Executing: set statusline<
Executing BufWinEnter Autocommands for "*"
autocommand call bufferline#update()

Executing: call bufferline#update()
calling function bufferline#update()

line 1:    let new_value = bufferline#render(a:0 > 0 ? a:1 : v:false)
calling function bufferline#update[1]..bufferline#render(v:false)

line 1:    let result = luaeval("require'bufferline.render'.render_safe(_A)", a:update_names)
calling function bufferline#update[1]..bufferline#render[1]..bufferline#filter('&buflisted')

line 1:     let list = []
line 2:     for line in split(execute('ls!'), "\n")
line 2: ls!
  1 #    "."                            line 1
  2u a-  "NvimTree"                     line 0
  3 %a   "~/.config/nvim/vimlo"         line 1
line 3:         call add(list, 0+matchstr(line, '\v\d+'))
line 4:     endfor
line 2:     for line in split(execute('ls!'), "\n")
line 3:         call add(list, 0+matchstr(line, '\v\d+'))
line 4:     endfor
line 2:     for line in split(execute('ls!'), "\n")
line 3:         call add(list, 0+matchstr(line, '\v\d+'))
line 4:     endfor
line 2:     for line in split(execute('ls!'), "\n")
line 3:         call add(list, 0+matchstr(line, '\v\d+'))
line 4:     endfor
line 2:     for line in split(execute('ls!'), "\n")
line 3:         call add(list, 0+matchstr(line, '\v\d+'))
line 4:     endfor
line 5:     for a_expr in a:000
line 6:         let expr = a_expr
line 7:         let expr = substitute(expr, '&\w\+', 'getbufvar(v:val, "\0")', 'g')
line 8:         call filter(list, expr)
line 9:     endfor
line 5:     for a_expr in a:000
line 6:         let expr = a_expr
line 7:         let expr = substitute(expr, '&\w\+', 'getbufvar(v:val, "\0")', 'g')
line 8:         call filter(list, expr)
line 9:     endfor
line 10:     return list
function bufferline#update[1]..bufferline#render[1]..bufferline#filter returning [1, 3]

continuing in function bufferline#update[1]..bufferline#render

line 2: 
line 3:    if result[0]
line 4:       return result[1]
function bufferline#update[1]..bufferline#render returning '%1@BufferlineMainClickHandler@%#Buffe...ufferTabpageFill#▎%#BufferTabpageFill#'

continuing in function bufferline#update

line 2:    if new_value == s:last_tabline
line 3:       return
function bufferline#update returning #0

continuing in BufWinEnter Autocommands for "*"

Executing BufWinEnter Autocommands for "*"
autocommand IndentBlanklineRefresh

Executing: IndentBlanklineRefresh
Executing: call s:try('lua require("indent_blankline.commands").refresh("" == "!")')
calling function <SNR>29_try('lua require("indent_blankline.commands").refresh("" == "!")')

line 1:     try
line 2:         execute a:cmd
line 2: lua require("indent_blankline.commands").refresh("" == "!")
Executing: call indent_blankline#Refresh()
calling function indent_blankline#Refresh()

line 1:     try
line 2:         lua require("indent_blankline").refresh()
calling function indent_blankline#Refresh[2]..indent_blankline#helper#GetListChar('eol', '')

line 1:     let l:list_chars = {}
line 2: 
line 3:     for l:char in split(&listchars, ',')
line 4:         let l:split = split(l:char, ':')
line 5:         let l:list_chars[l:split[0]] = l:split[1]
line 6:     endfor
line 3:     for l:char in split(&listchars, ',')
line 4:         let l:split = split(l:char, ':')
line 5:         let l:list_chars[l:split[0]] = l:split[1]
line 6:     endfor
line 3:     for l:char in split(&listchars, ',')
line 4:         let l:split = split(l:char, ':')
line 5:         let l:list_chars[l:split[0]] = l:split[1]
line 6:     endfor
line 3:     for l:char in split(&listchars, ',')
line 4:         let l:split = split(l:char, ':')
line 5:         let l:list_chars[l:split[0]] = l:split[1]
line 6:     endfor
line 7: 
line 8:     return get(l:list_chars, a:key, a:fallback)
function indent_blankline#Refresh[2]..indent_blankline#helper#GetListChar returning ''

continuing in function indent_blankline#Refresh

line 3:     catch /E12/
line 4:         return
line 5:     catch
line 6:         if g:indent_blankline_debug
line 7:             echohl Error
line 8:             echom 'indent-blankline encountered an error on refresh: ' . v:exception
line 9:             echohl None
line 10:         endif
line 11:     endtry
function indent_blankline#Refresh returning #0

continuing in nvim_exec() called at function <SNR>29_try:2

line 3:     catch /E12/
line 4:         return
line 5:     endtry
function <SNR>29_try returning #0

continuing in BufWinEnter Autocommands for "*"

Executing BufWinEnter Autocommands for "*"
autocommand lua require'nvim-tree.view'._prevent_buffer_override()

Executing: lua require'nvim-tree.view'._prevent_buffer_override()
Executing: unlet! b:keymap_name
chdir(/Users/andrewgu/.config/nvim)
chdir(/Users/andrewgu/.config/nvim)
chdir(/Users/andrewgu/.config/nvim)
chdir(/Users/andrewgu/.config/nvim)
chdir(/Users/andrewgu/.config/nvim)
chdir(/Users/andrewgu/.config/nvim)
Executing WinScrolled Autocommands for "*"
autocommand IndentBlanklineRefresh

Executing: IndentBlanklineRefresh
Executing: call s:try('lua require("indent_blankline.commands").refresh("" == "!")')
calling function <SNR>29_try('lua require("indent_blankline.commands").refresh("" == "!")')

line 1:     try
line 2:         execute a:cmd
line 2: lua require("indent_blankline.commands").refresh("" == "!")
Executing: call indent_blankline#Refresh()
calling function indent_blankline#Refresh()

line 1:     try
line 2:         lua require("indent_blankline").refresh()
calling function indent_blankline#Refresh[2]..indent_blankline#helper#GetListChar('eol', '')

line 1:     let l:list_chars = {}
line 2: 
line 3:     for l:char in split(&listchars, ',')
line 4:         let l:split = split(l:char, ':')
line 5:         let l:list_chars[l:split[0]] = l:split[1]
line 6:     endfor
line 3:     for l:char in split(&listchars, ',')
line 4:         let l:split = split(l:char, ':')
line 5:         let l:list_chars[l:split[0]] = l:split[1]
line 6:     endfor
line 3:     for l:char in split(&listchars, ',')
line 4:         let l:split = split(l:char, ':')
line 5:         let l:list_chars[l:split[0]] = l:split[1]
line 6:     endfor
line 3:     for l:char in split(&listchars, ',')
line 4:         let l:split = split(l:char, ':')
line 5:         let l:list_chars[l:split[0]] = l:split[1]
line 6:     endfor
line 7: 
line 8:     return get(l:list_chars, a:key, a:fallback)
function indent_blankline#Refresh[2]..indent_blankline#helper#GetListChar returning ''

continuing in function indent_blankline#Refresh

line 3:     catch /E12/
line 4:         return
line 5:     catch
line 6:         if g:indent_blankline_debug
line 7:             echohl Error
line 8:             echom 'indent-blankline encountered an error on refresh: ' . v:exception
line 9:             echohl None
line 10:         endif
line 11:     endtry
function indent_blankline#Refresh returning #0

continuing in nvim_exec() called at function <SNR>29_try:2

line 3:     catch /E12/
line 4:         return
line 5:     endtry
function <SNR>29_try returning #0

continuing in WinScrolled Autocommands for "*"

Searching for "autoload/bufferline/animate.vim" in "/Users/andrewgu/.config/nvim,/etc/xdg/nvim,/Users/andrewgu/.local/share/nvim/site,/Users/andrewgu/.local/share/nvim/site/pack/packer/opt/nvim-treesitter,/Users/andrewgu/.local/share/nvim/site/pack/packer/opt/nvim-colorizer.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/telescope.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/popup.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/plenary.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/packer.nvim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-web-devicons,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-tree.lua,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-lspconfig,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-compe,/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-base16.lua,/Users/andrewgu/.local/share/nvim/site
Searching for "/Users/andrewgu/.config/nvim/autoload/bufferline/animate.vim"
Searching for "/etc/xdg/nvim/autoload/bufferline/animate.vim"
Searching for "/Users/andrewgu/.local/share/nvim/site/autoload/bufferline/animate.vim"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/opt/nvim-treesitter/autoload/bufferline/animate.vim"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/opt/nvim-colorizer.lua/autoload/bufferline/animate.vim"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/telescope.nvim/autoload/bufferline/animate.vim"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/popup.nvim/autoload/bufferline/animate.vim"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/plenary.nvim/autoload/bufferline/animate.vim"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/packer.nvim/autoload/bufferline/animate.vim"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/onedark.vim/autoload/bufferline/animate.vim"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-web-devicons/autoload/bufferline/animate.vim"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-tree.lua/autoload/bufferline/animate.vim"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-lspconfig/autoload/bufferline/animate.vim"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-compe/autoload/bufferline/animate.vim"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-base16.lua/autoload/bufferline/animate.vim"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/nvim-autopairs/autoload/bufferline/animate.vim"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/neoformat/autoload/bufferline/animate.vim"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/lualine.nvim/autoload/bufferline/animate.vim"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/indent-blankline.nvim/autoload/bufferline/animate.vim"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/gitsigns.nvim/autoload/bufferline/animate.vim"
Searching for "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/barbar.nvim/autoload/bufferline/animate.vim"
chdir(/Users/andrewgu/.config/nvim)
chdir(/Users/andrewgu/.local/share/nvim/site/pack/packer/start/barbar.nvim/autoload/bufferline)
chdir(/Users/andrewgu/.config/nvim)
sourcing "/Users/andrewgu/.local/share/nvim/site/pack/packer/start/barbar.nvim/autoload/bufferline/animate.vim"
line 1: 
line 2: let g:bufferline_animation_frequency = 50
line 3:     " \ get(g:, 'bufferline_animation_frequency', 2000)
line 4: 
line 5: function! bufferline#animate#start(duration, initial, final, type, Fn)
line 31: 
line 32: function! s:animate_tick(timer, state)
line 61: 
line 62: function! bufferline#animate#stop(state)
line 65: 
line 66: function! bufferline#animate#lerp(ratio, initial, final, ...)
line 76: 
line 77: 
finished sourcing /Users/andrewgu/.local/share/nvim/site/pack/packer/start/barbar.nvim/autoload/bufferline/animate.vim
calling function bufferline#animate#start(150, 1, 16, 0, function('<lambda>2'))

line 1:   let duration = a:duration
line 2:   let initial  = a:initial
line 3:   let final    = a:final
line 4:   let type     = a:type
line 5: 
line 6:   let ticks = (duration / g:bufferline_animation_frequency) + 10
line 7: 
line 8:   let state = {}
line 9:   let state.running = v:true
line 10:   let state.Fn = a:Fn
line 11:   let state.type = type
line 12:   let state.step = (final - initial) / ticks
line 13:   let state.duration = duration
line 14:   let state.current = initial
line 15:   let state.initial = initial
line 16:   let state.final = final
line 17:   let state.start = reltime()
line 18:   let state.timer = timer_start( g:bufferline_animation_frequency, {timer -> s:animate_tick(timer, state)}, { 'repeat': ticks })
line 22: 
line 23:   call state.Fn(state.current, state)
calling function bufferline#animate#start[23]..bufferline#update()

line 1:    let new_value = bufferline#render(a:0 > 0 ? a:1 : v:false)
calling function bufferline#animate#start[23]..bufferline#update[1]..bufferline#render(v:false)

line 1:    let result = luaeval("require'bufferline.render'.render_safe(_A)", a:update_names)
calling function bufferline#animate#start[23]..bufferline#update[1]..bufferline#render[1]..bufferline#filter('&buflisted')

line 1:     let list = []
line 2:     for line in split(execute('ls!'), "\n")
line 2: ls!
  1 #    "."                            line 1
  2u a-  "NvimTree"                     line 0
  3 %a   "~/.config/nvim/vimlo"         line 1
line 3:         call add(list, 0+matchstr(line, '\v\d+'))
line 4:     endfor
line 2:     for line in split(execute('ls!'), "\n")
line 3:         call add(list, 0+matchstr(line, '\v\d+'))
line 4:     endfor
line 2:     for line in split(execute('ls!'), "\n")
line 3:         call add(list, 0+matchstr(line, '\v\d+'))
line 4:     endfor
line 2:     for line in split(execute('ls!'), "\n")
line 3:         call add(list, 0+matchstr(line, '\v\d+'))
line 4:     endfor
line 2:     for line in split(execute('ls!'), "\n")
line 3:         call add(list, 0+matchstr(line, '\v\d+'))
line 4:     endfor
line 5:     for a_expr in a:000
line 6:         let expr = a_expr
line 7:         let expr = substitute(expr, '&\w\+', 'getbufvar(v:val, "\0")', 'g')
line 8:         call filter(list, expr)
line 9:     endfor
line 5:     for a_expr in a:000
line 6:         let expr = a_expr
line 7:         let expr = substitute(expr, '&\w\+', 'getbufvar(v:val, "\0")', 'g')
line 8:         call filter(list, expr)
line 9:     endfor
line 10:     return list
function bufferline#animate#start[23]..bufferline#update[1]..bufferline#render[1]..bufferline#filter returning [1, 3]

continuing in function bufferline#animate#start[23]..bufferline#update[1]..bufferline#render

line 2: 
line 3:    if result[0]
line 4:       return result[1]
function bufferline#animate#start[23]..bufferline#update[1]..bufferline#render returning '%1@BufferlineMainClickHandler@%#Buffe...ufferTabpageFill#▎%#BufferTabpageFill#'

continuing in function bufferline#animate#start[23]..bufferline#update

line 2:    if new_value == s:last_tabline
line 3:       return
function bufferline#animate#start[23]..bufferline#update returning #0

continuing in function bufferline#animate#start

line 24:   return state
function bufferline#animate#start returning {'step': 1, 'duration': 150, 'initial'...: v:true, 'start': [45235, -928144152]}

calling function <lambda>3(2)

calling function <lambda>3[1]..<SNR>51_animate_tick(2, {'step': 1, 'duration': 150, 'initial'...: v:true, 'start': [45235, -928144152]})

line 1:   let state = a:state
line 2: 
line 3:   " Alternative to finding current value:
line 4:   "
line 5:   "   let state.current += state.step
line 6:   "   call state.Fn(a:timer, current)
line 7:   "
line 8:   " The reason why I go the long way (below) is because
line 9:   " the timer callback might not be called exactly on time,
line 10:   " therefore relying on the current time to find the current
line 11:   " value is more reliable. It also ensure we end the animation
line 12:   " on time, because we know if we have run for too long.
line 13: 
line 14:   let duration = state.duration
line 15:   let elapsed = reltimefloat(reltime(state.start)) * 1000
line 16:   let ratio = elapsed / duration
line 17: 
line 18:   " We're still good here
line 19:   if ratio < 1
line 20:     let current = bufferline#animate#lerp(ratio, state.initial, state.final, state.type)
calling function <lambda>3[1]..<SNR>51_animate_tick[20]..bufferline#animate#lerp(0.327035, 1, 16, 0)

line 1:   let type = a:0 > 0 ? a:000[0] : v:t_number
line 2: 
line 3:   let range = a:final - a:initial
line 4:   let delta = type == v:t_number ? float2nr(a:ratio * range) :          a:ratio * range
line 7: 
line 8:   return a:initial + delta
function <lambda>3[1]..<SNR>51_animate_tick[20]..bufferline#animate#lerp returning #5

continuing in function <lambda>3[1]..<SNR>51_animate_tick

line 21:     call state.Fn(current, state)
calling function <lambda>3[1]..<SNR>51_animate_tick[21]..bufferline#update()

line 1:    let new_value = bufferline#render(a:0 > 0 ? a:1 : v:false)
calling function <lambda>3[1]..<SNR>51_animate_tick[21]..bufferline#update[1]..bufferline#render(v:false)

line 1:    let result = luaeval("require'bufferline.render'.render_safe(_A)", a:update_names)
calling function <lambda>3[1]..<SNR>51_animate_tick[21]..bufferline#update[1]..bufferline#render[1]..bufferline#filter('&buflisted')

line 1:     let list = []
line 2:     for line in split(execute('ls!'), "\n")
line 2: ls!
  1 #    "."                            line 1
  2u a-  "NvimTree"                     line 0
  3 %a   "~/.config/nvim/vimlo"         line 1
line 3:         call add(list, 0+matchstr(line, '\v\d+'))
line 4:     endfor
line 2:     for line in split(execute('ls!'), "\n")
line 3:         call add(list, 0+matchstr(line, '\v\d+'))
line 4:     endfor
line 2:     for line in split(execute('ls!'), "\n")
line 3:         call add(list, 0+matchstr(line, '\v\d+'))
line 4:     endfor
line 2:     for line in split(execute('ls!'), "\n")
line 3:         call add(list, 0+matchstr(line, '\v\d+'))
line 4:     endfor
line 2:     for line in split(execute('ls!'), "\n")
line 3:         call add(list, 0+matchstr(line, '\v\d+'))
line 4:     endfor
line 5:     for a_expr in a:000
line 6:         let expr = a_expr
line 7:         let expr = substitute(expr, '&\w\+', 'getbufvar(v:val, "\0")', 'g')
line 8:         call filter(list, expr)
line 9:     endfor
line 5:     for a_expr in a:000
line 6:         let expr = a_expr
line 7:         let expr = substitute(expr, '&\w\+', 'getbufvar(v:val, "\0")', 'g')
line 8:         call filter(list, expr)
line 9:     endfor
line 10:     return list
function <lambda>3[1]..<SNR>51_animate_tick[21]..bufferline#update[1]..bufferline#render[1]..bufferline#filter returning [1, 3]

continuing in function <lambda>3[1]..<SNR>51_animate_tick[21]..bufferline#update[1]..bufferline#render

line 2: 
line 3:    if result[0]
line 4:       return result[1]
function <lambda>3[1]..<SNR>51_animate_tick[21]..bufferline#update[1]..bufferline#render returning '%1@BufferlineMainClickHandler@%#Buffe...ufferTabpageFill#▎%#BufferTabpageFill#'

continuing in function <lambda>3[1]..<SNR>51_animate_tick[21]..bufferline#update

line 2:    if new_value == s:last_tabline
line 3:       return
line 4:    end
line 5:    let &tabline = new_value
line 6:    let s:last_tabline = new_value
function <lambda>3[1]..<SNR>51_animate_tick[21]..bufferline#update returning #0

continuing in function <lambda>3[1]..<SNR>51_animate_tick

line 22:   else
line 23:   " Went overtime, stop the animation!
line 24:     let state.running = v:false
line 25:     call state.Fn(state.final, state)
line 26:     call timer_stop(a:timer)
line 27:   end
function <lambda>3[1]..<SNR>51_animate_tick returning #0

continuing in function <lambda>3

function <lambda>3 returning #0

calling function <lambda>3(2)

calling function <lambda>3[1]..<SNR>51_animate_tick(2, {'step': 1, 'duration': 150, 'initial'...: v:true, 'start': [45235, -928144152]})

line 1:   let state = a:state
line 2: 
line 3:   " Alternative to finding current value:
line 4:   "
line 5:   "   let state.current += state.step
line 6:   "   call state.Fn(a:timer, current)
line 7:   "
line 8:   " The reason why I go the long way (below) is because
line 9:   " the timer callback might not be called exactly on time,
line 10:   " therefore relying on the current time to find the current
line 11:   " value is more reliable. It also ensure we end the animation
line 12:   " on time, because we know if we have run for too long.
line 13: 
line 14:   let duration = state.duration
line 15:   let elapsed = reltimefloat(reltime(state.start)) * 1000
line 16:   let ratio = elapsed / duration
line 17: 
line 18:   " We're still good here
line 19:   if ratio < 1
line 20:     let current = bufferline#animate#lerp(ratio, state.initial, state.final, state.type)
calling function <lambda>3[1]..<SNR>51_animate_tick[20]..bufferline#animate#lerp(0.684713, 1, 16, 0)

line 1:   let type = a:0 > 0 ? a:000[0] : v:t_number
line 2: 
line 3:   let range = a:final - a:initial
line 4:   let delta = type == v:t_number ? float2nr(a:ratio * range) :          a:ratio * range
line 7: 
line 8:   return a:initial + delta
function <lambda>3[1]..<SNR>51_animate_tick[20]..bufferline#animate#lerp returning #11

continuing in function <lambda>3[1]..<SNR>51_animate_tick

line 21:     call state.Fn(current, state)
calling function <lambda>3[1]..<SNR>51_animate_tick[21]..bufferline#update()

line 1:    let new_value = bufferline#render(a:0 > 0 ? a:1 : v:false)
calling function <lambda>3[1]..<SNR>51_animate_tick[21]..bufferline#update[1]..bufferline#render(v:false)

line 1:    let result = luaeval("require'bufferline.render'.render_safe(_A)", a:update_names)
calling function <lambda>3[1]..<SNR>51_animate_tick[21]..bufferline#update[1]..bufferline#render[1]..bufferline#filter('&buflisted')

line 1:     let list = []
line 2:     for line in split(execute('ls!'), "\n")
line 2: ls!
  1 #    "."                            line 1
  2u a-  "NvimTree"                     line 0
  3 %a   "~/.config/nvim/vimlo"         line 1
line 3:         call add(list, 0+matchstr(line, '\v\d+'))
line 4:     endfor
line 2:     for line in split(execute('ls!'), "\n")
line 3:         call add(list, 0+matchstr(line, '\v\d+'))
line 4:     endfor
line 2:     for line in split(execute('ls!'), "\n")
line 3:         call add(list, 0+matchstr(line, '\v\d+'))
line 4:     endfor
line 2:     for line in split(execute('ls!'), "\n")
line 3:         call add(list, 0+matchstr(line, '\v\d+'))
line 4:     endfor
line 2:     for line in split(execute('ls!'), "\n")
line 3:         call add(list, 0+matchstr(line, '\v\d+'))
line 4:     endfor
line 5:     for a_expr in a:000
line 6:         let expr = a_expr
line 7:         let expr = substitute(expr, '&\w\+', 'getbufvar(v:val, "\0")', 'g')
line 8:         call filter(list, expr)
line 9:     endfor
line 5:     for a_expr in a:000
line 6:         let expr = a_expr
line 7:         let expr = substitute(expr, '&\w\+', 'getbufvar(v:val, "\0")', 'g')
line 8:         call filter(list, expr)
line 9:     endfor
line 10:     return list
function <lambda>3[1]..<SNR>51_animate_tick[21]..bufferline#update[1]..bufferline#render[1]..bufferline#filter returning [1, 3]

continuing in function <lambda>3[1]..<SNR>51_animate_tick[21]..bufferline#update[1]..bufferline#render

line 2: 
line 3:    if result[0]
line 4:       return result[1]
function <lambda>3[1]..<SNR>51_animate_tick[21]..bufferline#update[1]..bufferline#render returning '%1@BufferlineMainClickHandler@%#Buffe...ufferTabpageFill#▎%#BufferTabpageFill#'

continuing in function <lambda>3[1]..<SNR>51_animate_tick[21]..bufferline#update

line 2:    if new_value == s:last_tabline
line 3:       return
line 4:    end
line 5:    let &tabline = new_value
line 6:    let s:last_tabline = new_value
function <lambda>3[1]..<SNR>51_animate_tick[21]..bufferline#update returning #0

continuing in function <lambda>3[1]..<SNR>51_animate_tick

line 22:   else
line 23:   " Went overtime, stop the animation!
line 24:     let state.running = v:false
line 25:     call state.Fn(state.final, state)
line 26:     call timer_stop(a:timer)
line 27:   end
function <lambda>3[1]..<SNR>51_animate_tick returning #0

continuing in function <lambda>3

function <lambda>3 returning #0

calling function <lambda>3(2)

calling function <lambda>3[1]..<SNR>51_animate_tick(2, {'step': 1, 'duration': 150, 'initial'...: v:true, 'start': [45235, -928144152]})

line 1:   let state = a:state
line 2: 
line 3:   " Alternative to finding current value:
line 4:   "
line 5:   "   let state.current += state.step
line 6:   "   call state.Fn(a:timer, current)
line 7:   "
line 8:   " The reason why I go the long way (below) is because
line 9:   " the timer callback might not be called exactly on time,
line 10:   " therefore relying on the current time to find the current
line 11:   " value is more reliable. It also ensure we end the animation
line 12:   " on time, because we know if we have run for too long.
line 13: 
line 14:   let duration = state.duration
line 15:   let elapsed = reltimefloat(reltime(state.start)) * 1000
line 16:   let ratio = elapsed / duration
line 17: 
line 18:   " We're still good here
line 19:   if ratio < 1
line 20:     let current = bufferline#animate#lerp(ratio, state.initial, state.final, state.type)
line 21:     call state.Fn(current, state)
line 22:   else
line 23:   " Went overtime, stop the animation!
line 24:     let state.running = v:false
line 25:     call state.Fn(state.final, state)
calling function <lambda>3[1]..<SNR>51_animate_tick[25]..bufferline#update()

line 1:    let new_value = bufferline#render(a:0 > 0 ? a:1 : v:false)
calling function <lambda>3[1]..<SNR>51_animate_tick[25]..bufferline#update[1]..bufferline#render(v:false)

line 1:    let result = luaeval("require'bufferline.render'.render_safe(_A)", a:update_names)
calling function <lambda>3[1]..<SNR>51_animate_tick[25]..bufferline#update[1]..bufferline#render[1]..bufferline#filter('&buflisted')

line 1:     let list = []
line 2:     for line in split(execute('ls!'), "\n")
line 2: ls!
  1 #    "."                            line 1
  2u a-  "NvimTree"                     line 0
  3 %a   "~/.config/nvim/vimlo"         line 1
line 3:         call add(list, 0+matchstr(line, '\v\d+'))
line 4:     endfor
line 2:     for line in split(execute('ls!'), "\n")
line 3:         call add(list, 0+matchstr(line, '\v\d+'))
line 4:     endfor
line 2:     for line in split(execute('ls!'), "\n")
line 3:         call add(list, 0+matchstr(line, '\v\d+'))
line 4:     endfor
line 2:     for line in split(execute('ls!'), "\n")
line 3:         call add(list, 0+matchstr(line, '\v\d+'))
line 4:     endfor
line 2:     for line in split(execute('ls!'), "\n")
line 3:         call add(list, 0+matchstr(line, '\v\d+'))
line 4:     endfor
line 5:     for a_expr in a:000
line 6:         let expr = a_expr
line 7:         let expr = substitute(expr, '&\w\+', 'getbufvar(v:val, "\0")', 'g')
line 8:         call filter(list, expr)
line 9:     endfor
line 5:     for a_expr in a:000
line 6:         let expr = a_expr
line 7:         let expr = substitute(expr, '&\w\+', 'getbufvar(v:val, "\0")', 'g')
line 8:         call filter(list, expr)
line 9:     endfor
line 10:     return list
function <lambda>3[1]..<SNR>51_animate_tick[25]..bufferline#update[1]..bufferline#render[1]..bufferline#filter returning [1, 3]

continuing in function <lambda>3[1]..<SNR>51_animate_tick[25]..bufferline#update[1]..bufferline#render

line 2: 
line 3:    if result[0]
line 4:       return result[1]
function <lambda>3[1]..<SNR>51_animate_tick[25]..bufferline#update[1]..bufferline#render returning '%1@BufferlineMainClickHandler@%#Buffe...ufferTabpageFill#▎%#BufferTabpageFill#'

continuing in function <lambda>3[1]..<SNR>51_animate_tick[25]..bufferline#update

line 2:    if new_value == s:last_tabline
line 3:       return
line 4:    end
line 5:    let &tabline = new_value
line 6:    let s:last_tabline = new_value
function <lambda>3[1]..<SNR>51_animate_tick[25]..bufferline#update returning #0

continuing in function <lambda>3[1]..<SNR>51_animate_tick

line 26:     call timer_stop(a:timer)
line 27:   end
function <lambda>3[1]..<SNR>51_animate_tick returning #0

continuing in function <lambda>3

function <lambda>3 returning #0

/packer                                                                                                                                                                                                                                          

/packer                                                                                                                                                                                                                                   [1/>99]
Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling function <SNR>15_Highlight_Matching_Pair()

line 1:   " Remove any previous match.
line 2:   call s:Remove_Matches()
calling function <SNR>15_Highlight_Matching_Pair[2]..<SNR>15_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     silent! call matchdelete(3)
line 3:     let w:paren_hl_on = 0
line 4:   endif
function <SNR>15_Highlight_Matching_Pair[2]..<SNR>15_Remove_Matches returning #0

continuing in function <SNR>15_Highlight_Matching_Pair

line 3: 
line 4:   " Avoid that we remove the popup menu.
line 5:   " Return when there are no colors (looks like the cursor jumps).
line 6:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 7:     return
line 8:   endif
line 9: 
line 10:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 11:   let c_lnum = line('.')
line 12:   let c_col = col('.')
line 13:   let before = 0
line 14: 
line 15:   let text = getline(c_lnum)
line 16:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 17:   if empty(matches)
line 18:     let [c_before, c] = ['', '']
line 19:   else
line 20:     let [c_before, c] = matches[1:2]
line 21:   endif
line 22:   let plist = split(&matchpairs, '.\zs[:,]')
line 23:   let i = index(plist, c)
line 24:   if i < 0
line 25:     " not found, in Insert mode try character before the cursor
line 26:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 27:       let before = strlen(c_before)
line 28:       let c = c_before
line 29:       let i = index(plist, c)
line 30:     endif
line 31:     if i < 0
line 32:       " not found, nothing to do
line 33:       return
function <SNR>15_Highlight_Matching_Pair returning #0

continuing in CursorMoved Autocommands for "*"

/packer                                                                                                                                                                                                                                   [1/>99]
/packer                                                                                                                                                                                                                                          

/packer                                                                                                                                                                                                                                   [2/>99]
Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling function <SNR>15_Highlight_Matching_Pair()

line 1:   " Remove any previous match.
line 2:   call s:Remove_Matches()
calling function <SNR>15_Highlight_Matching_Pair[2]..<SNR>15_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     silent! call matchdelete(3)
line 3:     let w:paren_hl_on = 0
line 4:   endif
function <SNR>15_Highlight_Matching_Pair[2]..<SNR>15_Remove_Matches returning #0

continuing in function <SNR>15_Highlight_Matching_Pair

line 3: 
line 4:   " Avoid that we remove the popup menu.
line 5:   " Return when there are no colors (looks like the cursor jumps).
line 6:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 7:     return
line 8:   endif
line 9: 
line 10:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 11:   let c_lnum = line('.')
line 12:   let c_col = col('.')
line 13:   let before = 0
line 14: 
line 15:   let text = getline(c_lnum)
line 16:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 17:   if empty(matches)
line 18:     let [c_before, c] = ['', '']
line 19:   else
line 20:     let [c_before, c] = matches[1:2]
line 21:   endif
line 22:   let plist = split(&matchpairs, '.\zs[:,]')
line 23:   let i = index(plist, c)
line 24:   if i < 0
line 25:     " not found, in Insert mode try character before the cursor
line 26:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 27:       let before = strlen(c_before)
line 28:       let c = c_before
line 29:       let i = index(plist, c)
line 30:     endif
line 31:     if i < 0
line 32:       " not found, nothing to do
line 33:       return
function <SNR>15_Highlight_Matching_Pair returning #0

continuing in CursorMoved Autocommands for "*"

/packer                                                                                                                                                                                                                                   [2/>99]
/packer                                                                                                                                                                                                                                          

/packer                                                                                                                                                                                                                                   [3/>99]
Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling function <SNR>15_Highlight_Matching_Pair()

line 1:   " Remove any previous match.
line 2:   call s:Remove_Matches()
calling function <SNR>15_Highlight_Matching_Pair[2]..<SNR>15_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     silent! call matchdelete(3)
line 3:     let w:paren_hl_on = 0
line 4:   endif
function <SNR>15_Highlight_Matching_Pair[2]..<SNR>15_Remove_Matches returning #0

continuing in function <SNR>15_Highlight_Matching_Pair

line 3: 
line 4:   " Avoid that we remove the popup menu.
line 5:   " Return when there are no colors (looks like the cursor jumps).
line 6:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 7:     return
line 8:   endif
line 9: 
line 10:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 11:   let c_lnum = line('.')
line 12:   let c_col = col('.')
line 13:   let before = 0
line 14: 
line 15:   let text = getline(c_lnum)
line 16:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 17:   if empty(matches)
line 18:     let [c_before, c] = ['', '']
line 19:   else
line 20:     let [c_before, c] = matches[1:2]
line 21:   endif
line 22:   let plist = split(&matchpairs, '.\zs[:,]')
line 23:   let i = index(plist, c)
line 24:   if i < 0
line 25:     " not found, in Insert mode try character before the cursor
line 26:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 27:       let before = strlen(c_before)
line 28:       let c = c_before
line 29:       let i = index(plist, c)
line 30:     endif
line 31:     if i < 0
line 32:       " not found, nothing to do
line 33:       return
function <SNR>15_Highlight_Matching_Pair returning #0

continuing in CursorMoved Autocommands for "*"

/packer                                                                                                                                                                                                                                   [3/>99]
/error                                                                                                                                                                                                                                           

/error                                                                                                                                                                                                                                    [1/>99]
Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling function <SNR>15_Highlight_Matching_Pair()

line 1:   " Remove any previous match.
line 2:   call s:Remove_Matches()
calling function <SNR>15_Highlight_Matching_Pair[2]..<SNR>15_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     silent! call matchdelete(3)
line 3:     let w:paren_hl_on = 0
line 4:   endif
function <SNR>15_Highlight_Matching_Pair[2]..<SNR>15_Remove_Matches returning #0

continuing in function <SNR>15_Highlight_Matching_Pair

line 3: 
line 4:   " Avoid that we remove the popup menu.
line 5:   " Return when there are no colors (looks like the cursor jumps).
line 6:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 7:     return
line 8:   endif
line 9: 
line 10:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 11:   let c_lnum = line('.')
line 12:   let c_col = col('.')
line 13:   let before = 0
line 14: 
line 15:   let text = getline(c_lnum)
line 16:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 17:   if empty(matches)
line 18:     let [c_before, c] = ['', '']
line 19:   else
line 20:     let [c_before, c] = matches[1:2]
line 21:   endif
line 22:   let plist = split(&matchpairs, '.\zs[:,]')
line 23:   let i = index(plist, c)
line 24:   if i < 0
line 25:     " not found, in Insert mode try character before the cursor
line 26:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 27:       let before = strlen(c_before)
line 28:       let c = c_before
line 29:       let i = index(plist, c)
line 30:     endif
line 31:     if i < 0
line 32:       " not found, nothing to do
line 33:       return
function <SNR>15_Highlight_Matching_Pair returning #0

continuing in CursorMoved Autocommands for "*"

Executing WinScrolled Autocommands for "*"
autocommand IndentBlanklineRefresh

Executing: IndentBlanklineRefresh
Executing: call s:try('lua require("indent_blankline.commands").refresh("" == "!")')
calling function <SNR>29_try('lua require("indent_blankline.commands").refresh("" == "!")')

line 1:     try
line 2:         execute a:cmd
line 2: lua require("indent_blankline.commands").refresh("" == "!")
Executing: call indent_blankline#Refresh()
calling function indent_blankline#Refresh()

line 1:     try
line 2:         lua require("indent_blankline").refresh()
calling function indent_blankline#Refresh[2]..indent_blankline#helper#GetListChar('eol', '')

line 1:     let l:list_chars = {}
line 2: 
line 3:     for l:char in split(&listchars, ',')
line 4:         let l:split = split(l:char, ':')
line 5:         let l:list_chars[l:split[0]] = l:split[1]
line 6:     endfor
line 3:     for l:char in split(&listchars, ',')
line 4:         let l:split = split(l:char, ':')
line 5:         let l:list_chars[l:split[0]] = l:split[1]
line 6:     endfor
line 3:     for l:char in split(&listchars, ',')
line 4:         let l:split = split(l:char, ':')
line 5:         let l:list_chars[l:split[0]] = l:split[1]
line 6:     endfor
line 3:     for l:char in split(&listchars, ',')
line 4:         let l:split = split(l:char, ':')
line 5:         let l:list_chars[l:split[0]] = l:split[1]
line 6:     endfor
line 7: 
line 8:     return get(l:list_chars, a:key, a:fallback)
function indent_blankline#Refresh[2]..indent_blankline#helper#GetListChar returning ''

continuing in function indent_blankline#Refresh

line 3:     catch /E12/
line 4:         return
line 5:     catch
line 6:         if g:indent_blankline_debug
line 7:             echohl Error
line 8:             echom 'indent-blankline encountered an error on refresh: ' . v:exception
line 9:             echohl None
line 10:         endif
line 11:     endtry
function indent_blankline#Refresh returning #0

continuing in nvim_exec() called at function <SNR>29_try:2

line 3:     catch /E12/
line 4:         return
line 5:     endtry
function <SNR>29_try returning #0

continuing in WinScrolled Autocommands for "*"

/error                                                                                                                                                                                                                                    [1/>99]
/error                                                                                                                                                                                                                                           

/error                                                                                                                                                                                                                                    [2/>99]
Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling function <SNR>15_Highlight_Matching_Pair()

line 1:   " Remove any previous match.
line 2:   call s:Remove_Matches()
calling function <SNR>15_Highlight_Matching_Pair[2]..<SNR>15_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     silent! call matchdelete(3)
line 3:     let w:paren_hl_on = 0
line 4:   endif
function <SNR>15_Highlight_Matching_Pair[2]..<SNR>15_Remove_Matches returning #0

continuing in function <SNR>15_Highlight_Matching_Pair

line 3: 
line 4:   " Avoid that we remove the popup menu.
line 5:   " Return when there are no colors (looks like the cursor jumps).
line 6:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 7:     return
line 8:   endif
line 9: 
line 10:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 11:   let c_lnum = line('.')
line 12:   let c_col = col('.')
line 13:   let before = 0
line 14: 
line 15:   let text = getline(c_lnum)
line 16:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 17:   if empty(matches)
line 18:     let [c_before, c] = ['', '']
line 19:   else
line 20:     let [c_before, c] = matches[1:2]
line 21:   endif
line 22:   let plist = split(&matchpairs, '.\zs[:,]')
line 23:   let i = index(plist, c)
line 24:   if i < 0
line 25:     " not found, in Insert mode try character before the cursor
line 26:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 27:       let before = strlen(c_before)
line 28:       let c = c_before
line 29:       let i = index(plist, c)
line 30:     endif
line 31:     if i < 0
line 32:       " not found, nothing to do
line 33:       return
function <SNR>15_Highlight_Matching_Pair returning #0

continuing in CursorMoved Autocommands for "*"

/error                                                                                                                                                                                                                                    [2/>99]
/error                                                                                                                                                                                                                                           

/error                                                                                                                                                                                                                                    [3/>99]
Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling function <SNR>15_Highlight_Matching_Pair()

line 1:   " Remove any previous match.
line 2:   call s:Remove_Matches()
calling function <SNR>15_Highlight_Matching_Pair[2]..<SNR>15_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     silent! call matchdelete(3)
line 3:     let w:paren_hl_on = 0
line 4:   endif
function <SNR>15_Highlight_Matching_Pair[2]..<SNR>15_Remove_Matches returning #0

continuing in function <SNR>15_Highlight_Matching_Pair

line 3: 
line 4:   " Avoid that we remove the popup menu.
line 5:   " Return when there are no colors (looks like the cursor jumps).
line 6:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 7:     return
line 8:   endif
line 9: 
line 10:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 11:   let c_lnum = line('.')
line 12:   let c_col = col('.')
line 13:   let before = 0
line 14: 
line 15:   let text = getline(c_lnum)
line 16:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 17:   if empty(matches)
line 18:     let [c_before, c] = ['', '']
line 19:   else
line 20:     let [c_before, c] = matches[1:2]
line 21:   endif
line 22:   let plist = split(&matchpairs, '.\zs[:,]')
line 23:   let i = index(plist, c)
line 24:   if i < 0
line 25:     " not found, in Insert mode try character before the cursor
line 26:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 27:       let before = strlen(c_before)
line 28:       let c = c_before
line 29:       let i = index(plist, c)
line 30:     endif
line 31:     if i < 0
line 32:       " not found, nothing to do
line 33:       return
function <SNR>15_Highlight_Matching_Pair returning #0

continuing in CursorMoved Autocommands for "*"

Executing WinScrolled Autocommands for "*"
autocommand IndentBlanklineRefresh

Executing: IndentBlanklineRefresh
Executing: call s:try('lua require("indent_blankline.commands").refresh("" == "!")')
calling function <SNR>29_try('lua require("indent_blankline.commands").refresh("" == "!")')

line 1:     try
line 2:         execute a:cmd
line 2: lua require("indent_blankline.commands").refresh("" == "!")
Executing: call indent_blankline#Refresh()
calling function indent_blankline#Refresh()

line 1:     try
line 2:         lua require("indent_blankline").refresh()
calling function indent_blankline#Refresh[2]..indent_blankline#helper#GetListChar('eol', '')

line 1:     let l:list_chars = {}
line 2: 
line 3:     for l:char in split(&listchars, ',')
line 4:         let l:split = split(l:char, ':')
line 5:         let l:list_chars[l:split[0]] = l:split[1]
line 6:     endfor
line 3:     for l:char in split(&listchars, ',')
line 4:         let l:split = split(l:char, ':')
line 5:         let l:list_chars[l:split[0]] = l:split[1]
line 6:     endfor
line 3:     for l:char in split(&listchars, ',')
line 4:         let l:split = split(l:char, ':')
line 5:         let l:list_chars[l:split[0]] = l:split[1]
line 6:     endfor
line 3:     for l:char in split(&listchars, ',')
line 4:         let l:split = split(l:char, ':')
line 5:         let l:list_chars[l:split[0]] = l:split[1]
line 6:     endfor
line 7: 
line 8:     return get(l:list_chars, a:key, a:fallback)
function indent_blankline#Refresh[2]..indent_blankline#helper#GetListChar returning ''

continuing in function indent_blankline#Refresh

line 3:     catch /E12/
line 4:         return
line 5:     catch
line 6:         if g:indent_blankline_debug
line 7:             echohl Error
line 8:             echom 'indent-blankline encountered an error on refresh: ' . v:exception
line 9:             echohl None
line 10:         endif
line 11:     endtry
function indent_blankline#Refresh returning #0

continuing in nvim_exec() called at function <SNR>29_try:2

line 3:     catch /E12/
line 4:         return
line 5:     endtry
function <SNR>29_try returning #0

continuing in WinScrolled Autocommands for "*"

/error                                                                                                                                                                                                                                    [3/>99]
/error                                                                                                                                                                                                                                           

/error                                                                                                                                                                                                                                    [4/>99]
Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling function <SNR>15_Highlight_Matching_Pair()

line 1:   " Remove any previous match.
line 2:   call s:Remove_Matches()
calling function <SNR>15_Highlight_Matching_Pair[2]..<SNR>15_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     silent! call matchdelete(3)
line 3:     let w:paren_hl_on = 0
line 4:   endif
function <SNR>15_Highlight_Matching_Pair[2]..<SNR>15_Remove_Matches returning #0

continuing in function <SNR>15_Highlight_Matching_Pair

line 3: 
line 4:   " Avoid that we remove the popup menu.
line 5:   " Return when there are no colors (looks like the cursor jumps).
line 6:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 7:     return
line 8:   endif
line 9: 
line 10:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 11:   let c_lnum = line('.')
line 12:   let c_col = col('.')
line 13:   let before = 0
line 14: 
line 15:   let text = getline(c_lnum)
line 16:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 17:   if empty(matches)
line 18:     let [c_before, c] = ['', '']
line 19:   else
line 20:     let [c_before, c] = matches[1:2]
line 21:   endif
line 22:   let plist = split(&matchpairs, '.\zs[:,]')
line 23:   let i = index(plist, c)
line 24:   if i < 0
line 25:     " not found, in Insert mode try character before the cursor
line 26:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 27:       let before = strlen(c_before)
line 28:       let c = c_before
line 29:       let i = index(plist, c)
line 30:     endif
line 31:     if i < 0
line 32:       " not found, nothing to do
line 33:       return
function <SNR>15_Highlight_Matching_Pair returning #0

continuing in CursorMoved Autocommands for "*"

Executing WinScrolled Autocommands for "*"
autocommand IndentBlanklineRefresh

Executing: IndentBlanklineRefresh
Executing: call s:try('lua require("indent_blankline.commands").refresh("" == "!")')
calling function <SNR>29_try('lua require("indent_blankline.commands").refresh("" == "!")')

line 1:     try
line 2:         execute a:cmd
line 2: lua require("indent_blankline.commands").refresh("" == "!")
Executing: call indent_blankline#Refresh()
calling function indent_blankline#Refresh()

line 1:     try
line 2:         lua require("indent_blankline").refresh()
calling function indent_blankline#Refresh[2]..indent_blankline#helper#GetListChar('eol', '')

line 1:     let l:list_chars = {}
line 2: 
line 3:     for l:char in split(&listchars, ',')
line 4:         let l:split = split(l:char, ':')
line 5:         let l:list_chars[l:split[0]] = l:split[1]
line 6:     endfor
line 3:     for l:char in split(&listchars, ',')
line 4:         let l:split = split(l:char, ':')
line 5:         let l:list_chars[l:split[0]] = l:split[1]
line 6:     endfor
line 3:     for l:char in split(&listchars, ',')
line 4:         let l:split = split(l:char, ':')
line 5:         let l:list_chars[l:split[0]] = l:split[1]
line 6:     endfor
line 3:     for l:char in split(&listchars, ',')
line 4:         let l:split = split(l:char, ':')
line 5:         let l:list_chars[l:split[0]] = l:split[1]
line 6:     endfor
line 7: 
line 8:     return get(l:list_chars, a:key, a:fallback)
function indent_blankline#Refresh[2]..indent_blankline#helper#GetListChar returning ''

continuing in function indent_blankline#Refresh

line 3:     catch /E12/
line 4:         return
line 5:     catch
line 6:         if g:indent_blankline_debug
line 7:             echohl Error
line 8:             echom 'indent-blankline encountered an error on refresh: ' . v:exception
line 9:             echohl None
line 10:         endif
line 11:     endtry
function indent_blankline#Refresh returning #0

continuing in nvim_exec() called at function <SNR>29_try:2

line 3:     catch /E12/
line 4:         return
line 5:     endtry
function <SNR>29_try returning #0

continuing in WinScrolled Autocommands for "*"

/error                                                                                                                                                                                                                                    [4/>99]
/error                                                                                                                                                                                                                                           

/error                                                                                                                                                                                                                                    [5/>99]
Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling function <SNR>15_Highlight_Matching_Pair()

line 1:   " Remove any previous match.
line 2:   call s:Remove_Matches()
calling function <SNR>15_Highlight_Matching_Pair[2]..<SNR>15_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     silent! call matchdelete(3)
line 3:     let w:paren_hl_on = 0
line 4:   endif
function <SNR>15_Highlight_Matching_Pair[2]..<SNR>15_Remove_Matches returning #0

continuing in function <SNR>15_Highlight_Matching_Pair

line 3: 
line 4:   " Avoid that we remove the popup menu.
line 5:   " Return when there are no colors (looks like the cursor jumps).
line 6:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 7:     return
line 8:   endif
line 9: 
line 10:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 11:   let c_lnum = line('.')
line 12:   let c_col = col('.')
line 13:   let before = 0
line 14: 
line 15:   let text = getline(c_lnum)
line 16:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 17:   if empty(matches)
line 18:     let [c_before, c] = ['', '']
line 19:   else
line 20:     let [c_before, c] = matches[1:2]
line 21:   endif
line 22:   let plist = split(&matchpairs, '.\zs[:,]')
line 23:   let i = index(plist, c)
line 24:   if i < 0
line 25:     " not found, in Insert mode try character before the cursor
line 26:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 27:       let before = strlen(c_before)
line 28:       let c = c_before
line 29:       let i = index(plist, c)
line 30:     endif
line 31:     if i < 0
line 32:       " not found, nothing to do
line 33:       return
function <SNR>15_Highlight_Matching_Pair returning #0

continuing in CursorMoved Autocommands for "*"

/error                                                                                                                                                                                                                                    [5/>99]
/error                                                                                                                                                                                                                                           

/error                                                                                                                                                                                                                                    [6/>99]
Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling function <SNR>15_Highlight_Matching_Pair()

line 1:   " Remove any previous match.
line 2:   call s:Remove_Matches()
calling function <SNR>15_Highlight_Matching_Pair[2]..<SNR>15_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     silent! call matchdelete(3)
line 3:     let w:paren_hl_on = 0
line 4:   endif
function <SNR>15_Highlight_Matching_Pair[2]..<SNR>15_Remove_Matches returning #0

continuing in function <SNR>15_Highlight_Matching_Pair

line 3: 
line 4:   " Avoid that we remove the popup menu.
line 5:   " Return when there are no colors (looks like the cursor jumps).
line 6:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 7:     return
line 8:   endif
line 9: 
line 10:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 11:   let c_lnum = line('.')
line 12:   let c_col = col('.')
line 13:   let before = 0
line 14: 
line 15:   let text = getline(c_lnum)
line 16:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 17:   if empty(matches)
line 18:     let [c_before, c] = ['', '']
line 19:   else
line 20:     let [c_before, c] = matches[1:2]
line 21:   endif
line 22:   let plist = split(&matchpairs, '.\zs[:,]')
line 23:   let i = index(plist, c)
line 24:   if i < 0
line 25:     " not found, in Insert mode try character before the cursor
line 26:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 27:       let before = strlen(c_before)
line 28:       let c = c_before
line 29:       let i = index(plist, c)
line 30:     endif
line 31:     if i < 0
line 32:       " not found, nothing to do
line 33:       return
function <SNR>15_Highlight_Matching_Pair returning #0

continuing in CursorMoved Autocommands for "*"

/error                                                                                                                                                                                                                                    [6/>99]
/error                                                                                                                                                                                                                                           

/error                                                                                                                                                                                                                                    [7/>99]
Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling function <SNR>15_Highlight_Matching_Pair()

line 1:   " Remove any previous match.
line 2:   call s:Remove_Matches()
calling function <SNR>15_Highlight_Matching_Pair[2]..<SNR>15_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     silent! call matchdelete(3)
line 3:     let w:paren_hl_on = 0
line 4:   endif
function <SNR>15_Highlight_Matching_Pair[2]..<SNR>15_Remove_Matches returning #0

continuing in function <SNR>15_Highlight_Matching_Pair

line 3: 
line 4:   " Avoid that we remove the popup menu.
line 5:   " Return when there are no colors (looks like the cursor jumps).
line 6:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 7:     return
line 8:   endif
line 9: 
line 10:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 11:   let c_lnum = line('.')
line 12:   let c_col = col('.')
line 13:   let before = 0
line 14: 
line 15:   let text = getline(c_lnum)
line 16:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 17:   if empty(matches)
line 18:     let [c_before, c] = ['', '']
line 19:   else
line 20:     let [c_before, c] = matches[1:2]
line 21:   endif
line 22:   let plist = split(&matchpairs, '.\zs[:,]')
line 23:   let i = index(plist, c)
line 24:   if i < 0
line 25:     " not found, in Insert mode try character before the cursor
line 26:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 27:       let before = strlen(c_before)
line 28:       let c = c_before
line 29:       let i = index(plist, c)
line 30:     endif
line 31:     if i < 0
line 32:       " not found, nothing to do
line 33:       return
function <SNR>15_Highlight_Matching_Pair returning #0

continuing in CursorMoved Autocommands for "*"

Executing WinScrolled Autocommands for "*"
autocommand IndentBlanklineRefresh

Executing: IndentBlanklineRefresh
Executing: call s:try('lua require("indent_blankline.commands").refresh("" == "!")')
calling function <SNR>29_try('lua require("indent_blankline.commands").refresh("" == "!")')

line 1:     try
line 2:         execute a:cmd
line 2: lua require("indent_blankline.commands").refresh("" == "!")
Executing: call indent_blankline#Refresh()
calling function indent_blankline#Refresh()

line 1:     try
line 2:         lua require("indent_blankline").refresh()
calling function indent_blankline#Refresh[2]..indent_blankline#helper#GetListChar('eol', '')

line 1:     let l:list_chars = {}
line 2: 
line 3:     for l:char in split(&listchars, ',')
line 4:         let l:split = split(l:char, ':')
line 5:         let l:list_chars[l:split[0]] = l:split[1]
line 6:     endfor
line 3:     for l:char in split(&listchars, ',')
line 4:         let l:split = split(l:char, ':')
line 5:         let l:list_chars[l:split[0]] = l:split[1]
line 6:     endfor
line 3:     for l:char in split(&listchars, ',')
line 4:         let l:split = split(l:char, ':')
line 5:         let l:list_chars[l:split[0]] = l:split[1]
line 6:     endfor
line 3:     for l:char in split(&listchars, ',')
line 4:         let l:split = split(l:char, ':')
line 5:         let l:list_chars[l:split[0]] = l:split[1]
line 6:     endfor
line 7: 
line 8:     return get(l:list_chars, a:key, a:fallback)
function indent_blankline#Refresh[2]..indent_blankline#helper#GetListChar returning ''

continuing in function indent_blankline#Refresh

line 3:     catch /E12/
line 4:         return
line 5:     catch
line 6:         if g:indent_blankline_debug
line 7:             echohl Error
line 8:             echom 'indent-blankline encountered an error on refresh: ' . v:exception
line 9:             echohl None
line 10:         endif
line 11:     endtry
function indent_blankline#Refresh returning #0

continuing in nvim_exec() called at function <SNR>29_try:2

line 3:     catch /E12/
line 4:         return
line 5:     endtry
function <SNR>29_try returning #0

continuing in WinScrolled Autocommands for "*"

/error                                                                                                                                                                                                                                    [7/>99]
/error                                                                                                                                                                                                                                           

/error                                                                                                                                                                                                                                    [8/>99]
Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling function <SNR>15_Highlight_Matching_Pair()

line 1:   " Remove any previous match.
line 2:   call s:Remove_Matches()
calling function <SNR>15_Highlight_Matching_Pair[2]..<SNR>15_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     silent! call matchdelete(3)
line 3:     let w:paren_hl_on = 0
line 4:   endif
function <SNR>15_Highlight_Matching_Pair[2]..<SNR>15_Remove_Matches returning #0

continuing in function <SNR>15_Highlight_Matching_Pair

line 3: 
line 4:   " Avoid that we remove the popup menu.
line 5:   " Return when there are no colors (looks like the cursor jumps).
line 6:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 7:     return
line 8:   endif
line 9: 
line 10:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 11:   let c_lnum = line('.')
line 12:   let c_col = col('.')
line 13:   let before = 0
line 14: 
line 15:   let text = getline(c_lnum)
line 16:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 17:   if empty(matches)
line 18:     let [c_before, c] = ['', '']
line 19:   else
line 20:     let [c_before, c] = matches[1:2]
line 21:   endif
line 22:   let plist = split(&matchpairs, '.\zs[:,]')
line 23:   let i = index(plist, c)
line 24:   if i < 0
line 25:     " not found, in Insert mode try character before the cursor
line 26:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 27:       let before = strlen(c_before)
line 28:       let c = c_before
line 29:       let i = index(plist, c)
line 30:     endif
line 31:     if i < 0
line 32:       " not found, nothing to do
line 33:       return
function <SNR>15_Highlight_Matching_Pair returning #0

continuing in CursorMoved Autocommands for "*"

Executing WinScrolled Autocommands for "*"
autocommand IndentBlanklineRefresh

Executing: IndentBlanklineRefresh
Executing: call s:try('lua require("indent_blankline.commands").refresh("" == "!")')
calling function <SNR>29_try('lua require("indent_blankline.commands").refresh("" == "!")')

line 1:     try
line 2:         execute a:cmd
line 2: lua require("indent_blankline.commands").refresh("" == "!")
Executing: call indent_blankline#Refresh()
calling function indent_blankline#Refresh()

line 1:     try
line 2:         lua require("indent_blankline").refresh()
calling function indent_blankline#Refresh[2]..indent_blankline#helper#GetListChar('eol', '')

line 1:     let l:list_chars = {}
line 2: 
line 3:     for l:char in split(&listchars, ',')
line 4:         let l:split = split(l:char, ':')
line 5:         let l:list_chars[l:split[0]] = l:split[1]
line 6:     endfor
line 3:     for l:char in split(&listchars, ',')
line 4:         let l:split = split(l:char, ':')
line 5:         let l:list_chars[l:split[0]] = l:split[1]
line 6:     endfor
line 3:     for l:char in split(&listchars, ',')
line 4:         let l:split = split(l:char, ':')
line 5:         let l:list_chars[l:split[0]] = l:split[1]
line 6:     endfor
line 3:     for l:char in split(&listchars, ',')
line 4:         let l:split = split(l:char, ':')
line 5:         let l:list_chars[l:split[0]] = l:split[1]
line 6:     endfor
line 7: 
line 8:     return get(l:list_chars, a:key, a:fallback)
function indent_blankline#Refresh[2]..indent_blankline#helper#GetListChar returning ''

continuing in function indent_blankline#Refresh

line 3:     catch /E12/
line 4:         return
line 5:     catch
line 6:         if g:indent_blankline_debug
line 7:             echohl Error
line 8:             echom 'indent-blankline encountered an error on refresh: ' . v:exception
line 9:             echohl None
line 10:         endif
line 11:     endtry
function indent_blankline#Refresh returning #0

continuing in nvim_exec() called at function <SNR>29_try:2

line 3:     catch /E12/
line 4:         return
line 5:     endtry
function <SNR>29_try returning #0

continuing in WinScrolled Autocommands for "*"

/error                                                                                                                                                                                                                                    [8/>99]
/error                                                                                                                                                                                                                                           

/error                                                                                                                                                                                                                                    [9/>99]
Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling function <SNR>15_Highlight_Matching_Pair()

line 1:   " Remove any previous match.
line 2:   call s:Remove_Matches()
calling function <SNR>15_Highlight_Matching_Pair[2]..<SNR>15_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     silent! call matchdelete(3)
line 3:     let w:paren_hl_on = 0
line 4:   endif
function <SNR>15_Highlight_Matching_Pair[2]..<SNR>15_Remove_Matches returning #0

continuing in function <SNR>15_Highlight_Matching_Pair

line 3: 
line 4:   " Avoid that we remove the popup menu.
line 5:   " Return when there are no colors (looks like the cursor jumps).
line 6:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 7:     return
line 8:   endif
line 9: 
line 10:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 11:   let c_lnum = line('.')
line 12:   let c_col = col('.')
line 13:   let before = 0
line 14: 
line 15:   let text = getline(c_lnum)
line 16:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 17:   if empty(matches)
line 18:     let [c_before, c] = ['', '']
line 19:   else
line 20:     let [c_before, c] = matches[1:2]
line 21:   endif
line 22:   let plist = split(&matchpairs, '.\zs[:,]')
line 23:   let i = index(plist, c)
line 24:   if i < 0
line 25:     " not found, in Insert mode try character before the cursor
line 26:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 27:       let before = strlen(c_before)
line 28:       let c = c_before
line 29:       let i = index(plist, c)
line 30:     endif
line 31:     if i < 0
line 32:       " not found, nothing to do
line 33:       return
function <SNR>15_Highlight_Matching_Pair returning #0

continuing in CursorMoved Autocommands for "*"

/error                                                                                                                                                                                                                                    [9/>99]
/error                                                                                                                                                                                                                                           

/error                                                                                                                                                                                                                                   [10/>99]
Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling function <SNR>15_Highlight_Matching_Pair()

line 1:   " Remove any previous match.
line 2:   call s:Remove_Matches()
calling function <SNR>15_Highlight_Matching_Pair[2]..<SNR>15_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     silent! call matchdelete(3)
line 3:     let w:paren_hl_on = 0
line 4:   endif
function <SNR>15_Highlight_Matching_Pair[2]..<SNR>15_Remove_Matches returning #0

continuing in function <SNR>15_Highlight_Matching_Pair

line 3: 
line 4:   " Avoid that we remove the popup menu.
line 5:   " Return when there are no colors (looks like the cursor jumps).
line 6:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 7:     return
line 8:   endif
line 9: 
line 10:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 11:   let c_lnum = line('.')
line 12:   let c_col = col('.')
line 13:   let before = 0
line 14: 
line 15:   let text = getline(c_lnum)
line 16:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 17:   if empty(matches)
line 18:     let [c_before, c] = ['', '']
line 19:   else
line 20:     let [c_before, c] = matches[1:2]
line 21:   endif
line 22:   let plist = split(&matchpairs, '.\zs[:,]')
line 23:   let i = index(plist, c)
line 24:   if i < 0
line 25:     " not found, in Insert mode try character before the cursor
line 26:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 27:       let before = strlen(c_before)
line 28:       let c = c_before
line 29:       let i = index(plist, c)
line 30:     endif
line 31:     if i < 0
line 32:       " not found, nothing to do
line 33:       return
function <SNR>15_Highlight_Matching_Pair returning #0

continuing in CursorMoved Autocommands for "*"

Executing WinScrolled Autocommands for "*"
autocommand IndentBlanklineRefresh

Executing: IndentBlanklineRefresh
Executing: call s:try('lua require("indent_blankline.commands").refresh("" == "!")')
calling function <SNR>29_try('lua require("indent_blankline.commands").refresh("" == "!")')

line 1:     try
line 2:         execute a:cmd
line 2: lua require("indent_blankline.commands").refresh("" == "!")
Executing: call indent_blankline#Refresh()
calling function indent_blankline#Refresh()

line 1:     try
line 2:         lua require("indent_blankline").refresh()
calling function indent_blankline#Refresh[2]..indent_blankline#helper#GetListChar('eol', '')

line 1:     let l:list_chars = {}
line 2: 
line 3:     for l:char in split(&listchars, ',')
line 4:         let l:split = split(l:char, ':')
line 5:         let l:list_chars[l:split[0]] = l:split[1]
line 6:     endfor
line 3:     for l:char in split(&listchars, ',')
line 4:         let l:split = split(l:char, ':')
line 5:         let l:list_chars[l:split[0]] = l:split[1]
line 6:     endfor
line 3:     for l:char in split(&listchars, ',')
line 4:         let l:split = split(l:char, ':')
line 5:         let l:list_chars[l:split[0]] = l:split[1]
line 6:     endfor
line 3:     for l:char in split(&listchars, ',')
line 4:         let l:split = split(l:char, ':')
line 5:         let l:list_chars[l:split[0]] = l:split[1]
line 6:     endfor
line 7: 
line 8:     return get(l:list_chars, a:key, a:fallback)
function indent_blankline#Refresh[2]..indent_blankline#helper#GetListChar returning ''

continuing in function indent_blankline#Refresh

line 3:     catch /E12/
line 4:         return
line 5:     catch
line 6:         if g:indent_blankline_debug
line 7:             echohl Error
line 8:             echom 'indent-blankline encountered an error on refresh: ' . v:exception
line 9:             echohl None
line 10:         endif
line 11:     endtry
function indent_blankline#Refresh returning #0

continuing in nvim_exec() called at function <SNR>29_try:2

line 3:     catch /E12/
line 4:         return
line 5:     endtry
function <SNR>29_try returning #0

continuing in WinScrolled Autocommands for "*"

/error                                                                                                                                                                                                                                   [10/>99]
/error                                                                                                                                                                                                                                           

/error                                                                                                                                                                                                                                   [11/>99]
Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling function <SNR>15_Highlight_Matching_Pair()

line 1:   " Remove any previous match.
line 2:   call s:Remove_Matches()
calling function <SNR>15_Highlight_Matching_Pair[2]..<SNR>15_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     silent! call matchdelete(3)
line 3:     let w:paren_hl_on = 0
line 4:   endif
function <SNR>15_Highlight_Matching_Pair[2]..<SNR>15_Remove_Matches returning #0

continuing in function <SNR>15_Highlight_Matching_Pair

line 3: 
line 4:   " Avoid that we remove the popup menu.
line 5:   " Return when there are no colors (looks like the cursor jumps).
line 6:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 7:     return
line 8:   endif
line 9: 
line 10:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 11:   let c_lnum = line('.')
line 12:   let c_col = col('.')
line 13:   let before = 0
line 14: 
line 15:   let text = getline(c_lnum)
line 16:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 17:   if empty(matches)
line 18:     let [c_before, c] = ['', '']
line 19:   else
line 20:     let [c_before, c] = matches[1:2]
line 21:   endif
line 22:   let plist = split(&matchpairs, '.\zs[:,]')
line 23:   let i = index(plist, c)
line 24:   if i < 0
line 25:     " not found, in Insert mode try character before the cursor
line 26:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 27:       let before = strlen(c_before)
line 28:       let c = c_before
line 29:       let i = index(plist, c)
line 30:     endif
line 31:     if i < 0
line 32:       " not found, nothing to do
line 33:       return
function <SNR>15_Highlight_Matching_Pair returning #0

continuing in CursorMoved Autocommands for "*"

Executing WinScrolled Autocommands for "*"
autocommand IndentBlanklineRefresh

Executing: IndentBlanklineRefresh
Executing: call s:try('lua require("indent_blankline.commands").refresh("" == "!")')
calling function <SNR>29_try('lua require("indent_blankline.commands").refresh("" == "!")')

line 1:     try
line 2:         execute a:cmd
line 2: lua require("indent_blankline.commands").refresh("" == "!")
Executing: call indent_blankline#Refresh()
calling function indent_blankline#Refresh()

line 1:     try
line 2:         lua require("indent_blankline").refresh()
calling function indent_blankline#Refresh[2]..indent_blankline#helper#GetListChar('eol', '')

line 1:     let l:list_chars = {}
line 2: 
line 3:     for l:char in split(&listchars, ',')
line 4:         let l:split = split(l:char, ':')
line 5:         let l:list_chars[l:split[0]] = l:split[1]
line 6:     endfor
line 3:     for l:char in split(&listchars, ',')
line 4:         let l:split = split(l:char, ':')
line 5:         let l:list_chars[l:split[0]] = l:split[1]
line 6:     endfor
line 3:     for l:char in split(&listchars, ',')
line 4:         let l:split = split(l:char, ':')
line 5:         let l:list_chars[l:split[0]] = l:split[1]
line 6:     endfor
line 3:     for l:char in split(&listchars, ',')
line 4:         let l:split = split(l:char, ':')
line 5:         let l:list_chars[l:split[0]] = l:split[1]
line 6:     endfor
line 7: 
line 8:     return get(l:list_chars, a:key, a:fallback)
function indent_blankline#Refresh[2]..indent_blankline#helper#GetListChar returning ''

continuing in function indent_blankline#Refresh

line 3:     catch /E12/
line 4:         return
line 5:     catch
line 6:         if g:indent_blankline_debug
line 7:             echohl Error
line 8:             echom 'indent-blankline encountered an error on refresh: ' . v:exception
line 9:             echohl None
line 10:         endif
line 11:     endtry
function indent_blankline#Refresh returning #0

continuing in nvim_exec() called at function <SNR>29_try:2

line 3:     catch /E12/
line 4:         return
line 5:     endtry
function <SNR>29_try returning #0

continuing in WinScrolled Autocommands for "*"

/error                                                                                                                                                                                                                                   [11/>99]
/error                                                                                                                                                                                                                                           

/error                                                                                                                                                                                                                                   [12/>99]
Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling function <SNR>15_Highlight_Matching_Pair()

line 1:   " Remove any previous match.
line 2:   call s:Remove_Matches()
calling function <SNR>15_Highlight_Matching_Pair[2]..<SNR>15_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     silent! call matchdelete(3)
line 3:     let w:paren_hl_on = 0
line 4:   endif
function <SNR>15_Highlight_Matching_Pair[2]..<SNR>15_Remove_Matches returning #0

continuing in function <SNR>15_Highlight_Matching_Pair

line 3: 
line 4:   " Avoid that we remove the popup menu.
line 5:   " Return when there are no colors (looks like the cursor jumps).
line 6:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 7:     return
line 8:   endif
line 9: 
line 10:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 11:   let c_lnum = line('.')
line 12:   let c_col = col('.')
line 13:   let before = 0
line 14: 
line 15:   let text = getline(c_lnum)
line 16:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 17:   if empty(matches)
line 18:     let [c_before, c] = ['', '']
line 19:   else
line 20:     let [c_before, c] = matches[1:2]
line 21:   endif
line 22:   let plist = split(&matchpairs, '.\zs[:,]')
line 23:   let i = index(plist, c)
line 24:   if i < 0
line 25:     " not found, in Insert mode try character before the cursor
line 26:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 27:       let before = strlen(c_before)
line 28:       let c = c_before
line 29:       let i = index(plist, c)
line 30:     endif
line 31:     if i < 0
line 32:       " not found, nothing to do
line 33:       return
function <SNR>15_Highlight_Matching_Pair returning #0

continuing in CursorMoved Autocommands for "*"

/error                                                                                                                                                                                                                                   [12/>99]
/lsp-config                                                                                                                                                                                                                                      

search hit BOTTOM, continuing at TOP
E486: Pattern not found: lsp-config
/lsp-config                                                                                                                                                                                                                                      

search hit BOTTOM, continuing at TOP
E486: Pattern not found: lsp-config
/lsp-config                                                                                                                                                                                                                                      

search hit BOTTOM, continuing at TOP
E486: Pattern not found: lsp-config
/lsp-config                                                                                                                                                                                                                                      

search hit BOTTOM, continuing at TOP
E486: Pattern not found: lsp-config

Executing: q
Executing BufLeave Autocommands for "*"
autocommand if &ft != "netrw"|let w:netrw_prvfile= expand("%:p")|endif

Executing: if &ft != "netrw"|let w:netrw_prvfile= expand("%:p")|endif
Executing: let w:netrw_prvfile= expand("%:p")|endif
Executing: endif
Executing BufLeave Autocommands for "*"
autocommand lua vim.wo.statusline=require'lualine'.statusline()

Executing: lua vim.wo.statusline=require'lualine'.statusline()
Executing WinLeave Autocommands for "*"
autocommand call s:Remove_Matches()

Executing: call s:Remove_Matches()
calling function <SNR>15_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     silent! call matchdelete(3)
line 3:     let w:paren_hl_on = 0
line 4:   endif
function <SNR>15_Remove_Matches returning #0

continuing in WinLeave Autocommands for "*"

Executing WinLeave Autocommands for "*"
autocommand lua vim.wo.statusline=require'lualine'.statusline()

Executing: lua vim.wo.statusline=require'lualine'.statusline()
Executing WinLeave Autocommands for "*"
autocommand call bufferline#update()

Executing: call bufferline#update()
calling function bufferline#update()

line 1:    let new_value = bufferline#render(a:0 > 0 ? a:1 : v:false)
calling function bufferline#update[1]..bufferline#render(v:false)

line 1:    let result = luaeval("require'bufferline.render'.render_safe(_A)", a:update_names)
calling function bufferline#update[1]..bufferline#render[1]..bufferline#filter('&buflisted')

line 1:     let list = []
line 2:     for line in split(execute('ls!'), "\n")
line 2: ls!
  1 #    "."                            line 1
  2u a-  "NvimTree"                     line 0
  3 %a   "~/.config/nvim/vimlo"         line 8401
line 3:         call add(list, 0+matchstr(line, '\v\d+'))
line 4:     endfor
line 2:     for line in split(execute('ls!'), "\n")
line 3:         call add(list, 0+matchstr(line, '\v\d+'))
line 4:     endfor
line 2:     for line in split(execute('ls!'), "\n")
line 3:         call add(list, 0+matchstr(line, '\v\d+'))
line 4:     endfor
line 2:     for line in split(execute('ls!'), "\n")
line 3:         call add(list, 0+matchstr(line, '\v\d+'))
line 4:     endfor
line 2:     for line in split(execute('ls!'), "\n")
line 3:         call add(list, 0+matchstr(line, '\v\d+'))
line 4:     endfor
line 5:     for a_expr in a:000
line 6:         let expr = a_expr
line 7:         let expr = substitute(expr, '&\w\+', 'getbufvar(v:val, "\0")', 'g')
line 8:         call filter(list, expr)
line 9:     endfor
line 5:     for a_expr in a:000
line 6:         let expr = a_expr
line 7:         let expr = substitute(expr, '&\w\+', 'getbufvar(v:val, "\0")', 'g')
line 8:         call filter(list, expr)
line 9:     endfor
line 10:     return list
function bufferline#update[1]..bufferline#render[1]..bufferline#filter returning [1, 3]

continuing in function bufferline#update[1]..bufferline#render

line 2: 
line 3:    if result[0]
line 4:       return result[1]
function bufferline#update[1]..bufferline#render returning '%1@BufferlineMainClickHandler@%#Buffe...ufferTabpageFill#▎%#BufferTabpageFill#'

continuing in function bufferline#update

line 2:    if new_value == s:last_tabline
line 3:       return
function bufferline#update returning #0

continuing in WinLeave Autocommands for "*"

Executing WinClosed Autocommands for "*"
autocommand call bufferline#update_async()

Executing: call bufferline#update_async()
calling function bufferline#update_async()

line 1:    call timer_start(1, {->bufferline#update(a:0 > 0 ? a:1 : v:false)})
function bufferline#update_async returning #0

continuing in WinClosed Autocommands for "*"

Executing BufWinLeave Autocommands for "*"
autocommand call bufferline#update()

Executing: call bufferline#update()
calling function bufferline#update()

line 1:    let new_value = bufferline#render(a:0 > 0 ? a:1 : v:false)
calling function bufferline#update[1]..bufferline#render(v:false)

line 1:    let result = luaeval("require'bufferline.render'.render_safe(_A)", a:update_names)
calling function bufferline#update[1]..bufferline#render[1]..bufferline#filter('&buflisted')

line 1:     let list = []
line 2:     for line in split(execute('ls!'), "\n")
line 2: ls!
  1 #    "."                            line 1
  2u a-  "NvimTree"                     line 0
  3 %a   "~/.config/nvim/vimlo"         line 8401
line 3:         call add(list, 0+matchstr(line, '\v\d+'))
line 4:     endfor
line 2:     for line in split(execute('ls!'), "\n")
line 3:         call add(list, 0+matchstr(line, '\v\d+'))
line 4:     endfor
line 2:     for line in split(execute('ls!'), "\n")
line 3:         call add(list, 0+matchstr(line, '\v\d+'))
line 4:     endfor
line 2:     for line in split(execute('ls!'), "\n")
line 3:         call add(list, 0+matchstr(line, '\v\d+'))
line 4:     endfor
line 2:     for line in split(execute('ls!'), "\n")
line 3:         call add(list, 0+matchstr(line, '\v\d+'))
line 4:     endfor
line 5:     for a_expr in a:000
line 6:         let expr = a_expr
line 7:         let expr = substitute(expr, '&\w\+', 'getbufvar(v:val, "\0")', 'g')
line 8:         call filter(list, expr)
line 9:     endfor
line 5:     for a_expr in a:000
line 6:         let expr = a_expr
line 7:         let expr = substitute(expr, '&\w\+', 'getbufvar(v:val, "\0")', 'g')
line 8:         call filter(list, expr)
line 9:     endfor
line 10:     return list
function bufferline#update[1]..bufferline#render[1]..bufferline#filter returning [1, 3]

continuing in function bufferline#update[1]..bufferline#render

line 2: 
line 3:    if result[0]
line 4:       return result[1]
function bufferline#update[1]..bufferline#render returning '%1@BufferlineMainClickHandler@%#Buffe...ufferTabpageFill#▎%#BufferTabpageFill#'

continuing in function bufferline#update

line 2:    if new_value == s:last_tabline
line 3:       return
function bufferline#update returning #0

continuing in BufWinLeave Autocommands for "*"

Executing WinEnter Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling function <SNR>15_Highlight_Matching_Pair()

line 1:   " Remove any previous match.
line 2:   call s:Remove_Matches()
calling function <SNR>15_Highlight_Matching_Pair[2]..<SNR>15_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     silent! call matchdelete(3)
line 3:     let w:paren_hl_on = 0
line 4:   endif
function <SNR>15_Highlight_Matching_Pair[2]..<SNR>15_Remove_Matches returning #0

continuing in function <SNR>15_Highlight_Matching_Pair

line 3: 
line 4:   " Avoid that we remove the popup menu.
line 5:   " Return when there are no colors (looks like the cursor jumps).
line 6:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 7:     return
line 8:   endif
line 9: 
line 10:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 11:   let c_lnum = line('.')
line 12:   let c_col = col('.')
line 13:   let before = 0
line 14: 
line 15:   let text = getline(c_lnum)
line 16:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 17:   if empty(matches)
line 18:     let [c_before, c] = ['', '']
line 19:   else
line 20:     let [c_before, c] = matches[1:2]
line 21:   endif
line 22:   let plist = split(&matchpairs, '.\zs[:,]')
line 23:   let i = index(plist, c)
line 24:   if i < 0
line 25:     " not found, in Insert mode try character before the cursor
line 26:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 27:       let before = strlen(c_before)
line 28:       let c = c_before
line 29:       let i = index(plist, c)
line 30:     endif
line 31:     if i < 0
line 32:       " not found, nothing to do
line 33:       return
function <SNR>15_Highlight_Matching_Pair returning #0

continuing in WinEnter Autocommands for "*"

Executing WinEnter Autocommands for "*"
autocommand set statusline<

Executing: set statusline<
Executing WinEnter Autocommands for "*"
autocommand call bufferline#update()

Executing: call bufferline#update()
calling function bufferline#update()

line 1:    let new_value = bufferline#render(a:0 > 0 ? a:1 : v:false)
calling function bufferline#update[1]..bufferline#render(v:false)

line 1:    let result = luaeval("require'bufferline.render'.render_safe(_A)", a:update_names)
calling function bufferline#update[1]..bufferline#render[1]..bufferline#filter('&buflisted')

line 1:     let list = []
line 2:     for line in split(execute('ls!'), "\n")
line 2: ls!
  1 #    "."                            line 1
  2u%a-  "NvimTree"                     line 8
  3      "~/.config/nvim/vimlo"         line 8401
line 3:         call add(list, 0+matchstr(line, '\v\d+'))
line 4:     endfor
line 2:     for line in split(execute('ls!'), "\n")
line 3:         call add(list, 0+matchstr(line, '\v\d+'))
line 4:     endfor
line 2:     for line in split(execute('ls!'), "\n")
line 3:         call add(list, 0+matchstr(line, '\v\d+'))
line 4:     endfor
line 2:     for line in split(execute('ls!'), "\n")
line 3:         call add(list, 0+matchstr(line, '\v\d+'))
line 4:     endfor
line 2:     for line in split(execute('ls!'), "\n")
line 3:         call add(list, 0+matchstr(line, '\v\d+'))
line 4:     endfor
line 5:     for a_expr in a:000
line 6:         let expr = a_expr
line 7:         let expr = substitute(expr, '&\w\+', 'getbufvar(v:val, "\0")', 'g')
line 8:         call filter(list, expr)
line 9:     endfor
line 5:     for a_expr in a:000
line 6:         let expr = a_expr
line 7:         let expr = substitute(expr, '&\w\+', 'getbufvar(v:val, "\0")', 'g')
line 8:         call filter(list, expr)
line 9:     endfor
line 10:     return list
function bufferline#update[1]..bufferline#render[1]..bufferline#filter returning [1, 3]

continuing in function bufferline#update[1]..bufferline#render

line 2: 
line 3:    if result[0]
line 4:       return result[1]
function bufferline#update[1]..bufferline#render returning '%1@BufferlineMainClickHandler@%#Buffe...ufferTabpageFill#▎%#BufferTabpageFill#'

continuing in function bufferline#update

line 2:    if new_value == s:last_tabline
line 3:       return
line 4:    end
line 5:    let &tabline = new_value
line 6:    let s:last_tabline = new_value
function bufferline#update returning #0

continuing in WinEnter Autocommands for "*"

Executing CursorMoved Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling function <SNR>15_Highlight_Matching_Pair()

line 1:   " Remove any previous match.
line 2:   call s:Remove_Matches()
calling function <SNR>15_Highlight_Matching_Pair[2]..<SNR>15_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     silent! call matchdelete(3)
line 3:     let w:paren_hl_on = 0
line 4:   endif
function <SNR>15_Highlight_Matching_Pair[2]..<SNR>15_Remove_Matches returning #0

continuing in function <SNR>15_Highlight_Matching_Pair

line 3: 
line 4:   " Avoid that we remove the popup menu.
line 5:   " Return when there are no colors (looks like the cursor jumps).
line 6:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 7:     return
line 8:   endif
line 9: 
line 10:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 11:   let c_lnum = line('.')
line 12:   let c_col = col('.')
line 13:   let before = 0
line 14: 
line 15:   let text = getline(c_lnum)
line 16:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 17:   if empty(matches)
line 18:     let [c_before, c] = ['', '']
line 19:   else
line 20:     let [c_before, c] = matches[1:2]
line 21:   endif
line 22:   let plist = split(&matchpairs, '.\zs[:,]')
line 23:   let i = index(plist, c)
line 24:   if i < 0
line 25:     " not found, in Insert mode try character before the cursor
line 26:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 27:       let before = strlen(c_before)
line 28:       let c = c_before
line 29:       let i = index(plist, c)
line 30:     endif
line 31:     if i < 0
line 32:       " not found, nothing to do
line 33:       return
function <SNR>15_Highlight_Matching_Pair returning #0

continuing in CursorMoved Autocommands for "*"

Executing CursorMoved Autocommands for "NvimTree"
autocommand lua require'nvim-tree'.place_cursor_on_node()

Executing: lua require'nvim-tree'.place_cursor_on_node()
Executing BufEnter Autocommands for "*"
autocommand sil call s:LocalBrowse(expand("<amatch>"))

Executing: sil call s:LocalBrowse(expand("<amatch>"))
calling function <SNR>16_LocalBrowse('/Users/andrewgu/.config/nvim/NvimTree')

line 1:   " Unfortunate interaction -- only DechoMsg debugging calls can be safely used here.
line 2:   " Otherwise, the BufEnter event gets triggered when attempts to write to
line 3:   " the DBG buffer are made.
line 4: 
line 5:   if !exists("s:vimentered")
line 6:    " If s:vimentered doesn't exist, then the VimEnter event hasn't fired.  It will,
line 7:    " and so s:VimEnter() will then be calling this routine, but this time with s:vimentered defined.
line 8: "   call Dfunc("s:LocalBrowse(dirname<".a:dirname.">)  (s:vimentered doesn't exist)")
line 9: "   call Dret("s:LocalBrowse")
line 10:    return
line 11:   endif
line 12: 
line 13: "  call Dfunc("s:LocalBrowse(dirname<".a:dirname.">)  (s:vimentered=".s:vimentered.")")
line 14: 
line 15:   if has("amiga")
line 16:    " The check against '' is made for the Amiga, where the empty
line 17:    " string is the current directory and not checking would break
line 18:    " things such as the help command.
line 19: "   call Decho("(LocalBrowse) dirname<".a:dirname.">  (isdirectory, amiga)")
line 20:    if a:dirname != '' && isdirectory(a:dirname)
line 21:     sil! call netrw#LocalBrowseCheck(a:dirname)
line 22:     if exists("w:netrw_bannercnt") && line('.') < w:netrw_bannercnt
line 23:      exe w:netrw_bannercnt
line 24:     endif
line 25:    endif
line 26: 
line 27:   elseif isdirectory(a:dirname)
line 28: "   call Decho("(LocalBrowse) dirname<".a:dirname."> ft=".&ft."  (isdirectory, not amiga)")
line 29: "   call Dredir("LocalBrowse ft last set: ","verbose set ft")
line 30:    sil! call netrw#LocalBrowseCheck(a:dirname)
line 31:    if exists("w:netrw_bannercnt") && line('.') < w:netrw_bannercnt
line 32:     exe w:netrw_bannercnt
line 33:    endif
line 34: 
line 35:   else
line 36:    " not a directory, ignore it
line 37: "   call Decho("(LocalBrowse) dirname<".a:dirname."> not a directory, ignoring...")
line 38:   endif
line 39: 
line 40: "  call Dret("s:LocalBrowse")
function <SNR>16_LocalBrowse returning #0

continuing in BufEnter Autocommands for "*"

Executing BufEnter Autocommands for "*"
autocommand set statusline<

Executing: set statusline<
Executing BufEnter Autocommands for "*"
autocommand :lua require("nvim-autopairs").on_attach()

Executing: :lua require("nvim-autopairs").on_attach()
Executing BufEnter Autocommands for "*"
autocommand call bufferline#update()

Executing: call bufferline#update()
calling function bufferline#update()

line 1:    let new_value = bufferline#render(a:0 > 0 ? a:1 : v:false)
calling function bufferline#update[1]..bufferline#render(v:false)

line 1:    let result = luaeval("require'bufferline.render'.render_safe(_A)", a:update_names)
calling function bufferline#update[1]..bufferline#render[1]..bufferline#filter('&buflisted')

line 1:     let list = []
line 2:     for line in split(execute('ls!'), "\n")
line 2: ls!
  1 #    "."                            line 1
  2u%a-  "NvimTree"                     line 8
  3      "~/.config/nvim/vimlo"         line 8401
line 3:         call add(list, 0+matchstr(line, '\v\d+'))
line 4:     endfor
line 2:     for line in split(execute('ls!'), "\n")
line 3:         call add(list, 0+matchstr(line, '\v\d+'))
line 4:     endfor
line 2:     for line in split(execute('ls!'), "\n")
line 3:         call add(list, 0+matchstr(line, '\v\d+'))
line 4:     endfor
line 2:     for line in split(execute('ls!'), "\n")
line 3:         call add(list, 0+matchstr(line, '\v\d+'))
line 4:     endfor
line 2:     for line in split(execute('ls!'), "\n")
line 3:         call add(list, 0+matchstr(line, '\v\d+'))
line 4:     endfor
line 5:     for a_expr in a:000
line 6:         let expr = a_expr
line 7:         let expr = substitute(expr, '&\w\+', 'getbufvar(v:val, "\0")', 'g')
line 8:         call filter(list, expr)
line 9:     endfor
line 5:     for a_expr in a:000
line 6:         let expr = a_expr
line 7:         let expr = substitute(expr, '&\w\+', 'getbufvar(v:val, "\0")', 'g')
line 8:         call filter(list, expr)
line 9:     endfor
line 10:     return list
function bufferline#update[1]..bufferline#render[1]..bufferline#filter returning [1, 3]

continuing in function bufferline#update[1]..bufferline#render

line 2: 
line 3:    if result[0]
line 4:       return result[1]
function bufferline#update[1]..bufferline#render returning '%1@BufferlineMainClickHandler@%#Buffe...ufferTabpageFill#▎%#BufferTabpageFill#'

continuing in function bufferline#update

line 2:    if new_value == s:last_tabline
line 3:       return
function bufferline#update returning #0

continuing in BufEnter Autocommands for "*"

Executing BufEnter Autocommands for "*"
autocommand lua require'nvim-tree'.buf_enter()

Executing: lua require'nvim-tree'.buf_enter()
Executing BufEnter Autocommands for "*"
autocommand lua require'lualine.components.branch'.update_branch()

Executing: lua require'lualine.components.branch'.update_branch()
Executing TextChanged Autocommands for "*"
autocommand call s:Highlight_Matching_Pair()

Executing: call s:Highlight_Matching_Pair()
calling function <SNR>15_Highlight_Matching_Pair()

line 1:   " Remove any previous match.
line 2:   call s:Remove_Matches()
calling function <SNR>15_Highlight_Matching_Pair[2]..<SNR>15_Remove_Matches()

line 1:   if exists('w:paren_hl_on') && w:paren_hl_on
line 2:     silent! call matchdelete(3)
line 3:     let w:paren_hl_on = 0
line 4:   endif
function <SNR>15_Highlight_Matching_Pair[2]..<SNR>15_Remove_Matches returning #0

continuing in function <SNR>15_Highlight_Matching_Pair

line 3: 
line 4:   " Avoid that we remove the popup menu.
line 5:   " Return when there are no colors (looks like the cursor jumps).
line 6:   if pumvisible() || (&t_Co < 8 && !has("gui_running"))
line 7:     return
line 8:   endif
line 9: 
line 10:   " Get the character under the cursor and check if it's in 'matchpairs'.
line 11:   let c_lnum = line('.')
line 12:   let c_col = col('.')
line 13:   let before = 0
line 14: 
line 15:   let text = getline(c_lnum)
line 16:   let matches = matchlist(text, '\(.\)\=\%'.c_col.'c\(.\=\)')
line 17:   if empty(matches)
line 18:     let [c_before, c] = ['', '']
line 19:   else
line 20:     let [c_before, c] = matches[1:2]
line 21:   endif
line 22:   let plist = split(&matchpairs, '.\zs[:,]')
line 23:   let i = index(plist, c)
line 24:   if i < 0
line 25:     " not found, in Insert mode try character before the cursor
line 26:     if c_col > 1 && (mode() == 'i' || mode() == 'R')
line 27:       let before = strlen(c_before)
line 28:       let c = c_before
line 29:       let i = index(plist, c)
line 30:     endif
line 31:     if i < 0
line 32:       " not found, nothing to do
line 33:       return
function <SNR>15_Highlight_Matching_Pair returning #0

continuing in TextChanged Autocommands for "*"

Executing TextChanged Autocommands for "*"
autocommand IndentBlanklineRefresh

Executing: IndentBlanklineRefresh
Executing: call s:try('lua require("indent_blankline.commands").refresh("" == "!")')
calling function <SNR>29_try('lua require("indent_blankline.commands").refresh("" == "!")')

line 1:     try
line 2:         execute a:cmd
line 2: lua require("indent_blankline.commands").refresh("" == "!")
Executing: call indent_blankline#Refresh()
calling function indent_blankline#Refresh()

line 1:     try
line 2:         lua require("indent_blankline").refresh()
calling function indent_blankline#Refresh[2]..indent_blankline#helper#GetListChar('eol', '')

line 1:     let l:list_chars = {}
line 2: 
line 3:     for l:char in split(&listchars, ',')
line 4:         let l:split = split(l:char, ':')
line 5:         let l:list_chars[l:split[0]] = l:split[1]
line 6:     endfor
line 3:     for l:char in split(&listchars, ',')
line 4:         let l:split = split(l:char, ':')
line 5:         let l:list_chars[l:split[0]] = l:split[1]
line 6:     endfor
line 3:     for l:char in split(&listchars, ',')
line 4:         let l:split = split(l:char, ':')
line 5:         let l:list_chars[l:split[0]] = l:split[1]
line 6:     endfor
line 3:     for l:char in split(&listchars, ',')
line 4:         let l:split = split(l:char, ':')
line 5:         let l:list_chars[l:split[0]] = l:split[1]
line 6:     endfor
line 7: 
line 8:     return get(l:list_chars, a:key, a:fallback)
function indent_blankline#Refresh[2]..indent_blankline#helper#GetListChar returning ''

continuing in function indent_blankline#Refresh

line 3:     catch /E12/
line 4:         return
line 5:     catch
line 6:         if g:indent_blankline_debug
line 7:             echohl Error
line 8:             echom 'indent-blankline encountered an error on refresh: ' . v:exception
line 9:             echohl None
line 10:         endif
line 11:     endtry
function indent_blankline#Refresh returning #0

continuing in nvim_exec() called at function <SNR>29_try:2

line 3:     catch /E12/
line 4:         return
line 5:     endtry
function <SNR>29_try returning #0

continuing in TextChanged Autocommands for "*"

Executing WinScrolled Autocommands for "*"
autocommand IndentBlanklineRefresh

Executing: IndentBlanklineRefresh
Executing: call s:try('lua require("indent_blankline.commands").refresh("" == "!")')
calling function <SNR>29_try('lua require("indent_blankline.commands").refresh("" == "!")')

line 1:     try
line 2:         execute a:cmd
line 2: lua require("indent_blankline.commands").refresh("" == "!")
Executing: call indent_blankline#Refresh()
calling function indent_blankline#Refresh()

line 1:     try
line 2:         lua require("indent_blankline").refresh()
calling function indent_blankline#Refresh[2]..indent_blankline#helper#GetListChar('eol', '')

line 1:     let l:list_chars = {}
line 2: 
line 3:     for l:char in split(&listchars, ',')
line 4:         let l:split = split(l:char, ':')
line 5:         let l:list_chars[l:split[0]] = l:split[1]
line 6:     endfor
line 3:     for l:char in split(&listchars, ',')
line 4:         let l:split = split(l:char, ':')
line 5:         let l:list_chars[l:split[0]] = l:split[1]
line 6:     endfor
line 3:     for l:char in split(&listchars, ',')
line 4:         let l:split = split(l:char, ':')
line 5:         let l:list_chars[l:split[0]] = l:split[1]
line 6:     endfor
line 3:     for l:char in split(&listchars, ',')
line 4:         let l:split = split(l:char, ':')
line 5:         let l:list_chars[l:split[0]] = l:split[1]
line 6:     endfor
line 7: 
line 8:     return get(l:list_chars, a:key, a:fallback)
function indent_blankline#Refresh[2]..indent_blankline#helper#GetListChar returning ''

continuing in function indent_blankline#Refresh

line 3:     catch /E12/
line 4:         return
line 5:     catch
line 6:         if g:indent_blankline_debug
line 7:             echohl Error
line 8:             echom 'indent-blankline encountered an error on refresh: ' . v:exception
line 9:             echohl None
line 10:         endif
line 11:     endtry
function indent_blankline#Refresh returning #0

continuing in nvim_exec() called at function <SNR>29_try:2

line 3:     catch /E12/
line 4:         return
line 5:     endtry
function <SNR>29_try returning #0

continuing in WinScrolled Autocommands for "*"

calling function <lambda>4(3)

calling function <lambda>4[1]..bufferline#update(3)

line 1:    let new_value = bufferline#render(a:0 > 0 ? a:1 : v:false)
calling function <lambda>4[1]..bufferline#update[1]..bufferline#render(3)

line 1:    let result = luaeval("require'bufferline.render'.render_safe(_A)", a:update_names)
calling function <lambda>4[1]..bufferline#update[1]..bufferline#render[1]..bufferline#filter('&buflisted')

line 1:     let list = []
line 2:     for line in split(execute('ls!'), "\n")
line 2: ls!
  1 #    "."                            line 1
  2u%a-  "NvimTree"                     line 8
  3      "~/.config/nvim/vimlo"         line 8401
line 3:         call add(list, 0+matchstr(line, '\v\d+'))
line 4:     endfor
line 2:     for line in split(execute('ls!'), "\n")
line 3:         call add(list, 0+matchstr(line, '\v\d+'))
line 4:     endfor
line 2:     for line in split(execute('ls!'), "\n")
line 3:         call add(list, 0+matchstr(line, '\v\d+'))
line 4:     endfor
line 2:     for line in split(execute('ls!'), "\n")
line 3:         call add(list, 0+matchstr(line, '\v\d+'))
line 4:     endfor
line 2:     for line in split(execute('ls!'), "\n")
line 3:         call add(list, 0+matchstr(line, '\v\d+'))
line 4:     endfor
line 5:     for a_expr in a:000
line 6:         let expr = a_expr
line 7:         let expr = substitute(expr, '&\w\+', 'getbufvar(v:val, "\0")', 'g')
line 8:         call filter(list, expr)
line 9:     endfor
line 5:     for a_expr in a:000
line 6:         let expr = a_expr
line 7:         let expr = substitute(expr, '&\w\+', 'getbufvar(v:val, "\0")', 'g')
line 8:         call filter(list, expr)
line 9:     endfor
line 10:     return list
function <lambda>4[1]..bufferline#update[1]..bufferline#render[1]..bufferline#filter returning [1, 3]

continuing in function <lambda>4[1]..bufferline#update[1]..bufferline#render

line 2: 
line 3:    if result[0]
line 4:       return result[1]
function <lambda>4[1]..bufferline#update[1]..bufferline#render returning '%1@BufferlineMainClickHandler@%#Buffe...ufferTabpageFill#▎%#BufferTabpageFill#'

continuing in function <lambda>4[1]..bufferline#update

line 2:    if new_value == s:last_tabline
line 3:       return
function <lambda>4[1]..bufferline#update returning #0

continuing in function <lambda>4

function <lambda>4 returning #0


Executing: q
Executing BufWinLeave Autocommands for "*"
autocommand call bufferline#update()

Executing: call bufferline#update()
calling function bufferline#update()

line 1:    let new_value = bufferline#render(a:0 > 0 ? a:1 : v:false)
calling function bufferline#update[1]..bufferline#render(v:false)

line 1:    let result = luaeval("require'bufferline.render'.render_safe(_A)", a:update_names)
calling function bufferline#update[1]..bufferline#render[1]..bufferline#filter('&buflisted')

line 1:     let list = []
line 2:     for line in split(execute('ls!'), "\n")
line 2: ls!
  1 #    "."                            line 1
  2u%a-  "NvimTree"                     line 8
  3      "~/.config/nvim/vimlo"         line 8401
line 3:         call add(list, 0+matchstr(line, '\v\d+'))
line 4:     endfor
line 2:     for line in split(execute('ls!'), "\n")
line 3:         call add(list, 0+matchstr(line, '\v\d+'))
line 4:     endfor
line 2:     for line in split(execute('ls!'), "\n")
line 3:         call add(list, 0+matchstr(line, '\v\d+'))
line 4:     endfor
line 2:     for line in split(execute('ls!'), "\n")
line 3:         call add(list, 0+matchstr(line, '\v\d+'))
line 4:     endfor
line 2:     for line in split(execute('ls!'), "\n")
line 3:         call add(list, 0+matchstr(line, '\v\d+'))
line 4:     endfor
line 5:     for a_expr in a:000
line 6:         let expr = a_expr
line 7:         let expr = substitute(expr, '&\w\+', 'getbufvar(v:val, "\0")', 'g')
line 8:         call filter(list, expr)
line 9:     endfor
line 5:     for a_expr in a:000
line 6:         let expr = a_expr
line 7:         let expr = substitute(expr, '&\w\+', 'getbufvar(v:val, "\0")', 'g')
line 8:         call filter(list, expr)
line 9:     endfor
line 10:     return list
function bufferline#update[1]..bufferline#render[1]..bufferline#filter returning [1, 3]

continuing in function bufferline#update[1]..bufferline#render

line 2: 
line 3:    if result[0]
line 4:       return result[1]
function bufferline#update[1]..bufferline#render returning '%1@BufferlineMainClickHandler@%#Buffe...ufferTabpageFill#▎%#BufferTabpageFill#'

continuing in function bufferline#update

line 2:    if new_value == s:last_tabline
line 3:       return
function bufferline#update returning #0

continuing in BufWinLeave Autocommands for "*"

Executing VimLeavePre Autocommands for "*"
autocommand lua vim.lsp._vim_exit_handler()

Executing: lua vim.lsp._vim_exit_handler()
Executing VimLeavePre Autocommands for "*"
autocommand lua require("gitsigns").detach_all()

Executing: lua require("gitsigns").detach_all()
Writing ShaDa file "/Users/andrewgu/.local/share/nvim/shada/main.shada"
chdir(/Users/andrewgu/.config/nvim)
chdir(/Users/andrewgu/.config/nvim)
chdir(/Users/andrewgu/.config/nvim)
Executing BufNew Autocommands for "*"
autocommand call bufferline#update(v:true)

Executing: call bufferline#update(v:true)
calling function bufferline#update(v:true)

line 1:    let new_value = bufferline#render(a:0 > 0 ? a:1 : v:false)
calling function bufferline#update[1]..bufferline#render(v:true)

line 1:    let result = luaeval("require'bufferline.render'.render_safe(_A)", a:update_names)
calling function bufferline#update[1]..bufferline#render[1]..bufferline#filter('&buflisted')

line 1:     let list = []
line 2:     for line in split(execute('ls!'), "\n")
line 2: ls!
  1 #    "."                            line 1
  2u%a-  "NvimTree"                     line 8
  3      "~/.config/nvim/vimlo"         line 8401
  4u     "init.lua"                     line 1
line 3:         call add(list, 0+matchstr(line, '\v\d+'))
line 4:     endfor
line 2:     for line in split(execute('ls!'), "\n")
line 3:         call add(list, 0+matchstr(line, '\v\d+'))
line 4:     endfor
line 2:     for line in split(execute('ls!'), "\n")
line 3:         call add(list, 0+matchstr(line, '\v\d+'))
line 4:     endfor
line 2:     for line in split(execute('ls!'), "\n")
line 3:         call add(list, 0+matchstr(line, '\v\d+'))
line 4:     endfor
line 2:     for line in split(execute('ls!'), "\n")
line 3:         call add(list, 0+matchstr(line, '\v\d+'))
line 4:     endfor
line 2:     for line in split(execute('ls!'), "\n")
line 3:         call add(list, 0+matchstr(line, '\v\d+'))
line 4:     endfor
line 5:     for a_expr in a:000
line 6:         let expr = a_expr
line 7:         let expr = substitute(expr, '&\w\+', 'getbufvar(v:val, "\0")', 'g')
line 8:         call filter(list, expr)
line 9:     endfor
line 5:     for a_expr in a:000
line 6:         let expr = a_expr
line 7:         let expr = substitute(expr, '&\w\+', 'getbufvar(v:val, "\0")', 'g')
line 8:         call filter(list, expr)
line 9:     endfor
line 10:     return list
function bufferline#update[1]..bufferline#render[1]..bufferline#filter returning [1, 3]

continuing in function bufferline#update[1]..bufferline#render

line 2: 
line 3:    if result[0]
line 4:       return result[1]
function bufferline#update[1]..bufferline#render returning '%1@BufferlineMainClickHandler@%#Buffe...ufferTabpageFill#▎%#BufferTabpageFill#'

continuing in function bufferline#update

line 2:    if new_value == s:last_tabline
line 3:       return
function bufferline#update returning #0

continuing in BufNew Autocommands for "*"
